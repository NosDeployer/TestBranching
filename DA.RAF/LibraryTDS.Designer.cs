//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.RAF {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("LibraryTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class LibraryTDS : global::System.Data.DataSet {
        
        private LIBRARY_CATEGORIESDataTable tableLIBRARY_CATEGORIES;
        
        private LIBRARY_FILESDataTable tableLIBRARY_FILES;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LibraryTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LibraryTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LIBRARY_CATEGORIES"] != null)) {
                    base.Tables.Add(new LIBRARY_CATEGORIESDataTable(ds.Tables["LIBRARY_CATEGORIES"]));
                }
                if ((ds.Tables["LIBRARY_FILES"] != null)) {
                    base.Tables.Add(new LIBRARY_FILESDataTable(ds.Tables["LIBRARY_FILES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LIBRARY_CATEGORIESDataTable LIBRARY_CATEGORIES {
            get {
                return this.tableLIBRARY_CATEGORIES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LIBRARY_FILESDataTable LIBRARY_FILES {
            get {
                return this.tableLIBRARY_FILES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            LibraryTDS cln = ((LibraryTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LIBRARY_CATEGORIES"] != null)) {
                    base.Tables.Add(new LIBRARY_CATEGORIESDataTable(ds.Tables["LIBRARY_CATEGORIES"]));
                }
                if ((ds.Tables["LIBRARY_FILES"] != null)) {
                    base.Tables.Add(new LIBRARY_FILESDataTable(ds.Tables["LIBRARY_FILES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLIBRARY_CATEGORIES = ((LIBRARY_CATEGORIESDataTable)(base.Tables["LIBRARY_CATEGORIES"]));
            if ((initTable == true)) {
                if ((this.tableLIBRARY_CATEGORIES != null)) {
                    this.tableLIBRARY_CATEGORIES.InitVars();
                }
            }
            this.tableLIBRARY_FILES = ((LIBRARY_FILESDataTable)(base.Tables["LIBRARY_FILES"]));
            if ((initTable == true)) {
                if ((this.tableLIBRARY_FILES != null)) {
                    this.tableLIBRARY_FILES.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LibraryTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/LibraryTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLIBRARY_CATEGORIES = new LIBRARY_CATEGORIESDataTable();
            base.Tables.Add(this.tableLIBRARY_CATEGORIES);
            this.tableLIBRARY_FILES = new LIBRARY_FILESDataTable();
            base.Tables.Add(this.tableLIBRARY_FILES);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLIBRARY_CATEGORIES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLIBRARY_FILES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            LibraryTDS ds = new LibraryTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LIBRARY_CATEGORIESRowChangeEventHandler(object sender, LIBRARY_CATEGORIESRowChangeEvent e);
        
        public delegate void LIBRARY_FILESRowChangeEventHandler(object sender, LIBRARY_FILESRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LIBRARY_CATEGORIESDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLIBRARY_CATEGORIES_ID;
            
            private global::System.Data.DataColumn columnCATEGORY_NAME;
            
            private global::System.Data.DataColumn columnPARENT_ID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnACTIVE;
            
            private global::System.Data.DataColumn columnDEV_MATRIX_CATEGORIES_ID;
            
            private global::System.Data.DataColumn columnDEV_MATRIX_STUDY_ID;
            
            private global::System.Data.DataColumn columnINHERIT_LIBRARY_LOGIN;
            
            private global::System.Data.DataColumn columnINHERIT_LIBRARY_LOGIN_WRITE;
            
            private global::System.Data.DataColumn columnINHERIT_LIBRARY_LOGIN_ADMIN;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_CATEGORIESDataTable() {
                this.TableName = "LIBRARY_CATEGORIES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIBRARY_CATEGORIESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LIBRARY_CATEGORIESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_CATEGORIES_IDColumn {
                get {
                    return this.columnLIBRARY_CATEGORIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORY_NAMEColumn {
                get {
                    return this.columnCATEGORY_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARENT_IDColumn {
                get {
                    return this.columnPARENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTIVEColumn {
                get {
                    return this.columnACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEV_MATRIX_CATEGORIES_IDColumn {
                get {
                    return this.columnDEV_MATRIX_CATEGORIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEV_MATRIX_STUDY_IDColumn {
                get {
                    return this.columnDEV_MATRIX_STUDY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INHERIT_LIBRARY_LOGINColumn {
                get {
                    return this.columnINHERIT_LIBRARY_LOGIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INHERIT_LIBRARY_LOGIN_WRITEColumn {
                get {
                    return this.columnINHERIT_LIBRARY_LOGIN_WRITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INHERIT_LIBRARY_LOGIN_ADMINColumn {
                get {
                    return this.columnINHERIT_LIBRARY_LOGIN_ADMIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_CATEGORIESRow this[int index] {
                get {
                    return ((LIBRARY_CATEGORIESRow)(this.Rows[index]));
                }
            }
            
            public event LIBRARY_CATEGORIESRowChangeEventHandler LIBRARY_CATEGORIESRowChanging;
            
            public event LIBRARY_CATEGORIESRowChangeEventHandler LIBRARY_CATEGORIESRowChanged;
            
            public event LIBRARY_CATEGORIESRowChangeEventHandler LIBRARY_CATEGORIESRowDeleting;
            
            public event LIBRARY_CATEGORIESRowChangeEventHandler LIBRARY_CATEGORIESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLIBRARY_CATEGORIESRow(LIBRARY_CATEGORIESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_CATEGORIESRow AddLIBRARY_CATEGORIESRow(string CATEGORY_NAME, int PARENT_ID, int COMPANY_ID, bool ACTIVE, int DEV_MATRIX_CATEGORIES_ID, int DEV_MATRIX_STUDY_ID, bool INHERIT_LIBRARY_LOGIN, bool INHERIT_LIBRARY_LOGIN_WRITE, bool INHERIT_LIBRARY_LOGIN_ADMIN) {
                LIBRARY_CATEGORIESRow rowLIBRARY_CATEGORIESRow = ((LIBRARY_CATEGORIESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CATEGORY_NAME,
                        PARENT_ID,
                        COMPANY_ID,
                        ACTIVE,
                        DEV_MATRIX_CATEGORIES_ID,
                        DEV_MATRIX_STUDY_ID,
                        INHERIT_LIBRARY_LOGIN,
                        INHERIT_LIBRARY_LOGIN_WRITE,
                        INHERIT_LIBRARY_LOGIN_ADMIN};
                rowLIBRARY_CATEGORIESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLIBRARY_CATEGORIESRow);
                return rowLIBRARY_CATEGORIESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_CATEGORIESRow FindByLIBRARY_CATEGORIES_ID(int LIBRARY_CATEGORIES_ID) {
                return ((LIBRARY_CATEGORIESRow)(this.Rows.Find(new object[] {
                            LIBRARY_CATEGORIES_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LIBRARY_CATEGORIESDataTable cln = ((LIBRARY_CATEGORIESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LIBRARY_CATEGORIESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLIBRARY_CATEGORIES_ID = base.Columns["LIBRARY_CATEGORIES_ID"];
                this.columnCATEGORY_NAME = base.Columns["CATEGORY_NAME"];
                this.columnPARENT_ID = base.Columns["PARENT_ID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnACTIVE = base.Columns["ACTIVE"];
                this.columnDEV_MATRIX_CATEGORIES_ID = base.Columns["DEV_MATRIX_CATEGORIES_ID"];
                this.columnDEV_MATRIX_STUDY_ID = base.Columns["DEV_MATRIX_STUDY_ID"];
                this.columnINHERIT_LIBRARY_LOGIN = base.Columns["INHERIT_LIBRARY_LOGIN"];
                this.columnINHERIT_LIBRARY_LOGIN_WRITE = base.Columns["INHERIT_LIBRARY_LOGIN_WRITE"];
                this.columnINHERIT_LIBRARY_LOGIN_ADMIN = base.Columns["INHERIT_LIBRARY_LOGIN_ADMIN"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLIBRARY_CATEGORIES_ID = new global::System.Data.DataColumn("LIBRARY_CATEGORIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_CATEGORIES_ID);
                this.columnCATEGORY_NAME = new global::System.Data.DataColumn("CATEGORY_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY_NAME);
                this.columnPARENT_ID = new global::System.Data.DataColumn("PARENT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARENT_ID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnACTIVE = new global::System.Data.DataColumn("ACTIVE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTIVE);
                this.columnDEV_MATRIX_CATEGORIES_ID = new global::System.Data.DataColumn("DEV_MATRIX_CATEGORIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEV_MATRIX_CATEGORIES_ID);
                this.columnDEV_MATRIX_STUDY_ID = new global::System.Data.DataColumn("DEV_MATRIX_STUDY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEV_MATRIX_STUDY_ID);
                this.columnINHERIT_LIBRARY_LOGIN = new global::System.Data.DataColumn("INHERIT_LIBRARY_LOGIN", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINHERIT_LIBRARY_LOGIN);
                this.columnINHERIT_LIBRARY_LOGIN_WRITE = new global::System.Data.DataColumn("INHERIT_LIBRARY_LOGIN_WRITE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINHERIT_LIBRARY_LOGIN_WRITE);
                this.columnINHERIT_LIBRARY_LOGIN_ADMIN = new global::System.Data.DataColumn("INHERIT_LIBRARY_LOGIN_ADMIN", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINHERIT_LIBRARY_LOGIN_ADMIN);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLIBRARY_CATEGORIES_ID}, true));
                this.columnLIBRARY_CATEGORIES_ID.AutoIncrement = true;
                this.columnLIBRARY_CATEGORIES_ID.AllowDBNull = false;
                this.columnLIBRARY_CATEGORIES_ID.ReadOnly = true;
                this.columnLIBRARY_CATEGORIES_ID.Unique = true;
                this.columnCATEGORY_NAME.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_CATEGORIESRow NewLIBRARY_CATEGORIESRow() {
                return ((LIBRARY_CATEGORIESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LIBRARY_CATEGORIESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LIBRARY_CATEGORIESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LIBRARY_CATEGORIESRowChanged != null)) {
                    this.LIBRARY_CATEGORIESRowChanged(this, new LIBRARY_CATEGORIESRowChangeEvent(((LIBRARY_CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LIBRARY_CATEGORIESRowChanging != null)) {
                    this.LIBRARY_CATEGORIESRowChanging(this, new LIBRARY_CATEGORIESRowChangeEvent(((LIBRARY_CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LIBRARY_CATEGORIESRowDeleted != null)) {
                    this.LIBRARY_CATEGORIESRowDeleted(this, new LIBRARY_CATEGORIESRowChangeEvent(((LIBRARY_CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LIBRARY_CATEGORIESRowDeleting != null)) {
                    this.LIBRARY_CATEGORIESRowDeleting(this, new LIBRARY_CATEGORIESRowChangeEvent(((LIBRARY_CATEGORIESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLIBRARY_CATEGORIESRow(LIBRARY_CATEGORIESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LibraryTDS ds = new LibraryTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LIBRARY_CATEGORIESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LIBRARY_FILESDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;
            
            private global::System.Data.DataColumn columnLIBRARY_CATEGORIES_ID;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnACTIVE;
            
            private global::System.Data.DataColumn columnFILENAME;
            
            private global::System.Data.DataColumn columnORIGINAL_FILENAME;
            
            private global::System.Data.DataColumn columnDATE_TIME;
            
            private global::System.Data.DataColumn columnLOGIN_ID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnFILE_SIZE;
            
            private global::System.Data.DataColumn columnTHUMBNAIL_FILENAME;
            
            private global::System.Data.DataColumn columnNO_RECENTLY_UPLOADED;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_FILESDataTable() {
                this.TableName = "LIBRARY_FILES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIBRARY_FILESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LIBRARY_FILESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn {
                get {
                    return this.columnLIBRARY_FILES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_CATEGORIES_IDColumn {
                get {
                    return this.columnLIBRARY_CATEGORIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTIVEColumn {
                get {
                    return this.columnACTIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILENAMEColumn {
                get {
                    return this.columnFILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORIGINAL_FILENAMEColumn {
                get {
                    return this.columnORIGINAL_FILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATE_TIMEColumn {
                get {
                    return this.columnDATE_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOGIN_IDColumn {
                get {
                    return this.columnLOGIN_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILE_SIZEColumn {
                get {
                    return this.columnFILE_SIZE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn THUMBNAIL_FILENAMEColumn {
                get {
                    return this.columnTHUMBNAIL_FILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NO_RECENTLY_UPLOADEDColumn {
                get {
                    return this.columnNO_RECENTLY_UPLOADED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_FILESRow this[int index] {
                get {
                    return ((LIBRARY_FILESRow)(this.Rows[index]));
                }
            }
            
            public event LIBRARY_FILESRowChangeEventHandler LIBRARY_FILESRowChanging;
            
            public event LIBRARY_FILESRowChangeEventHandler LIBRARY_FILESRowChanged;
            
            public event LIBRARY_FILESRowChangeEventHandler LIBRARY_FILESRowDeleting;
            
            public event LIBRARY_FILESRowChangeEventHandler LIBRARY_FILESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLIBRARY_FILESRow(LIBRARY_FILESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_FILESRow AddLIBRARY_FILESRow(int LIBRARY_CATEGORIES_ID, string DESCRIPTION, bool ACTIVE, string FILENAME, string ORIGINAL_FILENAME, System.DateTime DATE_TIME, int LOGIN_ID, int COMPANY_ID, string FILE_SIZE, string THUMBNAIL_FILENAME, bool NO_RECENTLY_UPLOADED) {
                LIBRARY_FILESRow rowLIBRARY_FILESRow = ((LIBRARY_FILESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LIBRARY_CATEGORIES_ID,
                        DESCRIPTION,
                        ACTIVE,
                        FILENAME,
                        ORIGINAL_FILENAME,
                        DATE_TIME,
                        LOGIN_ID,
                        COMPANY_ID,
                        FILE_SIZE,
                        THUMBNAIL_FILENAME,
                        NO_RECENTLY_UPLOADED};
                rowLIBRARY_FILESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLIBRARY_FILESRow);
                return rowLIBRARY_FILESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_FILESRow FindByLIBRARY_FILES_ID(int LIBRARY_FILES_ID) {
                return ((LIBRARY_FILESRow)(this.Rows.Find(new object[] {
                            LIBRARY_FILES_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LIBRARY_FILESDataTable cln = ((LIBRARY_FILESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LIBRARY_FILESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
                this.columnLIBRARY_CATEGORIES_ID = base.Columns["LIBRARY_CATEGORIES_ID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnACTIVE = base.Columns["ACTIVE"];
                this.columnFILENAME = base.Columns["FILENAME"];
                this.columnORIGINAL_FILENAME = base.Columns["ORIGINAL_FILENAME"];
                this.columnDATE_TIME = base.Columns["DATE_TIME"];
                this.columnLOGIN_ID = base.Columns["LOGIN_ID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnFILE_SIZE = base.Columns["FILE_SIZE"];
                this.columnTHUMBNAIL_FILENAME = base.Columns["THUMBNAIL_FILENAME"];
                this.columnNO_RECENTLY_UPLOADED = base.Columns["NO_RECENTLY_UPLOADED"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.columnLIBRARY_CATEGORIES_ID = new global::System.Data.DataColumn("LIBRARY_CATEGORIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_CATEGORIES_ID);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnACTIVE = new global::System.Data.DataColumn("ACTIVE", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTIVE);
                this.columnFILENAME = new global::System.Data.DataColumn("FILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILENAME);
                this.columnORIGINAL_FILENAME = new global::System.Data.DataColumn("ORIGINAL_FILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORIGINAL_FILENAME);
                this.columnDATE_TIME = new global::System.Data.DataColumn("DATE_TIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_TIME);
                this.columnLOGIN_ID = new global::System.Data.DataColumn("LOGIN_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGIN_ID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnFILE_SIZE = new global::System.Data.DataColumn("FILE_SIZE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILE_SIZE);
                this.columnTHUMBNAIL_FILENAME = new global::System.Data.DataColumn("THUMBNAIL_FILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHUMBNAIL_FILENAME);
                this.columnNO_RECENTLY_UPLOADED = new global::System.Data.DataColumn("NO_RECENTLY_UPLOADED", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNO_RECENTLY_UPLOADED);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLIBRARY_FILES_ID}, true));
                this.columnLIBRARY_FILES_ID.AutoIncrement = true;
                this.columnLIBRARY_FILES_ID.AllowDBNull = false;
                this.columnLIBRARY_FILES_ID.ReadOnly = true;
                this.columnLIBRARY_FILES_ID.Unique = true;
                this.columnDESCRIPTION.MaxLength = 256;
                this.columnFILENAME.MaxLength = 150;
                this.columnORIGINAL_FILENAME.MaxLength = 105;
                this.columnFILE_SIZE.MaxLength = 15;
                this.columnTHUMBNAIL_FILENAME.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_FILESRow NewLIBRARY_FILESRow() {
                return ((LIBRARY_FILESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LIBRARY_FILESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LIBRARY_FILESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LIBRARY_FILESRowChanged != null)) {
                    this.LIBRARY_FILESRowChanged(this, new LIBRARY_FILESRowChangeEvent(((LIBRARY_FILESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LIBRARY_FILESRowChanging != null)) {
                    this.LIBRARY_FILESRowChanging(this, new LIBRARY_FILESRowChangeEvent(((LIBRARY_FILESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LIBRARY_FILESRowDeleted != null)) {
                    this.LIBRARY_FILESRowDeleted(this, new LIBRARY_FILESRowChangeEvent(((LIBRARY_FILESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LIBRARY_FILESRowDeleting != null)) {
                    this.LIBRARY_FILESRowDeleting(this, new LIBRARY_FILESRowChangeEvent(((LIBRARY_FILESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLIBRARY_FILESRow(LIBRARY_FILESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LibraryTDS ds = new LibraryTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LIBRARY_FILESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LIBRARY_CATEGORIESRow : global::System.Data.DataRow {
            
            private LIBRARY_CATEGORIESDataTable tableLIBRARY_CATEGORIES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIBRARY_CATEGORIESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLIBRARY_CATEGORIES = ((LIBRARY_CATEGORIESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_CATEGORIES_ID {
                get {
                    return ((int)(this[this.tableLIBRARY_CATEGORIES.LIBRARY_CATEGORIES_IDColumn]));
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.LIBRARY_CATEGORIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY_NAME {
                get {
                    try {
                        return ((string)(this[this.tableLIBRARY_CATEGORIES.CATEGORY_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY_NAME\' in table \'LIBRARY_CATEGORIES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.CATEGORY_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PARENT_ID {
                get {
                    try {
                        return ((int)(this[this.tableLIBRARY_CATEGORIES.PARENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARENT_ID\' in table \'LIBRARY_CATEGORIES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.PARENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableLIBRARY_CATEGORIES.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'LIBRARY_CATEGORIES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ACTIVE {
                get {
                    try {
                        return ((bool)(this[this.tableLIBRARY_CATEGORIES.ACTIVEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACTIVE\' in table \'LIBRARY_CATEGORIES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DEV_MATRIX_CATEGORIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableLIBRARY_CATEGORIES.DEV_MATRIX_CATEGORIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEV_MATRIX_CATEGORIES_ID\' in table \'LIBRARY_CATEGORIES\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.DEV_MATRIX_CATEGORIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DEV_MATRIX_STUDY_ID {
                get {
                    try {
                        return ((int)(this[this.tableLIBRARY_CATEGORIES.DEV_MATRIX_STUDY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEV_MATRIX_STUDY_ID\' in table \'LIBRARY_CATEGORIES\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.DEV_MATRIX_STUDY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool INHERIT_LIBRARY_LOGIN {
                get {
                    try {
                        return ((bool)(this[this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INHERIT_LIBRARY_LOGIN\' in table \'LIBRARY_CATEGORIES\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool INHERIT_LIBRARY_LOGIN_WRITE {
                get {
                    try {
                        return ((bool)(this[this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGIN_WRITEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INHERIT_LIBRARY_LOGIN_WRITE\' in table \'LIBRARY_CATEGORIES\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGIN_WRITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool INHERIT_LIBRARY_LOGIN_ADMIN {
                get {
                    try {
                        return ((bool)(this[this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGIN_ADMINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INHERIT_LIBRARY_LOGIN_ADMIN\' in table \'LIBRARY_CATEGORIES\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGIN_ADMINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORY_NAMENull() {
                return this.IsNull(this.tableLIBRARY_CATEGORIES.CATEGORY_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORY_NAMENull() {
                this[this.tableLIBRARY_CATEGORIES.CATEGORY_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARENT_IDNull() {
                return this.IsNull(this.tableLIBRARY_CATEGORIES.PARENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARENT_IDNull() {
                this[this.tableLIBRARY_CATEGORIES.PARENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableLIBRARY_CATEGORIES.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableLIBRARY_CATEGORIES.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTIVENull() {
                return this.IsNull(this.tableLIBRARY_CATEGORIES.ACTIVEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTIVENull() {
                this[this.tableLIBRARY_CATEGORIES.ACTIVEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEV_MATRIX_CATEGORIES_IDNull() {
                return this.IsNull(this.tableLIBRARY_CATEGORIES.DEV_MATRIX_CATEGORIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEV_MATRIX_CATEGORIES_IDNull() {
                this[this.tableLIBRARY_CATEGORIES.DEV_MATRIX_CATEGORIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEV_MATRIX_STUDY_IDNull() {
                return this.IsNull(this.tableLIBRARY_CATEGORIES.DEV_MATRIX_STUDY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEV_MATRIX_STUDY_IDNull() {
                this[this.tableLIBRARY_CATEGORIES.DEV_MATRIX_STUDY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINHERIT_LIBRARY_LOGINNull() {
                return this.IsNull(this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINHERIT_LIBRARY_LOGINNull() {
                this[this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINHERIT_LIBRARY_LOGIN_WRITENull() {
                return this.IsNull(this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGIN_WRITEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINHERIT_LIBRARY_LOGIN_WRITENull() {
                this[this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGIN_WRITEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINHERIT_LIBRARY_LOGIN_ADMINNull() {
                return this.IsNull(this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGIN_ADMINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINHERIT_LIBRARY_LOGIN_ADMINNull() {
                this[this.tableLIBRARY_CATEGORIES.INHERIT_LIBRARY_LOGIN_ADMINColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LIBRARY_FILESRow : global::System.Data.DataRow {
            
            private LIBRARY_FILESDataTable tableLIBRARY_FILES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIBRARY_FILESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLIBRARY_FILES = ((LIBRARY_FILESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID {
                get {
                    return ((int)(this[this.tableLIBRARY_FILES.LIBRARY_FILES_IDColumn]));
                }
                set {
                    this[this.tableLIBRARY_FILES.LIBRARY_FILES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_CATEGORIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableLIBRARY_FILES.LIBRARY_CATEGORIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_CATEGORIES_ID\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.LIBRARY_CATEGORIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableLIBRARY_FILES.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DESCRIPTION\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ACTIVE {
                get {
                    try {
                        return ((bool)(this[this.tableLIBRARY_FILES.ACTIVEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACTIVE\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.ACTIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILENAME {
                get {
                    try {
                        return ((string)(this[this.tableLIBRARY_FILES.FILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FILENAME\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.FILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORIGINAL_FILENAME {
                get {
                    try {
                        return ((string)(this[this.tableLIBRARY_FILES.ORIGINAL_FILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORIGINAL_FILENAME\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.ORIGINAL_FILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_TIME {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLIBRARY_FILES.DATE_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATE_TIME\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.DATE_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LOGIN_ID {
                get {
                    try {
                        return ((int)(this[this.tableLIBRARY_FILES.LOGIN_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOGIN_ID\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.LOGIN_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableLIBRARY_FILES.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILE_SIZE {
                get {
                    try {
                        return ((string)(this[this.tableLIBRARY_FILES.FILE_SIZEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FILE_SIZE\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.FILE_SIZEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string THUMBNAIL_FILENAME {
                get {
                    try {
                        return ((string)(this[this.tableLIBRARY_FILES.THUMBNAIL_FILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'THUMBNAIL_FILENAME\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.THUMBNAIL_FILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool NO_RECENTLY_UPLOADED {
                get {
                    try {
                        return ((bool)(this[this.tableLIBRARY_FILES.NO_RECENTLY_UPLOADEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NO_RECENTLY_UPLOADED\' in table \'LIBRARY_FILES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLIBRARY_FILES.NO_RECENTLY_UPLOADEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_CATEGORIES_IDNull() {
                return this.IsNull(this.tableLIBRARY_FILES.LIBRARY_CATEGORIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_CATEGORIES_IDNull() {
                this[this.tableLIBRARY_FILES.LIBRARY_CATEGORIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableLIBRARY_FILES.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableLIBRARY_FILES.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACTIVENull() {
                return this.IsNull(this.tableLIBRARY_FILES.ACTIVEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACTIVENull() {
                this[this.tableLIBRARY_FILES.ACTIVEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFILENAMENull() {
                return this.IsNull(this.tableLIBRARY_FILES.FILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFILENAMENull() {
                this[this.tableLIBRARY_FILES.FILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORIGINAL_FILENAMENull() {
                return this.IsNull(this.tableLIBRARY_FILES.ORIGINAL_FILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORIGINAL_FILENAMENull() {
                this[this.tableLIBRARY_FILES.ORIGINAL_FILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATE_TIMENull() {
                return this.IsNull(this.tableLIBRARY_FILES.DATE_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATE_TIMENull() {
                this[this.tableLIBRARY_FILES.DATE_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOGIN_IDNull() {
                return this.IsNull(this.tableLIBRARY_FILES.LOGIN_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOGIN_IDNull() {
                this[this.tableLIBRARY_FILES.LOGIN_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableLIBRARY_FILES.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableLIBRARY_FILES.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFILE_SIZENull() {
                return this.IsNull(this.tableLIBRARY_FILES.FILE_SIZEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFILE_SIZENull() {
                this[this.tableLIBRARY_FILES.FILE_SIZEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTHUMBNAIL_FILENAMENull() {
                return this.IsNull(this.tableLIBRARY_FILES.THUMBNAIL_FILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTHUMBNAIL_FILENAMENull() {
                this[this.tableLIBRARY_FILES.THUMBNAIL_FILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNO_RECENTLY_UPLOADEDNull() {
                return this.IsNull(this.tableLIBRARY_FILES.NO_RECENTLY_UPLOADEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNO_RECENTLY_UPLOADEDNull() {
                this[this.tableLIBRARY_FILES.NO_RECENTLY_UPLOADEDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LIBRARY_CATEGORIESRowChangeEvent : global::System.EventArgs {
            
            private LIBRARY_CATEGORIESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_CATEGORIESRowChangeEvent(LIBRARY_CATEGORIESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_CATEGORIESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LIBRARY_FILESRowChangeEvent : global::System.EventArgs {
            
            private LIBRARY_FILESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_FILESRowChangeEvent(LIBRARY_FILESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIBRARY_FILESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591