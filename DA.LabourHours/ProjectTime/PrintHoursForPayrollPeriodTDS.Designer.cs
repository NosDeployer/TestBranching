//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.LabourHours.ProjectTime {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PrintHoursForPayrollPeriodTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PrintHoursForPayrollPeriodTDS : global::System.Data.DataSet {
        
        private PrintHoursForPayrollPeriodDataTable tablePrintHoursForPayrollPeriod;
        
        private OriginalDataTable tableOriginal;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PrintHoursForPayrollPeriodTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PrintHoursForPayrollPeriodTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PrintHoursForPayrollPeriod"] != null)) {
                    base.Tables.Add(new PrintHoursForPayrollPeriodDataTable(ds.Tables["PrintHoursForPayrollPeriod"]));
                }
                if ((ds.Tables["Original"] != null)) {
                    base.Tables.Add(new OriginalDataTable(ds.Tables["Original"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintHoursForPayrollPeriodDataTable PrintHoursForPayrollPeriod {
            get {
                return this.tablePrintHoursForPayrollPeriod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalDataTable Original {
            get {
                return this.tableOriginal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PrintHoursForPayrollPeriodTDS cln = ((PrintHoursForPayrollPeriodTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PrintHoursForPayrollPeriod"] != null)) {
                    base.Tables.Add(new PrintHoursForPayrollPeriodDataTable(ds.Tables["PrintHoursForPayrollPeriod"]));
                }
                if ((ds.Tables["Original"] != null)) {
                    base.Tables.Add(new OriginalDataTable(ds.Tables["Original"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePrintHoursForPayrollPeriod = ((PrintHoursForPayrollPeriodDataTable)(base.Tables["PrintHoursForPayrollPeriod"]));
            if ((initTable == true)) {
                if ((this.tablePrintHoursForPayrollPeriod != null)) {
                    this.tablePrintHoursForPayrollPeriod.InitVars();
                }
            }
            this.tableOriginal = ((OriginalDataTable)(base.Tables["Original"]));
            if ((initTable == true)) {
                if ((this.tableOriginal != null)) {
                    this.tableOriginal.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PrintHoursForPayrollPeriodTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PrintHoursForPayrollPeriodTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePrintHoursForPayrollPeriod = new PrintHoursForPayrollPeriodDataTable();
            base.Tables.Add(this.tablePrintHoursForPayrollPeriod);
            this.tableOriginal = new OriginalDataTable();
            base.Tables.Add(this.tableOriginal);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintHoursForPayrollPeriod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PrintHoursForPayrollPeriodTDS ds = new PrintHoursForPayrollPeriodTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PrintHoursForPayrollPeriodRowChangeEventHandler(object sender, PrintHoursForPayrollPeriodRowChangeEvent e);
        
        public delegate void OriginalRowChangeEventHandler(object sender, OriginalRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintHoursForPayrollPeriodDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnCountryID;
            
            private global::System.Data.DataColumn columnCountryName;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnStartTime;
            
            private global::System.Data.DataColumn columnEndTime;
            
            private global::System.Data.DataColumn columnOffset;
            
            private global::System.Data.DataColumn columnTimeUS;
            
            private global::System.Data.DataColumn columnTimeCA;
            
            private global::System.Data.DataColumn columnWorkingDetails;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnMealsUS;
            
            private global::System.Data.DataColumn columnMealsCA;
            
            private global::System.Data.DataColumn columnTotalUS;
            
            private global::System.Data.DataColumn columnTotalCA;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnIsApproved;
            
            private global::System.Data.DataColumn columnApprovedBy;
            
            private global::System.Data.DataColumn columnProjectTimeState;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnFairWage;
            
            private global::System.Data.DataColumn columnTimeMob;
            
            private global::System.Data.DataColumn columnTimeMobOt;
            
            private global::System.Data.DataColumn columnTimeStandard;
            
            private global::System.Data.DataColumn columnTimeStandardOt;
            
            private global::System.Data.DataColumn columnTimeFairWage;
            
            private global::System.Data.DataColumn columnTimeFairWageOt;
            
            private global::System.Data.DataColumn columnJobClassType;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnJobClassProjectTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintHoursForPayrollPeriodDataTable() {
                this.TableName = "PrintHoursForPayrollPeriod";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintHoursForPayrollPeriodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintHoursForPayrollPeriodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OffsetColumn {
                get {
                    return this.columnOffset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeUSColumn {
                get {
                    return this.columnTimeUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeCAColumn {
                get {
                    return this.columnTimeCA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkingDetailsColumn {
                get {
                    return this.columnWorkingDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsUSColumn {
                get {
                    return this.columnMealsUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCAColumn {
                get {
                    return this.columnMealsCA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUSColumn {
                get {
                    return this.columnTotalUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCAColumn {
                get {
                    return this.columnTotalCA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsApprovedColumn {
                get {
                    return this.columnIsApproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedByColumn {
                get {
                    return this.columnApprovedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTimeStateColumn {
                get {
                    return this.columnProjectTimeState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FairWageColumn {
                get {
                    return this.columnFairWage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeMobColumn {
                get {
                    return this.columnTimeMob;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeMobOtColumn {
                get {
                    return this.columnTimeMobOt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeStandardColumn {
                get {
                    return this.columnTimeStandard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeStandardOtColumn {
                get {
                    return this.columnTimeStandardOt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeFairWageColumn {
                get {
                    return this.columnTimeFairWage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeFairWageOtColumn {
                get {
                    return this.columnTimeFairWageOt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobClassTypeColumn {
                get {
                    return this.columnJobClassType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobClassProjectTimeColumn {
                get {
                    return this.columnJobClassProjectTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintHoursForPayrollPeriodRow this[int index] {
                get {
                    return ((PrintHoursForPayrollPeriodRow)(this.Rows[index]));
                }
            }
            
            public event PrintHoursForPayrollPeriodRowChangeEventHandler PrintHoursForPayrollPeriodRowChanging;
            
            public event PrintHoursForPayrollPeriodRowChangeEventHandler PrintHoursForPayrollPeriodRowChanged;
            
            public event PrintHoursForPayrollPeriodRowChangeEventHandler PrintHoursForPayrollPeriodRowDeleting;
            
            public event PrintHoursForPayrollPeriodRowChangeEventHandler PrintHoursForPayrollPeriodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintHoursForPayrollPeriodRow(PrintHoursForPayrollPeriodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintHoursForPayrollPeriodRow AddPrintHoursForPayrollPeriodRow(
                        int EmployeeID, 
                        string EmployeeName, 
                        long CountryID, 
                        string CountryName, 
                        System.DateTime Date_, 
                        System.DateTime StartTime, 
                        System.DateTime EndTime, 
                        double Offset, 
                        double TimeUS, 
                        double TimeCA, 
                        string WorkingDetails, 
                        string ClientName, 
                        string Location, 
                        bool MealsUS, 
                        bool MealsCA, 
                        decimal TotalUS, 
                        decimal TotalCA, 
                        string Comments, 
                        string ProjectName, 
                        bool IsApproved, 
                        string ApprovedBy, 
                        string ProjectTimeState, 
                        string Work_, 
                        string Function_, 
                        bool FairWage, 
                        double TimeMob, 
                        double TimeMobOt, 
                        double TimeStandard, 
                        double TimeStandardOt, 
                        double TimeFairWage, 
                        double TimeFairWageOt, 
                        string JobClassType, 
                        string Category, 
                        string JobClassProjectTime) {
                PrintHoursForPayrollPeriodRow rowPrintHoursForPayrollPeriodRow = ((PrintHoursForPayrollPeriodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeID,
                        EmployeeName,
                        CountryID,
                        CountryName,
                        Date_,
                        StartTime,
                        EndTime,
                        Offset,
                        TimeUS,
                        TimeCA,
                        WorkingDetails,
                        ClientName,
                        Location,
                        MealsUS,
                        MealsCA,
                        TotalUS,
                        TotalCA,
                        Comments,
                        ProjectName,
                        IsApproved,
                        ApprovedBy,
                        ProjectTimeState,
                        Work_,
                        Function_,
                        FairWage,
                        TimeMob,
                        TimeMobOt,
                        TimeStandard,
                        TimeStandardOt,
                        TimeFairWage,
                        TimeFairWageOt,
                        JobClassType,
                        Category,
                        JobClassProjectTime};
                rowPrintHoursForPayrollPeriodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintHoursForPayrollPeriodRow);
                return rowPrintHoursForPayrollPeriodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintHoursForPayrollPeriodDataTable cln = ((PrintHoursForPayrollPeriodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintHoursForPayrollPeriodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnCountryID = base.Columns["CountryID"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnOffset = base.Columns["Offset"];
                this.columnTimeUS = base.Columns["TimeUS"];
                this.columnTimeCA = base.Columns["TimeCA"];
                this.columnWorkingDetails = base.Columns["WorkingDetails"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnLocation = base.Columns["Location"];
                this.columnMealsUS = base.Columns["MealsUS"];
                this.columnMealsCA = base.Columns["MealsCA"];
                this.columnTotalUS = base.Columns["TotalUS"];
                this.columnTotalCA = base.Columns["TotalCA"];
                this.columnComments = base.Columns["Comments"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnIsApproved = base.Columns["IsApproved"];
                this.columnApprovedBy = base.Columns["ApprovedBy"];
                this.columnProjectTimeState = base.Columns["ProjectTimeState"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnFairWage = base.Columns["FairWage"];
                this.columnTimeMob = base.Columns["TimeMob"];
                this.columnTimeMobOt = base.Columns["TimeMobOt"];
                this.columnTimeStandard = base.Columns["TimeStandard"];
                this.columnTimeStandardOt = base.Columns["TimeStandardOt"];
                this.columnTimeFairWage = base.Columns["TimeFairWage"];
                this.columnTimeFairWageOt = base.Columns["TimeFairWageOt"];
                this.columnJobClassType = base.Columns["JobClassType"];
                this.columnCategory = base.Columns["Category"];
                this.columnJobClassProjectTime = base.Columns["JobClassProjectTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnCountryID = new global::System.Data.DataColumn("CountryID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnCountryName = new global::System.Data.DataColumn("CountryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnOffset = new global::System.Data.DataColumn("Offset", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset);
                this.columnTimeUS = new global::System.Data.DataColumn("TimeUS", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeUS);
                this.columnTimeCA = new global::System.Data.DataColumn("TimeCA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeCA);
                this.columnWorkingDetails = new global::System.Data.DataColumn("WorkingDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkingDetails);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnMealsUS = new global::System.Data.DataColumn("MealsUS", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsUS);
                this.columnMealsCA = new global::System.Data.DataColumn("MealsCA", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCA);
                this.columnTotalUS = new global::System.Data.DataColumn("TotalUS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUS);
                this.columnTotalCA = new global::System.Data.DataColumn("TotalCA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCA);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnIsApproved = new global::System.Data.DataColumn("IsApproved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsApproved);
                this.columnApprovedBy = new global::System.Data.DataColumn("ApprovedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedBy);
                this.columnProjectTimeState = new global::System.Data.DataColumn("ProjectTimeState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTimeState);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnFairWage = new global::System.Data.DataColumn("FairWage", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFairWage);
                this.columnTimeMob = new global::System.Data.DataColumn("TimeMob", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeMob);
                this.columnTimeMobOt = new global::System.Data.DataColumn("TimeMobOt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeMobOt);
                this.columnTimeStandard = new global::System.Data.DataColumn("TimeStandard", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStandard);
                this.columnTimeStandardOt = new global::System.Data.DataColumn("TimeStandardOt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStandardOt);
                this.columnTimeFairWage = new global::System.Data.DataColumn("TimeFairWage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeFairWage);
                this.columnTimeFairWageOt = new global::System.Data.DataColumn("TimeFairWageOt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeFairWageOt);
                this.columnJobClassType = new global::System.Data.DataColumn("JobClassType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobClassType);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnJobClassProjectTime = new global::System.Data.DataColumn("JobClassProjectTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobClassProjectTime);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintHoursForPayrollPeriodRow NewPrintHoursForPayrollPeriodRow() {
                return ((PrintHoursForPayrollPeriodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintHoursForPayrollPeriodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintHoursForPayrollPeriodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintHoursForPayrollPeriodRowChanged != null)) {
                    this.PrintHoursForPayrollPeriodRowChanged(this, new PrintHoursForPayrollPeriodRowChangeEvent(((PrintHoursForPayrollPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintHoursForPayrollPeriodRowChanging != null)) {
                    this.PrintHoursForPayrollPeriodRowChanging(this, new PrintHoursForPayrollPeriodRowChangeEvent(((PrintHoursForPayrollPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintHoursForPayrollPeriodRowDeleted != null)) {
                    this.PrintHoursForPayrollPeriodRowDeleted(this, new PrintHoursForPayrollPeriodRowChangeEvent(((PrintHoursForPayrollPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintHoursForPayrollPeriodRowDeleting != null)) {
                    this.PrintHoursForPayrollPeriodRowDeleting(this, new PrintHoursForPayrollPeriodRowChangeEvent(((PrintHoursForPayrollPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintHoursForPayrollPeriodRow(PrintHoursForPayrollPeriodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintHoursForPayrollPeriodTDS ds = new PrintHoursForPayrollPeriodTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintHoursForPayrollPeriodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnCountryID;
            
            private global::System.Data.DataColumn columnCountryName;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnStartTime;
            
            private global::System.Data.DataColumn columnEndTime;
            
            private global::System.Data.DataColumn columnOffset;
            
            private global::System.Data.DataColumn columnProjectTime;
            
            private global::System.Data.DataColumn columnWorkingDetails;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnMealsCountry;
            
            private global::System.Data.DataColumn columnMealsAllowance;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnApprovedBy;
            
            private global::System.Data.DataColumn columnProjectTimeState;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnFairWage;
            
            private global::System.Data.DataColumn columnProjectTimeID;
            
            private global::System.Data.DataColumn columnJobClassType;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnJobClassProjectTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalDataTable() {
                this.TableName = "Original";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OffsetColumn {
                get {
                    return this.columnOffset;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTimeColumn {
                get {
                    return this.columnProjectTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkingDetailsColumn {
                get {
                    return this.columnWorkingDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCountryColumn {
                get {
                    return this.columnMealsCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsAllowanceColumn {
                get {
                    return this.columnMealsAllowance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedByColumn {
                get {
                    return this.columnApprovedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTimeStateColumn {
                get {
                    return this.columnProjectTimeState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FairWageColumn {
                get {
                    return this.columnFairWage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTimeIDColumn {
                get {
                    return this.columnProjectTimeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobClassTypeColumn {
                get {
                    return this.columnJobClassType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobClassProjectTimeColumn {
                get {
                    return this.columnJobClassProjectTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRow this[int index] {
                get {
                    return ((OriginalRow)(this.Rows[index]));
                }
            }
            
            public event OriginalRowChangeEventHandler OriginalRowChanging;
            
            public event OriginalRowChangeEventHandler OriginalRowChanged;
            
            public event OriginalRowChangeEventHandler OriginalRowDeleting;
            
            public event OriginalRowChangeEventHandler OriginalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalRow(OriginalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRow AddOriginalRow(
                        int EmployeeID, 
                        string EmployeeName, 
                        long CountryID, 
                        string CountryName, 
                        System.DateTime Date_, 
                        System.DateTime StartTime, 
                        System.DateTime EndTime, 
                        double Offset, 
                        double ProjectTime, 
                        string WorkingDetails, 
                        string ClientName, 
                        string Location, 
                        long MealsCountry, 
                        decimal MealsAllowance, 
                        string Comments, 
                        string ProjectName, 
                        string ApprovedBy, 
                        string ProjectTimeState, 
                        string Work_, 
                        string Function_, 
                        bool FairWage, 
                        int ProjectTimeID, 
                        string JobClassType, 
                        string Category, 
                        string JobClassProjectTime) {
                OriginalRow rowOriginalRow = ((OriginalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeID,
                        EmployeeName,
                        CountryID,
                        CountryName,
                        Date_,
                        StartTime,
                        EndTime,
                        Offset,
                        ProjectTime,
                        WorkingDetails,
                        ClientName,
                        Location,
                        MealsCountry,
                        MealsAllowance,
                        Comments,
                        ProjectName,
                        ApprovedBy,
                        ProjectTimeState,
                        Work_,
                        Function_,
                        FairWage,
                        ProjectTimeID,
                        JobClassType,
                        Category,
                        JobClassProjectTime};
                rowOriginalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalRow);
                return rowOriginalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalDataTable cln = ((OriginalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnCountryID = base.Columns["CountryID"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnOffset = base.Columns["Offset"];
                this.columnProjectTime = base.Columns["ProjectTime"];
                this.columnWorkingDetails = base.Columns["WorkingDetails"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnLocation = base.Columns["Location"];
                this.columnMealsCountry = base.Columns["MealsCountry"];
                this.columnMealsAllowance = base.Columns["MealsAllowance"];
                this.columnComments = base.Columns["Comments"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnApprovedBy = base.Columns["ApprovedBy"];
                this.columnProjectTimeState = base.Columns["ProjectTimeState"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnFairWage = base.Columns["FairWage"];
                this.columnProjectTimeID = base.Columns["ProjectTimeID"];
                this.columnJobClassType = base.Columns["JobClassType"];
                this.columnCategory = base.Columns["Category"];
                this.columnJobClassProjectTime = base.Columns["JobClassProjectTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnCountryID = new global::System.Data.DataColumn("CountryID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnCountryName = new global::System.Data.DataColumn("CountryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnOffset = new global::System.Data.DataColumn("Offset", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOffset);
                this.columnProjectTime = new global::System.Data.DataColumn("ProjectTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTime);
                this.columnWorkingDetails = new global::System.Data.DataColumn("WorkingDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkingDetails);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnMealsCountry = new global::System.Data.DataColumn("MealsCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCountry);
                this.columnMealsAllowance = new global::System.Data.DataColumn("MealsAllowance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsAllowance);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnApprovedBy = new global::System.Data.DataColumn("ApprovedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedBy);
                this.columnProjectTimeState = new global::System.Data.DataColumn("ProjectTimeState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTimeState);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnFairWage = new global::System.Data.DataColumn("FairWage", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFairWage);
                this.columnProjectTimeID = new global::System.Data.DataColumn("ProjectTimeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTimeID);
                this.columnJobClassType = new global::System.Data.DataColumn("JobClassType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobClassType);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnJobClassProjectTime = new global::System.Data.DataColumn("JobClassProjectTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobClassProjectTime);
                this.columnEmployeeID.AllowDBNull = false;
                this.columnEmployeeID.ReadOnly = true;
                this.columnEmployeeName.ReadOnly = true;
                this.columnEmployeeName.MaxLength = 101;
                this.columnCountryID.AllowDBNull = false;
                this.columnCountryID.ReadOnly = true;
                this.columnCountryName.AllowDBNull = false;
                this.columnCountryName.MaxLength = 50;
                this.columnDate_.AllowDBNull = false;
                this.columnProjectTime.AllowDBNull = false;
                this.columnWorkingDetails.MaxLength = 25;
                this.columnClientName.MaxLength = 150;
                this.columnLocation.MaxLength = 50;
                this.columnMealsAllowance.AllowDBNull = false;
                this.columnComments.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRow NewOriginalRow() {
                return ((OriginalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalRowChanged != null)) {
                    this.OriginalRowChanged(this, new OriginalRowChangeEvent(((OriginalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalRowChanging != null)) {
                    this.OriginalRowChanging(this, new OriginalRowChangeEvent(((OriginalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalRowDeleted != null)) {
                    this.OriginalRowDeleted(this, new OriginalRowChangeEvent(((OriginalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalRowDeleting != null)) {
                    this.OriginalRowDeleting(this, new OriginalRowChangeEvent(((OriginalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalRow(OriginalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintHoursForPayrollPeriodTDS ds = new PrintHoursForPayrollPeriodTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintHoursForPayrollPeriodRow : global::System.Data.DataRow {
            
            private PrintHoursForPayrollPeriodDataTable tablePrintHoursForPayrollPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintHoursForPayrollPeriodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintHoursForPayrollPeriod = ((PrintHoursForPayrollPeriodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    try {
                        return ((int)(this[this.tablePrintHoursForPayrollPeriod.EmployeeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeID\' in table \'PrintHoursForPayrollPeriod\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'PrintHoursForPayrollPeriod\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CountryID {
                get {
                    try {
                        return ((long)(this[this.tablePrintHoursForPayrollPeriod.CountryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryID\' in table \'PrintHoursForPayrollPeriod\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.CountryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.CountryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryName\' in table \'PrintHoursForPayrollPeriod\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.CountryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintHoursForPayrollPeriod.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintHoursForPayrollPeriod.StartTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartTime\' in table \'PrintHoursForPayrollPeriod\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.StartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintHoursForPayrollPeriod.EndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndTime\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.EndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Offset {
                get {
                    try {
                        return ((double)(this[this.tablePrintHoursForPayrollPeriod.OffsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.OffsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeUS {
                get {
                    try {
                        return ((double)(this[this.tablePrintHoursForPayrollPeriod.TimeUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeUS\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TimeUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeCA {
                get {
                    try {
                        return ((double)(this[this.tablePrintHoursForPayrollPeriod.TimeCAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeCA\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TimeCAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkingDetails {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.WorkingDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkingDetails\' in table \'PrintHoursForPayrollPeriod\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.WorkingDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintHoursForPayrollPeriod\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MealsUS {
                get {
                    try {
                        return ((bool)(this[this.tablePrintHoursForPayrollPeriod.MealsUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsUS\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.MealsUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MealsCA {
                get {
                    try {
                        return ((bool)(this[this.tablePrintHoursForPayrollPeriod.MealsCAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCA\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.MealsCAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUS {
                get {
                    try {
                        return ((decimal)(this[this.tablePrintHoursForPayrollPeriod.TotalUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUS\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TotalUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCA {
                get {
                    try {
                        return ((decimal)(this[this.tablePrintHoursForPayrollPeriod.TotalCAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCA\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TotalCAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintHoursForPayrollPeriod\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApproved {
                get {
                    try {
                        return ((bool)(this[this.tablePrintHoursForPayrollPeriod.IsApprovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsApproved\' in table \'PrintHoursForPayrollPeriod\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.IsApprovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedBy {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.ApprovedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedBy\' in table \'PrintHoursForPayrollPeriod\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.ApprovedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectTimeState {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.ProjectTimeStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectTimeState\' in table \'PrintHoursForPayrollPeriod\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.ProjectTimeStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'PrintHoursForPayrollPeriod\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FairWage {
                get {
                    try {
                        return ((bool)(this[this.tablePrintHoursForPayrollPeriod.FairWageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FairWage\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.FairWageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeMob {
                get {
                    try {
                        return ((double)(this[this.tablePrintHoursForPayrollPeriod.TimeMobColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeMob\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TimeMobColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeMobOt {
                get {
                    try {
                        return ((double)(this[this.tablePrintHoursForPayrollPeriod.TimeMobOtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeMobOt\' in table \'PrintHoursForPayrollPeriod\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TimeMobOtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeStandard {
                get {
                    try {
                        return ((double)(this[this.tablePrintHoursForPayrollPeriod.TimeStandardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeStandard\' in table \'PrintHoursForPayrollPeriod\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TimeStandardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeStandardOt {
                get {
                    try {
                        return ((double)(this[this.tablePrintHoursForPayrollPeriod.TimeStandardOtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeStandardOt\' in table \'PrintHoursForPayrollPeriod\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TimeStandardOtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeFairWage {
                get {
                    try {
                        return ((double)(this[this.tablePrintHoursForPayrollPeriod.TimeFairWageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeFairWage\' in table \'PrintHoursForPayrollPeriod\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TimeFairWageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TimeFairWageOt {
                get {
                    try {
                        return ((double)(this[this.tablePrintHoursForPayrollPeriod.TimeFairWageOtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeFairWageOt\' in table \'PrintHoursForPayrollPeriod\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.TimeFairWageOtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobClassType {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.JobClassTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobClassType\' in table \'PrintHoursForPayrollPeriod\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.JobClassTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'PrintHoursForPayrollPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobClassProjectTime {
                get {
                    try {
                        return ((string)(this[this.tablePrintHoursForPayrollPeriod.JobClassProjectTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobClassProjectTime\' in table \'PrintHoursForPayrollPeriod\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintHoursForPayrollPeriod.JobClassProjectTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIDNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.EmployeeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIDNull() {
                this[this.tablePrintHoursForPayrollPeriod.EmployeeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tablePrintHoursForPayrollPeriod.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryIDNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.CountryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryIDNull() {
                this[this.tablePrintHoursForPayrollPeriod.CountryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNameNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.CountryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNameNull() {
                this[this.tablePrintHoursForPayrollPeriod.CountryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tablePrintHoursForPayrollPeriod.Date_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartTimeNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.StartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartTimeNull() {
                this[this.tablePrintHoursForPayrollPeriod.StartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndTimeNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.EndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndTimeNull() {
                this[this.tablePrintHoursForPayrollPeriod.EndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOffsetNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.OffsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOffsetNull() {
                this[this.tablePrintHoursForPayrollPeriod.OffsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeUSNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TimeUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeUSNull() {
                this[this.tablePrintHoursForPayrollPeriod.TimeUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeCANull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TimeCAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeCANull() {
                this[this.tablePrintHoursForPayrollPeriod.TimeCAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkingDetailsNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.WorkingDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkingDetailsNull() {
                this[this.tablePrintHoursForPayrollPeriod.WorkingDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintHoursForPayrollPeriod.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tablePrintHoursForPayrollPeriod.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsUSNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.MealsUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsUSNull() {
                this[this.tablePrintHoursForPayrollPeriod.MealsUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCANull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.MealsCAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCANull() {
                this[this.tablePrintHoursForPayrollPeriod.MealsCAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUSNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TotalUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUSNull() {
                this[this.tablePrintHoursForPayrollPeriod.TotalUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCANull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TotalCAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCANull() {
                this[this.tablePrintHoursForPayrollPeriod.TotalCAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tablePrintHoursForPayrollPeriod.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintHoursForPayrollPeriod.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsApprovedNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.IsApprovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsApprovedNull() {
                this[this.tablePrintHoursForPayrollPeriod.IsApprovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedByNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.ApprovedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedByNull() {
                this[this.tablePrintHoursForPayrollPeriod.ApprovedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectTimeStateNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.ProjectTimeStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectTimeStateNull() {
                this[this.tablePrintHoursForPayrollPeriod.ProjectTimeStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tablePrintHoursForPayrollPeriod.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tablePrintHoursForPayrollPeriod.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFairWageNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.FairWageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFairWageNull() {
                this[this.tablePrintHoursForPayrollPeriod.FairWageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeMobNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TimeMobColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeMobNull() {
                this[this.tablePrintHoursForPayrollPeriod.TimeMobColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeMobOtNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TimeMobOtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeMobOtNull() {
                this[this.tablePrintHoursForPayrollPeriod.TimeMobOtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStandardNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TimeStandardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStandardNull() {
                this[this.tablePrintHoursForPayrollPeriod.TimeStandardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStandardOtNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TimeStandardOtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStandardOtNull() {
                this[this.tablePrintHoursForPayrollPeriod.TimeStandardOtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeFairWageNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TimeFairWageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeFairWageNull() {
                this[this.tablePrintHoursForPayrollPeriod.TimeFairWageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeFairWageOtNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.TimeFairWageOtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeFairWageOtNull() {
                this[this.tablePrintHoursForPayrollPeriod.TimeFairWageOtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobClassTypeNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.JobClassTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobClassTypeNull() {
                this[this.tablePrintHoursForPayrollPeriod.JobClassTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tablePrintHoursForPayrollPeriod.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobClassProjectTimeNull() {
                return this.IsNull(this.tablePrintHoursForPayrollPeriod.JobClassProjectTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobClassProjectTimeNull() {
                this[this.tablePrintHoursForPayrollPeriod.JobClassProjectTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalRow : global::System.Data.DataRow {
            
            private OriginalDataTable tableOriginal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginal = ((OriginalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableOriginal.EmployeeIDColumn]));
                }
                set {
                    this[this.tableOriginal.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CountryID {
                get {
                    return ((long)(this[this.tableOriginal.CountryIDColumn]));
                }
                set {
                    this[this.tableOriginal.CountryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    return ((string)(this[this.tableOriginal.CountryNameColumn]));
                }
                set {
                    this[this.tableOriginal.CountryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginal.Date_Column]));
                }
                set {
                    this[this.tableOriginal.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginal.StartTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartTime\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.StartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginal.EndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndTime\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.EndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Offset {
                get {
                    try {
                        return ((double)(this[this.tableOriginal.OffsetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Offset\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.OffsetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProjectTime {
                get {
                    return ((double)(this[this.tableOriginal.ProjectTimeColumn]));
                }
                set {
                    this[this.tableOriginal.ProjectTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkingDetails {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.WorkingDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkingDetails\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.WorkingDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MealsCountry {
                get {
                    try {
                        return ((long)(this[this.tableOriginal.MealsCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCountry\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.MealsCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsAllowance {
                get {
                    return ((decimal)(this[this.tableOriginal.MealsAllowanceColumn]));
                }
                set {
                    this[this.tableOriginal.MealsAllowanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedBy {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.ApprovedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedBy\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.ApprovedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectTimeState {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.ProjectTimeStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectTimeState\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.ProjectTimeStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FairWage {
                get {
                    try {
                        return ((bool)(this[this.tableOriginal.FairWageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FairWage\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.FairWageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectTimeID {
                get {
                    try {
                        return ((int)(this[this.tableOriginal.ProjectTimeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectTimeID\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.ProjectTimeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobClassType {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.JobClassTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobClassType\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.JobClassTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobClassProjectTime {
                get {
                    try {
                        return ((string)(this[this.tableOriginal.JobClassProjectTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobClassProjectTime\' in table \'Original\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginal.JobClassProjectTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableOriginal.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableOriginal.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartTimeNull() {
                return this.IsNull(this.tableOriginal.StartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartTimeNull() {
                this[this.tableOriginal.StartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndTimeNull() {
                return this.IsNull(this.tableOriginal.EndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndTimeNull() {
                this[this.tableOriginal.EndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOffsetNull() {
                return this.IsNull(this.tableOriginal.OffsetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOffsetNull() {
                this[this.tableOriginal.OffsetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkingDetailsNull() {
                return this.IsNull(this.tableOriginal.WorkingDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkingDetailsNull() {
                this[this.tableOriginal.WorkingDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableOriginal.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableOriginal.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableOriginal.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableOriginal.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCountryNull() {
                return this.IsNull(this.tableOriginal.MealsCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCountryNull() {
                this[this.tableOriginal.MealsCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableOriginal.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableOriginal.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableOriginal.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableOriginal.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedByNull() {
                return this.IsNull(this.tableOriginal.ApprovedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedByNull() {
                this[this.tableOriginal.ApprovedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectTimeStateNull() {
                return this.IsNull(this.tableOriginal.ProjectTimeStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectTimeStateNull() {
                this[this.tableOriginal.ProjectTimeStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableOriginal.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableOriginal.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableOriginal.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableOriginal.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFairWageNull() {
                return this.IsNull(this.tableOriginal.FairWageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFairWageNull() {
                this[this.tableOriginal.FairWageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectTimeIDNull() {
                return this.IsNull(this.tableOriginal.ProjectTimeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectTimeIDNull() {
                this[this.tableOriginal.ProjectTimeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobClassTypeNull() {
                return this.IsNull(this.tableOriginal.JobClassTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobClassTypeNull() {
                this[this.tableOriginal.JobClassTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableOriginal.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableOriginal.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobClassProjectTimeNull() {
                return this.IsNull(this.tableOriginal.JobClassProjectTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobClassProjectTimeNull() {
                this[this.tableOriginal.JobClassProjectTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintHoursForPayrollPeriodRowChangeEvent : global::System.EventArgs {
            
            private PrintHoursForPayrollPeriodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintHoursForPayrollPeriodRowChangeEvent(PrintHoursForPayrollPeriodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintHoursForPayrollPeriodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalRowChangeEvent : global::System.EventArgs {
            
            private OriginalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRowChangeEvent(OriginalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591