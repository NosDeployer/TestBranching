//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.LabourHours.ProjectTime {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectTimeApproveTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectTimeApproveTDS : global::System.Data.DataSet {
        
        private ProjectTimeApproveDataTable tableProjectTimeApprove;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectTimeApproveTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectTimeApproveTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ProjectTimeApprove"] != null)) {
                    base.Tables.Add(new ProjectTimeApproveDataTable(ds.Tables["ProjectTimeApprove"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectTimeApproveDataTable ProjectTimeApprove {
            get {
                return this.tableProjectTimeApprove;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectTimeApproveTDS cln = ((ProjectTimeApproveTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ProjectTimeApprove"] != null)) {
                    base.Tables.Add(new ProjectTimeApproveDataTable(ds.Tables["ProjectTimeApprove"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProjectTimeApprove = ((ProjectTimeApproveDataTable)(base.Tables["ProjectTimeApprove"]));
            if ((initTable == true)) {
                if ((this.tableProjectTimeApprove != null)) {
                    this.tableProjectTimeApprove.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectTimeApproveTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectTimeApproveTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProjectTimeApprove = new ProjectTimeApproveDataTable();
            base.Tables.Add(this.tableProjectTimeApprove);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectTimeApprove() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectTimeApproveTDS ds = new ProjectTimeApproveTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ProjectTimeApproveRowChangeEventHandler(object sender, ProjectTimeApproveRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectTimeApproveDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectTimeID;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnTeamMember;
            
            private global::System.Data.DataColumn columnClient;
            
            private global::System.Data.DataColumn columnProjectNumber;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnStartTime;
            
            private global::System.Data.DataColumn columnEndTime;
            
            private global::System.Data.DataColumn columnProjectTime;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnCountryID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnJobClass;
            
            private global::System.Data.DataColumn columnTypeOfWork;
            
            private global::System.Data.DataColumn columnFunction_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectTimeApproveDataTable() {
                this.TableName = "ProjectTimeApprove";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectTimeApproveDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectTimeApproveDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTimeIDColumn {
                get {
                    return this.columnProjectTimeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeamMemberColumn {
                get {
                    return this.columnTeamMember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientColumn {
                get {
                    return this.columnClient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNumberColumn {
                get {
                    return this.columnProjectNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTimeColumn {
                get {
                    return this.columnProjectTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobClassColumn {
                get {
                    return this.columnJobClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkColumn {
                get {
                    return this.columnTypeOfWork;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectTimeApproveRow this[int index] {
                get {
                    return ((ProjectTimeApproveRow)(this.Rows[index]));
                }
            }
            
            public event ProjectTimeApproveRowChangeEventHandler ProjectTimeApproveRowChanging;
            
            public event ProjectTimeApproveRowChangeEventHandler ProjectTimeApproveRowChanged;
            
            public event ProjectTimeApproveRowChangeEventHandler ProjectTimeApproveRowDeleting;
            
            public event ProjectTimeApproveRowChangeEventHandler ProjectTimeApproveRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectTimeApproveRow(ProjectTimeApproveRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectTimeApproveRow AddProjectTimeApproveRow(
                        int EmployeeID, 
                        System.DateTime Date, 
                        string TeamMember, 
                        string Client, 
                        string ProjectNumber, 
                        string ProjectName, 
                        System.DateTime StartTime, 
                        System.DateTime EndTime, 
                        double ProjectTime, 
                        string State, 
                        bool Selected, 
                        int CountryID, 
                        int ClientID, 
                        int ProjectID, 
                        bool Deleted, 
                        string JobClass, 
                        string TypeOfWork, 
                        string Function_) {
                ProjectTimeApproveRow rowProjectTimeApproveRow = ((ProjectTimeApproveRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmployeeID,
                        Date,
                        TeamMember,
                        Client,
                        ProjectNumber,
                        ProjectName,
                        StartTime,
                        EndTime,
                        ProjectTime,
                        State,
                        Selected,
                        CountryID,
                        ClientID,
                        ProjectID,
                        Deleted,
                        JobClass,
                        TypeOfWork,
                        Function_};
                rowProjectTimeApproveRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectTimeApproveRow);
                return rowProjectTimeApproveRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectTimeApproveRow FindByProjectTimeID(int ProjectTimeID) {
                return ((ProjectTimeApproveRow)(this.Rows.Find(new object[] {
                            ProjectTimeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectTimeApproveDataTable cln = ((ProjectTimeApproveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectTimeApproveDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectTimeID = base.Columns["ProjectTimeID"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnDate = base.Columns["Date"];
                this.columnTeamMember = base.Columns["TeamMember"];
                this.columnClient = base.Columns["Client"];
                this.columnProjectNumber = base.Columns["ProjectNumber"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnProjectTime = base.Columns["ProjectTime"];
                this.columnState = base.Columns["State"];
                this.columnSelected = base.Columns["Selected"];
                this.columnCountryID = base.Columns["CountryID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnJobClass = base.Columns["JobClass"];
                this.columnTypeOfWork = base.Columns["TypeOfWork"];
                this.columnFunction_ = base.Columns["Function_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectTimeID = new global::System.Data.DataColumn("ProjectTimeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTimeID);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTeamMember = new global::System.Data.DataColumn("TeamMember", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeamMember);
                this.columnClient = new global::System.Data.DataColumn("Client", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClient);
                this.columnProjectNumber = new global::System.Data.DataColumn("ProjectNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectNumber);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnProjectTime = new global::System.Data.DataColumn("ProjectTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTime);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnCountryID = new global::System.Data.DataColumn("CountryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnJobClass = new global::System.Data.DataColumn("JobClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobClass);
                this.columnTypeOfWork = new global::System.Data.DataColumn("TypeOfWork", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWork);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectTimeID}, true));
                this.columnProjectTimeID.AutoIncrement = true;
                this.columnProjectTimeID.AllowDBNull = false;
                this.columnProjectTimeID.ReadOnly = true;
                this.columnProjectTimeID.Unique = true;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnDate.ReadOnly = true;
                this.columnTeamMember.AllowDBNull = false;
                this.columnClient.AllowDBNull = false;
                this.columnProjectNumber.AllowDBNull = false;
                this.columnProjectName.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectTimeApproveRow NewProjectTimeApproveRow() {
                return ((ProjectTimeApproveRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectTimeApproveRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectTimeApproveRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectTimeApproveRowChanged != null)) {
                    this.ProjectTimeApproveRowChanged(this, new ProjectTimeApproveRowChangeEvent(((ProjectTimeApproveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectTimeApproveRowChanging != null)) {
                    this.ProjectTimeApproveRowChanging(this, new ProjectTimeApproveRowChangeEvent(((ProjectTimeApproveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectTimeApproveRowDeleted != null)) {
                    this.ProjectTimeApproveRowDeleted(this, new ProjectTimeApproveRowChangeEvent(((ProjectTimeApproveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectTimeApproveRowDeleting != null)) {
                    this.ProjectTimeApproveRowDeleting(this, new ProjectTimeApproveRowChangeEvent(((ProjectTimeApproveRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectTimeApproveRow(ProjectTimeApproveRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectTimeApproveTDS ds = new ProjectTimeApproveTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectTimeApproveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectTimeApproveRow : global::System.Data.DataRow {
            
            private ProjectTimeApproveDataTable tableProjectTimeApprove;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectTimeApproveRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectTimeApprove = ((ProjectTimeApproveDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectTimeID {
                get {
                    return ((int)(this[this.tableProjectTimeApprove.ProjectTimeIDColumn]));
                }
                set {
                    this[this.tableProjectTimeApprove.ProjectTimeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableProjectTimeApprove.EmployeeIDColumn]));
                }
                set {
                    this[this.tableProjectTimeApprove.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tableProjectTimeApprove.DateColumn]));
                }
                set {
                    this[this.tableProjectTimeApprove.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TeamMember {
                get {
                    return ((string)(this[this.tableProjectTimeApprove.TeamMemberColumn]));
                }
                set {
                    this[this.tableProjectTimeApprove.TeamMemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Client {
                get {
                    return ((string)(this[this.tableProjectTimeApprove.ClientColumn]));
                }
                set {
                    this[this.tableProjectTimeApprove.ClientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectNumber {
                get {
                    return ((string)(this[this.tableProjectTimeApprove.ProjectNumberColumn]));
                }
                set {
                    this[this.tableProjectTimeApprove.ProjectNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableProjectTimeApprove.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjectTimeApprove.StartTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartTime\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.StartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjectTimeApprove.EndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndTime\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.EndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProjectTime {
                get {
                    try {
                        return ((double)(this[this.tableProjectTimeApprove.ProjectTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectTime\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.ProjectTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableProjectTimeApprove.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableProjectTimeApprove.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableProjectTimeApprove.CountryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryID\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.CountryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableProjectTimeApprove.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableProjectTimeApprove.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableProjectTimeApprove.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobClass {
                get {
                    try {
                        return ((string)(this[this.tableProjectTimeApprove.JobClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobClass\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.JobClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeOfWork {
                get {
                    try {
                        return ((string)(this[this.tableProjectTimeApprove.TypeOfWorkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeOfWork\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.TypeOfWorkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableProjectTimeApprove.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'ProjectTimeApprove\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectTimeApprove.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableProjectTimeApprove.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableProjectTimeApprove.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartTimeNull() {
                return this.IsNull(this.tableProjectTimeApprove.StartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartTimeNull() {
                this[this.tableProjectTimeApprove.StartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndTimeNull() {
                return this.IsNull(this.tableProjectTimeApprove.EndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndTimeNull() {
                this[this.tableProjectTimeApprove.EndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectTimeNull() {
                return this.IsNull(this.tableProjectTimeApprove.ProjectTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectTimeNull() {
                this[this.tableProjectTimeApprove.ProjectTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableProjectTimeApprove.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableProjectTimeApprove.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableProjectTimeApprove.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableProjectTimeApprove.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableProjectTimeApprove.CountryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryIDNull() {
                this[this.tableProjectTimeApprove.CountryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableProjectTimeApprove.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableProjectTimeApprove.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableProjectTimeApprove.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableProjectTimeApprove.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableProjectTimeApprove.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableProjectTimeApprove.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobClassNull() {
                return this.IsNull(this.tableProjectTimeApprove.JobClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobClassNull() {
                this[this.tableProjectTimeApprove.JobClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfWorkNull() {
                return this.IsNull(this.tableProjectTimeApprove.TypeOfWorkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfWorkNull() {
                this[this.tableProjectTimeApprove.TypeOfWorkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableProjectTimeApprove.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableProjectTimeApprove.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectTimeApproveRowChangeEvent : global::System.EventArgs {
            
            private ProjectTimeApproveRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectTimeApproveRowChangeEvent(ProjectTimeApproveRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectTimeApproveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591