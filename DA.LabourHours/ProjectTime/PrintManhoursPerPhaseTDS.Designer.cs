//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.LabourHours.ProjectTime {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PrintManhoursPerPhaseTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PrintManhoursPerPhaseTDS : global::System.Data.DataSet {
        
        private PrintManHoursPerPhaseFLLDataTable tablePrintManHoursPerPhaseFLL;
        
        private PrintManHoursPerPhaseMHDataTable tablePrintManHoursPerPhaseMH;
        
        private PrintManHoursPerPhaseRADataTable tablePrintManHoursPerPhaseRA;
        
        private PrintManhoursPerPhaseDataTable tablePrintManhoursPerPhase;
        
        private PrintManHoursPerPhasePLDataTable tablePrintManHoursPerPhasePL;
        
        private printmanhoursperphasejlinstallDataTable tableprintmanhoursperphasejlinstall;
        
        private PrintManhoursPerPhaseJLPrepFromMainDataTable tablePrintManhoursPerPhaseJLPrepFromMain;
        
        private PrintManHoursPerPhaseRAPreFlushDataTable tablePrintManHoursPerPhaseRAPreFlush;
        
        private PrintManHoursPerPhaseRAPreVideoDataTable tablePrintManHoursPerPhaseRAPreVideo;
        
        private PrintManHoursPerPhaseFLLInstallDataTable tablePrintManHoursPerPhaseFLLInstall;
        
        private PrintManHoursPerPhaseFLLPrepMeasureDataTable tablePrintManHoursPerPhaseFLLPrepMeasure;
        
        private PrintManHoursPerPhaseFLLReinstatePostVideoDataTable tablePrintManHoursPerPhaseFLLReinstatePostVideo;
        
        private PrintManHoursPerPhaseMHPrepDataTable tablePrintManHoursPerPhaseMHPrep;
        
        private PrintManHoursPerPhaseMHSprayDataTable tablePrintManHoursPerPhaseMHSpray;
        
        private PrintManHoursPerPhasePLInstallDataTable tablePrintManHoursPerPhasePLInstall;
        
        private PrintManHoursPerPhasePLPrepDataTable tablePrintManHoursPerPhasePLPrep;
        
        private PrintManHoursPerPhasePLReinstateDataTable tablePrintManHoursPerPhasePLReinstate;
        
        private PrintManHoursPerPhaseGeneralDataTable tablePrintManHoursPerPhaseGeneral;
        
        private global::System.Data.DataRelation relationPrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PrintManhoursPerPhaseTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PrintManhoursPerPhaseTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PrintManHoursPerPhaseFLL"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseFLLDataTable(ds.Tables["PrintManHoursPerPhaseFLL"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseMH"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseMHDataTable(ds.Tables["PrintManHoursPerPhaseMH"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseRA"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseRADataTable(ds.Tables["PrintManHoursPerPhaseRA"]));
                }
                if ((ds.Tables["PrintManhoursPerPhase"] != null)) {
                    base.Tables.Add(new PrintManhoursPerPhaseDataTable(ds.Tables["PrintManhoursPerPhase"]));
                }
                if ((ds.Tables["PrintManHoursPerPhasePL"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhasePLDataTable(ds.Tables["PrintManHoursPerPhasePL"]));
                }
                if ((ds.Tables["printmanhoursperphasejlinstall"] != null)) {
                    base.Tables.Add(new printmanhoursperphasejlinstallDataTable(ds.Tables["printmanhoursperphasejlinstall"]));
                }
                if ((ds.Tables["PrintManhoursPerPhaseJLPrepFromMain"] != null)) {
                    base.Tables.Add(new PrintManhoursPerPhaseJLPrepFromMainDataTable(ds.Tables["PrintManhoursPerPhaseJLPrepFromMain"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseRAPreFlush"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseRAPreFlushDataTable(ds.Tables["PrintManHoursPerPhaseRAPreFlush"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseRAPreVideo"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseRAPreVideoDataTable(ds.Tables["PrintManHoursPerPhaseRAPreVideo"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseFLLInstall"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseFLLInstallDataTable(ds.Tables["PrintManHoursPerPhaseFLLInstall"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseFLLPrepMeasure"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseFLLPrepMeasureDataTable(ds.Tables["PrintManHoursPerPhaseFLLPrepMeasure"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseFLLReinstatePostVideo"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseFLLReinstatePostVideoDataTable(ds.Tables["PrintManHoursPerPhaseFLLReinstatePostVideo"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseMHPrep"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseMHPrepDataTable(ds.Tables["PrintManHoursPerPhaseMHPrep"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseMHSpray"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseMHSprayDataTable(ds.Tables["PrintManHoursPerPhaseMHSpray"]));
                }
                if ((ds.Tables["PrintManHoursPerPhasePLInstall"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhasePLInstallDataTable(ds.Tables["PrintManHoursPerPhasePLInstall"]));
                }
                if ((ds.Tables["PrintManHoursPerPhasePLPrep"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhasePLPrepDataTable(ds.Tables["PrintManHoursPerPhasePLPrep"]));
                }
                if ((ds.Tables["PrintManHoursPerPhasePLReinstate"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhasePLReinstateDataTable(ds.Tables["PrintManHoursPerPhasePLReinstate"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseGeneral"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseGeneralDataTable(ds.Tables["PrintManHoursPerPhaseGeneral"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseFLLDataTable PrintManHoursPerPhaseFLL {
            get {
                return this.tablePrintManHoursPerPhaseFLL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseMHDataTable PrintManHoursPerPhaseMH {
            get {
                return this.tablePrintManHoursPerPhaseMH;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseRADataTable PrintManHoursPerPhaseRA {
            get {
                return this.tablePrintManHoursPerPhaseRA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManhoursPerPhaseDataTable PrintManhoursPerPhase {
            get {
                return this.tablePrintManhoursPerPhase;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhasePLDataTable PrintManHoursPerPhasePL {
            get {
                return this.tablePrintManHoursPerPhasePL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public printmanhoursperphasejlinstallDataTable printmanhoursperphasejlinstall {
            get {
                return this.tableprintmanhoursperphasejlinstall;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManhoursPerPhaseJLPrepFromMainDataTable PrintManhoursPerPhaseJLPrepFromMain {
            get {
                return this.tablePrintManhoursPerPhaseJLPrepFromMain;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseRAPreFlushDataTable PrintManHoursPerPhaseRAPreFlush {
            get {
                return this.tablePrintManHoursPerPhaseRAPreFlush;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseRAPreVideoDataTable PrintManHoursPerPhaseRAPreVideo {
            get {
                return this.tablePrintManHoursPerPhaseRAPreVideo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseFLLInstallDataTable PrintManHoursPerPhaseFLLInstall {
            get {
                return this.tablePrintManHoursPerPhaseFLLInstall;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseFLLPrepMeasureDataTable PrintManHoursPerPhaseFLLPrepMeasure {
            get {
                return this.tablePrintManHoursPerPhaseFLLPrepMeasure;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseFLLReinstatePostVideoDataTable PrintManHoursPerPhaseFLLReinstatePostVideo {
            get {
                return this.tablePrintManHoursPerPhaseFLLReinstatePostVideo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseMHPrepDataTable PrintManHoursPerPhaseMHPrep {
            get {
                return this.tablePrintManHoursPerPhaseMHPrep;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseMHSprayDataTable PrintManHoursPerPhaseMHSpray {
            get {
                return this.tablePrintManHoursPerPhaseMHSpray;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhasePLInstallDataTable PrintManHoursPerPhasePLInstall {
            get {
                return this.tablePrintManHoursPerPhasePLInstall;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhasePLPrepDataTable PrintManHoursPerPhasePLPrep {
            get {
                return this.tablePrintManHoursPerPhasePLPrep;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhasePLReinstateDataTable PrintManHoursPerPhasePLReinstate {
            get {
                return this.tablePrintManHoursPerPhasePLReinstate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintManHoursPerPhaseGeneralDataTable PrintManHoursPerPhaseGeneral {
            get {
                return this.tablePrintManHoursPerPhaseGeneral;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PrintManhoursPerPhaseTDS cln = ((PrintManhoursPerPhaseTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PrintManHoursPerPhaseFLL"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseFLLDataTable(ds.Tables["PrintManHoursPerPhaseFLL"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseMH"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseMHDataTable(ds.Tables["PrintManHoursPerPhaseMH"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseRA"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseRADataTable(ds.Tables["PrintManHoursPerPhaseRA"]));
                }
                if ((ds.Tables["PrintManhoursPerPhase"] != null)) {
                    base.Tables.Add(new PrintManhoursPerPhaseDataTable(ds.Tables["PrintManhoursPerPhase"]));
                }
                if ((ds.Tables["PrintManHoursPerPhasePL"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhasePLDataTable(ds.Tables["PrintManHoursPerPhasePL"]));
                }
                if ((ds.Tables["printmanhoursperphasejlinstall"] != null)) {
                    base.Tables.Add(new printmanhoursperphasejlinstallDataTable(ds.Tables["printmanhoursperphasejlinstall"]));
                }
                if ((ds.Tables["PrintManhoursPerPhaseJLPrepFromMain"] != null)) {
                    base.Tables.Add(new PrintManhoursPerPhaseJLPrepFromMainDataTable(ds.Tables["PrintManhoursPerPhaseJLPrepFromMain"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseRAPreFlush"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseRAPreFlushDataTable(ds.Tables["PrintManHoursPerPhaseRAPreFlush"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseRAPreVideo"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseRAPreVideoDataTable(ds.Tables["PrintManHoursPerPhaseRAPreVideo"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseFLLInstall"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseFLLInstallDataTable(ds.Tables["PrintManHoursPerPhaseFLLInstall"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseFLLPrepMeasure"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseFLLPrepMeasureDataTable(ds.Tables["PrintManHoursPerPhaseFLLPrepMeasure"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseFLLReinstatePostVideo"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseFLLReinstatePostVideoDataTable(ds.Tables["PrintManHoursPerPhaseFLLReinstatePostVideo"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseMHPrep"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseMHPrepDataTable(ds.Tables["PrintManHoursPerPhaseMHPrep"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseMHSpray"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseMHSprayDataTable(ds.Tables["PrintManHoursPerPhaseMHSpray"]));
                }
                if ((ds.Tables["PrintManHoursPerPhasePLInstall"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhasePLInstallDataTable(ds.Tables["PrintManHoursPerPhasePLInstall"]));
                }
                if ((ds.Tables["PrintManHoursPerPhasePLPrep"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhasePLPrepDataTable(ds.Tables["PrintManHoursPerPhasePLPrep"]));
                }
                if ((ds.Tables["PrintManHoursPerPhasePLReinstate"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhasePLReinstateDataTable(ds.Tables["PrintManHoursPerPhasePLReinstate"]));
                }
                if ((ds.Tables["PrintManHoursPerPhaseGeneral"] != null)) {
                    base.Tables.Add(new PrintManHoursPerPhaseGeneralDataTable(ds.Tables["PrintManHoursPerPhaseGeneral"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePrintManHoursPerPhaseFLL = ((PrintManHoursPerPhaseFLLDataTable)(base.Tables["PrintManHoursPerPhaseFLL"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseFLL != null)) {
                    this.tablePrintManHoursPerPhaseFLL.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseMH = ((PrintManHoursPerPhaseMHDataTable)(base.Tables["PrintManHoursPerPhaseMH"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseMH != null)) {
                    this.tablePrintManHoursPerPhaseMH.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseRA = ((PrintManHoursPerPhaseRADataTable)(base.Tables["PrintManHoursPerPhaseRA"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseRA != null)) {
                    this.tablePrintManHoursPerPhaseRA.InitVars();
                }
            }
            this.tablePrintManhoursPerPhase = ((PrintManhoursPerPhaseDataTable)(base.Tables["PrintManhoursPerPhase"]));
            if ((initTable == true)) {
                if ((this.tablePrintManhoursPerPhase != null)) {
                    this.tablePrintManhoursPerPhase.InitVars();
                }
            }
            this.tablePrintManHoursPerPhasePL = ((PrintManHoursPerPhasePLDataTable)(base.Tables["PrintManHoursPerPhasePL"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhasePL != null)) {
                    this.tablePrintManHoursPerPhasePL.InitVars();
                }
            }
            this.tableprintmanhoursperphasejlinstall = ((printmanhoursperphasejlinstallDataTable)(base.Tables["printmanhoursperphasejlinstall"]));
            if ((initTable == true)) {
                if ((this.tableprintmanhoursperphasejlinstall != null)) {
                    this.tableprintmanhoursperphasejlinstall.InitVars();
                }
            }
            this.tablePrintManhoursPerPhaseJLPrepFromMain = ((PrintManhoursPerPhaseJLPrepFromMainDataTable)(base.Tables["PrintManhoursPerPhaseJLPrepFromMain"]));
            if ((initTable == true)) {
                if ((this.tablePrintManhoursPerPhaseJLPrepFromMain != null)) {
                    this.tablePrintManhoursPerPhaseJLPrepFromMain.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseRAPreFlush = ((PrintManHoursPerPhaseRAPreFlushDataTable)(base.Tables["PrintManHoursPerPhaseRAPreFlush"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseRAPreFlush != null)) {
                    this.tablePrintManHoursPerPhaseRAPreFlush.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseRAPreVideo = ((PrintManHoursPerPhaseRAPreVideoDataTable)(base.Tables["PrintManHoursPerPhaseRAPreVideo"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseRAPreVideo != null)) {
                    this.tablePrintManHoursPerPhaseRAPreVideo.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseFLLInstall = ((PrintManHoursPerPhaseFLLInstallDataTable)(base.Tables["PrintManHoursPerPhaseFLLInstall"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseFLLInstall != null)) {
                    this.tablePrintManHoursPerPhaseFLLInstall.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseFLLPrepMeasure = ((PrintManHoursPerPhaseFLLPrepMeasureDataTable)(base.Tables["PrintManHoursPerPhaseFLLPrepMeasure"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseFLLPrepMeasure != null)) {
                    this.tablePrintManHoursPerPhaseFLLPrepMeasure.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseFLLReinstatePostVideo = ((PrintManHoursPerPhaseFLLReinstatePostVideoDataTable)(base.Tables["PrintManHoursPerPhaseFLLReinstatePostVideo"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseFLLReinstatePostVideo != null)) {
                    this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseMHPrep = ((PrintManHoursPerPhaseMHPrepDataTable)(base.Tables["PrintManHoursPerPhaseMHPrep"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseMHPrep != null)) {
                    this.tablePrintManHoursPerPhaseMHPrep.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseMHSpray = ((PrintManHoursPerPhaseMHSprayDataTable)(base.Tables["PrintManHoursPerPhaseMHSpray"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseMHSpray != null)) {
                    this.tablePrintManHoursPerPhaseMHSpray.InitVars();
                }
            }
            this.tablePrintManHoursPerPhasePLInstall = ((PrintManHoursPerPhasePLInstallDataTable)(base.Tables["PrintManHoursPerPhasePLInstall"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhasePLInstall != null)) {
                    this.tablePrintManHoursPerPhasePLInstall.InitVars();
                }
            }
            this.tablePrintManHoursPerPhasePLPrep = ((PrintManHoursPerPhasePLPrepDataTable)(base.Tables["PrintManHoursPerPhasePLPrep"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhasePLPrep != null)) {
                    this.tablePrintManHoursPerPhasePLPrep.InitVars();
                }
            }
            this.tablePrintManHoursPerPhasePLReinstate = ((PrintManHoursPerPhasePLReinstateDataTable)(base.Tables["PrintManHoursPerPhasePLReinstate"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhasePLReinstate != null)) {
                    this.tablePrintManHoursPerPhasePLReinstate.InitVars();
                }
            }
            this.tablePrintManHoursPerPhaseGeneral = ((PrintManHoursPerPhaseGeneralDataTable)(base.Tables["PrintManHoursPerPhaseGeneral"]));
            if ((initTable == true)) {
                if ((this.tablePrintManHoursPerPhaseGeneral != null)) {
                    this.tablePrintManHoursPerPhaseGeneral.InitVars();
                }
            }
            this.relationPrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall = this.Relations["PrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PrintManhoursPerPhaseTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PrintManhoursPerPhaseTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePrintManHoursPerPhaseFLL = new PrintManHoursPerPhaseFLLDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseFLL);
            this.tablePrintManHoursPerPhaseMH = new PrintManHoursPerPhaseMHDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseMH);
            this.tablePrintManHoursPerPhaseRA = new PrintManHoursPerPhaseRADataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseRA);
            this.tablePrintManhoursPerPhase = new PrintManhoursPerPhaseDataTable();
            base.Tables.Add(this.tablePrintManhoursPerPhase);
            this.tablePrintManHoursPerPhasePL = new PrintManHoursPerPhasePLDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhasePL);
            this.tableprintmanhoursperphasejlinstall = new printmanhoursperphasejlinstallDataTable();
            base.Tables.Add(this.tableprintmanhoursperphasejlinstall);
            this.tablePrintManhoursPerPhaseJLPrepFromMain = new PrintManhoursPerPhaseJLPrepFromMainDataTable();
            base.Tables.Add(this.tablePrintManhoursPerPhaseJLPrepFromMain);
            this.tablePrintManHoursPerPhaseRAPreFlush = new PrintManHoursPerPhaseRAPreFlushDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseRAPreFlush);
            this.tablePrintManHoursPerPhaseRAPreVideo = new PrintManHoursPerPhaseRAPreVideoDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseRAPreVideo);
            this.tablePrintManHoursPerPhaseFLLInstall = new PrintManHoursPerPhaseFLLInstallDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseFLLInstall);
            this.tablePrintManHoursPerPhaseFLLPrepMeasure = new PrintManHoursPerPhaseFLLPrepMeasureDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseFLLPrepMeasure);
            this.tablePrintManHoursPerPhaseFLLReinstatePostVideo = new PrintManHoursPerPhaseFLLReinstatePostVideoDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo);
            this.tablePrintManHoursPerPhaseMHPrep = new PrintManHoursPerPhaseMHPrepDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseMHPrep);
            this.tablePrintManHoursPerPhaseMHSpray = new PrintManHoursPerPhaseMHSprayDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseMHSpray);
            this.tablePrintManHoursPerPhasePLInstall = new PrintManHoursPerPhasePLInstallDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhasePLInstall);
            this.tablePrintManHoursPerPhasePLPrep = new PrintManHoursPerPhasePLPrepDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhasePLPrep);
            this.tablePrintManHoursPerPhasePLReinstate = new PrintManHoursPerPhasePLReinstateDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhasePLReinstate);
            this.tablePrintManHoursPerPhaseGeneral = new PrintManHoursPerPhaseGeneralDataTable();
            base.Tables.Add(this.tablePrintManHoursPerPhaseGeneral);
            this.relationPrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall = new global::System.Data.DataRelation("PrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall", new global::System.Data.DataColumn[] {
                        this.tablePrintManHoursPerPhaseGeneral.ClientNameColumn,
                        this.tablePrintManHoursPerPhaseGeneral.ProjectNameColumn}, new global::System.Data.DataColumn[] {
                        this.tableprintmanhoursperphasejlinstall.ClientNameColumn,
                        this.tableprintmanhoursperphasejlinstall.ProjectNameColumn}, false);
            this.Relations.Add(this.relationPrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseFLL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseMH() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseRA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManhoursPerPhase() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhasePL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprintmanhoursperphasejlinstall() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManhoursPerPhaseJLPrepFromMain() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseRAPreFlush() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseRAPreVideo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseFLLInstall() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseFLLPrepMeasure() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseFLLReinstatePostVideo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseMHPrep() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseMHSpray() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhasePLInstall() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhasePLPrep() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhasePLReinstate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrintManHoursPerPhaseGeneral() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PrintManHoursPerPhaseFLLRowChangeEventHandler(object sender, PrintManHoursPerPhaseFLLRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseMHRowChangeEventHandler(object sender, PrintManHoursPerPhaseMHRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseRARowChangeEventHandler(object sender, PrintManHoursPerPhaseRARowChangeEvent e);
        
        public delegate void PrintManhoursPerPhaseRowChangeEventHandler(object sender, PrintManhoursPerPhaseRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhasePLRowChangeEventHandler(object sender, PrintManHoursPerPhasePLRowChangeEvent e);
        
        public delegate void printmanhoursperphasejlinstallRowChangeEventHandler(object sender, printmanhoursperphasejlinstallRowChangeEvent e);
        
        public delegate void PrintManhoursPerPhaseJLPrepFromMainRowChangeEventHandler(object sender, PrintManhoursPerPhaseJLPrepFromMainRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseRAPreFlushRowChangeEventHandler(object sender, PrintManHoursPerPhaseRAPreFlushRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseRAPreVideoRowChangeEventHandler(object sender, PrintManHoursPerPhaseRAPreVideoRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseFLLInstallRowChangeEventHandler(object sender, PrintManHoursPerPhaseFLLInstallRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseFLLPrepMeasureRowChangeEventHandler(object sender, PrintManHoursPerPhaseFLLPrepMeasureRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEventHandler(object sender, PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseMHPrepRowChangeEventHandler(object sender, PrintManHoursPerPhaseMHPrepRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseMHSprayRowChangeEventHandler(object sender, PrintManHoursPerPhaseMHSprayRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhasePLInstallRowChangeEventHandler(object sender, PrintManHoursPerPhasePLInstallRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhasePLPrepRowChangeEventHandler(object sender, PrintManHoursPerPhasePLPrepRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhasePLReinstateRowChangeEventHandler(object sender, PrintManHoursPerPhasePLReinstateRowChangeEvent e);
        
        public delegate void PrintManHoursPerPhaseGeneralRowChangeEventHandler(object sender, PrintManHoursPerPhaseGeneralRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseFLLDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLDataTable() {
                this.TableName = "PrintManHoursPerPhaseFLL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseFLLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseFLLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseFLLRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseFLLRowChangeEventHandler PrintManHoursPerPhaseFLLRowChanging;
            
            public event PrintManHoursPerPhaseFLLRowChangeEventHandler PrintManHoursPerPhaseFLLRowChanged;
            
            public event PrintManHoursPerPhaseFLLRowChangeEventHandler PrintManHoursPerPhaseFLLRowDeleting;
            
            public event PrintManHoursPerPhaseFLLRowChangeEventHandler PrintManHoursPerPhaseFLLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseFLLRow(PrintManHoursPerPhaseFLLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLRow AddPrintManHoursPerPhaseFLLRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseFLLRow rowPrintManHoursPerPhaseFLLRow = ((PrintManHoursPerPhaseFLLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseFLLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseFLLRow);
                return rowPrintManHoursPerPhaseFLLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseFLLDataTable cln = ((PrintManHoursPerPhaseFLLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseFLLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLRow NewPrintManHoursPerPhaseFLLRow() {
                return ((PrintManHoursPerPhaseFLLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseFLLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseFLLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseFLLRowChanged != null)) {
                    this.PrintManHoursPerPhaseFLLRowChanged(this, new PrintManHoursPerPhaseFLLRowChangeEvent(((PrintManHoursPerPhaseFLLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseFLLRowChanging != null)) {
                    this.PrintManHoursPerPhaseFLLRowChanging(this, new PrintManHoursPerPhaseFLLRowChangeEvent(((PrintManHoursPerPhaseFLLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseFLLRowDeleted != null)) {
                    this.PrintManHoursPerPhaseFLLRowDeleted(this, new PrintManHoursPerPhaseFLLRowChangeEvent(((PrintManHoursPerPhaseFLLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseFLLRowDeleting != null)) {
                    this.PrintManHoursPerPhaseFLLRowDeleting(this, new PrintManHoursPerPhaseFLLRowChangeEvent(((PrintManHoursPerPhaseFLLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseFLLRow(PrintManHoursPerPhaseFLLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseFLLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseMHDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnMHID;
            
            private global::System.Data.DataColumn columnCrew;
            
            private global::System.Data.DataColumn columnShape;
            
            private global::System.Data.DataColumn columnMaterial;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnRating;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHDataTable() {
                this.TableName = "PrintManHoursPerPhaseMH";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseMHDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseMHDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHIDColumn {
                get {
                    return this.columnMHID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrewColumn {
                get {
                    return this.columnCrew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeColumn {
                get {
                    return this.columnShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialColumn {
                get {
                    return this.columnMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseMHRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseMHRowChangeEventHandler PrintManHoursPerPhaseMHRowChanging;
            
            public event PrintManHoursPerPhaseMHRowChangeEventHandler PrintManHoursPerPhaseMHRowChanged;
            
            public event PrintManHoursPerPhaseMHRowChangeEventHandler PrintManHoursPerPhaseMHRowDeleting;
            
            public event PrintManHoursPerPhaseMHRowChangeEventHandler PrintManHoursPerPhaseMHRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseMHRow(PrintManHoursPerPhaseMHRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHRow AddPrintManHoursPerPhaseMHRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string MHID, 
                        string Crew, 
                        string Shape, 
                        string Material, 
                        string Location, 
                        int Rating, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseMHRow rowPrintManHoursPerPhaseMHRow = ((PrintManHoursPerPhaseMHRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        MHID,
                        Crew,
                        Shape,
                        Material,
                        Location,
                        Rating,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseMHRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseMHRow);
                return rowPrintManHoursPerPhaseMHRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseMHDataTable cln = ((PrintManHoursPerPhaseMHDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseMHDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnMHID = base.Columns["MHID"];
                this.columnCrew = base.Columns["Crew"];
                this.columnShape = base.Columns["Shape"];
                this.columnMaterial = base.Columns["Material"];
                this.columnLocation = base.Columns["Location"];
                this.columnRating = base.Columns["Rating"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnMHID = new global::System.Data.DataColumn("MHID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHID);
                this.columnCrew = new global::System.Data.DataColumn("Crew", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrew);
                this.columnShape = new global::System.Data.DataColumn("Shape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShape);
                this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterial);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnRating = new global::System.Data.DataColumn("Rating", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRating);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHRow NewPrintManHoursPerPhaseMHRow() {
                return ((PrintManHoursPerPhaseMHRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseMHRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseMHRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseMHRowChanged != null)) {
                    this.PrintManHoursPerPhaseMHRowChanged(this, new PrintManHoursPerPhaseMHRowChangeEvent(((PrintManHoursPerPhaseMHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseMHRowChanging != null)) {
                    this.PrintManHoursPerPhaseMHRowChanging(this, new PrintManHoursPerPhaseMHRowChangeEvent(((PrintManHoursPerPhaseMHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseMHRowDeleted != null)) {
                    this.PrintManHoursPerPhaseMHRowDeleted(this, new PrintManHoursPerPhaseMHRowChangeEvent(((PrintManHoursPerPhaseMHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseMHRowDeleting != null)) {
                    this.PrintManHoursPerPhaseMHRowDeleting(this, new PrintManHoursPerPhaseMHRowChangeEvent(((PrintManHoursPerPhaseMHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseMHRow(PrintManHoursPerPhaseMHRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseMHDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseRADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRADataTable() {
                this.TableName = "PrintManHoursPerPhaseRA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseRADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseRADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRARow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseRARow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseRARowChangeEventHandler PrintManHoursPerPhaseRARowChanging;
            
            public event PrintManHoursPerPhaseRARowChangeEventHandler PrintManHoursPerPhaseRARowChanged;
            
            public event PrintManHoursPerPhaseRARowChangeEventHandler PrintManHoursPerPhaseRARowDeleting;
            
            public event PrintManHoursPerPhaseRARowChangeEventHandler PrintManHoursPerPhaseRARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseRARow(PrintManHoursPerPhaseRARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRARow AddPrintManHoursPerPhaseRARow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseRARow rowPrintManHoursPerPhaseRARow = ((PrintManHoursPerPhaseRARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseRARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseRARow);
                return rowPrintManHoursPerPhaseRARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseRADataTable cln = ((PrintManHoursPerPhaseRADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseRADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRARow NewPrintManHoursPerPhaseRARow() {
                return ((PrintManHoursPerPhaseRARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseRARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseRARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseRARowChanged != null)) {
                    this.PrintManHoursPerPhaseRARowChanged(this, new PrintManHoursPerPhaseRARowChangeEvent(((PrintManHoursPerPhaseRARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseRARowChanging != null)) {
                    this.PrintManHoursPerPhaseRARowChanging(this, new PrintManHoursPerPhaseRARowChangeEvent(((PrintManHoursPerPhaseRARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseRARowDeleted != null)) {
                    this.PrintManHoursPerPhaseRARowDeleted(this, new PrintManHoursPerPhaseRARowChangeEvent(((PrintManHoursPerPhaseRARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseRARowDeleting != null)) {
                    this.PrintManHoursPerPhaseRARowDeleting(this, new PrintManHoursPerPhaseRARowChangeEvent(((PrintManHoursPerPhaseRARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseRARow(PrintManHoursPerPhaseRARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseRADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManhoursPerPhaseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDay;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnLiners;
            
            private global::System.Data.DataColumn columnManHours;
            
            private global::System.Data.DataColumn columnLinersMeasured;
            
            private global::System.Data.DataColumn columnLinersPrepped;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnVideoDistance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseDataTable() {
                this.TableName = "PrintManhoursPerPhase";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManhoursPerPhaseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManhoursPerPhaseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayColumn {
                get {
                    return this.columnDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersColumn {
                get {
                    return this.columnLiners;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManHoursColumn {
                get {
                    return this.columnManHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersMeasuredColumn {
                get {
                    return this.columnLinersMeasured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersPreppedColumn {
                get {
                    return this.columnLinersPrepped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDistanceColumn {
                get {
                    return this.columnVideoDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseRow this[int index] {
                get {
                    return ((PrintManhoursPerPhaseRow)(this.Rows[index]));
                }
            }
            
            public event PrintManhoursPerPhaseRowChangeEventHandler PrintManhoursPerPhaseRowChanging;
            
            public event PrintManhoursPerPhaseRowChangeEventHandler PrintManhoursPerPhaseRowChanged;
            
            public event PrintManhoursPerPhaseRowChangeEventHandler PrintManhoursPerPhaseRowDeleting;
            
            public event PrintManhoursPerPhaseRowChangeEventHandler PrintManhoursPerPhaseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManhoursPerPhaseRow(PrintManhoursPerPhaseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseRow AddPrintManhoursPerPhaseRow(string ClientName, string ProjectName, string Day, System.DateTime Date, string Phase, double Hrs, int Liners, double ManHours, int LinersMeasured, int LinersPrepped, double Budget, decimal VideoDistance) {
                PrintManhoursPerPhaseRow rowPrintManhoursPerPhaseRow = ((PrintManhoursPerPhaseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Day,
                        Date,
                        Phase,
                        Hrs,
                        Liners,
                        ManHours,
                        LinersMeasured,
                        LinersPrepped,
                        Budget,
                        VideoDistance};
                rowPrintManhoursPerPhaseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManhoursPerPhaseRow);
                return rowPrintManhoursPerPhaseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManhoursPerPhaseDataTable cln = ((PrintManhoursPerPhaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManhoursPerPhaseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDay = base.Columns["Day"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnLiners = base.Columns["Liners"];
                this.columnManHours = base.Columns["ManHours"];
                this.columnLinersMeasured = base.Columns["LinersMeasured"];
                this.columnLinersPrepped = base.Columns["LinersPrepped"];
                this.columnBudget = base.Columns["Budget"];
                this.columnVideoDistance = base.Columns["VideoDistance"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDay = new global::System.Data.DataColumn("Day", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnLiners = new global::System.Data.DataColumn("Liners", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiners);
                this.columnManHours = new global::System.Data.DataColumn("ManHours", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManHours);
                this.columnLinersMeasured = new global::System.Data.DataColumn("LinersMeasured", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersMeasured);
                this.columnLinersPrepped = new global::System.Data.DataColumn("LinersPrepped", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersPrepped);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnVideoDistance = new global::System.Data.DataColumn("VideoDistance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDistance);
                this.columnClientName.MaxLength = 150;
                this.columnProjectName.MaxLength = 128;
                this.columnDay.MaxLength = 101;
                this.columnDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseRow NewPrintManhoursPerPhaseRow() {
                return ((PrintManhoursPerPhaseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManhoursPerPhaseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManhoursPerPhaseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManhoursPerPhaseRowChanged != null)) {
                    this.PrintManhoursPerPhaseRowChanged(this, new PrintManhoursPerPhaseRowChangeEvent(((PrintManhoursPerPhaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManhoursPerPhaseRowChanging != null)) {
                    this.PrintManhoursPerPhaseRowChanging(this, new PrintManhoursPerPhaseRowChangeEvent(((PrintManhoursPerPhaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManhoursPerPhaseRowDeleted != null)) {
                    this.PrintManhoursPerPhaseRowDeleted(this, new PrintManhoursPerPhaseRowChangeEvent(((PrintManhoursPerPhaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManhoursPerPhaseRowDeleting != null)) {
                    this.PrintManhoursPerPhaseRowDeleting(this, new PrintManhoursPerPhaseRowChangeEvent(((PrintManhoursPerPhaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManhoursPerPhaseRow(PrintManhoursPerPhaseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManhoursPerPhaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhasePLDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            private global::System.Data.DataColumn columnLinersInstalled;
            
            private global::System.Data.DataColumn columnLinersReinstated;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnAssetID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLDataTable() {
                this.TableName = "PrintManHoursPerPhasePL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhasePLDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhasePLDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersInstalledColumn {
                get {
                    return this.columnLinersInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersReinstatedColumn {
                get {
                    return this.columnLinersReinstated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLRow this[int index] {
                get {
                    return ((PrintManHoursPerPhasePLRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhasePLRowChangeEventHandler PrintManHoursPerPhasePLRowChanging;
            
            public event PrintManHoursPerPhasePLRowChangeEventHandler PrintManHoursPerPhasePLRowChanged;
            
            public event PrintManHoursPerPhasePLRowChangeEventHandler PrintManHoursPerPhasePLRowDeleting;
            
            public event PrintManHoursPerPhasePLRowChangeEventHandler PrintManHoursPerPhasePLRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhasePLRow(PrintManHoursPerPhasePLRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLRow AddPrintManHoursPerPhasePLRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod, 
                        int LinersInstalled, 
                        int LinersReinstated, 
                        int ProjectID, 
                        int AssetID) {
                PrintManHoursPerPhasePLRow rowPrintManHoursPerPhasePLRow = ((PrintManHoursPerPhasePLRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod,
                        LinersInstalled,
                        LinersReinstated,
                        ProjectID,
                        AssetID};
                rowPrintManHoursPerPhasePLRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhasePLRow);
                return rowPrintManHoursPerPhasePLRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhasePLDataTable cln = ((PrintManHoursPerPhasePLDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhasePLDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
                this.columnLinersInstalled = base.Columns["LinersInstalled"];
                this.columnLinersReinstated = base.Columns["LinersReinstated"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnAssetID = base.Columns["AssetID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
                this.columnLinersInstalled = new global::System.Data.DataColumn("LinersInstalled", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersInstalled);
                this.columnLinersReinstated = new global::System.Data.DataColumn("LinersReinstated", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersReinstated);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLRow NewPrintManHoursPerPhasePLRow() {
                return ((PrintManHoursPerPhasePLRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhasePLRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhasePLRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhasePLRowChanged != null)) {
                    this.PrintManHoursPerPhasePLRowChanged(this, new PrintManHoursPerPhasePLRowChangeEvent(((PrintManHoursPerPhasePLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhasePLRowChanging != null)) {
                    this.PrintManHoursPerPhasePLRowChanging(this, new PrintManHoursPerPhasePLRowChangeEvent(((PrintManHoursPerPhasePLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhasePLRowDeleted != null)) {
                    this.PrintManHoursPerPhasePLRowDeleted(this, new PrintManHoursPerPhasePLRowChangeEvent(((PrintManHoursPerPhasePLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhasePLRowDeleting != null)) {
                    this.PrintManHoursPerPhasePLRowDeleting(this, new PrintManHoursPerPhasePLRowChangeEvent(((PrintManHoursPerPhasePLRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhasePLRow(PrintManHoursPerPhasePLRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhasePLDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class printmanhoursperphasejlinstallDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDay;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnLiners;
            
            private global::System.Data.DataColumn columnManHours;
            
            private global::System.Data.DataColumn columnLinersMeasured;
            
            private global::System.Data.DataColumn columnLinersPrepped;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public printmanhoursperphasejlinstallDataTable() {
                this.TableName = "printmanhoursperphasejlinstall";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal printmanhoursperphasejlinstallDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected printmanhoursperphasejlinstallDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayColumn {
                get {
                    return this.columnDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersColumn {
                get {
                    return this.columnLiners;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManHoursColumn {
                get {
                    return this.columnManHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersMeasuredColumn {
                get {
                    return this.columnLinersMeasured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersPreppedColumn {
                get {
                    return this.columnLinersPrepped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public printmanhoursperphasejlinstallRow this[int index] {
                get {
                    return ((printmanhoursperphasejlinstallRow)(this.Rows[index]));
                }
            }
            
            public event printmanhoursperphasejlinstallRowChangeEventHandler printmanhoursperphasejlinstallRowChanging;
            
            public event printmanhoursperphasejlinstallRowChangeEventHandler printmanhoursperphasejlinstallRowChanged;
            
            public event printmanhoursperphasejlinstallRowChangeEventHandler printmanhoursperphasejlinstallRowDeleting;
            
            public event printmanhoursperphasejlinstallRowChangeEventHandler printmanhoursperphasejlinstallRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprintmanhoursperphasejlinstallRow(printmanhoursperphasejlinstallRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public printmanhoursperphasejlinstallRow AddprintmanhoursperphasejlinstallRow(string ClientName, string ProjectName, string Day, System.DateTime Date, string Phase, double Hrs, int Liners, double ManHours, int LinersMeasured, int LinersPrepped, double Budget) {
                printmanhoursperphasejlinstallRow rowprintmanhoursperphasejlinstallRow = ((printmanhoursperphasejlinstallRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Day,
                        Date,
                        Phase,
                        Hrs,
                        Liners,
                        ManHours,
                        LinersMeasured,
                        LinersPrepped,
                        Budget};
                rowprintmanhoursperphasejlinstallRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprintmanhoursperphasejlinstallRow);
                return rowprintmanhoursperphasejlinstallRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                printmanhoursperphasejlinstallDataTable cln = ((printmanhoursperphasejlinstallDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new printmanhoursperphasejlinstallDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDay = base.Columns["Day"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnLiners = base.Columns["Liners"];
                this.columnManHours = base.Columns["ManHours"];
                this.columnLinersMeasured = base.Columns["LinersMeasured"];
                this.columnLinersPrepped = base.Columns["LinersPrepped"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDay = new global::System.Data.DataColumn("Day", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnLiners = new global::System.Data.DataColumn("Liners", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiners);
                this.columnManHours = new global::System.Data.DataColumn("ManHours", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManHours);
                this.columnLinersMeasured = new global::System.Data.DataColumn("LinersMeasured", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersMeasured);
                this.columnLinersPrepped = new global::System.Data.DataColumn("LinersPrepped", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersPrepped);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnClientName.MaxLength = 150;
                this.columnProjectName.MaxLength = 128;
                this.columnDay.MaxLength = 101;
                this.columnDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public printmanhoursperphasejlinstallRow NewprintmanhoursperphasejlinstallRow() {
                return ((printmanhoursperphasejlinstallRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new printmanhoursperphasejlinstallRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(printmanhoursperphasejlinstallRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.printmanhoursperphasejlinstallRowChanged != null)) {
                    this.printmanhoursperphasejlinstallRowChanged(this, new printmanhoursperphasejlinstallRowChangeEvent(((printmanhoursperphasejlinstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.printmanhoursperphasejlinstallRowChanging != null)) {
                    this.printmanhoursperphasejlinstallRowChanging(this, new printmanhoursperphasejlinstallRowChangeEvent(((printmanhoursperphasejlinstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.printmanhoursperphasejlinstallRowDeleted != null)) {
                    this.printmanhoursperphasejlinstallRowDeleted(this, new printmanhoursperphasejlinstallRowChangeEvent(((printmanhoursperphasejlinstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.printmanhoursperphasejlinstallRowDeleting != null)) {
                    this.printmanhoursperphasejlinstallRowDeleting(this, new printmanhoursperphasejlinstallRowChangeEvent(((printmanhoursperphasejlinstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprintmanhoursperphasejlinstallRow(printmanhoursperphasejlinstallRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "printmanhoursperphasejlinstallDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManhoursPerPhaseJLPrepFromMainDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDay;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnLiners;
            
            private global::System.Data.DataColumn columnManHours;
            
            private global::System.Data.DataColumn columnLinersMeasured;
            
            private global::System.Data.DataColumn columnLinersPrepped;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseJLPrepFromMainDataTable() {
                this.TableName = "PrintManhoursPerPhaseJLPrepFromMain";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManhoursPerPhaseJLPrepFromMainDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManhoursPerPhaseJLPrepFromMainDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayColumn {
                get {
                    return this.columnDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersColumn {
                get {
                    return this.columnLiners;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManHoursColumn {
                get {
                    return this.columnManHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersMeasuredColumn {
                get {
                    return this.columnLinersMeasured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersPreppedColumn {
                get {
                    return this.columnLinersPrepped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseJLPrepFromMainRow this[int index] {
                get {
                    return ((PrintManhoursPerPhaseJLPrepFromMainRow)(this.Rows[index]));
                }
            }
            
            public event PrintManhoursPerPhaseJLPrepFromMainRowChangeEventHandler PrintManhoursPerPhaseJLPrepFromMainRowChanging;
            
            public event PrintManhoursPerPhaseJLPrepFromMainRowChangeEventHandler PrintManhoursPerPhaseJLPrepFromMainRowChanged;
            
            public event PrintManhoursPerPhaseJLPrepFromMainRowChangeEventHandler PrintManhoursPerPhaseJLPrepFromMainRowDeleting;
            
            public event PrintManhoursPerPhaseJLPrepFromMainRowChangeEventHandler PrintManhoursPerPhaseJLPrepFromMainRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManhoursPerPhaseJLPrepFromMainRow(PrintManhoursPerPhaseJLPrepFromMainRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseJLPrepFromMainRow AddPrintManhoursPerPhaseJLPrepFromMainRow(string ClientName, string ProjectName, string Day, System.DateTime Date, string Phase, double Hrs, int Liners, double ManHours, int LinersMeasured, int LinersPrepped, double Budget) {
                PrintManhoursPerPhaseJLPrepFromMainRow rowPrintManhoursPerPhaseJLPrepFromMainRow = ((PrintManhoursPerPhaseJLPrepFromMainRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Day,
                        Date,
                        Phase,
                        Hrs,
                        Liners,
                        ManHours,
                        LinersMeasured,
                        LinersPrepped,
                        Budget};
                rowPrintManhoursPerPhaseJLPrepFromMainRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManhoursPerPhaseJLPrepFromMainRow);
                return rowPrintManhoursPerPhaseJLPrepFromMainRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManhoursPerPhaseJLPrepFromMainDataTable cln = ((PrintManhoursPerPhaseJLPrepFromMainDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManhoursPerPhaseJLPrepFromMainDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDay = base.Columns["Day"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnLiners = base.Columns["Liners"];
                this.columnManHours = base.Columns["ManHours"];
                this.columnLinersMeasured = base.Columns["LinersMeasured"];
                this.columnLinersPrepped = base.Columns["LinersPrepped"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDay = new global::System.Data.DataColumn("Day", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnLiners = new global::System.Data.DataColumn("Liners", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiners);
                this.columnManHours = new global::System.Data.DataColumn("ManHours", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManHours);
                this.columnLinersMeasured = new global::System.Data.DataColumn("LinersMeasured", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersMeasured);
                this.columnLinersPrepped = new global::System.Data.DataColumn("LinersPrepped", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersPrepped);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnClientName.MaxLength = 150;
                this.columnProjectName.MaxLength = 128;
                this.columnDay.MaxLength = 101;
                this.columnDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseJLPrepFromMainRow NewPrintManhoursPerPhaseJLPrepFromMainRow() {
                return ((PrintManhoursPerPhaseJLPrepFromMainRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManhoursPerPhaseJLPrepFromMainRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManhoursPerPhaseJLPrepFromMainRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManhoursPerPhaseJLPrepFromMainRowChanged != null)) {
                    this.PrintManhoursPerPhaseJLPrepFromMainRowChanged(this, new PrintManhoursPerPhaseJLPrepFromMainRowChangeEvent(((PrintManhoursPerPhaseJLPrepFromMainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManhoursPerPhaseJLPrepFromMainRowChanging != null)) {
                    this.PrintManhoursPerPhaseJLPrepFromMainRowChanging(this, new PrintManhoursPerPhaseJLPrepFromMainRowChangeEvent(((PrintManhoursPerPhaseJLPrepFromMainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManhoursPerPhaseJLPrepFromMainRowDeleted != null)) {
                    this.PrintManhoursPerPhaseJLPrepFromMainRowDeleted(this, new PrintManhoursPerPhaseJLPrepFromMainRowChangeEvent(((PrintManhoursPerPhaseJLPrepFromMainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManhoursPerPhaseJLPrepFromMainRowDeleting != null)) {
                    this.PrintManhoursPerPhaseJLPrepFromMainRowDeleting(this, new PrintManhoursPerPhaseJLPrepFromMainRowChangeEvent(((PrintManhoursPerPhaseJLPrepFromMainRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManhoursPerPhaseJLPrepFromMainRow(PrintManhoursPerPhaseJLPrepFromMainRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManhoursPerPhaseJLPrepFromMainDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseRAPreFlushDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreFlushDataTable() {
                this.TableName = "PrintManHoursPerPhaseRAPreFlush";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseRAPreFlushDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseRAPreFlushDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreFlushRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseRAPreFlushRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseRAPreFlushRowChangeEventHandler PrintManHoursPerPhaseRAPreFlushRowChanging;
            
            public event PrintManHoursPerPhaseRAPreFlushRowChangeEventHandler PrintManHoursPerPhaseRAPreFlushRowChanged;
            
            public event PrintManHoursPerPhaseRAPreFlushRowChangeEventHandler PrintManHoursPerPhaseRAPreFlushRowDeleting;
            
            public event PrintManHoursPerPhaseRAPreFlushRowChangeEventHandler PrintManHoursPerPhaseRAPreFlushRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseRAPreFlushRow(PrintManHoursPerPhaseRAPreFlushRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreFlushRow AddPrintManHoursPerPhaseRAPreFlushRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseRAPreFlushRow rowPrintManHoursPerPhaseRAPreFlushRow = ((PrintManHoursPerPhaseRAPreFlushRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseRAPreFlushRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseRAPreFlushRow);
                return rowPrintManHoursPerPhaseRAPreFlushRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseRAPreFlushDataTable cln = ((PrintManHoursPerPhaseRAPreFlushDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseRAPreFlushDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreFlushRow NewPrintManHoursPerPhaseRAPreFlushRow() {
                return ((PrintManHoursPerPhaseRAPreFlushRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseRAPreFlushRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseRAPreFlushRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseRAPreFlushRowChanged != null)) {
                    this.PrintManHoursPerPhaseRAPreFlushRowChanged(this, new PrintManHoursPerPhaseRAPreFlushRowChangeEvent(((PrintManHoursPerPhaseRAPreFlushRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseRAPreFlushRowChanging != null)) {
                    this.PrintManHoursPerPhaseRAPreFlushRowChanging(this, new PrintManHoursPerPhaseRAPreFlushRowChangeEvent(((PrintManHoursPerPhaseRAPreFlushRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseRAPreFlushRowDeleted != null)) {
                    this.PrintManHoursPerPhaseRAPreFlushRowDeleted(this, new PrintManHoursPerPhaseRAPreFlushRowChangeEvent(((PrintManHoursPerPhaseRAPreFlushRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseRAPreFlushRowDeleting != null)) {
                    this.PrintManHoursPerPhaseRAPreFlushRowDeleting(this, new PrintManHoursPerPhaseRAPreFlushRowChangeEvent(((PrintManHoursPerPhaseRAPreFlushRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseRAPreFlushRow(PrintManHoursPerPhaseRAPreFlushRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseRAPreFlushDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseRAPreVideoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreVideoDataTable() {
                this.TableName = "PrintManHoursPerPhaseRAPreVideo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseRAPreVideoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseRAPreVideoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreVideoRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseRAPreVideoRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseRAPreVideoRowChangeEventHandler PrintManHoursPerPhaseRAPreVideoRowChanging;
            
            public event PrintManHoursPerPhaseRAPreVideoRowChangeEventHandler PrintManHoursPerPhaseRAPreVideoRowChanged;
            
            public event PrintManHoursPerPhaseRAPreVideoRowChangeEventHandler PrintManHoursPerPhaseRAPreVideoRowDeleting;
            
            public event PrintManHoursPerPhaseRAPreVideoRowChangeEventHandler PrintManHoursPerPhaseRAPreVideoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseRAPreVideoRow(PrintManHoursPerPhaseRAPreVideoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreVideoRow AddPrintManHoursPerPhaseRAPreVideoRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseRAPreVideoRow rowPrintManHoursPerPhaseRAPreVideoRow = ((PrintManHoursPerPhaseRAPreVideoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseRAPreVideoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseRAPreVideoRow);
                return rowPrintManHoursPerPhaseRAPreVideoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseRAPreVideoDataTable cln = ((PrintManHoursPerPhaseRAPreVideoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseRAPreVideoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreVideoRow NewPrintManHoursPerPhaseRAPreVideoRow() {
                return ((PrintManHoursPerPhaseRAPreVideoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseRAPreVideoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseRAPreVideoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseRAPreVideoRowChanged != null)) {
                    this.PrintManHoursPerPhaseRAPreVideoRowChanged(this, new PrintManHoursPerPhaseRAPreVideoRowChangeEvent(((PrintManHoursPerPhaseRAPreVideoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseRAPreVideoRowChanging != null)) {
                    this.PrintManHoursPerPhaseRAPreVideoRowChanging(this, new PrintManHoursPerPhaseRAPreVideoRowChangeEvent(((PrintManHoursPerPhaseRAPreVideoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseRAPreVideoRowDeleted != null)) {
                    this.PrintManHoursPerPhaseRAPreVideoRowDeleted(this, new PrintManHoursPerPhaseRAPreVideoRowChangeEvent(((PrintManHoursPerPhaseRAPreVideoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseRAPreVideoRowDeleting != null)) {
                    this.PrintManHoursPerPhaseRAPreVideoRowDeleting(this, new PrintManHoursPerPhaseRAPreVideoRowChangeEvent(((PrintManHoursPerPhaseRAPreVideoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseRAPreVideoRow(PrintManHoursPerPhaseRAPreVideoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseRAPreVideoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseFLLInstallDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLInstallDataTable() {
                this.TableName = "PrintManHoursPerPhaseFLLInstall";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseFLLInstallDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseFLLInstallDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLInstallRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseFLLInstallRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseFLLInstallRowChangeEventHandler PrintManHoursPerPhaseFLLInstallRowChanging;
            
            public event PrintManHoursPerPhaseFLLInstallRowChangeEventHandler PrintManHoursPerPhaseFLLInstallRowChanged;
            
            public event PrintManHoursPerPhaseFLLInstallRowChangeEventHandler PrintManHoursPerPhaseFLLInstallRowDeleting;
            
            public event PrintManHoursPerPhaseFLLInstallRowChangeEventHandler PrintManHoursPerPhaseFLLInstallRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseFLLInstallRow(PrintManHoursPerPhaseFLLInstallRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLInstallRow AddPrintManHoursPerPhaseFLLInstallRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseFLLInstallRow rowPrintManHoursPerPhaseFLLInstallRow = ((PrintManHoursPerPhaseFLLInstallRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseFLLInstallRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseFLLInstallRow);
                return rowPrintManHoursPerPhaseFLLInstallRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseFLLInstallDataTable cln = ((PrintManHoursPerPhaseFLLInstallDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseFLLInstallDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLInstallRow NewPrintManHoursPerPhaseFLLInstallRow() {
                return ((PrintManHoursPerPhaseFLLInstallRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseFLLInstallRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseFLLInstallRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseFLLInstallRowChanged != null)) {
                    this.PrintManHoursPerPhaseFLLInstallRowChanged(this, new PrintManHoursPerPhaseFLLInstallRowChangeEvent(((PrintManHoursPerPhaseFLLInstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseFLLInstallRowChanging != null)) {
                    this.PrintManHoursPerPhaseFLLInstallRowChanging(this, new PrintManHoursPerPhaseFLLInstallRowChangeEvent(((PrintManHoursPerPhaseFLLInstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseFLLInstallRowDeleted != null)) {
                    this.PrintManHoursPerPhaseFLLInstallRowDeleted(this, new PrintManHoursPerPhaseFLLInstallRowChangeEvent(((PrintManHoursPerPhaseFLLInstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseFLLInstallRowDeleting != null)) {
                    this.PrintManHoursPerPhaseFLLInstallRowDeleting(this, new PrintManHoursPerPhaseFLLInstallRowChangeEvent(((PrintManHoursPerPhaseFLLInstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseFLLInstallRow(PrintManHoursPerPhaseFLLInstallRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseFLLInstallDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseFLLPrepMeasureDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLPrepMeasureDataTable() {
                this.TableName = "PrintManHoursPerPhaseFLLPrepMeasure";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseFLLPrepMeasureDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseFLLPrepMeasureDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLPrepMeasureRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseFLLPrepMeasureRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseFLLPrepMeasureRowChangeEventHandler PrintManHoursPerPhaseFLLPrepMeasureRowChanging;
            
            public event PrintManHoursPerPhaseFLLPrepMeasureRowChangeEventHandler PrintManHoursPerPhaseFLLPrepMeasureRowChanged;
            
            public event PrintManHoursPerPhaseFLLPrepMeasureRowChangeEventHandler PrintManHoursPerPhaseFLLPrepMeasureRowDeleting;
            
            public event PrintManHoursPerPhaseFLLPrepMeasureRowChangeEventHandler PrintManHoursPerPhaseFLLPrepMeasureRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseFLLPrepMeasureRow(PrintManHoursPerPhaseFLLPrepMeasureRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLPrepMeasureRow AddPrintManHoursPerPhaseFLLPrepMeasureRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseFLLPrepMeasureRow rowPrintManHoursPerPhaseFLLPrepMeasureRow = ((PrintManHoursPerPhaseFLLPrepMeasureRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseFLLPrepMeasureRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseFLLPrepMeasureRow);
                return rowPrintManHoursPerPhaseFLLPrepMeasureRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseFLLPrepMeasureDataTable cln = ((PrintManHoursPerPhaseFLLPrepMeasureDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseFLLPrepMeasureDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLPrepMeasureRow NewPrintManHoursPerPhaseFLLPrepMeasureRow() {
                return ((PrintManHoursPerPhaseFLLPrepMeasureRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseFLLPrepMeasureRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseFLLPrepMeasureRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseFLLPrepMeasureRowChanged != null)) {
                    this.PrintManHoursPerPhaseFLLPrepMeasureRowChanged(this, new PrintManHoursPerPhaseFLLPrepMeasureRowChangeEvent(((PrintManHoursPerPhaseFLLPrepMeasureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseFLLPrepMeasureRowChanging != null)) {
                    this.PrintManHoursPerPhaseFLLPrepMeasureRowChanging(this, new PrintManHoursPerPhaseFLLPrepMeasureRowChangeEvent(((PrintManHoursPerPhaseFLLPrepMeasureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseFLLPrepMeasureRowDeleted != null)) {
                    this.PrintManHoursPerPhaseFLLPrepMeasureRowDeleted(this, new PrintManHoursPerPhaseFLLPrepMeasureRowChangeEvent(((PrintManHoursPerPhaseFLLPrepMeasureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseFLLPrepMeasureRowDeleting != null)) {
                    this.PrintManHoursPerPhaseFLLPrepMeasureRowDeleting(this, new PrintManHoursPerPhaseFLLPrepMeasureRowChangeEvent(((PrintManHoursPerPhaseFLLPrepMeasureRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseFLLPrepMeasureRow(PrintManHoursPerPhaseFLLPrepMeasureRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseFLLPrepMeasureDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseFLLReinstatePostVideoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLReinstatePostVideoDataTable() {
                this.TableName = "PrintManHoursPerPhaseFLLReinstatePostVideo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseFLLReinstatePostVideoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseFLLReinstatePostVideoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLReinstatePostVideoRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseFLLReinstatePostVideoRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEventHandler PrintManHoursPerPhaseFLLReinstatePostVideoRowChanging;
            
            public event PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEventHandler PrintManHoursPerPhaseFLLReinstatePostVideoRowChanged;
            
            public event PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEventHandler PrintManHoursPerPhaseFLLReinstatePostVideoRowDeleting;
            
            public event PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEventHandler PrintManHoursPerPhaseFLLReinstatePostVideoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseFLLReinstatePostVideoRow(PrintManHoursPerPhaseFLLReinstatePostVideoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLReinstatePostVideoRow AddPrintManHoursPerPhaseFLLReinstatePostVideoRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseFLLReinstatePostVideoRow rowPrintManHoursPerPhaseFLLReinstatePostVideoRow = ((PrintManHoursPerPhaseFLLReinstatePostVideoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseFLLReinstatePostVideoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseFLLReinstatePostVideoRow);
                return rowPrintManHoursPerPhaseFLLReinstatePostVideoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseFLLReinstatePostVideoDataTable cln = ((PrintManHoursPerPhaseFLLReinstatePostVideoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseFLLReinstatePostVideoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLReinstatePostVideoRow NewPrintManHoursPerPhaseFLLReinstatePostVideoRow() {
                return ((PrintManHoursPerPhaseFLLReinstatePostVideoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseFLLReinstatePostVideoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseFLLReinstatePostVideoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseFLLReinstatePostVideoRowChanged != null)) {
                    this.PrintManHoursPerPhaseFLLReinstatePostVideoRowChanged(this, new PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEvent(((PrintManHoursPerPhaseFLLReinstatePostVideoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseFLLReinstatePostVideoRowChanging != null)) {
                    this.PrintManHoursPerPhaseFLLReinstatePostVideoRowChanging(this, new PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEvent(((PrintManHoursPerPhaseFLLReinstatePostVideoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseFLLReinstatePostVideoRowDeleted != null)) {
                    this.PrintManHoursPerPhaseFLLReinstatePostVideoRowDeleted(this, new PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEvent(((PrintManHoursPerPhaseFLLReinstatePostVideoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseFLLReinstatePostVideoRowDeleting != null)) {
                    this.PrintManHoursPerPhaseFLLReinstatePostVideoRowDeleting(this, new PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEvent(((PrintManHoursPerPhaseFLLReinstatePostVideoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseFLLReinstatePostVideoRow(PrintManHoursPerPhaseFLLReinstatePostVideoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseFLLReinstatePostVideoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseMHPrepDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnMHID;
            
            private global::System.Data.DataColumn columnCrew;
            
            private global::System.Data.DataColumn columnShape;
            
            private global::System.Data.DataColumn columnMaterial;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnRating;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHPrepDataTable() {
                this.TableName = "PrintManHoursPerPhaseMHPrep";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseMHPrepDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseMHPrepDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHIDColumn {
                get {
                    return this.columnMHID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrewColumn {
                get {
                    return this.columnCrew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeColumn {
                get {
                    return this.columnShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialColumn {
                get {
                    return this.columnMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHPrepRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseMHPrepRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseMHPrepRowChangeEventHandler PrintManHoursPerPhaseMHPrepRowChanging;
            
            public event PrintManHoursPerPhaseMHPrepRowChangeEventHandler PrintManHoursPerPhaseMHPrepRowChanged;
            
            public event PrintManHoursPerPhaseMHPrepRowChangeEventHandler PrintManHoursPerPhaseMHPrepRowDeleting;
            
            public event PrintManHoursPerPhaseMHPrepRowChangeEventHandler PrintManHoursPerPhaseMHPrepRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseMHPrepRow(PrintManHoursPerPhaseMHPrepRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHPrepRow AddPrintManHoursPerPhaseMHPrepRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string MHID, 
                        string Crew, 
                        string Shape, 
                        string Material, 
                        string Location, 
                        int Rating, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseMHPrepRow rowPrintManHoursPerPhaseMHPrepRow = ((PrintManHoursPerPhaseMHPrepRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        MHID,
                        Crew,
                        Shape,
                        Material,
                        Location,
                        Rating,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseMHPrepRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseMHPrepRow);
                return rowPrintManHoursPerPhaseMHPrepRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseMHPrepDataTable cln = ((PrintManHoursPerPhaseMHPrepDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseMHPrepDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnMHID = base.Columns["MHID"];
                this.columnCrew = base.Columns["Crew"];
                this.columnShape = base.Columns["Shape"];
                this.columnMaterial = base.Columns["Material"];
                this.columnLocation = base.Columns["Location"];
                this.columnRating = base.Columns["Rating"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnMHID = new global::System.Data.DataColumn("MHID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHID);
                this.columnCrew = new global::System.Data.DataColumn("Crew", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrew);
                this.columnShape = new global::System.Data.DataColumn("Shape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShape);
                this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterial);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnRating = new global::System.Data.DataColumn("Rating", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRating);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHPrepRow NewPrintManHoursPerPhaseMHPrepRow() {
                return ((PrintManHoursPerPhaseMHPrepRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseMHPrepRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseMHPrepRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseMHPrepRowChanged != null)) {
                    this.PrintManHoursPerPhaseMHPrepRowChanged(this, new PrintManHoursPerPhaseMHPrepRowChangeEvent(((PrintManHoursPerPhaseMHPrepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseMHPrepRowChanging != null)) {
                    this.PrintManHoursPerPhaseMHPrepRowChanging(this, new PrintManHoursPerPhaseMHPrepRowChangeEvent(((PrintManHoursPerPhaseMHPrepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseMHPrepRowDeleted != null)) {
                    this.PrintManHoursPerPhaseMHPrepRowDeleted(this, new PrintManHoursPerPhaseMHPrepRowChangeEvent(((PrintManHoursPerPhaseMHPrepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseMHPrepRowDeleting != null)) {
                    this.PrintManHoursPerPhaseMHPrepRowDeleting(this, new PrintManHoursPerPhaseMHPrepRowChangeEvent(((PrintManHoursPerPhaseMHPrepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseMHPrepRow(PrintManHoursPerPhaseMHPrepRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseMHPrepDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseMHSprayDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnMHID;
            
            private global::System.Data.DataColumn columnCrew;
            
            private global::System.Data.DataColumn columnShape;
            
            private global::System.Data.DataColumn columnMaterial;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnRating;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHSprayDataTable() {
                this.TableName = "PrintManHoursPerPhaseMHSpray";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseMHSprayDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseMHSprayDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHIDColumn {
                get {
                    return this.columnMHID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CrewColumn {
                get {
                    return this.columnCrew;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShapeColumn {
                get {
                    return this.columnShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialColumn {
                get {
                    return this.columnMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingColumn {
                get {
                    return this.columnRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHSprayRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseMHSprayRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseMHSprayRowChangeEventHandler PrintManHoursPerPhaseMHSprayRowChanging;
            
            public event PrintManHoursPerPhaseMHSprayRowChangeEventHandler PrintManHoursPerPhaseMHSprayRowChanged;
            
            public event PrintManHoursPerPhaseMHSprayRowChangeEventHandler PrintManHoursPerPhaseMHSprayRowDeleting;
            
            public event PrintManHoursPerPhaseMHSprayRowChangeEventHandler PrintManHoursPerPhaseMHSprayRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseMHSprayRow(PrintManHoursPerPhaseMHSprayRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHSprayRow AddPrintManHoursPerPhaseMHSprayRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string MHID, 
                        string Crew, 
                        string Shape, 
                        string Material, 
                        string Location, 
                        int Rating, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod) {
                PrintManHoursPerPhaseMHSprayRow rowPrintManHoursPerPhaseMHSprayRow = ((PrintManHoursPerPhaseMHSprayRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        MHID,
                        Crew,
                        Shape,
                        Material,
                        Location,
                        Rating,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod};
                rowPrintManHoursPerPhaseMHSprayRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseMHSprayRow);
                return rowPrintManHoursPerPhaseMHSprayRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseMHSprayDataTable cln = ((PrintManHoursPerPhaseMHSprayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseMHSprayDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnMHID = base.Columns["MHID"];
                this.columnCrew = base.Columns["Crew"];
                this.columnShape = base.Columns["Shape"];
                this.columnMaterial = base.Columns["Material"];
                this.columnLocation = base.Columns["Location"];
                this.columnRating = base.Columns["Rating"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnMHID = new global::System.Data.DataColumn("MHID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHID);
                this.columnCrew = new global::System.Data.DataColumn("Crew", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrew);
                this.columnShape = new global::System.Data.DataColumn("Shape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShape);
                this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterial);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnRating = new global::System.Data.DataColumn("Rating", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRating);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHSprayRow NewPrintManHoursPerPhaseMHSprayRow() {
                return ((PrintManHoursPerPhaseMHSprayRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseMHSprayRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseMHSprayRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseMHSprayRowChanged != null)) {
                    this.PrintManHoursPerPhaseMHSprayRowChanged(this, new PrintManHoursPerPhaseMHSprayRowChangeEvent(((PrintManHoursPerPhaseMHSprayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseMHSprayRowChanging != null)) {
                    this.PrintManHoursPerPhaseMHSprayRowChanging(this, new PrintManHoursPerPhaseMHSprayRowChangeEvent(((PrintManHoursPerPhaseMHSprayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseMHSprayRowDeleted != null)) {
                    this.PrintManHoursPerPhaseMHSprayRowDeleted(this, new PrintManHoursPerPhaseMHSprayRowChangeEvent(((PrintManHoursPerPhaseMHSprayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseMHSprayRowDeleting != null)) {
                    this.PrintManHoursPerPhaseMHSprayRowDeleting(this, new PrintManHoursPerPhaseMHSprayRowChangeEvent(((PrintManHoursPerPhaseMHSprayRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseMHSprayRow(PrintManHoursPerPhaseMHSprayRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseMHSprayDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhasePLInstallDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            private global::System.Data.DataColumn columnLinersInstalled;
            
            private global::System.Data.DataColumn columnLinersReinstated;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnAssetID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLInstallDataTable() {
                this.TableName = "PrintManHoursPerPhasePLInstall";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhasePLInstallDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhasePLInstallDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersInstalledColumn {
                get {
                    return this.columnLinersInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersReinstatedColumn {
                get {
                    return this.columnLinersReinstated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLInstallRow this[int index] {
                get {
                    return ((PrintManHoursPerPhasePLInstallRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhasePLInstallRowChangeEventHandler PrintManHoursPerPhasePLInstallRowChanging;
            
            public event PrintManHoursPerPhasePLInstallRowChangeEventHandler PrintManHoursPerPhasePLInstallRowChanged;
            
            public event PrintManHoursPerPhasePLInstallRowChangeEventHandler PrintManHoursPerPhasePLInstallRowDeleting;
            
            public event PrintManHoursPerPhasePLInstallRowChangeEventHandler PrintManHoursPerPhasePLInstallRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhasePLInstallRow(PrintManHoursPerPhasePLInstallRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLInstallRow AddPrintManHoursPerPhasePLInstallRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod, 
                        int LinersInstalled, 
                        int LinersReinstated, 
                        int ProjectID, 
                        int AssetID) {
                PrintManHoursPerPhasePLInstallRow rowPrintManHoursPerPhasePLInstallRow = ((PrintManHoursPerPhasePLInstallRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod,
                        LinersInstalled,
                        LinersReinstated,
                        ProjectID,
                        AssetID};
                rowPrintManHoursPerPhasePLInstallRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhasePLInstallRow);
                return rowPrintManHoursPerPhasePLInstallRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhasePLInstallDataTable cln = ((PrintManHoursPerPhasePLInstallDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhasePLInstallDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
                this.columnLinersInstalled = base.Columns["LinersInstalled"];
                this.columnLinersReinstated = base.Columns["LinersReinstated"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnAssetID = base.Columns["AssetID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
                this.columnLinersInstalled = new global::System.Data.DataColumn("LinersInstalled", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersInstalled);
                this.columnLinersReinstated = new global::System.Data.DataColumn("LinersReinstated", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersReinstated);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLInstallRow NewPrintManHoursPerPhasePLInstallRow() {
                return ((PrintManHoursPerPhasePLInstallRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhasePLInstallRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhasePLInstallRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhasePLInstallRowChanged != null)) {
                    this.PrintManHoursPerPhasePLInstallRowChanged(this, new PrintManHoursPerPhasePLInstallRowChangeEvent(((PrintManHoursPerPhasePLInstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhasePLInstallRowChanging != null)) {
                    this.PrintManHoursPerPhasePLInstallRowChanging(this, new PrintManHoursPerPhasePLInstallRowChangeEvent(((PrintManHoursPerPhasePLInstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhasePLInstallRowDeleted != null)) {
                    this.PrintManHoursPerPhasePLInstallRowDeleted(this, new PrintManHoursPerPhasePLInstallRowChangeEvent(((PrintManHoursPerPhasePLInstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhasePLInstallRowDeleting != null)) {
                    this.PrintManHoursPerPhasePLInstallRowDeleting(this, new PrintManHoursPerPhasePLInstallRowChangeEvent(((PrintManHoursPerPhasePLInstallRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhasePLInstallRow(PrintManHoursPerPhasePLInstallRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhasePLInstallDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhasePLPrepDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            private global::System.Data.DataColumn columnLinersInstalled;
            
            private global::System.Data.DataColumn columnLinersReinstated;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnAssetID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLPrepDataTable() {
                this.TableName = "PrintManHoursPerPhasePLPrep";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhasePLPrepDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhasePLPrepDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersInstalledColumn {
                get {
                    return this.columnLinersInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersReinstatedColumn {
                get {
                    return this.columnLinersReinstated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLPrepRow this[int index] {
                get {
                    return ((PrintManHoursPerPhasePLPrepRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhasePLPrepRowChangeEventHandler PrintManHoursPerPhasePLPrepRowChanging;
            
            public event PrintManHoursPerPhasePLPrepRowChangeEventHandler PrintManHoursPerPhasePLPrepRowChanged;
            
            public event PrintManHoursPerPhasePLPrepRowChangeEventHandler PrintManHoursPerPhasePLPrepRowDeleting;
            
            public event PrintManHoursPerPhasePLPrepRowChangeEventHandler PrintManHoursPerPhasePLPrepRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhasePLPrepRow(PrintManHoursPerPhasePLPrepRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLPrepRow AddPrintManHoursPerPhasePLPrepRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod, 
                        int LinersInstalled, 
                        int LinersReinstated, 
                        int ProjectID, 
                        int AssetID) {
                PrintManHoursPerPhasePLPrepRow rowPrintManHoursPerPhasePLPrepRow = ((PrintManHoursPerPhasePLPrepRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod,
                        LinersInstalled,
                        LinersReinstated,
                        ProjectID,
                        AssetID};
                rowPrintManHoursPerPhasePLPrepRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhasePLPrepRow);
                return rowPrintManHoursPerPhasePLPrepRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhasePLPrepDataTable cln = ((PrintManHoursPerPhasePLPrepDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhasePLPrepDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
                this.columnLinersInstalled = base.Columns["LinersInstalled"];
                this.columnLinersReinstated = base.Columns["LinersReinstated"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnAssetID = base.Columns["AssetID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
                this.columnLinersInstalled = new global::System.Data.DataColumn("LinersInstalled", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersInstalled);
                this.columnLinersReinstated = new global::System.Data.DataColumn("LinersReinstated", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersReinstated);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLPrepRow NewPrintManHoursPerPhasePLPrepRow() {
                return ((PrintManHoursPerPhasePLPrepRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhasePLPrepRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhasePLPrepRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhasePLPrepRowChanged != null)) {
                    this.PrintManHoursPerPhasePLPrepRowChanged(this, new PrintManHoursPerPhasePLPrepRowChangeEvent(((PrintManHoursPerPhasePLPrepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhasePLPrepRowChanging != null)) {
                    this.PrintManHoursPerPhasePLPrepRowChanging(this, new PrintManHoursPerPhasePLPrepRowChangeEvent(((PrintManHoursPerPhasePLPrepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhasePLPrepRowDeleted != null)) {
                    this.PrintManHoursPerPhasePLPrepRowDeleted(this, new PrintManHoursPerPhasePLPrepRowChangeEvent(((PrintManHoursPerPhasePLPrepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhasePLPrepRowDeleting != null)) {
                    this.PrintManHoursPerPhasePLPrepRowDeleting(this, new PrintManHoursPerPhasePLPrepRowChangeEvent(((PrintManHoursPerPhasePLPrepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhasePLPrepRow(PrintManHoursPerPhasePLPrepRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhasePLPrepDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhasePLReinstateDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnPhase;
            
            private global::System.Data.DataColumn columnHrs;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnAccessType;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnTotalFt;
            
            private global::System.Data.DataColumn columnRealFt;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnRealLiveLaterals;
            
            private global::System.Data.DataColumn columnCompleted;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnTotalFtDouble;
            
            private global::System.Data.DataColumn columnTotalHrs;
            
            private global::System.Data.DataColumn columnNumPeriods;
            
            private global::System.Data.DataColumn columnAverageRate;
            
            private global::System.Data.DataColumn columnSumFtLateralsByPeriod;
            
            private global::System.Data.DataColumn columnLinersInstalled;
            
            private global::System.Data.DataColumn columnLinersReinstated;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnAssetID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLReinstateDataTable() {
                this.TableName = "PrintManHoursPerPhasePLReinstate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhasePLReinstateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhasePLReinstateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhaseColumn {
                get {
                    return this.columnPhase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HrsColumn {
                get {
                    return this.columnHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccessTypeColumn {
                get {
                    return this.columnAccessType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtColumn {
                get {
                    return this.columnTotalFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealFtColumn {
                get {
                    return this.columnRealFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RealLiveLateralsColumn {
                get {
                    return this.columnRealLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedColumn {
                get {
                    return this.columnCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalFtDoubleColumn {
                get {
                    return this.columnTotalFtDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHrsColumn {
                get {
                    return this.columnTotalHrs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumPeriodsColumn {
                get {
                    return this.columnNumPeriods;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRateColumn {
                get {
                    return this.columnAverageRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumFtLateralsByPeriodColumn {
                get {
                    return this.columnSumFtLateralsByPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersInstalledColumn {
                get {
                    return this.columnLinersInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinersReinstatedColumn {
                get {
                    return this.columnLinersReinstated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLReinstateRow this[int index] {
                get {
                    return ((PrintManHoursPerPhasePLReinstateRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhasePLReinstateRowChangeEventHandler PrintManHoursPerPhasePLReinstateRowChanging;
            
            public event PrintManHoursPerPhasePLReinstateRowChangeEventHandler PrintManHoursPerPhasePLReinstateRowChanged;
            
            public event PrintManHoursPerPhasePLReinstateRowChangeEventHandler PrintManHoursPerPhasePLReinstateRowDeleting;
            
            public event PrintManHoursPerPhasePLReinstateRowChangeEventHandler PrintManHoursPerPhasePLReinstateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhasePLReinstateRow(PrintManHoursPerPhasePLReinstateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLReinstateRow AddPrintManHoursPerPhasePLReinstateRow(
                        string ClientName, 
                        string ProjectName, 
                        System.DateTime Date, 
                        string Phase, 
                        double Hrs, 
                        string FlowOrderID, 
                        string AccessType, 
                        string Size, 
                        string TotalFt, 
                        double RealFt, 
                        double Budget, 
                        int LiveLaterals, 
                        int RealLiveLaterals, 
                        bool Completed, 
                        string SectionID, 
                        double TotalFtDouble, 
                        double TotalHrs, 
                        double NumPeriods, 
                        double AverageRate, 
                        double SumFtLateralsByPeriod, 
                        int LinersInstalled, 
                        int LinersReinstated, 
                        int ProjectID, 
                        int AssetID) {
                PrintManHoursPerPhasePLReinstateRow rowPrintManHoursPerPhasePLReinstateRow = ((PrintManHoursPerPhasePLReinstateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        Date,
                        Phase,
                        Hrs,
                        FlowOrderID,
                        AccessType,
                        Size,
                        TotalFt,
                        RealFt,
                        Budget,
                        LiveLaterals,
                        RealLiveLaterals,
                        Completed,
                        SectionID,
                        TotalFtDouble,
                        TotalHrs,
                        NumPeriods,
                        AverageRate,
                        SumFtLateralsByPeriod,
                        LinersInstalled,
                        LinersReinstated,
                        ProjectID,
                        AssetID};
                rowPrintManHoursPerPhasePLReinstateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhasePLReinstateRow);
                return rowPrintManHoursPerPhasePLReinstateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhasePLReinstateDataTable cln = ((PrintManHoursPerPhasePLReinstateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhasePLReinstateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnDate = base.Columns["Date"];
                this.columnPhase = base.Columns["Phase"];
                this.columnHrs = base.Columns["Hrs"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnAccessType = base.Columns["AccessType"];
                this.columnSize = base.Columns["Size"];
                this.columnTotalFt = base.Columns["TotalFt"];
                this.columnRealFt = base.Columns["RealFt"];
                this.columnBudget = base.Columns["Budget"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnRealLiveLaterals = base.Columns["RealLiveLaterals"];
                this.columnCompleted = base.Columns["Completed"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnTotalFtDouble = base.Columns["TotalFtDouble"];
                this.columnTotalHrs = base.Columns["TotalHrs"];
                this.columnNumPeriods = base.Columns["NumPeriods"];
                this.columnAverageRate = base.Columns["AverageRate"];
                this.columnSumFtLateralsByPeriod = base.Columns["SumFtLateralsByPeriod"];
                this.columnLinersInstalled = base.Columns["LinersInstalled"];
                this.columnLinersReinstated = base.Columns["LinersReinstated"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnAssetID = base.Columns["AssetID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnPhase = new global::System.Data.DataColumn("Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhase);
                this.columnHrs = new global::System.Data.DataColumn("Hrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHrs);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnAccessType = new global::System.Data.DataColumn("AccessType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccessType);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnTotalFt = new global::System.Data.DataColumn("TotalFt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFt);
                this.columnRealFt = new global::System.Data.DataColumn("RealFt", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealFt);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnRealLiveLaterals = new global::System.Data.DataColumn("RealLiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealLiveLaterals);
                this.columnCompleted = new global::System.Data.DataColumn("Completed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleted);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnTotalFtDouble = new global::System.Data.DataColumn("TotalFtDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalFtDouble);
                this.columnTotalHrs = new global::System.Data.DataColumn("TotalHrs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHrs);
                this.columnNumPeriods = new global::System.Data.DataColumn("NumPeriods", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumPeriods);
                this.columnAverageRate = new global::System.Data.DataColumn("AverageRate", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRate);
                this.columnSumFtLateralsByPeriod = new global::System.Data.DataColumn("SumFtLateralsByPeriod", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumFtLateralsByPeriod);
                this.columnLinersInstalled = new global::System.Data.DataColumn("LinersInstalled", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersInstalled);
                this.columnLinersReinstated = new global::System.Data.DataColumn("LinersReinstated", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinersReinstated);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLReinstateRow NewPrintManHoursPerPhasePLReinstateRow() {
                return ((PrintManHoursPerPhasePLReinstateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhasePLReinstateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhasePLReinstateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhasePLReinstateRowChanged != null)) {
                    this.PrintManHoursPerPhasePLReinstateRowChanged(this, new PrintManHoursPerPhasePLReinstateRowChangeEvent(((PrintManHoursPerPhasePLReinstateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhasePLReinstateRowChanging != null)) {
                    this.PrintManHoursPerPhasePLReinstateRowChanging(this, new PrintManHoursPerPhasePLReinstateRowChangeEvent(((PrintManHoursPerPhasePLReinstateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhasePLReinstateRowDeleted != null)) {
                    this.PrintManHoursPerPhasePLReinstateRowDeleted(this, new PrintManHoursPerPhasePLReinstateRowChangeEvent(((PrintManHoursPerPhasePLReinstateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhasePLReinstateRowDeleting != null)) {
                    this.PrintManHoursPerPhasePLReinstateRowDeleting(this, new PrintManHoursPerPhasePLReinstateRowChangeEvent(((PrintManHoursPerPhasePLReinstateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhasePLReinstateRow(PrintManHoursPerPhasePLReinstateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhasePLReinstateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintManHoursPerPhaseGeneralDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnCountryName;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnCountryID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseGeneralDataTable() {
                this.TableName = "PrintManHoursPerPhaseGeneral";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseGeneralDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintManHoursPerPhaseGeneralDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseGeneralRow this[int index] {
                get {
                    return ((PrintManHoursPerPhaseGeneralRow)(this.Rows[index]));
                }
            }
            
            public event PrintManHoursPerPhaseGeneralRowChangeEventHandler PrintManHoursPerPhaseGeneralRowChanging;
            
            public event PrintManHoursPerPhaseGeneralRowChangeEventHandler PrintManHoursPerPhaseGeneralRowChanged;
            
            public event PrintManHoursPerPhaseGeneralRowChangeEventHandler PrintManHoursPerPhaseGeneralRowDeleting;
            
            public event PrintManHoursPerPhaseGeneralRowChangeEventHandler PrintManHoursPerPhaseGeneralRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintManHoursPerPhaseGeneralRow(PrintManHoursPerPhaseGeneralRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseGeneralRow AddPrintManHoursPerPhaseGeneralRow(string ClientName, string ProjectName, string CountryName, int ClientID, int ProjectID, int CountryID) {
                PrintManHoursPerPhaseGeneralRow rowPrintManHoursPerPhaseGeneralRow = ((PrintManHoursPerPhaseGeneralRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientName,
                        ProjectName,
                        CountryName,
                        ClientID,
                        ProjectID,
                        CountryID};
                rowPrintManHoursPerPhaseGeneralRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintManHoursPerPhaseGeneralRow);
                return rowPrintManHoursPerPhaseGeneralRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintManHoursPerPhaseGeneralDataTable cln = ((PrintManHoursPerPhaseGeneralDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintManHoursPerPhaseGeneralDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnCountryID = base.Columns["CountryID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnCountryName = new global::System.Data.DataColumn("CountryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnCountryID = new global::System.Data.DataColumn("CountryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseGeneralRow NewPrintManHoursPerPhaseGeneralRow() {
                return ((PrintManHoursPerPhaseGeneralRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintManHoursPerPhaseGeneralRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintManHoursPerPhaseGeneralRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintManHoursPerPhaseGeneralRowChanged != null)) {
                    this.PrintManHoursPerPhaseGeneralRowChanged(this, new PrintManHoursPerPhaseGeneralRowChangeEvent(((PrintManHoursPerPhaseGeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintManHoursPerPhaseGeneralRowChanging != null)) {
                    this.PrintManHoursPerPhaseGeneralRowChanging(this, new PrintManHoursPerPhaseGeneralRowChangeEvent(((PrintManHoursPerPhaseGeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintManHoursPerPhaseGeneralRowDeleted != null)) {
                    this.PrintManHoursPerPhaseGeneralRowDeleted(this, new PrintManHoursPerPhaseGeneralRowChangeEvent(((PrintManHoursPerPhaseGeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintManHoursPerPhaseGeneralRowDeleting != null)) {
                    this.PrintManHoursPerPhaseGeneralRowDeleting(this, new PrintManHoursPerPhaseGeneralRowChangeEvent(((PrintManHoursPerPhaseGeneralRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintManHoursPerPhaseGeneralRow(PrintManHoursPerPhaseGeneralRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintManhoursPerPhaseTDS ds = new PrintManhoursPerPhaseTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintManHoursPerPhaseGeneralDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseFLLRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseFLLDataTable tablePrintManHoursPerPhaseFLL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseFLLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseFLL = ((PrintManHoursPerPhaseFLLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLL.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLL.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseFLL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseFLL.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLL.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLL.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLL.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhaseFLL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLL.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLL.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLL.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLL.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLL.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseFLL.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseFLL\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseFLL.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseFLL\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseFLL.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLL.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLL.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseFLL\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLL.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLL.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseFLL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLL.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseFLL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLL.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseFLL\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLL.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseFLL.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseFLL.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseFLL.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseFLL.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseFLL.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhaseFLL.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhaseFLL.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhaseFLL.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseFLL.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseFLL.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseFLL.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseFLL.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseFLL.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseFLL.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseFLL.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseFLL.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseFLL.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseFLL.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseFLL.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLL.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseFLL.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseMHRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseMHDataTable tablePrintManHoursPerPhaseMH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseMHRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseMH = ((PrintManHoursPerPhaseMHDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseMH.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMH.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MHID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.MHIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHID\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.MHIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Crew {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.CrewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Crew\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.CrewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shape {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.ShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shape\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.ShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Material {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.MaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Material\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.MaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rating {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseMH.RatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rating\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.RatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMH.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMH.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseMH.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseMH\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseMH.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseMH\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseMH.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMH.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMH.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseMH\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMH.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMH.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMH.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseMH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMH.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseMH\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMH.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseMH.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseMH.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseMH.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseMH.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseMH.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.MHIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHIDNull() {
                this[this.tablePrintManHoursPerPhaseMH.MHIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrewNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.CrewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrewNull() {
                this[this.tablePrintManHoursPerPhaseMH.CrewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.ShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeNull() {
                this[this.tablePrintManHoursPerPhaseMH.ShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.MaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialNull() {
                this[this.tablePrintManHoursPerPhaseMH.MaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tablePrintManHoursPerPhaseMH.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.RatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingNull() {
                this[this.tablePrintManHoursPerPhaseMH.RatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseMH.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseMH.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseMH.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseMH.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseMH.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseMH.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseMH.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseMH.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseMH.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseMH.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseMH.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMH.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseMH.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseRARow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseRADataTable tablePrintManHoursPerPhaseRA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseRARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseRA = ((PrintManHoursPerPhaseRADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRA.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRA.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseRA.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRA.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRA.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRA.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRA.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRA.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRA.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRA.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRA.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseRA.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseRA\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseRA.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseRA\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseRA.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRA.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRA.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseRA\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRA.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRA.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRA.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseRA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRA.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseRA\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRA.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseRA.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseRA.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseRA.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseRA.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseRA.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhaseRA.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhaseRA.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhaseRA.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseRA.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseRA.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseRA.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseRA.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseRA.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseRA.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseRA.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseRA.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseRA.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseRA.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseRA.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRA.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseRA.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManhoursPerPhaseRow : global::System.Data.DataRow {
            
            private PrintManhoursPerPhaseDataTable tablePrintManhoursPerPhase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManhoursPerPhaseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManhoursPerPhase = ((PrintManhoursPerPhaseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManhoursPerPhase.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManhoursPerPhase.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Day {
                get {
                    try {
                        return ((string)(this[this.tablePrintManhoursPerPhase.DayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Day\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tablePrintManhoursPerPhase.DateColumn]));
                }
                set {
                    this[this.tablePrintManhoursPerPhase.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManhoursPerPhase.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManhoursPerPhase.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Liners {
                get {
                    try {
                        return ((int)(this[this.tablePrintManhoursPerPhase.LinersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Liners\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.LinersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ManHours {
                get {
                    try {
                        return ((double)(this[this.tablePrintManhoursPerPhase.ManHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManHours\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.ManHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersMeasured {
                get {
                    try {
                        return ((int)(this[this.tablePrintManhoursPerPhase.LinersMeasuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersMeasured\' in table \'PrintManhoursPerPhase\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.LinersMeasuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersPrepped {
                get {
                    try {
                        return ((int)(this[this.tablePrintManhoursPerPhase.LinersPreppedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersPrepped\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.LinersPreppedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManhoursPerPhase.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VideoDistance {
                get {
                    try {
                        return ((decimal)(this[this.tablePrintManhoursPerPhase.VideoDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDistance\' in table \'PrintManhoursPerPhase\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhase.VideoDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManhoursPerPhase.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManhoursPerPhase.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.DayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayNull() {
                this[this.tablePrintManhoursPerPhase.DayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManhoursPerPhase.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManhoursPerPhase.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.LinersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersNull() {
                this[this.tablePrintManhoursPerPhase.LinersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManHoursNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.ManHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManHoursNull() {
                this[this.tablePrintManhoursPerPhase.ManHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersMeasuredNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.LinersMeasuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersMeasuredNull() {
                this[this.tablePrintManhoursPerPhase.LinersMeasuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersPreppedNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.LinersPreppedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersPreppedNull() {
                this[this.tablePrintManhoursPerPhase.LinersPreppedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManhoursPerPhase.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDistanceNull() {
                return this.IsNull(this.tablePrintManhoursPerPhase.VideoDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDistanceNull() {
                this[this.tablePrintManhoursPerPhase.VideoDistanceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhasePLRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhasePLDataTable tablePrintManHoursPerPhasePL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhasePLRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhasePL = ((PrintManHoursPerPhasePLDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePL.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePL.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhasePL.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePL.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePL.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePL.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePL.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePL.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePL.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePL.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePL.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePL.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhasePL\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePL.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhasePL\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhasePL.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePL.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePL.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhasePL\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePL.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePL.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePL.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePL.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhasePL\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersInstalled {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePL.LinersInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersInstalled\' in table \'PrintManHoursPerPhasePL\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.LinersInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersReinstated {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePL.LinersReinstatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersReinstated\' in table \'PrintManHoursPerPhasePL\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.LinersReinstatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePL.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePL.AssetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetID\' in table \'PrintManHoursPerPhasePL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePL.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhasePL.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhasePL.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhasePL.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhasePL.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhasePL.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhasePL.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhasePL.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhasePL.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhasePL.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhasePL.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhasePL.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhasePL.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhasePL.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhasePL.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhasePL.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhasePL.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhasePL.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhasePL.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhasePL.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhasePL.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersInstalledNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.LinersInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersInstalledNull() {
                this[this.tablePrintManHoursPerPhasePL.LinersInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersReinstatedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.LinersReinstatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersReinstatedNull() {
                this[this.tablePrintManHoursPerPhasePL.LinersReinstatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tablePrintManHoursPerPhasePL.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePL.AssetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetIDNull() {
                this[this.tablePrintManHoursPerPhasePL.AssetIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class printmanhoursperphasejlinstallRow : global::System.Data.DataRow {
            
            private printmanhoursperphasejlinstallDataTable tableprintmanhoursperphasejlinstall;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal printmanhoursperphasejlinstallRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprintmanhoursperphasejlinstall = ((printmanhoursperphasejlinstallDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableprintmanhoursperphasejlinstall.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'printmanhoursperphasejlinstall\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableprintmanhoursperphasejlinstall.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'printmanhoursperphasejlinstall\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Day {
                get {
                    try {
                        return ((string)(this[this.tableprintmanhoursperphasejlinstall.DayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Day\' in table \'printmanhoursperphasejlinstall\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tableprintmanhoursperphasejlinstall.DateColumn]));
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tableprintmanhoursperphasejlinstall.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'printmanhoursperphasejlinstall\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tableprintmanhoursperphasejlinstall.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'printmanhoursperphasejlinstall\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Liners {
                get {
                    try {
                        return ((int)(this[this.tableprintmanhoursperphasejlinstall.LinersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Liners\' in table \'printmanhoursperphasejlinstall\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.LinersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ManHours {
                get {
                    try {
                        return ((double)(this[this.tableprintmanhoursperphasejlinstall.ManHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManHours\' in table \'printmanhoursperphasejlinstall\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.ManHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersMeasured {
                get {
                    try {
                        return ((int)(this[this.tableprintmanhoursperphasejlinstall.LinersMeasuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersMeasured\' in table \'printmanhoursperphasejlinstall\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.LinersMeasuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersPrepped {
                get {
                    try {
                        return ((int)(this[this.tableprintmanhoursperphasejlinstall.LinersPreppedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersPrepped\' in table \'printmanhoursperphasejlinstall\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.LinersPreppedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tableprintmanhoursperphasejlinstall.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'printmanhoursperphasejlinstall\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableprintmanhoursperphasejlinstall.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseGeneralRow PrintManHoursPerPhaseGeneralRowParent {
                get {
                    return ((PrintManHoursPerPhaseGeneralRow)(this.GetParentRow(this.Table.ParentRelations["PrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableprintmanhoursperphasejlinstall.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableprintmanhoursperphasejlinstall.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.DayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayNull() {
                this[this.tableprintmanhoursperphasejlinstall.DayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tableprintmanhoursperphasejlinstall.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tableprintmanhoursperphasejlinstall.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.LinersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersNull() {
                this[this.tableprintmanhoursperphasejlinstall.LinersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManHoursNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.ManHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManHoursNull() {
                this[this.tableprintmanhoursperphasejlinstall.ManHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersMeasuredNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.LinersMeasuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersMeasuredNull() {
                this[this.tableprintmanhoursperphasejlinstall.LinersMeasuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersPreppedNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.LinersPreppedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersPreppedNull() {
                this[this.tableprintmanhoursperphasejlinstall.LinersPreppedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableprintmanhoursperphasejlinstall.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableprintmanhoursperphasejlinstall.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManhoursPerPhaseJLPrepFromMainRow : global::System.Data.DataRow {
            
            private PrintManhoursPerPhaseJLPrepFromMainDataTable tablePrintManhoursPerPhaseJLPrepFromMain;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManhoursPerPhaseJLPrepFromMainRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManhoursPerPhaseJLPrepFromMain = ((PrintManhoursPerPhaseJLPrepFromMainDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManhoursPerPhaseJLPrepFromMain\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManhoursPerPhaseJLPrepFromMain\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Day {
                get {
                    try {
                        return ((string)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.DayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Day\' in table \'PrintManhoursPerPhaseJLPrepFromMain\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.DateColumn]));
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManhoursPerPhaseJLPrepFromMain\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManhoursPerPhaseJLPrepFromMain\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Liners {
                get {
                    try {
                        return ((int)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Liners\' in table \'PrintManhoursPerPhaseJLPrepFromMain\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ManHours {
                get {
                    try {
                        return ((double)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.ManHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManHours\' in table \'PrintManhoursPerPhaseJLPrepFromMain\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.ManHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersMeasured {
                get {
                    try {
                        return ((int)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersMeasuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersMeasured\' in table \'PrintManhoursPerPhaseJLPrepFromMa" +
                                "in\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersMeasuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersPrepped {
                get {
                    try {
                        return ((int)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersPreppedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersPrepped\' in table \'PrintManhoursPerPhaseJLPrepFromMai" +
                                "n\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersPreppedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManhoursPerPhaseJLPrepFromMain.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManhoursPerPhaseJLPrepFromMain\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManhoursPerPhaseJLPrepFromMain.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.DayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.DayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManHoursNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.ManHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManHoursNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.ManHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersMeasuredNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersMeasuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersMeasuredNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersMeasuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersPreppedNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersPreppedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersPreppedNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.LinersPreppedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManhoursPerPhaseJLPrepFromMain.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManhoursPerPhaseJLPrepFromMain.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseRAPreFlushRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseRAPreFlushDataTable tablePrintManHoursPerPhaseRAPreFlush;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseRAPreFlushRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseRAPreFlush = ((PrintManHoursPerPhaseRAPreFlushDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreFlush.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseRAPreFlush\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreFlush.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseRAPreFlush\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseRAPreFlush.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreFlush.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreFlush.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreFlush.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhaseRAPreFlush\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreFlush.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhaseRAPreFlush\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreFlush.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreFlush.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreFlush.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreFlush.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseRAPreFlush.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseRAPreFlush\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseRAPreFlush.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseRAPreFlush" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseRAPreFlush.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreFlush.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreFlush.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseRAPreFlush\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreFlush.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseRAPreFlush\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreFlush.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseRAPreFlush\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreFlush.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseRAPreFlush\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreFlush.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseRAPre" +
                                "Flush\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreFlush.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreFlush.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseRAPreFlush.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseRAPreVideoRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseRAPreVideoDataTable tablePrintManHoursPerPhaseRAPreVideo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseRAPreVideoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseRAPreVideo = ((PrintManHoursPerPhaseRAPreVideoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreVideo.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseRAPreVideo\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreVideo.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseRAPreVideo\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseRAPreVideo.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreVideo.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreVideo.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreVideo.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhaseRAPreVideo\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreVideo.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhaseRAPreVideo\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreVideo.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreVideo.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreVideo.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreVideo.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseRAPreVideo.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseRAPreVideo\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseRAPreVideo.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseRAPreVideo" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseRAPreVideo.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseRAPreVideo.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreVideo.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseRAPreVideo\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreVideo.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseRAPreVideo\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreVideo.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseRAPreVideo\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreVideo.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseRAPreVideo\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseRAPreVideo.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseRAPre" +
                                "Video\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseRAPreVideo.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseRAPreVideo.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseRAPreVideo.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseFLLInstallRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseFLLInstallDataTable tablePrintManHoursPerPhaseFLLInstall;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseFLLInstallRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseFLLInstall = ((PrintManHoursPerPhaseFLLInstallDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLInstall.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseFLLInstall\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLInstall.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseFLLInstall\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseFLLInstall.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseFLLInstall\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLInstall.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseFLLInstall\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLInstall.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseFLLInstall\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLInstall.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhaseFLLInstall\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLInstall.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhaseFLLInstall\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLInstall.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhaseFLLInstall\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLInstall.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseFLLInstall\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLInstall.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseFLLInstall\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLInstall.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseFLLInstall\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseFLLInstall.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseFLLInstall\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseFLLInstall.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseFLLInstall" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseFLLInstall.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseFLLInstall\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLInstall.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseFLLInstall\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLInstall.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseFLLInstall\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLInstall.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseFLLInstall\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLInstall.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseFLLInstall\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLInstall.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseFLLInstall\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLInstall.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseFLLIn" +
                                "stall\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLInstall.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLInstall.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseFLLInstall.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseFLLPrepMeasureRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseFLLPrepMeasureDataTable tablePrintManHoursPerPhaseFLLPrepMeasure;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseFLLPrepMeasureRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseFLLPrepMeasure = ((PrintManHoursPerPhaseFLLPrepMeasureDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseFLLPrepMeasure" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseFLLPrepMea" +
                                "sure\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseFLLPrepMeasur" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseFLLPrepMeasure\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseFLLPr" +
                                "epMeasure\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLPrepMeasure.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseFLLPrepMeasure.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseFLLReinstatePostVideoRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseFLLReinstatePostVideoDataTable tablePrintManHoursPerPhaseFLLReinstatePostVideo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseFLLReinstatePostVideoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseFLLReinstatePostVideo = ((PrintManHoursPerPhaseFLLReinstatePostVideoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseFLLReinstatePost" +
                                "Video\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseFLLReinstatePos" +
                                "tVideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseFLLReinstatePostVideo\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseFLLReinstatePostVideo" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseFLLReinstatePostVideo\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhaseFLLReinstatePos" +
                                "tVideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhaseFLLReinstatePost" +
                                "Video\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhaseFLLReinstatePostVideo\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseFLLReinstatePostVid" +
                                "eo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseFLLReinstatePostVide" +
                                "o\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseFLLReinstatePostVide" +
                                "o\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseFLLReinstatePo" +
                                "stVideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseFLLReinsta" +
                                "tePostVideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseFLLReinstatePostV" +
                                "ideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseFLLReinstatePostV" +
                                "ideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseFLLReinstateP" +
                                "ostVideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseFLLReinstatePostVi" +
                                "deo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseFLLReinstatePost" +
                                "Video\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseFLLReinstatePos" +
                                "tVideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseFLLRe" +
                                "instatePostVideo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseFLLReinstatePostVideo.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseMHPrepRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseMHPrepDataTable tablePrintManHoursPerPhaseMHPrep;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseMHPrepRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseMHPrep = ((PrintManHoursPerPhaseMHPrepDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseMHPrep.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHPrep.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MHID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.MHIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHID\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.MHIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Crew {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.CrewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Crew\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.CrewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shape {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.ShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shape\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.ShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Material {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.MaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Material\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.MaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rating {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseMHPrep.RatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rating\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.RatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHPrep.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHPrep.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseMHPrep.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseMHPrep\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseMHPrep.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseMHPrep\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseMHPrep.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHPrep.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHPrep.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseMHPrep\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHPrep.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHPrep.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHPrep.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseMHPrep\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHPrep.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseMHPre" +
                                "p\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHPrep.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.MHIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHIDNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.MHIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrewNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.CrewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrewNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.CrewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.ShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.ShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.MaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.MaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.RatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.RatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHPrep.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseMHPrep.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseMHSprayRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseMHSprayDataTable tablePrintManHoursPerPhaseMHSpray;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseMHSprayRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseMHSpray = ((PrintManHoursPerPhaseMHSprayDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseMHSpray\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhaseMHSpray.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHSpray.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MHID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.MHIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHID\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.MHIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Crew {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.CrewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Crew\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.CrewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shape {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.ShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shape\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.ShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Material {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.MaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Material\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.MaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Rating {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseMHSpray.RatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rating\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.RatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHSpray.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHSpray.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseMHSpray.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhaseMHSpray\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseMHSpray.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhaseMHSpray\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhaseMHSpray.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseMHSpray.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHSpray.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhaseMHSpray\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHSpray.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHSpray.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhaseMHSpray\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHSpray.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhaseMHSpray\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhaseMHSpray.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhaseMHSpr" +
                                "ay\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseMHSpray.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.MHIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHIDNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.MHIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrewNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.CrewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrewNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.CrewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShapeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.ShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShapeNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.ShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.MaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.MaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.RatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.RatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseMHSpray.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhaseMHSpray.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhasePLInstallRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhasePLInstallDataTable tablePrintManHoursPerPhasePLInstall;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhasePLInstallRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhasePLInstall = ((PrintManHoursPerPhasePLInstallDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLInstall.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhasePLInstall\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLInstall.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhasePLInstall\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhasePLInstall.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhasePLInstall\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLInstall.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhasePLInstall\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLInstall.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhasePLInstall\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLInstall.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhasePLInstall\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLInstall.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhasePLInstall\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLInstall.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhasePLInstall\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLInstall.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhasePLInstall\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLInstall.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhasePLInstall\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLInstall.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhasePLInstall\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLInstall.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhasePLInstall\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLInstall.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhasePLInstall\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhasePLInstall.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhasePLInstall\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLInstall.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhasePLInstall\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLInstall.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhasePLInstall\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLInstall.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhasePLInstall\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLInstall.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhasePLInstall\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLInstall.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhasePLInstall\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLInstall.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhasePLIns" +
                                "tall\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersInstalled {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLInstall.LinersInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersInstalled\' in table \'PrintManHoursPerPhasePLInstall\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.LinersInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersReinstated {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLInstall.LinersReinstatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersReinstated\' in table \'PrintManHoursPerPhasePLInstall\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.LinersReinstatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLInstall.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'PrintManHoursPerPhasePLInstall\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLInstall.AssetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetID\' in table \'PrintManHoursPerPhasePLInstall\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLInstall.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersInstalledNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.LinersInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersInstalledNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.LinersInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersReinstatedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.LinersReinstatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersReinstatedNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.LinersReinstatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLInstall.AssetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetIDNull() {
                this[this.tablePrintManHoursPerPhasePLInstall.AssetIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhasePLPrepRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhasePLPrepDataTable tablePrintManHoursPerPhasePLPrep;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhasePLPrepRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhasePLPrep = ((PrintManHoursPerPhasePLPrepDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLPrep.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhasePLPrep\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLPrep.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhasePLPrep\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhasePLPrep.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLPrep.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLPrep.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLPrep.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhasePLPrep\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLPrep.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhasePLPrep\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLPrep.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLPrep.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLPrep.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLPrep.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLPrep.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhasePLPrep\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLPrep.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhasePLPrep\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhasePLPrep.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLPrep.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLPrep.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhasePLPrep\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLPrep.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLPrep.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhasePLPrep\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLPrep.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhasePLPrep\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLPrep.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhasePLPre" +
                                "p\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersInstalled {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLPrep.LinersInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersInstalled\' in table \'PrintManHoursPerPhasePLPrep\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.LinersInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersReinstated {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLPrep.LinersReinstatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersReinstated\' in table \'PrintManHoursPerPhasePLPrep\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.LinersReinstatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLPrep.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLPrep.AssetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetID\' in table \'PrintManHoursPerPhasePLPrep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLPrep.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersInstalledNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.LinersInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersInstalledNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.LinersInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersReinstatedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.LinersReinstatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersReinstatedNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.LinersReinstatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLPrep.AssetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetIDNull() {
                this[this.tablePrintManHoursPerPhasePLPrep.AssetIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhasePLReinstateRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhasePLReinstateDataTable tablePrintManHoursPerPhasePLReinstate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhasePLReinstateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhasePLReinstate = ((PrintManHoursPerPhasePLReinstateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLReinstate.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhasePLReinstate\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLReinstate.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhasePLReinstate\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrintManHoursPerPhasePLReinstate.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'PrintManHoursPerPhasePLReinstate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phase {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLReinstate.PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phase\' in table \'PrintManHoursPerPhasePLReinstate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLReinstate.HrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hrs\' in table \'PrintManHoursPerPhasePLReinstate\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.HrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLReinstate.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PrintManHoursPerPhasePLReinstate\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccessType {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLReinstate.AccessTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccessType\' in table \'PrintManHoursPerPhasePLReinstate\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.AccessTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLReinstate.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'PrintManHoursPerPhasePLReinstate\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalFt {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLReinstate.TotalFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFt\' in table \'PrintManHoursPerPhasePLReinstate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.TotalFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RealFt {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLReinstate.RealFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealFt\' in table \'PrintManHoursPerPhasePLReinstate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.RealFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Budget {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLReinstate.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'PrintManHoursPerPhasePLReinstate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLReinstate.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'PrintManHoursPerPhasePLReinstate\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RealLiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLReinstate.RealLiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RealLiveLaterals\' in table \'PrintManHoursPerPhasePLReinstat" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.RealLiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Completed {
                get {
                    try {
                        return ((bool)(this[this.tablePrintManHoursPerPhasePLReinstate.CompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Completed\' in table \'PrintManHoursPerPhasePLReinstate\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.CompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhasePLReinstate.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'PrintManHoursPerPhasePLReinstate\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalFtDouble {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLReinstate.TotalFtDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalFtDouble\' in table \'PrintManHoursPerPhasePLReinstate\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.TotalFtDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalHrs {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLReinstate.TotalHrsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHrs\' in table \'PrintManHoursPerPhasePLReinstate\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.TotalHrsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NumPeriods {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLReinstate.NumPeriodsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumPeriods\' in table \'PrintManHoursPerPhasePLReinstate\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.NumPeriodsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRate {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLReinstate.AverageRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRate\' in table \'PrintManHoursPerPhasePLReinstate\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.AverageRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SumFtLateralsByPeriod {
                get {
                    try {
                        return ((double)(this[this.tablePrintManHoursPerPhasePLReinstate.SumFtLateralsByPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumFtLateralsByPeriod\' in table \'PrintManHoursPerPhasePLRei" +
                                "nstate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.SumFtLateralsByPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersInstalled {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLReinstate.LinersInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersInstalled\' in table \'PrintManHoursPerPhasePLReinstate" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.LinersInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LinersReinstated {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLReinstate.LinersReinstatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinersReinstated\' in table \'PrintManHoursPerPhasePLReinstat" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.LinersReinstatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLReinstate.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'PrintManHoursPerPhasePLReinstate\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhasePLReinstate.AssetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetID\' in table \'PrintManHoursPerPhasePLReinstate\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhasePLReinstate.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhaseNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhaseNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.HrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHrsNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.HrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccessTypeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.AccessTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccessTypeNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.AccessTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.TotalFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.TotalFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealFtNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.RealFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealFtNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.RealFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRealLiveLateralsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.RealLiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRealLiveLateralsNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.RealLiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.CompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.CompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalFtDoubleNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.TotalFtDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalFtDoubleNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.TotalFtDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHrsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.TotalHrsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHrsNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.TotalHrsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumPeriodsNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.NumPeriodsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumPeriodsNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.NumPeriodsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRateNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.AverageRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRateNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.AverageRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumFtLateralsByPeriodNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.SumFtLateralsByPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumFtLateralsByPeriodNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.SumFtLateralsByPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersInstalledNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.LinersInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersInstalledNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.LinersInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinersReinstatedNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.LinersReinstatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinersReinstatedNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.LinersReinstatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhasePLReinstate.AssetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetIDNull() {
                this[this.tablePrintManHoursPerPhasePLReinstate.AssetIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintManHoursPerPhaseGeneralRow : global::System.Data.DataRow {
            
            private PrintManHoursPerPhaseGeneralDataTable tablePrintManHoursPerPhaseGeneral;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintManHoursPerPhaseGeneralRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintManHoursPerPhaseGeneral = ((PrintManHoursPerPhaseGeneralDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseGeneral.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'PrintManHoursPerPhaseGeneral\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseGeneral.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseGeneral.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'PrintManHoursPerPhaseGeneral\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseGeneral.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    try {
                        return ((string)(this[this.tablePrintManHoursPerPhaseGeneral.CountryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryName\' in table \'PrintManHoursPerPhaseGeneral\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseGeneral.CountryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseGeneral.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'PrintManHoursPerPhaseGeneral\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseGeneral.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseGeneral.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'PrintManHoursPerPhaseGeneral\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseGeneral.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tablePrintManHoursPerPhaseGeneral.CountryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryID\' in table \'PrintManHoursPerPhaseGeneral\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrintManHoursPerPhaseGeneral.CountryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseGeneral.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tablePrintManHoursPerPhaseGeneral.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseGeneral.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tablePrintManHoursPerPhaseGeneral.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNameNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseGeneral.CountryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNameNull() {
                this[this.tablePrintManHoursPerPhaseGeneral.CountryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseGeneral.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tablePrintManHoursPerPhaseGeneral.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseGeneral.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tablePrintManHoursPerPhaseGeneral.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryIDNull() {
                return this.IsNull(this.tablePrintManHoursPerPhaseGeneral.CountryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryIDNull() {
                this[this.tablePrintManHoursPerPhaseGeneral.CountryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public printmanhoursperphasejlinstallRow[] GetprintmanhoursperphasejlinstallRows() {
                if ((this.Table.ChildRelations["PrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall"] == null)) {
                    return new printmanhoursperphasejlinstallRow[0];
                }
                else {
                    return ((printmanhoursperphasejlinstallRow[])(base.GetChildRows(this.Table.ChildRelations["PrintManHoursPerPhaseGeneral_printmanhoursperphasejlinstall"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseFLLRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseFLLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLRowChangeEvent(PrintManHoursPerPhaseFLLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseMHRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseMHRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHRowChangeEvent(PrintManHoursPerPhaseMHRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseRARowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseRARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRARowChangeEvent(PrintManHoursPerPhaseRARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManhoursPerPhaseRowChangeEvent : global::System.EventArgs {
            
            private PrintManhoursPerPhaseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseRowChangeEvent(PrintManhoursPerPhaseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhasePLRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhasePLRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLRowChangeEvent(PrintManHoursPerPhasePLRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class printmanhoursperphasejlinstallRowChangeEvent : global::System.EventArgs {
            
            private printmanhoursperphasejlinstallRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public printmanhoursperphasejlinstallRowChangeEvent(printmanhoursperphasejlinstallRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public printmanhoursperphasejlinstallRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManhoursPerPhaseJLPrepFromMainRowChangeEvent : global::System.EventArgs {
            
            private PrintManhoursPerPhaseJLPrepFromMainRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseJLPrepFromMainRowChangeEvent(PrintManhoursPerPhaseJLPrepFromMainRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManhoursPerPhaseJLPrepFromMainRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseRAPreFlushRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseRAPreFlushRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreFlushRowChangeEvent(PrintManHoursPerPhaseRAPreFlushRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreFlushRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseRAPreVideoRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseRAPreVideoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreVideoRowChangeEvent(PrintManHoursPerPhaseRAPreVideoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseRAPreVideoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseFLLInstallRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseFLLInstallRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLInstallRowChangeEvent(PrintManHoursPerPhaseFLLInstallRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLInstallRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseFLLPrepMeasureRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseFLLPrepMeasureRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLPrepMeasureRowChangeEvent(PrintManHoursPerPhaseFLLPrepMeasureRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLPrepMeasureRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseFLLReinstatePostVideoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLReinstatePostVideoRowChangeEvent(PrintManHoursPerPhaseFLLReinstatePostVideoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseFLLReinstatePostVideoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseMHPrepRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseMHPrepRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHPrepRowChangeEvent(PrintManHoursPerPhaseMHPrepRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHPrepRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseMHSprayRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseMHSprayRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHSprayRowChangeEvent(PrintManHoursPerPhaseMHSprayRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseMHSprayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhasePLInstallRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhasePLInstallRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLInstallRowChangeEvent(PrintManHoursPerPhasePLInstallRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLInstallRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhasePLPrepRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhasePLPrepRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLPrepRowChangeEvent(PrintManHoursPerPhasePLPrepRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLPrepRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhasePLReinstateRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhasePLReinstateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLReinstateRowChangeEvent(PrintManHoursPerPhasePLReinstateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhasePLReinstateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintManHoursPerPhaseGeneralRowChangeEvent : global::System.EventArgs {
            
            private PrintManHoursPerPhaseGeneralRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseGeneralRowChangeEvent(PrintManHoursPerPhaseGeneralRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintManHoursPerPhaseGeneralRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591