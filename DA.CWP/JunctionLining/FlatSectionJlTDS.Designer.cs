//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.JunctionLining {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FlatSectionJlTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FlatSectionJlTDS : global::System.Data.DataSet {
        
        private FlatSectionJlDataTable tableFlatSectionJl;
        
        private FlatSectionJlCommentDetailsDataTable tableFlatSectionJlCommentDetails;
        
        private FlatSectionJlHistoryDetailsDataTable tableFlatSectionJlHistoryDetails;
        
        private AllCommentsDataTable tableAllComments;
        
        private AllHistoryDataTable tableAllHistory;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FlatSectionJlTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FlatSectionJlTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FlatSectionJl"] != null)) {
                    base.Tables.Add(new FlatSectionJlDataTable(ds.Tables["FlatSectionJl"]));
                }
                if ((ds.Tables["FlatSectionJlCommentDetails"] != null)) {
                    base.Tables.Add(new FlatSectionJlCommentDetailsDataTable(ds.Tables["FlatSectionJlCommentDetails"]));
                }
                if ((ds.Tables["FlatSectionJlHistoryDetails"] != null)) {
                    base.Tables.Add(new FlatSectionJlHistoryDetailsDataTable(ds.Tables["FlatSectionJlHistoryDetails"]));
                }
                if ((ds.Tables["AllComments"] != null)) {
                    base.Tables.Add(new AllCommentsDataTable(ds.Tables["AllComments"]));
                }
                if ((ds.Tables["AllHistory"] != null)) {
                    base.Tables.Add(new AllHistoryDataTable(ds.Tables["AllHistory"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlatSectionJlDataTable FlatSectionJl {
            get {
                return this.tableFlatSectionJl;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlatSectionJlCommentDetailsDataTable FlatSectionJlCommentDetails {
            get {
                return this.tableFlatSectionJlCommentDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlatSectionJlHistoryDetailsDataTable FlatSectionJlHistoryDetails {
            get {
                return this.tableFlatSectionJlHistoryDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AllCommentsDataTable AllComments {
            get {
                return this.tableAllComments;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AllHistoryDataTable AllHistory {
            get {
                return this.tableAllHistory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FlatSectionJlTDS cln = ((FlatSectionJlTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FlatSectionJl"] != null)) {
                    base.Tables.Add(new FlatSectionJlDataTable(ds.Tables["FlatSectionJl"]));
                }
                if ((ds.Tables["FlatSectionJlCommentDetails"] != null)) {
                    base.Tables.Add(new FlatSectionJlCommentDetailsDataTable(ds.Tables["FlatSectionJlCommentDetails"]));
                }
                if ((ds.Tables["FlatSectionJlHistoryDetails"] != null)) {
                    base.Tables.Add(new FlatSectionJlHistoryDetailsDataTable(ds.Tables["FlatSectionJlHistoryDetails"]));
                }
                if ((ds.Tables["AllComments"] != null)) {
                    base.Tables.Add(new AllCommentsDataTable(ds.Tables["AllComments"]));
                }
                if ((ds.Tables["AllHistory"] != null)) {
                    base.Tables.Add(new AllHistoryDataTable(ds.Tables["AllHistory"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFlatSectionJl = ((FlatSectionJlDataTable)(base.Tables["FlatSectionJl"]));
            if ((initTable == true)) {
                if ((this.tableFlatSectionJl != null)) {
                    this.tableFlatSectionJl.InitVars();
                }
            }
            this.tableFlatSectionJlCommentDetails = ((FlatSectionJlCommentDetailsDataTable)(base.Tables["FlatSectionJlCommentDetails"]));
            if ((initTable == true)) {
                if ((this.tableFlatSectionJlCommentDetails != null)) {
                    this.tableFlatSectionJlCommentDetails.InitVars();
                }
            }
            this.tableFlatSectionJlHistoryDetails = ((FlatSectionJlHistoryDetailsDataTable)(base.Tables["FlatSectionJlHistoryDetails"]));
            if ((initTable == true)) {
                if ((this.tableFlatSectionJlHistoryDetails != null)) {
                    this.tableFlatSectionJlHistoryDetails.InitVars();
                }
            }
            this.tableAllComments = ((AllCommentsDataTable)(base.Tables["AllComments"]));
            if ((initTable == true)) {
                if ((this.tableAllComments != null)) {
                    this.tableAllComments.InitVars();
                }
            }
            this.tableAllHistory = ((AllHistoryDataTable)(base.Tables["AllHistory"]));
            if ((initTable == true)) {
                if ((this.tableAllHistory != null)) {
                    this.tableAllHistory.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FlatSectionJlTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FlatSectionJlTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFlatSectionJl = new FlatSectionJlDataTable();
            base.Tables.Add(this.tableFlatSectionJl);
            this.tableFlatSectionJlCommentDetails = new FlatSectionJlCommentDetailsDataTable();
            base.Tables.Add(this.tableFlatSectionJlCommentDetails);
            this.tableFlatSectionJlHistoryDetails = new FlatSectionJlHistoryDetailsDataTable();
            base.Tables.Add(this.tableFlatSectionJlHistoryDetails);
            this.tableAllComments = new AllCommentsDataTable();
            base.Tables.Add(this.tableAllComments);
            this.tableAllHistory = new AllHistoryDataTable();
            base.Tables.Add(this.tableAllHistory);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFlatSectionJl() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFlatSectionJlCommentDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFlatSectionJlHistoryDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAllComments() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAllHistory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FlatSectionJlTDS ds = new FlatSectionJlTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void FlatSectionJlRowChangeEventHandler(object sender, FlatSectionJlRowChangeEvent e);
        
        public delegate void FlatSectionJlCommentDetailsRowChangeEventHandler(object sender, FlatSectionJlCommentDetailsRowChangeEvent e);
        
        public delegate void FlatSectionJlHistoryDetailsRowChangeEventHandler(object sender, FlatSectionJlHistoryDetailsRowChangeEvent e);
        
        public delegate void AllCommentsRowChangeEventHandler(object sender, AllCommentsRowChangeEvent e);
        
        public delegate void AllHistoryRowChangeEventHandler(object sender, AllHistoryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlatSectionJlDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnLateralID;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnSection_;
            
            private global::System.Data.DataColumn columnLateralDescription;
            
            private global::System.Data.DataColumn columnLateralWorkID;
            
            private global::System.Data.DataColumn columnSectionWorkID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnPipeLocated;
            
            private global::System.Data.DataColumn columnServicesLocated;
            
            private global::System.Data.DataColumn columnCoInstalled;
            
            private global::System.Data.DataColumn columnBackfilledConcrete;
            
            private global::System.Data.DataColumn columnBackfilledSoil;
            
            private global::System.Data.DataColumn columnGrouted;
            
            private global::System.Data.DataColumn columnCored;
            
            private global::System.Data.DataColumn columnPrepped;
            
            private global::System.Data.DataColumn columnMeasured;
            
            private global::System.Data.DataColumn columnLinerSize;
            
            private global::System.Data.DataColumn columnInProcess;
            
            private global::System.Data.DataColumn columnInStock;
            
            private global::System.Data.DataColumn columnDelivered;
            
            private global::System.Data.DataColumn columnBuildRebuild;
            
            private global::System.Data.DataColumn columnPreVideo;
            
            private global::System.Data.DataColumn columnLinerInstalled;
            
            private global::System.Data.DataColumn columnFinalVideo;
            
            private global::System.Data.DataColumn columnDistanceFromUSMH;
            
            private global::System.Data.DataColumn columnDistanceFromDSMH;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnVideoInspection;
            
            private global::System.Data.DataColumn columnCoRequired;
            
            private global::System.Data.DataColumn columnPitRequired;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnCoPitLocation;
            
            private global::System.Data.DataColumn columnHistory;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnPostContractDigRequired;
            
            private global::System.Data.DataColumn columnCoCutDown;
            
            private global::System.Data.DataColumn columnFinalRestoration;
            
            private global::System.Data.DataColumn columnUSMHDescription;
            
            private global::System.Data.DataColumn columnDSMHDescription;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnCLientLateralID;
            
            private global::System.Data.DataColumn columnVideoLengthToPropertyLine;
            
            private global::System.Data.DataColumn columnLiningThruCo;
            
            private global::System.Data.DataColumn columnNoticeDelivered;
            
            private global::System.Data.DataColumn columnHamiltonInspectionNumber;
            
            private global::System.Data.DataColumn columnFlange;
            
            private global::System.Data.DataColumn columnGasket;
            
            private global::System.Data.DataColumn columnMainSize;
            
            private global::System.Data.DataColumn columnConnectionType;
            
            private global::System.Data.DataColumn columnDepthOfLocated;
            
            private global::System.Data.DataColumn columnDigRequiredPriorToLiningCompleted;
            
            private global::System.Data.DataColumn columnDigRequiredAfterLiningCompleted;
            
            private global::System.Data.DataColumn columnHoldClientIssueResolved;
            
            private global::System.Data.DataColumn columnHoldLFSIssueResolved;
            
            private global::System.Data.DataColumn columnLateralRequiresRoboticPrepCompleted;
            
            private global::System.Data.DataColumn columnOutOfScope;
            
            private global::System.Data.DataColumn columnDigRequiredPriorToLining;
            
            private global::System.Data.DataColumn columnDigRequiredAfterLining;
            
            private global::System.Data.DataColumn columnHoldClientIssue;
            
            private global::System.Data.DataColumn columnHoldLFSIssue;
            
            private global::System.Data.DataColumn columnLateralRequiresRoboticPrep;
            
            private global::System.Data.DataColumn columnLinerType;
            
            private global::System.Data.DataColumn columnPrepType;
            
            private global::System.Data.DataColumn columnDyeTestReq;
            
            private global::System.Data.DataColumn columnDyeTestComplete;
            
            private global::System.Data.DataColumn columnContractYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlDataTable() {
                this.TableName = "FlatSectionJl";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlatSectionJlDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FlatSectionJlDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralIDColumn {
                get {
                    return this.columnLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Section_Column {
                get {
                    return this.columnSection_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralDescriptionColumn {
                get {
                    return this.columnLateralDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralWorkIDColumn {
                get {
                    return this.columnLateralWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionWorkIDColumn {
                get {
                    return this.columnSectionWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeLocatedColumn {
                get {
                    return this.columnPipeLocated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServicesLocatedColumn {
                get {
                    return this.columnServicesLocated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoInstalledColumn {
                get {
                    return this.columnCoInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledConcreteColumn {
                get {
                    return this.columnBackfilledConcrete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledSoilColumn {
                get {
                    return this.columnBackfilledSoil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroutedColumn {
                get {
                    return this.columnGrouted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoredColumn {
                get {
                    return this.columnCored;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreppedColumn {
                get {
                    return this.columnPrepped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasuredColumn {
                get {
                    return this.columnMeasured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerSizeColumn {
                get {
                    return this.columnLinerSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProcessColumn {
                get {
                    return this.columnInProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InStockColumn {
                get {
                    return this.columnInStock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveredColumn {
                get {
                    return this.columnDelivered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildRebuildColumn {
                get {
                    return this.columnBuildRebuild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreVideoColumn {
                get {
                    return this.columnPreVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInstalledColumn {
                get {
                    return this.columnLinerInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalVideoColumn {
                get {
                    return this.columnFinalVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromUSMHColumn {
                get {
                    return this.columnDistanceFromUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromDSMHColumn {
                get {
                    return this.columnDistanceFromDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoInspectionColumn {
                get {
                    return this.columnVideoInspection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoRequiredColumn {
                get {
                    return this.columnCoRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PitRequiredColumn {
                get {
                    return this.columnPitRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoPitLocationColumn {
                get {
                    return this.columnCoPitLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HistoryColumn {
                get {
                    return this.columnHistory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostContractDigRequiredColumn {
                get {
                    return this.columnPostContractDigRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoCutDownColumn {
                get {
                    return this.columnCoCutDown;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalRestorationColumn {
                get {
                    return this.columnFinalRestoration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHDescriptionColumn {
                get {
                    return this.columnUSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHDescriptionColumn {
                get {
                    return this.columnDSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLientLateralIDColumn {
                get {
                    return this.columnCLientLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoLengthToPropertyLineColumn {
                get {
                    return this.columnVideoLengthToPropertyLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiningThruCoColumn {
                get {
                    return this.columnLiningThruCo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoticeDeliveredColumn {
                get {
                    return this.columnNoticeDelivered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HamiltonInspectionNumberColumn {
                get {
                    return this.columnHamiltonInspectionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlangeColumn {
                get {
                    return this.columnFlange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GasketColumn {
                get {
                    return this.columnGasket;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainSizeColumn {
                get {
                    return this.columnMainSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionTypeColumn {
                get {
                    return this.columnConnectionType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepthOfLocatedColumn {
                get {
                    return this.columnDepthOfLocated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigRequiredPriorToLiningCompletedColumn {
                get {
                    return this.columnDigRequiredPriorToLiningCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigRequiredAfterLiningCompletedColumn {
                get {
                    return this.columnDigRequiredAfterLiningCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldClientIssueResolvedColumn {
                get {
                    return this.columnHoldClientIssueResolved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldLFSIssueResolvedColumn {
                get {
                    return this.columnHoldLFSIssueResolved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralRequiresRoboticPrepCompletedColumn {
                get {
                    return this.columnLateralRequiresRoboticPrepCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutOfScopeColumn {
                get {
                    return this.columnOutOfScope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigRequiredPriorToLiningColumn {
                get {
                    return this.columnDigRequiredPriorToLining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigRequiredAfterLiningColumn {
                get {
                    return this.columnDigRequiredAfterLining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldClientIssueColumn {
                get {
                    return this.columnHoldClientIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldLFSIssueColumn {
                get {
                    return this.columnHoldLFSIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralRequiresRoboticPrepColumn {
                get {
                    return this.columnLateralRequiresRoboticPrep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerTypeColumn {
                get {
                    return this.columnLinerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrepTypeColumn {
                get {
                    return this.columnPrepType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DyeTestReqColumn {
                get {
                    return this.columnDyeTestReq;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DyeTestCompleteColumn {
                get {
                    return this.columnDyeTestComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContractYearColumn {
                get {
                    return this.columnContractYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlRow this[int index] {
                get {
                    return ((FlatSectionJlRow)(this.Rows[index]));
                }
            }
            
            public event FlatSectionJlRowChangeEventHandler FlatSectionJlRowChanging;
            
            public event FlatSectionJlRowChangeEventHandler FlatSectionJlRowChanged;
            
            public event FlatSectionJlRowChangeEventHandler FlatSectionJlRowDeleting;
            
            public event FlatSectionJlRowChangeEventHandler FlatSectionJlRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFlatSectionJlRow(FlatSectionJlRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlRow AddFlatSectionJlRow(
                        int WorkID, 
                        int AssetID, 
                        string LateralID, 
                        string SectionID, 
                        int Section_, 
                        string LateralDescription, 
                        int LateralWorkID, 
                        int SectionWorkID, 
                        int COMPANY_ID, 
                        string Street, 
                        string Address, 
                        System.DateTime PipeLocated, 
                        System.DateTime ServicesLocated, 
                        System.DateTime CoInstalled, 
                        System.DateTime BackfilledConcrete, 
                        System.DateTime BackfilledSoil, 
                        System.DateTime Grouted, 
                        System.DateTime Cored, 
                        System.DateTime Prepped, 
                        System.DateTime Measured, 
                        string LinerSize, 
                        System.DateTime InProcess, 
                        System.DateTime InStock, 
                        System.DateTime Delivered, 
                        int BuildRebuild, 
                        System.DateTime PreVideo, 
                        System.DateTime LinerInstalled, 
                        System.DateTime FinalVideo, 
                        string DistanceFromUSMH, 
                        string DistanceFromDSMH, 
                        decimal Cost, 
                        bool Deleted, 
                        bool Selected, 
                        System.DateTime VideoInspection, 
                        bool CoRequired, 
                        bool PitRequired, 
                        int USMH, 
                        int DSMH, 
                        string CoPitLocation, 
                        string History, 
                        string Comments, 
                        bool PostContractDigRequired, 
                        System.DateTime CoCutDown, 
                        System.DateTime FinalRestoration, 
                        string USMHDescription, 
                        string DSMHDescription, 
                        string FlowOrderID, 
                        string CLientLateralID, 
                        string VideoLengthToPropertyLine, 
                        bool LiningThruCo, 
                        System.DateTime NoticeDelivered, 
                        string HamiltonInspectionNumber, 
                        string Flange, 
                        string Gasket, 
                        string MainSize, 
                        string ConnectionType, 
                        string DepthOfLocated, 
                        System.DateTime DigRequiredPriorToLiningCompleted, 
                        System.DateTime DigRequiredAfterLiningCompleted, 
                        System.DateTime HoldClientIssueResolved, 
                        System.DateTime HoldLFSIssueResolved, 
                        System.DateTime LateralRequiresRoboticPrepCompleted, 
                        bool OutOfScope, 
                        bool DigRequiredPriorToLining, 
                        bool DigRequiredAfterLining, 
                        bool HoldClientIssue, 
                        bool HoldLFSIssue, 
                        bool LateralRequiresRoboticPrep, 
                        string LinerType, 
                        string PrepType, 
                        bool DyeTestReq, 
                        System.DateTime DyeTestComplete, 
                        string ContractYear) {
                FlatSectionJlRow rowFlatSectionJlRow = ((FlatSectionJlRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        AssetID,
                        LateralID,
                        SectionID,
                        Section_,
                        LateralDescription,
                        LateralWorkID,
                        SectionWorkID,
                        COMPANY_ID,
                        Street,
                        Address,
                        PipeLocated,
                        ServicesLocated,
                        CoInstalled,
                        BackfilledConcrete,
                        BackfilledSoil,
                        Grouted,
                        Cored,
                        Prepped,
                        Measured,
                        LinerSize,
                        InProcess,
                        InStock,
                        Delivered,
                        BuildRebuild,
                        PreVideo,
                        LinerInstalled,
                        FinalVideo,
                        DistanceFromUSMH,
                        DistanceFromDSMH,
                        Cost,
                        Deleted,
                        Selected,
                        VideoInspection,
                        CoRequired,
                        PitRequired,
                        USMH,
                        DSMH,
                        CoPitLocation,
                        History,
                        Comments,
                        PostContractDigRequired,
                        CoCutDown,
                        FinalRestoration,
                        USMHDescription,
                        DSMHDescription,
                        FlowOrderID,
                        CLientLateralID,
                        VideoLengthToPropertyLine,
                        LiningThruCo,
                        NoticeDelivered,
                        HamiltonInspectionNumber,
                        Flange,
                        Gasket,
                        MainSize,
                        ConnectionType,
                        DepthOfLocated,
                        DigRequiredPriorToLiningCompleted,
                        DigRequiredAfterLiningCompleted,
                        HoldClientIssueResolved,
                        HoldLFSIssueResolved,
                        LateralRequiresRoboticPrepCompleted,
                        OutOfScope,
                        DigRequiredPriorToLining,
                        DigRequiredAfterLining,
                        HoldClientIssue,
                        HoldLFSIssue,
                        LateralRequiresRoboticPrep,
                        LinerType,
                        PrepType,
                        DyeTestReq,
                        DyeTestComplete,
                        ContractYear};
                rowFlatSectionJlRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFlatSectionJlRow);
                return rowFlatSectionJlRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlRow FindByWorkID(int WorkID) {
                return ((FlatSectionJlRow)(this.Rows.Find(new object[] {
                            WorkID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FlatSectionJlDataTable cln = ((FlatSectionJlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FlatSectionJlDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnAssetID = base.Columns["AssetID"];
                this.columnLateralID = base.Columns["LateralID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnSection_ = base.Columns["Section_"];
                this.columnLateralDescription = base.Columns["LateralDescription"];
                this.columnLateralWorkID = base.Columns["LateralWorkID"];
                this.columnSectionWorkID = base.Columns["SectionWorkID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStreet = base.Columns["Street"];
                this.columnAddress = base.Columns["Address"];
                this.columnPipeLocated = base.Columns["PipeLocated"];
                this.columnServicesLocated = base.Columns["ServicesLocated"];
                this.columnCoInstalled = base.Columns["CoInstalled"];
                this.columnBackfilledConcrete = base.Columns["BackfilledConcrete"];
                this.columnBackfilledSoil = base.Columns["BackfilledSoil"];
                this.columnGrouted = base.Columns["Grouted"];
                this.columnCored = base.Columns["Cored"];
                this.columnPrepped = base.Columns["Prepped"];
                this.columnMeasured = base.Columns["Measured"];
                this.columnLinerSize = base.Columns["LinerSize"];
                this.columnInProcess = base.Columns["InProcess"];
                this.columnInStock = base.Columns["InStock"];
                this.columnDelivered = base.Columns["Delivered"];
                this.columnBuildRebuild = base.Columns["BuildRebuild"];
                this.columnPreVideo = base.Columns["PreVideo"];
                this.columnLinerInstalled = base.Columns["LinerInstalled"];
                this.columnFinalVideo = base.Columns["FinalVideo"];
                this.columnDistanceFromUSMH = base.Columns["DistanceFromUSMH"];
                this.columnDistanceFromDSMH = base.Columns["DistanceFromDSMH"];
                this.columnCost = base.Columns["Cost"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnSelected = base.Columns["Selected"];
                this.columnVideoInspection = base.Columns["VideoInspection"];
                this.columnCoRequired = base.Columns["CoRequired"];
                this.columnPitRequired = base.Columns["PitRequired"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnCoPitLocation = base.Columns["CoPitLocation"];
                this.columnHistory = base.Columns["History"];
                this.columnComments = base.Columns["Comments"];
                this.columnPostContractDigRequired = base.Columns["PostContractDigRequired"];
                this.columnCoCutDown = base.Columns["CoCutDown"];
                this.columnFinalRestoration = base.Columns["FinalRestoration"];
                this.columnUSMHDescription = base.Columns["USMHDescription"];
                this.columnDSMHDescription = base.Columns["DSMHDescription"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnCLientLateralID = base.Columns["CLientLateralID"];
                this.columnVideoLengthToPropertyLine = base.Columns["VideoLengthToPropertyLine"];
                this.columnLiningThruCo = base.Columns["LiningThruCo"];
                this.columnNoticeDelivered = base.Columns["NoticeDelivered"];
                this.columnHamiltonInspectionNumber = base.Columns["HamiltonInspectionNumber"];
                this.columnFlange = base.Columns["Flange"];
                this.columnGasket = base.Columns["Gasket"];
                this.columnMainSize = base.Columns["MainSize"];
                this.columnConnectionType = base.Columns["ConnectionType"];
                this.columnDepthOfLocated = base.Columns["DepthOfLocated"];
                this.columnDigRequiredPriorToLiningCompleted = base.Columns["DigRequiredPriorToLiningCompleted"];
                this.columnDigRequiredAfterLiningCompleted = base.Columns["DigRequiredAfterLiningCompleted"];
                this.columnHoldClientIssueResolved = base.Columns["HoldClientIssueResolved"];
                this.columnHoldLFSIssueResolved = base.Columns["HoldLFSIssueResolved"];
                this.columnLateralRequiresRoboticPrepCompleted = base.Columns["LateralRequiresRoboticPrepCompleted"];
                this.columnOutOfScope = base.Columns["OutOfScope"];
                this.columnDigRequiredPriorToLining = base.Columns["DigRequiredPriorToLining"];
                this.columnDigRequiredAfterLining = base.Columns["DigRequiredAfterLining"];
                this.columnHoldClientIssue = base.Columns["HoldClientIssue"];
                this.columnHoldLFSIssue = base.Columns["HoldLFSIssue"];
                this.columnLateralRequiresRoboticPrep = base.Columns["LateralRequiresRoboticPrep"];
                this.columnLinerType = base.Columns["LinerType"];
                this.columnPrepType = base.Columns["PrepType"];
                this.columnDyeTestReq = base.Columns["DyeTestReq"];
                this.columnDyeTestComplete = base.Columns["DyeTestComplete"];
                this.columnContractYear = base.Columns["ContractYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnLateralID = new global::System.Data.DataColumn("LateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnSection_ = new global::System.Data.DataColumn("Section_", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSection_);
                this.columnLateralDescription = new global::System.Data.DataColumn("LateralDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralDescription);
                this.columnLateralWorkID = new global::System.Data.DataColumn("LateralWorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralWorkID);
                this.columnSectionWorkID = new global::System.Data.DataColumn("SectionWorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionWorkID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnPipeLocated = new global::System.Data.DataColumn("PipeLocated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeLocated);
                this.columnServicesLocated = new global::System.Data.DataColumn("ServicesLocated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServicesLocated);
                this.columnCoInstalled = new global::System.Data.DataColumn("CoInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoInstalled);
                this.columnBackfilledConcrete = new global::System.Data.DataColumn("BackfilledConcrete", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledConcrete);
                this.columnBackfilledSoil = new global::System.Data.DataColumn("BackfilledSoil", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledSoil);
                this.columnGrouted = new global::System.Data.DataColumn("Grouted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrouted);
                this.columnCored = new global::System.Data.DataColumn("Cored", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCored);
                this.columnPrepped = new global::System.Data.DataColumn("Prepped", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrepped);
                this.columnMeasured = new global::System.Data.DataColumn("Measured", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasured);
                this.columnLinerSize = new global::System.Data.DataColumn("LinerSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerSize);
                this.columnInProcess = new global::System.Data.DataColumn("InProcess", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProcess);
                this.columnInStock = new global::System.Data.DataColumn("InStock", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInStock);
                this.columnDelivered = new global::System.Data.DataColumn("Delivered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelivered);
                this.columnBuildRebuild = new global::System.Data.DataColumn("BuildRebuild", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildRebuild);
                this.columnPreVideo = new global::System.Data.DataColumn("PreVideo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreVideo);
                this.columnLinerInstalled = new global::System.Data.DataColumn("LinerInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInstalled);
                this.columnFinalVideo = new global::System.Data.DataColumn("FinalVideo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalVideo);
                this.columnDistanceFromUSMH = new global::System.Data.DataColumn("DistanceFromUSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromUSMH);
                this.columnDistanceFromDSMH = new global::System.Data.DataColumn("DistanceFromDSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromDSMH);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnVideoInspection = new global::System.Data.DataColumn("VideoInspection", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoInspection);
                this.columnCoRequired = new global::System.Data.DataColumn("CoRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoRequired);
                this.columnPitRequired = new global::System.Data.DataColumn("PitRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPitRequired);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnCoPitLocation = new global::System.Data.DataColumn("CoPitLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoPitLocation);
                this.columnHistory = new global::System.Data.DataColumn("History", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHistory);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnPostContractDigRequired = new global::System.Data.DataColumn("PostContractDigRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostContractDigRequired);
                this.columnCoCutDown = new global::System.Data.DataColumn("CoCutDown", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoCutDown);
                this.columnFinalRestoration = new global::System.Data.DataColumn("FinalRestoration", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalRestoration);
                this.columnUSMHDescription = new global::System.Data.DataColumn("USMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHDescription);
                this.columnDSMHDescription = new global::System.Data.DataColumn("DSMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHDescription);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnCLientLateralID = new global::System.Data.DataColumn("CLientLateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLientLateralID);
                this.columnVideoLengthToPropertyLine = new global::System.Data.DataColumn("VideoLengthToPropertyLine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoLengthToPropertyLine);
                this.columnLiningThruCo = new global::System.Data.DataColumn("LiningThruCo", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiningThruCo);
                this.columnNoticeDelivered = new global::System.Data.DataColumn("NoticeDelivered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoticeDelivered);
                this.columnHamiltonInspectionNumber = new global::System.Data.DataColumn("HamiltonInspectionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHamiltonInspectionNumber);
                this.columnFlange = new global::System.Data.DataColumn("Flange", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlange);
                this.columnGasket = new global::System.Data.DataColumn("Gasket", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasket);
                this.columnMainSize = new global::System.Data.DataColumn("MainSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainSize);
                this.columnConnectionType = new global::System.Data.DataColumn("ConnectionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionType);
                this.columnDepthOfLocated = new global::System.Data.DataColumn("DepthOfLocated", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepthOfLocated);
                this.columnDigRequiredPriorToLiningCompleted = new global::System.Data.DataColumn("DigRequiredPriorToLiningCompleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigRequiredPriorToLiningCompleted);
                this.columnDigRequiredAfterLiningCompleted = new global::System.Data.DataColumn("DigRequiredAfterLiningCompleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigRequiredAfterLiningCompleted);
                this.columnHoldClientIssueResolved = new global::System.Data.DataColumn("HoldClientIssueResolved", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldClientIssueResolved);
                this.columnHoldLFSIssueResolved = new global::System.Data.DataColumn("HoldLFSIssueResolved", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldLFSIssueResolved);
                this.columnLateralRequiresRoboticPrepCompleted = new global::System.Data.DataColumn("LateralRequiresRoboticPrepCompleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralRequiresRoboticPrepCompleted);
                this.columnOutOfScope = new global::System.Data.DataColumn("OutOfScope", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutOfScope);
                this.columnDigRequiredPriorToLining = new global::System.Data.DataColumn("DigRequiredPriorToLining", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigRequiredPriorToLining);
                this.columnDigRequiredAfterLining = new global::System.Data.DataColumn("DigRequiredAfterLining", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigRequiredAfterLining);
                this.columnHoldClientIssue = new global::System.Data.DataColumn("HoldClientIssue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldClientIssue);
                this.columnHoldLFSIssue = new global::System.Data.DataColumn("HoldLFSIssue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldLFSIssue);
                this.columnLateralRequiresRoboticPrep = new global::System.Data.DataColumn("LateralRequiresRoboticPrep", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralRequiresRoboticPrep);
                this.columnLinerType = new global::System.Data.DataColumn("LinerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerType);
                this.columnPrepType = new global::System.Data.DataColumn("PrepType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrepType);
                this.columnDyeTestReq = new global::System.Data.DataColumn("DyeTestReq", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDyeTestReq);
                this.columnDyeTestComplete = new global::System.Data.DataColumn("DyeTestComplete", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDyeTestComplete);
                this.columnContractYear = new global::System.Data.DataColumn("ContractYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractYear);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnWorkID.Unique = true;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnStreet.MaxLength = 255;
                this.columnAddress.MaxLength = 50;
                this.columnLinerSize.MaxLength = 40;
                this.columnCoRequired.AllowDBNull = false;
                this.columnPitRequired.AllowDBNull = false;
                this.columnHistory.MaxLength = 1073741823;
                this.columnComments.AutoIncrementStep = 1073741823;
                this.columnPostContractDigRequired.AllowDBNull = false;
                this.columnLiningThruCo.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlRow NewFlatSectionJlRow() {
                return ((FlatSectionJlRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FlatSectionJlRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FlatSectionJlRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlatSectionJlRowChanged != null)) {
                    this.FlatSectionJlRowChanged(this, new FlatSectionJlRowChangeEvent(((FlatSectionJlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlatSectionJlRowChanging != null)) {
                    this.FlatSectionJlRowChanging(this, new FlatSectionJlRowChangeEvent(((FlatSectionJlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlatSectionJlRowDeleted != null)) {
                    this.FlatSectionJlRowDeleted(this, new FlatSectionJlRowChangeEvent(((FlatSectionJlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlatSectionJlRowDeleting != null)) {
                    this.FlatSectionJlRowDeleting(this, new FlatSectionJlRowChangeEvent(((FlatSectionJlRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFlatSectionJlRow(FlatSectionJlRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlatSectionJlTDS ds = new FlatSectionJlTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlatSectionJlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlatSectionJlCommentDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnUserFullName;
            
            private global::System.Data.DataColumn columnToHistory;
            
            private global::System.Data.DataColumn columnWorkType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlCommentDetailsDataTable() {
                this.TableName = "FlatSectionJlCommentDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlatSectionJlCommentDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FlatSectionJlCommentDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn {
                get {
                    return this.columnLIBRARY_FILES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserFullNameColumn {
                get {
                    return this.columnUserFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToHistoryColumn {
                get {
                    return this.columnToHistory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkTypeColumn {
                get {
                    return this.columnWorkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlCommentDetailsRow this[int index] {
                get {
                    return ((FlatSectionJlCommentDetailsRow)(this.Rows[index]));
                }
            }
            
            public event FlatSectionJlCommentDetailsRowChangeEventHandler FlatSectionJlCommentDetailsRowChanging;
            
            public event FlatSectionJlCommentDetailsRowChangeEventHandler FlatSectionJlCommentDetailsRowChanged;
            
            public event FlatSectionJlCommentDetailsRowChangeEventHandler FlatSectionJlCommentDetailsRowDeleting;
            
            public event FlatSectionJlCommentDetailsRowChangeEventHandler FlatSectionJlCommentDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFlatSectionJlCommentDetailsRow(FlatSectionJlCommentDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlCommentDetailsRow AddFlatSectionJlCommentDetailsRow(int WorkID, int RefID, string Type, string Subject, int UserID, System.DateTime DateTime_, string Comment, int LIBRARY_FILES_ID, bool Deleted, int COMPANY_ID, bool InDatabase, string UserFullName, bool ToHistory, string WorkType) {
                FlatSectionJlCommentDetailsRow rowFlatSectionJlCommentDetailsRow = ((FlatSectionJlCommentDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        Type,
                        Subject,
                        UserID,
                        DateTime_,
                        Comment,
                        LIBRARY_FILES_ID,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UserFullName,
                        ToHistory,
                        WorkType};
                rowFlatSectionJlCommentDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFlatSectionJlCommentDetailsRow);
                return rowFlatSectionJlCommentDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlCommentDetailsRow FindByWorkIDRefID(int WorkID, int RefID) {
                return ((FlatSectionJlCommentDetailsRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FlatSectionJlCommentDetailsDataTable cln = ((FlatSectionJlCommentDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FlatSectionJlCommentDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnType = base.Columns["Type"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnComment = base.Columns["Comment"];
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUserFullName = base.Columns["UserFullName"];
                this.columnToHistory = base.Columns["ToHistory"];
                this.columnWorkType = base.Columns["WorkType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUserFullName = new global::System.Data.DataColumn("UserFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserFullName);
                this.columnToHistory = new global::System.Data.DataColumn("ToHistory", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToHistory);
                this.columnWorkType = new global::System.Data.DataColumn("WorkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlCommentDetailsRow NewFlatSectionJlCommentDetailsRow() {
                return ((FlatSectionJlCommentDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FlatSectionJlCommentDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FlatSectionJlCommentDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlatSectionJlCommentDetailsRowChanged != null)) {
                    this.FlatSectionJlCommentDetailsRowChanged(this, new FlatSectionJlCommentDetailsRowChangeEvent(((FlatSectionJlCommentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlatSectionJlCommentDetailsRowChanging != null)) {
                    this.FlatSectionJlCommentDetailsRowChanging(this, new FlatSectionJlCommentDetailsRowChangeEvent(((FlatSectionJlCommentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlatSectionJlCommentDetailsRowDeleted != null)) {
                    this.FlatSectionJlCommentDetailsRowDeleted(this, new FlatSectionJlCommentDetailsRowChangeEvent(((FlatSectionJlCommentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlatSectionJlCommentDetailsRowDeleting != null)) {
                    this.FlatSectionJlCommentDetailsRowDeleting(this, new FlatSectionJlCommentDetailsRowChangeEvent(((FlatSectionJlCommentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFlatSectionJlCommentDetailsRow(FlatSectionJlCommentDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlatSectionJlTDS ds = new FlatSectionJlTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlatSectionJlCommentDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlatSectionJlHistoryDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnHistory;
            
            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnUserFullName;
            
            private global::System.Data.DataColumn columnToComments;
            
            private global::System.Data.DataColumn columnWorkType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlHistoryDetailsDataTable() {
                this.TableName = "FlatSectionJlHistoryDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlatSectionJlHistoryDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FlatSectionJlHistoryDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HistoryColumn {
                get {
                    return this.columnHistory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn {
                get {
                    return this.columnLIBRARY_FILES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserFullNameColumn {
                get {
                    return this.columnUserFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToCommentsColumn {
                get {
                    return this.columnToComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkTypeColumn {
                get {
                    return this.columnWorkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlHistoryDetailsRow this[int index] {
                get {
                    return ((FlatSectionJlHistoryDetailsRow)(this.Rows[index]));
                }
            }
            
            public event FlatSectionJlHistoryDetailsRowChangeEventHandler FlatSectionJlHistoryDetailsRowChanging;
            
            public event FlatSectionJlHistoryDetailsRowChangeEventHandler FlatSectionJlHistoryDetailsRowChanged;
            
            public event FlatSectionJlHistoryDetailsRowChangeEventHandler FlatSectionJlHistoryDetailsRowDeleting;
            
            public event FlatSectionJlHistoryDetailsRowChangeEventHandler FlatSectionJlHistoryDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFlatSectionJlHistoryDetailsRow(FlatSectionJlHistoryDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlHistoryDetailsRow AddFlatSectionJlHistoryDetailsRow(int WorkID, int RefID, string Type, string Subject, int UserID, System.DateTime DateTime_, string History, int LIBRARY_FILES_ID, bool Deleted, int COMPANY_ID, bool InDatabase, string UserFullName, bool ToComments, string WorkType) {
                FlatSectionJlHistoryDetailsRow rowFlatSectionJlHistoryDetailsRow = ((FlatSectionJlHistoryDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        Type,
                        Subject,
                        UserID,
                        DateTime_,
                        History,
                        LIBRARY_FILES_ID,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UserFullName,
                        ToComments,
                        WorkType};
                rowFlatSectionJlHistoryDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFlatSectionJlHistoryDetailsRow);
                return rowFlatSectionJlHistoryDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlHistoryDetailsRow FindByWorkIDRefID(int WorkID, int RefID) {
                return ((FlatSectionJlHistoryDetailsRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FlatSectionJlHistoryDetailsDataTable cln = ((FlatSectionJlHistoryDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FlatSectionJlHistoryDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnType = base.Columns["Type"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnHistory = base.Columns["History"];
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUserFullName = base.Columns["UserFullName"];
                this.columnToComments = base.Columns["ToComments"];
                this.columnWorkType = base.Columns["WorkType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnHistory = new global::System.Data.DataColumn("History", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHistory);
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUserFullName = new global::System.Data.DataColumn("UserFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserFullName);
                this.columnToComments = new global::System.Data.DataColumn("ToComments", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToComments);
                this.columnWorkType = new global::System.Data.DataColumn("WorkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlHistoryDetailsRow NewFlatSectionJlHistoryDetailsRow() {
                return ((FlatSectionJlHistoryDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FlatSectionJlHistoryDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FlatSectionJlHistoryDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlatSectionJlHistoryDetailsRowChanged != null)) {
                    this.FlatSectionJlHistoryDetailsRowChanged(this, new FlatSectionJlHistoryDetailsRowChangeEvent(((FlatSectionJlHistoryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlatSectionJlHistoryDetailsRowChanging != null)) {
                    this.FlatSectionJlHistoryDetailsRowChanging(this, new FlatSectionJlHistoryDetailsRowChangeEvent(((FlatSectionJlHistoryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlatSectionJlHistoryDetailsRowDeleted != null)) {
                    this.FlatSectionJlHistoryDetailsRowDeleted(this, new FlatSectionJlHistoryDetailsRowChangeEvent(((FlatSectionJlHistoryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlatSectionJlHistoryDetailsRowDeleting != null)) {
                    this.FlatSectionJlHistoryDetailsRowDeleting(this, new FlatSectionJlHistoryDetailsRowChangeEvent(((FlatSectionJlHistoryDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFlatSectionJlHistoryDetailsRow(FlatSectionJlHistoryDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlatSectionJlTDS ds = new FlatSectionJlTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlatSectionJlHistoryDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AllCommentsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnWorkType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsDataTable() {
                this.TableName = "AllComments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllCommentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AllCommentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkTypeColumn {
                get {
                    return this.columnWorkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow this[int index] {
                get {
                    return ((AllCommentsRow)(this.Rows[index]));
                }
            }
            
            public event AllCommentsRowChangeEventHandler AllCommentsRowChanging;
            
            public event AllCommentsRowChangeEventHandler AllCommentsRowChanged;
            
            public event AllCommentsRowChangeEventHandler AllCommentsRowDeleting;
            
            public event AllCommentsRowChangeEventHandler AllCommentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAllCommentsRow(AllCommentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow AddAllCommentsRow(int WorkID, int RefID, string Type, string Subject, int UserID, System.DateTime DateTime_, string Comment, bool Deleted, int COMPANY_ID, string WorkType) {
                AllCommentsRow rowAllCommentsRow = ((AllCommentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        Type,
                        Subject,
                        UserID,
                        DateTime_,
                        Comment,
                        Deleted,
                        COMPANY_ID,
                        WorkType};
                rowAllCommentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAllCommentsRow);
                return rowAllCommentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow FindByWorkIDRefID(int WorkID, int RefID) {
                return ((AllCommentsRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AllCommentsDataTable cln = ((AllCommentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AllCommentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnType = base.Columns["Type"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnComment = base.Columns["Comment"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnWorkType = base.Columns["WorkType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnWorkType = new global::System.Data.DataColumn("WorkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnType.MaxLength = 50;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 255;
                this.columnUserID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow NewAllCommentsRow() {
                return ((AllCommentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AllCommentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AllCommentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AllCommentsRowChanged != null)) {
                    this.AllCommentsRowChanged(this, new AllCommentsRowChangeEvent(((AllCommentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AllCommentsRowChanging != null)) {
                    this.AllCommentsRowChanging(this, new AllCommentsRowChangeEvent(((AllCommentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AllCommentsRowDeleted != null)) {
                    this.AllCommentsRowDeleted(this, new AllCommentsRowChangeEvent(((AllCommentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AllCommentsRowDeleting != null)) {
                    this.AllCommentsRowDeleting(this, new AllCommentsRowChangeEvent(((AllCommentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAllCommentsRow(AllCommentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlatSectionJlTDS ds = new FlatSectionJlTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AllCommentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AllHistoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnHistory;
            
            private global::System.Data.DataColumn columnDelete;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnWorkType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllHistoryDataTable() {
                this.TableName = "AllHistory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllHistoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AllHistoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HistoryColumn {
                get {
                    return this.columnHistory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeleteColumn {
                get {
                    return this.columnDelete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkTypeColumn {
                get {
                    return this.columnWorkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllHistoryRow this[int index] {
                get {
                    return ((AllHistoryRow)(this.Rows[index]));
                }
            }
            
            public event AllHistoryRowChangeEventHandler AllHistoryRowChanging;
            
            public event AllHistoryRowChangeEventHandler AllHistoryRowChanged;
            
            public event AllHistoryRowChangeEventHandler AllHistoryRowDeleting;
            
            public event AllHistoryRowChangeEventHandler AllHistoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAllHistoryRow(AllHistoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllHistoryRow AddAllHistoryRow(int WorkID, int RefID, string Type, string Subject, int UserID, System.DateTime DateTime_, string History, bool Delete, int COMPANY_ID, string WorkType) {
                AllHistoryRow rowAllHistoryRow = ((AllHistoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        Type,
                        Subject,
                        UserID,
                        DateTime_,
                        History,
                        Delete,
                        COMPANY_ID,
                        WorkType};
                rowAllHistoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAllHistoryRow);
                return rowAllHistoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllHistoryRow FindByWorkIDRefID(int WorkID, int RefID) {
                return ((AllHistoryRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AllHistoryDataTable cln = ((AllHistoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AllHistoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnType = base.Columns["Type"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnHistory = base.Columns["History"];
                this.columnDelete = base.Columns["Delete"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnWorkType = base.Columns["WorkType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnHistory = new global::System.Data.DataColumn("History", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHistory);
                this.columnDelete = new global::System.Data.DataColumn("Delete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelete);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnWorkType = new global::System.Data.DataColumn("WorkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllHistoryRow NewAllHistoryRow() {
                return ((AllHistoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AllHistoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AllHistoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AllHistoryRowChanged != null)) {
                    this.AllHistoryRowChanged(this, new AllHistoryRowChangeEvent(((AllHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AllHistoryRowChanging != null)) {
                    this.AllHistoryRowChanging(this, new AllHistoryRowChangeEvent(((AllHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AllHistoryRowDeleted != null)) {
                    this.AllHistoryRowDeleted(this, new AllHistoryRowChangeEvent(((AllHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AllHistoryRowDeleting != null)) {
                    this.AllHistoryRowDeleting(this, new AllHistoryRowChangeEvent(((AllHistoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAllHistoryRow(AllHistoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlatSectionJlTDS ds = new FlatSectionJlTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AllHistoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FlatSectionJlRow : global::System.Data.DataRow {
            
            private FlatSectionJlDataTable tableFlatSectionJl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlatSectionJlRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlatSectionJl = ((FlatSectionJlDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableFlatSectionJl.WorkIDColumn]));
                }
                set {
                    this[this.tableFlatSectionJl.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJl.AssetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetID\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralID {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.LateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralID\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.LateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Section_ {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJl.Section_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Section_\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.Section_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralDescription {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.LateralDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralDescription\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.LateralDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LateralWorkID {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJl.LateralWorkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralWorkID\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.LateralWorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SectionWorkID {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJl.SectionWorkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionWorkID\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.SectionWorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableFlatSectionJl.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableFlatSectionJl.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PipeLocated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.PipeLocatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeLocated\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.PipeLocatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ServicesLocated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.ServicesLocatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServicesLocated\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.ServicesLocatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CoInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.CoInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoInstalled\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.CoInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledConcrete {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.BackfilledConcreteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledConcrete\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.BackfilledConcreteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledSoil {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.BackfilledSoilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledSoil\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.BackfilledSoilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Grouted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.GroutedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grouted\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.GroutedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Cored {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.CoredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cored\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.CoredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Prepped {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.PreppedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Prepped\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.PreppedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Measured {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.MeasuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Measured\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.MeasuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerSize {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.LinerSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerSize\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.LinerSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InProcess {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.InProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProcess\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.InProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InStock {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.InStockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InStock\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.InStockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Delivered {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.DeliveredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Delivered\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DeliveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildRebuild {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJl.BuildRebuildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildRebuild\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.BuildRebuildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PreVideo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.PreVideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreVideo\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.PreVideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LinerInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.LinerInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInstalled\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.LinerInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalVideo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.FinalVideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalVideo\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.FinalVideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromUSMH {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.DistanceFromUSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromUSMH\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DistanceFromUSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromDSMH {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.DistanceFromDSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromDSMH\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DistanceFromDSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableFlatSectionJl.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJl.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJl.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime VideoInspection {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.VideoInspectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoInspection\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.VideoInspectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CoRequired {
                get {
                    return ((bool)(this[this.tableFlatSectionJl.CoRequiredColumn]));
                }
                set {
                    this[this.tableFlatSectionJl.CoRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PitRequired {
                get {
                    return ((bool)(this[this.tableFlatSectionJl.PitRequiredColumn]));
                }
                set {
                    this[this.tableFlatSectionJl.PitRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USMH {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJl.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DSMH {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJl.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoPitLocation {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.CoPitLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoPitLocation\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.CoPitLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string History {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.HistoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'History\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.HistoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PostContractDigRequired {
                get {
                    return ((bool)(this[this.tableFlatSectionJl.PostContractDigRequiredColumn]));
                }
                set {
                    this[this.tableFlatSectionJl.PostContractDigRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CoCutDown {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.CoCutDownColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoCutDown\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.CoCutDownColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalRestoration {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.FinalRestorationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalRestoration\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.FinalRestorationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.USMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHDescription\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.USMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.DSMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHDescription\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DSMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLientLateralID {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.CLientLateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLientLateralID\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.CLientLateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoLengthToPropertyLine {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.VideoLengthToPropertyLineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoLengthToPropertyLine\' in table \'FlatSectionJl\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.VideoLengthToPropertyLineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LiningThruCo {
                get {
                    return ((bool)(this[this.tableFlatSectionJl.LiningThruCoColumn]));
                }
                set {
                    this[this.tableFlatSectionJl.LiningThruCoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NoticeDelivered {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.NoticeDeliveredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoticeDelivered\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.NoticeDeliveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HamiltonInspectionNumber {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.HamiltonInspectionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HamiltonInspectionNumber\' in table \'FlatSectionJl\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.HamiltonInspectionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Flange {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.FlangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Flange\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.FlangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gasket {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.GasketColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gasket\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.GasketColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MainSize {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.MainSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainSize\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.MainSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConnectionType {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.ConnectionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionType\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.ConnectionTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepthOfLocated {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.DepthOfLocatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepthOfLocated\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DepthOfLocatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DigRequiredPriorToLiningCompleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.DigRequiredPriorToLiningCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigRequiredPriorToLiningCompleted\' in table \'FlatSectionJl\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DigRequiredPriorToLiningCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DigRequiredAfterLiningCompleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.DigRequiredAfterLiningCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigRequiredAfterLiningCompleted\' in table \'FlatSectionJl\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DigRequiredAfterLiningCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime HoldClientIssueResolved {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.HoldClientIssueResolvedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldClientIssueResolved\' in table \'FlatSectionJl\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.HoldClientIssueResolvedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime HoldLFSIssueResolved {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.HoldLFSIssueResolvedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldLFSIssueResolved\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.HoldLFSIssueResolvedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LateralRequiresRoboticPrepCompleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.LateralRequiresRoboticPrepCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralRequiresRoboticPrepCompleted\' in table \'FlatSectionJ" +
                                "l\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.LateralRequiresRoboticPrepCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OutOfScope {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJl.OutOfScopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutOfScope\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.OutOfScopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DigRequiredPriorToLining {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJl.DigRequiredPriorToLiningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigRequiredPriorToLining\' in table \'FlatSectionJl\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DigRequiredPriorToLiningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DigRequiredAfterLining {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJl.DigRequiredAfterLiningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigRequiredAfterLining\' in table \'FlatSectionJl\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DigRequiredAfterLiningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HoldClientIssue {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJl.HoldClientIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldClientIssue\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.HoldClientIssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HoldLFSIssue {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJl.HoldLFSIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldLFSIssue\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.HoldLFSIssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LateralRequiresRoboticPrep {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJl.LateralRequiresRoboticPrepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralRequiresRoboticPrep\' in table \'FlatSectionJl\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.LateralRequiresRoboticPrepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerType {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.LinerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerType\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.LinerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PrepType {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.PrepTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrepType\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.PrepTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DyeTestReq {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJl.DyeTestReqColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DyeTestReq\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DyeTestReqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DyeTestComplete {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJl.DyeTestCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DyeTestComplete\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.DyeTestCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContractYear {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJl.ContractYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractYear\' in table \'FlatSectionJl\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJl.ContractYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetIDNull() {
                return this.IsNull(this.tableFlatSectionJl.AssetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetIDNull() {
                this[this.tableFlatSectionJl.AssetIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralIDNull() {
                return this.IsNull(this.tableFlatSectionJl.LateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralIDNull() {
                this[this.tableFlatSectionJl.LateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableFlatSectionJl.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableFlatSectionJl.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSection_Null() {
                return this.IsNull(this.tableFlatSectionJl.Section_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSection_Null() {
                this[this.tableFlatSectionJl.Section_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralDescriptionNull() {
                return this.IsNull(this.tableFlatSectionJl.LateralDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralDescriptionNull() {
                this[this.tableFlatSectionJl.LateralDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralWorkIDNull() {
                return this.IsNull(this.tableFlatSectionJl.LateralWorkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralWorkIDNull() {
                this[this.tableFlatSectionJl.LateralWorkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionWorkIDNull() {
                return this.IsNull(this.tableFlatSectionJl.SectionWorkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionWorkIDNull() {
                this[this.tableFlatSectionJl.SectionWorkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableFlatSectionJl.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableFlatSectionJl.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableFlatSectionJl.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableFlatSectionJl.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeLocatedNull() {
                return this.IsNull(this.tableFlatSectionJl.PipeLocatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeLocatedNull() {
                this[this.tableFlatSectionJl.PipeLocatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServicesLocatedNull() {
                return this.IsNull(this.tableFlatSectionJl.ServicesLocatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServicesLocatedNull() {
                this[this.tableFlatSectionJl.ServicesLocatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoInstalledNull() {
                return this.IsNull(this.tableFlatSectionJl.CoInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoInstalledNull() {
                this[this.tableFlatSectionJl.CoInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledConcreteNull() {
                return this.IsNull(this.tableFlatSectionJl.BackfilledConcreteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledConcreteNull() {
                this[this.tableFlatSectionJl.BackfilledConcreteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledSoilNull() {
                return this.IsNull(this.tableFlatSectionJl.BackfilledSoilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledSoilNull() {
                this[this.tableFlatSectionJl.BackfilledSoilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroutedNull() {
                return this.IsNull(this.tableFlatSectionJl.GroutedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroutedNull() {
                this[this.tableFlatSectionJl.GroutedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoredNull() {
                return this.IsNull(this.tableFlatSectionJl.CoredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoredNull() {
                this[this.tableFlatSectionJl.CoredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreppedNull() {
                return this.IsNull(this.tableFlatSectionJl.PreppedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreppedNull() {
                this[this.tableFlatSectionJl.PreppedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasuredNull() {
                return this.IsNull(this.tableFlatSectionJl.MeasuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasuredNull() {
                this[this.tableFlatSectionJl.MeasuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerSizeNull() {
                return this.IsNull(this.tableFlatSectionJl.LinerSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerSizeNull() {
                this[this.tableFlatSectionJl.LinerSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProcessNull() {
                return this.IsNull(this.tableFlatSectionJl.InProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProcessNull() {
                this[this.tableFlatSectionJl.InProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInStockNull() {
                return this.IsNull(this.tableFlatSectionJl.InStockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInStockNull() {
                this[this.tableFlatSectionJl.InStockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveredNull() {
                return this.IsNull(this.tableFlatSectionJl.DeliveredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveredNull() {
                this[this.tableFlatSectionJl.DeliveredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildRebuildNull() {
                return this.IsNull(this.tableFlatSectionJl.BuildRebuildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildRebuildNull() {
                this[this.tableFlatSectionJl.BuildRebuildColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreVideoNull() {
                return this.IsNull(this.tableFlatSectionJl.PreVideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreVideoNull() {
                this[this.tableFlatSectionJl.PreVideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInstalledNull() {
                return this.IsNull(this.tableFlatSectionJl.LinerInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInstalledNull() {
                this[this.tableFlatSectionJl.LinerInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalVideoNull() {
                return this.IsNull(this.tableFlatSectionJl.FinalVideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalVideoNull() {
                this[this.tableFlatSectionJl.FinalVideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromUSMHNull() {
                return this.IsNull(this.tableFlatSectionJl.DistanceFromUSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromUSMHNull() {
                this[this.tableFlatSectionJl.DistanceFromUSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromDSMHNull() {
                return this.IsNull(this.tableFlatSectionJl.DistanceFromDSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromDSMHNull() {
                this[this.tableFlatSectionJl.DistanceFromDSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableFlatSectionJl.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableFlatSectionJl.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableFlatSectionJl.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableFlatSectionJl.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableFlatSectionJl.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableFlatSectionJl.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoInspectionNull() {
                return this.IsNull(this.tableFlatSectionJl.VideoInspectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoInspectionNull() {
                this[this.tableFlatSectionJl.VideoInspectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableFlatSectionJl.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableFlatSectionJl.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableFlatSectionJl.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableFlatSectionJl.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoPitLocationNull() {
                return this.IsNull(this.tableFlatSectionJl.CoPitLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoPitLocationNull() {
                this[this.tableFlatSectionJl.CoPitLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHistoryNull() {
                return this.IsNull(this.tableFlatSectionJl.HistoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHistoryNull() {
                this[this.tableFlatSectionJl.HistoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableFlatSectionJl.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableFlatSectionJl.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoCutDownNull() {
                return this.IsNull(this.tableFlatSectionJl.CoCutDownColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoCutDownNull() {
                this[this.tableFlatSectionJl.CoCutDownColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalRestorationNull() {
                return this.IsNull(this.tableFlatSectionJl.FinalRestorationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalRestorationNull() {
                this[this.tableFlatSectionJl.FinalRestorationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHDescriptionNull() {
                return this.IsNull(this.tableFlatSectionJl.USMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHDescriptionNull() {
                this[this.tableFlatSectionJl.USMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHDescriptionNull() {
                return this.IsNull(this.tableFlatSectionJl.DSMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHDescriptionNull() {
                this[this.tableFlatSectionJl.DSMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableFlatSectionJl.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableFlatSectionJl.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLientLateralIDNull() {
                return this.IsNull(this.tableFlatSectionJl.CLientLateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLientLateralIDNull() {
                this[this.tableFlatSectionJl.CLientLateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoLengthToPropertyLineNull() {
                return this.IsNull(this.tableFlatSectionJl.VideoLengthToPropertyLineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoLengthToPropertyLineNull() {
                this[this.tableFlatSectionJl.VideoLengthToPropertyLineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoticeDeliveredNull() {
                return this.IsNull(this.tableFlatSectionJl.NoticeDeliveredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoticeDeliveredNull() {
                this[this.tableFlatSectionJl.NoticeDeliveredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHamiltonInspectionNumberNull() {
                return this.IsNull(this.tableFlatSectionJl.HamiltonInspectionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHamiltonInspectionNumberNull() {
                this[this.tableFlatSectionJl.HamiltonInspectionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlangeNull() {
                return this.IsNull(this.tableFlatSectionJl.FlangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlangeNull() {
                this[this.tableFlatSectionJl.FlangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasketNull() {
                return this.IsNull(this.tableFlatSectionJl.GasketColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGasketNull() {
                this[this.tableFlatSectionJl.GasketColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainSizeNull() {
                return this.IsNull(this.tableFlatSectionJl.MainSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainSizeNull() {
                this[this.tableFlatSectionJl.MainSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConnectionTypeNull() {
                return this.IsNull(this.tableFlatSectionJl.ConnectionTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConnectionTypeNull() {
                this[this.tableFlatSectionJl.ConnectionTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepthOfLocatedNull() {
                return this.IsNull(this.tableFlatSectionJl.DepthOfLocatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepthOfLocatedNull() {
                this[this.tableFlatSectionJl.DepthOfLocatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigRequiredPriorToLiningCompletedNull() {
                return this.IsNull(this.tableFlatSectionJl.DigRequiredPriorToLiningCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigRequiredPriorToLiningCompletedNull() {
                this[this.tableFlatSectionJl.DigRequiredPriorToLiningCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigRequiredAfterLiningCompletedNull() {
                return this.IsNull(this.tableFlatSectionJl.DigRequiredAfterLiningCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigRequiredAfterLiningCompletedNull() {
                this[this.tableFlatSectionJl.DigRequiredAfterLiningCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldClientIssueResolvedNull() {
                return this.IsNull(this.tableFlatSectionJl.HoldClientIssueResolvedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldClientIssueResolvedNull() {
                this[this.tableFlatSectionJl.HoldClientIssueResolvedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldLFSIssueResolvedNull() {
                return this.IsNull(this.tableFlatSectionJl.HoldLFSIssueResolvedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldLFSIssueResolvedNull() {
                this[this.tableFlatSectionJl.HoldLFSIssueResolvedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralRequiresRoboticPrepCompletedNull() {
                return this.IsNull(this.tableFlatSectionJl.LateralRequiresRoboticPrepCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralRequiresRoboticPrepCompletedNull() {
                this[this.tableFlatSectionJl.LateralRequiresRoboticPrepCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutOfScopeNull() {
                return this.IsNull(this.tableFlatSectionJl.OutOfScopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutOfScopeNull() {
                this[this.tableFlatSectionJl.OutOfScopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigRequiredPriorToLiningNull() {
                return this.IsNull(this.tableFlatSectionJl.DigRequiredPriorToLiningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigRequiredPriorToLiningNull() {
                this[this.tableFlatSectionJl.DigRequiredPriorToLiningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigRequiredAfterLiningNull() {
                return this.IsNull(this.tableFlatSectionJl.DigRequiredAfterLiningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigRequiredAfterLiningNull() {
                this[this.tableFlatSectionJl.DigRequiredAfterLiningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldClientIssueNull() {
                return this.IsNull(this.tableFlatSectionJl.HoldClientIssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldClientIssueNull() {
                this[this.tableFlatSectionJl.HoldClientIssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldLFSIssueNull() {
                return this.IsNull(this.tableFlatSectionJl.HoldLFSIssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldLFSIssueNull() {
                this[this.tableFlatSectionJl.HoldLFSIssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralRequiresRoboticPrepNull() {
                return this.IsNull(this.tableFlatSectionJl.LateralRequiresRoboticPrepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralRequiresRoboticPrepNull() {
                this[this.tableFlatSectionJl.LateralRequiresRoboticPrepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerTypeNull() {
                return this.IsNull(this.tableFlatSectionJl.LinerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerTypeNull() {
                this[this.tableFlatSectionJl.LinerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrepTypeNull() {
                return this.IsNull(this.tableFlatSectionJl.PrepTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrepTypeNull() {
                this[this.tableFlatSectionJl.PrepTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDyeTestReqNull() {
                return this.IsNull(this.tableFlatSectionJl.DyeTestReqColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDyeTestReqNull() {
                this[this.tableFlatSectionJl.DyeTestReqColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDyeTestCompleteNull() {
                return this.IsNull(this.tableFlatSectionJl.DyeTestCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDyeTestCompleteNull() {
                this[this.tableFlatSectionJl.DyeTestCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContractYearNull() {
                return this.IsNull(this.tableFlatSectionJl.ContractYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContractYearNull() {
                this[this.tableFlatSectionJl.ContractYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FlatSectionJlCommentDetailsRow : global::System.Data.DataRow {
            
            private FlatSectionJlCommentDetailsDataTable tableFlatSectionJlCommentDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlatSectionJlCommentDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlatSectionJlCommentDetails = ((FlatSectionJlCommentDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableFlatSectionJlCommentDetails.WorkIDColumn]));
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableFlatSectionJlCommentDetails.RefIDColumn]));
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlCommentDetails.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'FlatSectionJlCommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlCommentDetails.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'FlatSectionJlCommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJlCommentDetails.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'FlatSectionJlCommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJlCommentDetails.DateTime_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTime_\' in table \'FlatSectionJlCommentDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlCommentDetails.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'FlatSectionJlCommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJlCommentDetails.LIBRARY_FILES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_FILES_ID\' in table \'FlatSectionJlCommentDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.LIBRARY_FILES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJlCommentDetails.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'FlatSectionJlCommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJlCommentDetails.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'FlatSectionJlCommentDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJlCommentDetails.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'FlatSectionJlCommentDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserFullName {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlCommentDetails.UserFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserFullName\' in table \'FlatSectionJlCommentDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.UserFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ToHistory {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJlCommentDetails.ToHistoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToHistory\' in table \'FlatSectionJlCommentDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.ToHistoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkType {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlCommentDetails.WorkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkType\' in table \'FlatSectionJlCommentDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlCommentDetails.WorkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableFlatSectionJlCommentDetails.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableFlatSectionJlCommentDetails.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableFlatSectionJlCommentDetails.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTime_Null() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.DateTime_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTime_Null() {
                this[this.tableFlatSectionJlCommentDetails.DateTime_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableFlatSectionJlCommentDetails.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_FILES_IDNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.LIBRARY_FILES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_FILES_IDNull() {
                this[this.tableFlatSectionJlCommentDetails.LIBRARY_FILES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableFlatSectionJlCommentDetails.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableFlatSectionJlCommentDetails.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableFlatSectionJlCommentDetails.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserFullNameNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.UserFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserFullNameNull() {
                this[this.tableFlatSectionJlCommentDetails.UserFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToHistoryNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.ToHistoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToHistoryNull() {
                this[this.tableFlatSectionJlCommentDetails.ToHistoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeNull() {
                return this.IsNull(this.tableFlatSectionJlCommentDetails.WorkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeNull() {
                this[this.tableFlatSectionJlCommentDetails.WorkTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FlatSectionJlHistoryDetailsRow : global::System.Data.DataRow {
            
            private FlatSectionJlHistoryDetailsDataTable tableFlatSectionJlHistoryDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlatSectionJlHistoryDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlatSectionJlHistoryDetails = ((FlatSectionJlHistoryDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableFlatSectionJlHistoryDetails.WorkIDColumn]));
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableFlatSectionJlHistoryDetails.RefIDColumn]));
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlHistoryDetails.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'FlatSectionJlHistoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlHistoryDetails.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'FlatSectionJlHistoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJlHistoryDetails.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'FlatSectionJlHistoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFlatSectionJlHistoryDetails.DateTime_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTime_\' in table \'FlatSectionJlHistoryDetails\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string History {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlHistoryDetails.HistoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'History\' in table \'FlatSectionJlHistoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.HistoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJlHistoryDetails.LIBRARY_FILES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_FILES_ID\' in table \'FlatSectionJlHistoryDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.LIBRARY_FILES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJlHistoryDetails.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'FlatSectionJlHistoryDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableFlatSectionJlHistoryDetails.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'FlatSectionJlHistoryDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJlHistoryDetails.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'FlatSectionJlHistoryDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserFullName {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlHistoryDetails.UserFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserFullName\' in table \'FlatSectionJlHistoryDetails\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.UserFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ToComments {
                get {
                    try {
                        return ((bool)(this[this.tableFlatSectionJlHistoryDetails.ToCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToComments\' in table \'FlatSectionJlHistoryDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.ToCommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkType {
                get {
                    try {
                        return ((string)(this[this.tableFlatSectionJlHistoryDetails.WorkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkType\' in table \'FlatSectionJlHistoryDetails\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableFlatSectionJlHistoryDetails.WorkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableFlatSectionJlHistoryDetails.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableFlatSectionJlHistoryDetails.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableFlatSectionJlHistoryDetails.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTime_Null() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.DateTime_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTime_Null() {
                this[this.tableFlatSectionJlHistoryDetails.DateTime_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHistoryNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.HistoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHistoryNull() {
                this[this.tableFlatSectionJlHistoryDetails.HistoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_FILES_IDNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.LIBRARY_FILES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_FILES_IDNull() {
                this[this.tableFlatSectionJlHistoryDetails.LIBRARY_FILES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableFlatSectionJlHistoryDetails.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableFlatSectionJlHistoryDetails.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableFlatSectionJlHistoryDetails.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserFullNameNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.UserFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserFullNameNull() {
                this[this.tableFlatSectionJlHistoryDetails.UserFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToCommentsNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.ToCommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToCommentsNull() {
                this[this.tableFlatSectionJlHistoryDetails.ToCommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeNull() {
                return this.IsNull(this.tableFlatSectionJlHistoryDetails.WorkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeNull() {
                this[this.tableFlatSectionJlHistoryDetails.WorkTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AllCommentsRow : global::System.Data.DataRow {
            
            private AllCommentsDataTable tableAllComments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllCommentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAllComments = ((AllCommentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableAllComments.WorkIDColumn]));
                }
                set {
                    this[this.tableAllComments.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableAllComments.RefIDColumn]));
                }
                set {
                    this[this.tableAllComments.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableAllComments.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'AllComments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllComments.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    return ((string)(this[this.tableAllComments.SubjectColumn]));
                }
                set {
                    this[this.tableAllComments.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableAllComments.UserIDColumn]));
                }
                set {
                    this[this.tableAllComments.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAllComments.DateTime_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTime_\' in table \'AllComments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllComments.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableAllComments.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'AllComments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllComments.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableAllComments.DeletedColumn]));
                }
                set {
                    this[this.tableAllComments.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableAllComments.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableAllComments.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkType {
                get {
                    try {
                        return ((string)(this[this.tableAllComments.WorkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkType\' in table \'AllComments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllComments.WorkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableAllComments.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableAllComments.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTime_Null() {
                return this.IsNull(this.tableAllComments.DateTime_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTime_Null() {
                this[this.tableAllComments.DateTime_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableAllComments.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableAllComments.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeNull() {
                return this.IsNull(this.tableAllComments.WorkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeNull() {
                this[this.tableAllComments.WorkTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AllHistoryRow : global::System.Data.DataRow {
            
            private AllHistoryDataTable tableAllHistory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllHistoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAllHistory = ((AllHistoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableAllHistory.WorkIDColumn]));
                }
                set {
                    this[this.tableAllHistory.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableAllHistory.RefIDColumn]));
                }
                set {
                    this[this.tableAllHistory.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableAllHistory.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'AllHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllHistory.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableAllHistory.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'AllHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllHistory.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableAllHistory.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'AllHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllHistory.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAllHistory.DateTime_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTime_\' in table \'AllHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllHistory.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string History {
                get {
                    try {
                        return ((string)(this[this.tableAllHistory.HistoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'History\' in table \'AllHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllHistory.HistoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Delete {
                get {
                    try {
                        return ((bool)(this[this.tableAllHistory.DeleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Delete\' in table \'AllHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllHistory.DeleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableAllHistory.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'AllHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllHistory.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkType {
                get {
                    try {
                        return ((string)(this[this.tableAllHistory.WorkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkType\' in table \'AllHistory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllHistory.WorkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableAllHistory.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableAllHistory.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableAllHistory.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableAllHistory.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableAllHistory.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableAllHistory.UserIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTime_Null() {
                return this.IsNull(this.tableAllHistory.DateTime_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTime_Null() {
                this[this.tableAllHistory.DateTime_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHistoryNull() {
                return this.IsNull(this.tableAllHistory.HistoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHistoryNull() {
                this[this.tableAllHistory.HistoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleteNull() {
                return this.IsNull(this.tableAllHistory.DeleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeleteNull() {
                this[this.tableAllHistory.DeleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableAllHistory.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableAllHistory.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeNull() {
                return this.IsNull(this.tableAllHistory.WorkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeNull() {
                this[this.tableAllHistory.WorkTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FlatSectionJlRowChangeEvent : global::System.EventArgs {
            
            private FlatSectionJlRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlRowChangeEvent(FlatSectionJlRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FlatSectionJlCommentDetailsRowChangeEvent : global::System.EventArgs {
            
            private FlatSectionJlCommentDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlCommentDetailsRowChangeEvent(FlatSectionJlCommentDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlCommentDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FlatSectionJlHistoryDetailsRowChangeEvent : global::System.EventArgs {
            
            private FlatSectionJlHistoryDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlHistoryDetailsRowChangeEvent(FlatSectionJlHistoryDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlatSectionJlHistoryDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AllCommentsRowChangeEvent : global::System.EventArgs {
            
            private AllCommentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRowChangeEvent(AllCommentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AllHistoryRowChangeEvent : global::System.EventArgs {
            
            private AllHistoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllHistoryRowChangeEvent(AllHistoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllHistoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591