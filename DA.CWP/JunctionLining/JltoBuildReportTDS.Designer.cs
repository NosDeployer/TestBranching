//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3623
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.JunctionLining {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("JltoBuildReportTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class JltoBuildReportTDS : global::System.Data.DataSet {
        
        private JLToBuildDataTable tableJLToBuild;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JltoBuildReportTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected JltoBuildReportTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["JLToBuild"] != null)) {
                    base.Tables.Add(new JLToBuildDataTable(ds.Tables["JLToBuild"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JLToBuildDataTable JLToBuild {
            get {
                return this.tableJLToBuild;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            JltoBuildReportTDS cln = ((JltoBuildReportTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["JLToBuild"] != null)) {
                    base.Tables.Add(new JLToBuildDataTable(ds.Tables["JLToBuild"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableJLToBuild = ((JLToBuildDataTable)(base.Tables["JLToBuild"]));
            if ((initTable == true)) {
                if ((this.tableJLToBuild != null)) {
                    this.tableJLToBuild.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "JltoBuildReportTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/JltoBuildReportTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableJLToBuild = new JLToBuildDataTable();
            base.Tables.Add(this.tableJLToBuild);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJLToBuild() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            JltoBuildReportTDS ds = new JltoBuildReportTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void JLToBuildRowChangeEventHandler(object sender, JLToBuildRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JLToBuildDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnSection_;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnLateralID;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnSize_;
            
            private global::System.Data.DataColumn columnLinerSize;
            
            private global::System.Data.DataColumn columnMeasured;
            
            private global::System.Data.DataColumn columnInProcess;
            
            private global::System.Data.DataColumn columnLinerInstalled;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnMDeleted;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnFlange;
            
            private global::System.Data.DataColumn columnGasket;
            
            private global::System.Data.DataColumn columnMainSize;
            
            private global::System.Data.DataColumn columnDigRequiredPriorToLining;
            
            private global::System.Data.DataColumn columnDigRequiredPriorToLiningCompleted;
            
            private global::System.Data.DataColumn columnDigRequiredAfterLining;
            
            private global::System.Data.DataColumn columnDigRequiredAfterLiningCompleted;
            
            private global::System.Data.DataColumn columnOutOfScope;
            
            private global::System.Data.DataColumn columnHoldClientIssue;
            
            private global::System.Data.DataColumn columnHoldClientIssueResolved;
            
            private global::System.Data.DataColumn columnHoldLFSIssue;
            
            private global::System.Data.DataColumn columnHoldLFSIssueResolved;
            
            private global::System.Data.DataColumn columnLateralRequiresRoboticPrep;
            
            private global::System.Data.DataColumn columnLateralRequiresRoboticPrepCompleted;
            
            private global::System.Data.DataColumn columnRoboticPrepCompleted;
            
            private global::System.Data.DataColumn columnLinerType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLToBuildDataTable() {
                this.TableName = "JLToBuild";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JLToBuildDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JLToBuildDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Section_Column {
                get {
                    return this.columnSection_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralIDColumn {
                get {
                    return this.columnLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column {
                get {
                    return this.columnSize_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerSizeColumn {
                get {
                    return this.columnLinerSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasuredColumn {
                get {
                    return this.columnMeasured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProcessColumn {
                get {
                    return this.columnInProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInstalledColumn {
                get {
                    return this.columnLinerInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MDeletedColumn {
                get {
                    return this.columnMDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlangeColumn {
                get {
                    return this.columnFlange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GasketColumn {
                get {
                    return this.columnGasket;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainSizeColumn {
                get {
                    return this.columnMainSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigRequiredPriorToLiningColumn {
                get {
                    return this.columnDigRequiredPriorToLining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigRequiredPriorToLiningCompletedColumn {
                get {
                    return this.columnDigRequiredPriorToLiningCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigRequiredAfterLiningColumn {
                get {
                    return this.columnDigRequiredAfterLining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DigRequiredAfterLiningCompletedColumn {
                get {
                    return this.columnDigRequiredAfterLiningCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutOfScopeColumn {
                get {
                    return this.columnOutOfScope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldClientIssueColumn {
                get {
                    return this.columnHoldClientIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldClientIssueResolvedColumn {
                get {
                    return this.columnHoldClientIssueResolved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldLFSIssueColumn {
                get {
                    return this.columnHoldLFSIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldLFSIssueResolvedColumn {
                get {
                    return this.columnHoldLFSIssueResolved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralRequiresRoboticPrepColumn {
                get {
                    return this.columnLateralRequiresRoboticPrep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralRequiresRoboticPrepCompletedColumn {
                get {
                    return this.columnLateralRequiresRoboticPrepCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoboticPrepCompletedColumn {
                get {
                    return this.columnRoboticPrepCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerTypeColumn {
                get {
                    return this.columnLinerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLToBuildRow this[int index] {
                get {
                    return ((JLToBuildRow)(this.Rows[index]));
                }
            }
            
            public event JLToBuildRowChangeEventHandler JLToBuildRowChanging;
            
            public event JLToBuildRowChangeEventHandler JLToBuildRowChanged;
            
            public event JLToBuildRowChangeEventHandler JLToBuildRowDeleting;
            
            public event JLToBuildRowChangeEventHandler JLToBuildRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJLToBuildRow(JLToBuildRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLToBuildRow AddJLToBuildRow(
                        int AssetID, 
                        int COMPANY_ID, 
                        int Section_, 
                        int ProjectID, 
                        string SectionID, 
                        string LateralID, 
                        string Address, 
                        string Street, 
                        string Size_, 
                        string LinerSize, 
                        System.DateTime Measured, 
                        System.DateTime InProcess, 
                        System.DateTime LinerInstalled, 
                        bool Deleted, 
                        bool MDeleted, 
                        string Name, 
                        string ProjectName, 
                        string FlowOrderID, 
                        string Flange, 
                        string Gasket, 
                        string MainSize, 
                        bool DigRequiredPriorToLining, 
                        System.DateTime DigRequiredPriorToLiningCompleted, 
                        bool DigRequiredAfterLining, 
                        System.DateTime DigRequiredAfterLiningCompleted, 
                        bool OutOfScope, 
                        bool HoldClientIssue, 
                        System.DateTime HoldClientIssueResolved, 
                        bool HoldLFSIssue, 
                        System.DateTime HoldLFSIssueResolved, 
                        bool LateralRequiresRoboticPrep, 
                        System.DateTime LateralRequiresRoboticPrepCompleted, 
                        bool RoboticPrepCompleted, 
                        string LinerType) {
                JLToBuildRow rowJLToBuildRow = ((JLToBuildRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        COMPANY_ID,
                        Section_,
                        ProjectID,
                        SectionID,
                        LateralID,
                        Address,
                        Street,
                        Size_,
                        LinerSize,
                        Measured,
                        InProcess,
                        LinerInstalled,
                        Deleted,
                        MDeleted,
                        Name,
                        ProjectName,
                        FlowOrderID,
                        Flange,
                        Gasket,
                        MainSize,
                        DigRequiredPriorToLining,
                        DigRequiredPriorToLiningCompleted,
                        DigRequiredAfterLining,
                        DigRequiredAfterLiningCompleted,
                        OutOfScope,
                        HoldClientIssue,
                        HoldClientIssueResolved,
                        HoldLFSIssue,
                        HoldLFSIssueResolved,
                        LateralRequiresRoboticPrep,
                        LateralRequiresRoboticPrepCompleted,
                        RoboticPrepCompleted,
                        LinerType};
                rowJLToBuildRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJLToBuildRow);
                return rowJLToBuildRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLToBuildRow FindByAssetIDLateralIDSectionIDProjectIDSection_COMPANY_ID(int AssetID, string LateralID, string SectionID, int ProjectID, int Section_, int COMPANY_ID) {
                return ((JLToBuildRow)(this.Rows.Find(new object[] {
                            AssetID,
                            LateralID,
                            SectionID,
                            ProjectID,
                            Section_,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JLToBuildDataTable cln = ((JLToBuildDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JLToBuildDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnSection_ = base.Columns["Section_"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnLateralID = base.Columns["LateralID"];
                this.columnAddress = base.Columns["Address"];
                this.columnStreet = base.Columns["Street"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnLinerSize = base.Columns["LinerSize"];
                this.columnMeasured = base.Columns["Measured"];
                this.columnInProcess = base.Columns["InProcess"];
                this.columnLinerInstalled = base.Columns["LinerInstalled"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnMDeleted = base.Columns["MDeleted"];
                this.columnName = base.Columns["Name"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnFlange = base.Columns["Flange"];
                this.columnGasket = base.Columns["Gasket"];
                this.columnMainSize = base.Columns["MainSize"];
                this.columnDigRequiredPriorToLining = base.Columns["DigRequiredPriorToLining"];
                this.columnDigRequiredPriorToLiningCompleted = base.Columns["DigRequiredPriorToLiningCompleted"];
                this.columnDigRequiredAfterLining = base.Columns["DigRequiredAfterLining"];
                this.columnDigRequiredAfterLiningCompleted = base.Columns["DigRequiredAfterLiningCompleted"];
                this.columnOutOfScope = base.Columns["OutOfScope"];
                this.columnHoldClientIssue = base.Columns["HoldClientIssue"];
                this.columnHoldClientIssueResolved = base.Columns["HoldClientIssueResolved"];
                this.columnHoldLFSIssue = base.Columns["HoldLFSIssue"];
                this.columnHoldLFSIssueResolved = base.Columns["HoldLFSIssueResolved"];
                this.columnLateralRequiresRoboticPrep = base.Columns["LateralRequiresRoboticPrep"];
                this.columnLateralRequiresRoboticPrepCompleted = base.Columns["LateralRequiresRoboticPrepCompleted"];
                this.columnRoboticPrepCompleted = base.Columns["RoboticPrepCompleted"];
                this.columnLinerType = base.Columns["LinerType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnSection_ = new global::System.Data.DataColumn("Section_", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSection_);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnLateralID = new global::System.Data.DataColumn("LateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralID);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnLinerSize = new global::System.Data.DataColumn("LinerSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerSize);
                this.columnMeasured = new global::System.Data.DataColumn("Measured", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasured);
                this.columnInProcess = new global::System.Data.DataColumn("InProcess", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProcess);
                this.columnLinerInstalled = new global::System.Data.DataColumn("LinerInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInstalled);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnMDeleted = new global::System.Data.DataColumn("MDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMDeleted);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnFlange = new global::System.Data.DataColumn("Flange", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlange);
                this.columnGasket = new global::System.Data.DataColumn("Gasket", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasket);
                this.columnMainSize = new global::System.Data.DataColumn("MainSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainSize);
                this.columnDigRequiredPriorToLining = new global::System.Data.DataColumn("DigRequiredPriorToLining", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigRequiredPriorToLining);
                this.columnDigRequiredPriorToLiningCompleted = new global::System.Data.DataColumn("DigRequiredPriorToLiningCompleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigRequiredPriorToLiningCompleted);
                this.columnDigRequiredAfterLining = new global::System.Data.DataColumn("DigRequiredAfterLining", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigRequiredAfterLining);
                this.columnDigRequiredAfterLiningCompleted = new global::System.Data.DataColumn("DigRequiredAfterLiningCompleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDigRequiredAfterLiningCompleted);
                this.columnOutOfScope = new global::System.Data.DataColumn("OutOfScope", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutOfScope);
                this.columnHoldClientIssue = new global::System.Data.DataColumn("HoldClientIssue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldClientIssue);
                this.columnHoldClientIssueResolved = new global::System.Data.DataColumn("HoldClientIssueResolved", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldClientIssueResolved);
                this.columnHoldLFSIssue = new global::System.Data.DataColumn("HoldLFSIssue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldLFSIssue);
                this.columnHoldLFSIssueResolved = new global::System.Data.DataColumn("HoldLFSIssueResolved", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldLFSIssueResolved);
                this.columnLateralRequiresRoboticPrep = new global::System.Data.DataColumn("LateralRequiresRoboticPrep", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralRequiresRoboticPrep);
                this.columnLateralRequiresRoboticPrepCompleted = new global::System.Data.DataColumn("LateralRequiresRoboticPrepCompleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralRequiresRoboticPrepCompleted);
                this.columnRoboticPrepCompleted = new global::System.Data.DataColumn("RoboticPrepCompleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoboticPrepCompleted);
                this.columnLinerType = new global::System.Data.DataColumn("LinerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID,
                                this.columnLateralID,
                                this.columnSectionID,
                                this.columnProjectID,
                                this.columnSection_,
                                this.columnCOMPANY_ID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnSection_.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
                this.columnSectionID.AllowDBNull = false;
                this.columnLateralID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLToBuildRow NewJLToBuildRow() {
                return ((JLToBuildRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JLToBuildRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JLToBuildRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JLToBuildRowChanged != null)) {
                    this.JLToBuildRowChanged(this, new JLToBuildRowChangeEvent(((JLToBuildRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JLToBuildRowChanging != null)) {
                    this.JLToBuildRowChanging(this, new JLToBuildRowChangeEvent(((JLToBuildRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JLToBuildRowDeleted != null)) {
                    this.JLToBuildRowDeleted(this, new JLToBuildRowChangeEvent(((JLToBuildRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JLToBuildRowDeleting != null)) {
                    this.JLToBuildRowDeleting(this, new JLToBuildRowChangeEvent(((JLToBuildRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJLToBuildRow(JLToBuildRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JltoBuildReportTDS ds = new JltoBuildReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JLToBuildDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JLToBuildRow : global::System.Data.DataRow {
            
            private JLToBuildDataTable tableJLToBuild;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JLToBuildRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJLToBuild = ((JLToBuildDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableJLToBuild.AssetIDColumn]));
                }
                set {
                    this[this.tableJLToBuild.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableJLToBuild.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableJLToBuild.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Section_ {
                get {
                    return ((int)(this[this.tableJLToBuild.Section_Column]));
                }
                set {
                    this[this.tableJLToBuild.Section_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableJLToBuild.ProjectIDColumn]));
                }
                set {
                    this[this.tableJLToBuild.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    return ((string)(this[this.tableJLToBuild.SectionIDColumn]));
                }
                set {
                    this[this.tableJLToBuild.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralID {
                get {
                    return ((string)(this[this.tableJLToBuild.LateralIDColumn]));
                }
                set {
                    this[this.tableJLToBuild.LateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_ {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.Size_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerSize {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.LinerSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerSize\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.LinerSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Measured {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJLToBuild.MeasuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Measured\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.MeasuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InProcess {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJLToBuild.InProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProcess\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.InProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LinerInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJLToBuild.LinerInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInstalled\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.LinerInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableJLToBuild.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MDeleted {
                get {
                    try {
                        return ((bool)(this[this.tableJLToBuild.MDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MDeleted\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.MDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Flange {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.FlangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Flange\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.FlangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gasket {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.GasketColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gasket\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.GasketColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MainSize {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.MainSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainSize\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.MainSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DigRequiredPriorToLining {
                get {
                    try {
                        return ((bool)(this[this.tableJLToBuild.DigRequiredPriorToLiningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigRequiredPriorToLining\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.DigRequiredPriorToLiningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DigRequiredPriorToLiningCompleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJLToBuild.DigRequiredPriorToLiningCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigRequiredPriorToLiningCompleted\' in table \'JLToBuild\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.DigRequiredPriorToLiningCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DigRequiredAfterLining {
                get {
                    try {
                        return ((bool)(this[this.tableJLToBuild.DigRequiredAfterLiningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigRequiredAfterLining\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.DigRequiredAfterLiningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DigRequiredAfterLiningCompleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJLToBuild.DigRequiredAfterLiningCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DigRequiredAfterLiningCompleted\' in table \'JLToBuild\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.DigRequiredAfterLiningCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OutOfScope {
                get {
                    try {
                        return ((bool)(this[this.tableJLToBuild.OutOfScopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutOfScope\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.OutOfScopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HoldClientIssue {
                get {
                    try {
                        return ((bool)(this[this.tableJLToBuild.HoldClientIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldClientIssue\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.HoldClientIssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime HoldClientIssueResolved {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJLToBuild.HoldClientIssueResolvedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldClientIssueResolved\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.HoldClientIssueResolvedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HoldLFSIssue {
                get {
                    try {
                        return ((bool)(this[this.tableJLToBuild.HoldLFSIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldLFSIssue\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.HoldLFSIssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime HoldLFSIssueResolved {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJLToBuild.HoldLFSIssueResolvedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldLFSIssueResolved\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.HoldLFSIssueResolvedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LateralRequiresRoboticPrep {
                get {
                    try {
                        return ((bool)(this[this.tableJLToBuild.LateralRequiresRoboticPrepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralRequiresRoboticPrep\' in table \'JLToBuild\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.LateralRequiresRoboticPrepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LateralRequiresRoboticPrepCompleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJLToBuild.LateralRequiresRoboticPrepCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralRequiresRoboticPrepCompleted\' in table \'JLToBuild\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.LateralRequiresRoboticPrepCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RoboticPrepCompleted {
                get {
                    try {
                        return ((bool)(this[this.tableJLToBuild.RoboticPrepCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RoboticPrepCompleted\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.RoboticPrepCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerType {
                get {
                    try {
                        return ((string)(this[this.tableJLToBuild.LinerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerType\' in table \'JLToBuild\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLToBuild.LinerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableJLToBuild.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableJLToBuild.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableJLToBuild.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableJLToBuild.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null() {
                return this.IsNull(this.tableJLToBuild.Size_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null() {
                this[this.tableJLToBuild.Size_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerSizeNull() {
                return this.IsNull(this.tableJLToBuild.LinerSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerSizeNull() {
                this[this.tableJLToBuild.LinerSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasuredNull() {
                return this.IsNull(this.tableJLToBuild.MeasuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasuredNull() {
                this[this.tableJLToBuild.MeasuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProcessNull() {
                return this.IsNull(this.tableJLToBuild.InProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProcessNull() {
                this[this.tableJLToBuild.InProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInstalledNull() {
                return this.IsNull(this.tableJLToBuild.LinerInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInstalledNull() {
                this[this.tableJLToBuild.LinerInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableJLToBuild.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableJLToBuild.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMDeletedNull() {
                return this.IsNull(this.tableJLToBuild.MDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMDeletedNull() {
                this[this.tableJLToBuild.MDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableJLToBuild.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableJLToBuild.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableJLToBuild.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableJLToBuild.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableJLToBuild.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableJLToBuild.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlangeNull() {
                return this.IsNull(this.tableJLToBuild.FlangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlangeNull() {
                this[this.tableJLToBuild.FlangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasketNull() {
                return this.IsNull(this.tableJLToBuild.GasketColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGasketNull() {
                this[this.tableJLToBuild.GasketColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainSizeNull() {
                return this.IsNull(this.tableJLToBuild.MainSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainSizeNull() {
                this[this.tableJLToBuild.MainSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigRequiredPriorToLiningNull() {
                return this.IsNull(this.tableJLToBuild.DigRequiredPriorToLiningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigRequiredPriorToLiningNull() {
                this[this.tableJLToBuild.DigRequiredPriorToLiningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigRequiredPriorToLiningCompletedNull() {
                return this.IsNull(this.tableJLToBuild.DigRequiredPriorToLiningCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigRequiredPriorToLiningCompletedNull() {
                this[this.tableJLToBuild.DigRequiredPriorToLiningCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigRequiredAfterLiningNull() {
                return this.IsNull(this.tableJLToBuild.DigRequiredAfterLiningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigRequiredAfterLiningNull() {
                this[this.tableJLToBuild.DigRequiredAfterLiningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDigRequiredAfterLiningCompletedNull() {
                return this.IsNull(this.tableJLToBuild.DigRequiredAfterLiningCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDigRequiredAfterLiningCompletedNull() {
                this[this.tableJLToBuild.DigRequiredAfterLiningCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutOfScopeNull() {
                return this.IsNull(this.tableJLToBuild.OutOfScopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutOfScopeNull() {
                this[this.tableJLToBuild.OutOfScopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldClientIssueNull() {
                return this.IsNull(this.tableJLToBuild.HoldClientIssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldClientIssueNull() {
                this[this.tableJLToBuild.HoldClientIssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldClientIssueResolvedNull() {
                return this.IsNull(this.tableJLToBuild.HoldClientIssueResolvedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldClientIssueResolvedNull() {
                this[this.tableJLToBuild.HoldClientIssueResolvedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldLFSIssueNull() {
                return this.IsNull(this.tableJLToBuild.HoldLFSIssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldLFSIssueNull() {
                this[this.tableJLToBuild.HoldLFSIssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldLFSIssueResolvedNull() {
                return this.IsNull(this.tableJLToBuild.HoldLFSIssueResolvedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldLFSIssueResolvedNull() {
                this[this.tableJLToBuild.HoldLFSIssueResolvedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralRequiresRoboticPrepNull() {
                return this.IsNull(this.tableJLToBuild.LateralRequiresRoboticPrepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralRequiresRoboticPrepNull() {
                this[this.tableJLToBuild.LateralRequiresRoboticPrepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralRequiresRoboticPrepCompletedNull() {
                return this.IsNull(this.tableJLToBuild.LateralRequiresRoboticPrepCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralRequiresRoboticPrepCompletedNull() {
                this[this.tableJLToBuild.LateralRequiresRoboticPrepCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoboticPrepCompletedNull() {
                return this.IsNull(this.tableJLToBuild.RoboticPrepCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoboticPrepCompletedNull() {
                this[this.tableJLToBuild.RoboticPrepCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerTypeNull() {
                return this.IsNull(this.tableJLToBuild.LinerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerTypeNull() {
                this[this.tableJLToBuild.LinerTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JLToBuildRowChangeEvent : global::System.EventArgs {
            
            private JLToBuildRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLToBuildRowChangeEvent(JLToBuildRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLToBuildRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591