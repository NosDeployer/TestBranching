//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.JunctionLining {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("JlLiningPlanTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class JlLiningPlanTDS : global::System.Data.DataSet {
        
        private JlLiningPlanDataTable tableJlLiningPlan;
        
        private JlLiningPlanJlinerDataTable tableJlLiningPlanJliner;
        
        private global::System.Data.DataRelation relationJlLiningPlan_JlLiningPlanJliner;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JlLiningPlanTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected JlLiningPlanTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["JlLiningPlan"] != null)) {
                    base.Tables.Add(new JlLiningPlanDataTable(ds.Tables["JlLiningPlan"]));
                }
                if ((ds.Tables["JlLiningPlanJliner"] != null)) {
                    base.Tables.Add(new JlLiningPlanJlinerDataTable(ds.Tables["JlLiningPlanJliner"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JlLiningPlanDataTable JlLiningPlan {
            get {
                return this.tableJlLiningPlan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JlLiningPlanJlinerDataTable JlLiningPlanJliner {
            get {
                return this.tableJlLiningPlanJliner;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            JlLiningPlanTDS cln = ((JlLiningPlanTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["JlLiningPlan"] != null)) {
                    base.Tables.Add(new JlLiningPlanDataTable(ds.Tables["JlLiningPlan"]));
                }
                if ((ds.Tables["JlLiningPlanJliner"] != null)) {
                    base.Tables.Add(new JlLiningPlanJlinerDataTable(ds.Tables["JlLiningPlanJliner"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableJlLiningPlan = ((JlLiningPlanDataTable)(base.Tables["JlLiningPlan"]));
            if ((initTable == true)) {
                if ((this.tableJlLiningPlan != null)) {
                    this.tableJlLiningPlan.InitVars();
                }
            }
            this.tableJlLiningPlanJliner = ((JlLiningPlanJlinerDataTable)(base.Tables["JlLiningPlanJliner"]));
            if ((initTable == true)) {
                if ((this.tableJlLiningPlanJliner != null)) {
                    this.tableJlLiningPlanJliner.InitVars();
                }
            }
            this.relationJlLiningPlan_JlLiningPlanJliner = this.Relations["JlLiningPlan_JlLiningPlanJliner"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "JlLiningPlanTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/JlLiningPlanTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableJlLiningPlan = new JlLiningPlanDataTable();
            base.Tables.Add(this.tableJlLiningPlan);
            this.tableJlLiningPlanJliner = new JlLiningPlanJlinerDataTable();
            base.Tables.Add(this.tableJlLiningPlanJliner);
            this.relationJlLiningPlan_JlLiningPlanJliner = new global::System.Data.DataRelation("JlLiningPlan_JlLiningPlanJliner", new global::System.Data.DataColumn[] {
                        this.tableJlLiningPlan.AssetIDColumn,
                        this.tableJlLiningPlan.COMPANY_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableJlLiningPlanJliner.Section_Column,
                        this.tableJlLiningPlanJliner.COMPANY_IDColumn}, false);
            this.Relations.Add(this.relationJlLiningPlan_JlLiningPlanJliner);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJlLiningPlan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJlLiningPlanJliner() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            JlLiningPlanTDS ds = new JlLiningPlanTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void JlLiningPlanRowChangeEventHandler(object sender, JlLiningPlanRowChangeEvent e);
        
        public delegate void JlLiningPlanJlinerRowChangeEventHandler(object sender, JlLiningPlanJlinerRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JlLiningPlanDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnSize_;
            
            private global::System.Data.DataColumn columnStandardBypass;
            
            private global::System.Data.DataColumn columnStandardBypassComments;
            
            private global::System.Data.DataColumn columnTrafficControl;
            
            private global::System.Data.DataColumn columnTrafficControlDetails;
            
            private global::System.Data.DataColumn columnNumLats;
            
            private global::System.Data.DataColumn columnNotLinedYet;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnAllMeasured;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnFlusher;
            
            private global::System.Data.DataColumn columnFlusherMN;
            
            private global::System.Data.DataColumn columnLiner;
            
            private global::System.Data.DataColumn columnLinerMN;
            
            private global::System.Data.DataColumn columnRotator;
            
            private global::System.Data.DataColumn columnRotatorMN;
            
            private global::System.Data.DataColumn columnCompressor;
            
            private global::System.Data.DataColumn columnCompressorMN;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnNotMeasuredYet;
            
            private global::System.Data.DataColumn columnIssueWithLaterals;
            
            private global::System.Data.DataColumn columnNotDeliveredYet;
            
            private global::System.Data.DataColumn columnUSMHDescription;
            
            private global::System.Data.DataColumn columnDSMHDescription;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnUSMHAddress;
            
            private global::System.Data.DataColumn columnDSMHAddress;
            
            private global::System.Data.DataColumn columnAvailableToLine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanDataTable() {
                this.TableName = "JlLiningPlan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlLiningPlanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JlLiningPlanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column {
                get {
                    return this.columnSize_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandardBypassColumn {
                get {
                    return this.columnStandardBypass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandardBypassCommentsColumn {
                get {
                    return this.columnStandardBypassComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlColumn {
                get {
                    return this.columnTrafficControl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlDetailsColumn {
                get {
                    return this.columnTrafficControlDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumLatsColumn {
                get {
                    return this.columnNumLats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotLinedYetColumn {
                get {
                    return this.columnNotLinedYet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllMeasuredColumn {
                get {
                    return this.columnAllMeasured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlusherColumn {
                get {
                    return this.columnFlusher;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlusherMNColumn {
                get {
                    return this.columnFlusherMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerColumn {
                get {
                    return this.columnLiner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerMNColumn {
                get {
                    return this.columnLinerMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RotatorColumn {
                get {
                    return this.columnRotator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RotatorMNColumn {
                get {
                    return this.columnRotatorMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompressorColumn {
                get {
                    return this.columnCompressor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompressorMNColumn {
                get {
                    return this.columnCompressorMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotMeasuredYetColumn {
                get {
                    return this.columnNotMeasuredYet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueWithLateralsColumn {
                get {
                    return this.columnIssueWithLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotDeliveredYetColumn {
                get {
                    return this.columnNotDeliveredYet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHDescriptionColumn {
                get {
                    return this.columnUSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHDescriptionColumn {
                get {
                    return this.columnDSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHAddressColumn {
                get {
                    return this.columnUSMHAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHAddressColumn {
                get {
                    return this.columnDSMHAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvailableToLineColumn {
                get {
                    return this.columnAvailableToLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanRow this[int index] {
                get {
                    return ((JlLiningPlanRow)(this.Rows[index]));
                }
            }
            
            public event JlLiningPlanRowChangeEventHandler JlLiningPlanRowChanging;
            
            public event JlLiningPlanRowChangeEventHandler JlLiningPlanRowChanged;
            
            public event JlLiningPlanRowChangeEventHandler JlLiningPlanRowDeleting;
            
            public event JlLiningPlanRowChangeEventHandler JlLiningPlanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJlLiningPlanRow(JlLiningPlanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanRow AddJlLiningPlanRow(
                        int AssetID, 
                        int COMPANY_ID, 
                        string SectionID, 
                        string Street, 
                        string Size_, 
                        bool StandardBypass, 
                        string StandardBypassComments, 
                        string TrafficControl, 
                        string TrafficControlDetails, 
                        int NumLats, 
                        int NotLinedYet, 
                        string Length, 
                        string USMH, 
                        string DSMH, 
                        bool AllMeasured, 
                        System.DateTime Date_, 
                        string Flusher, 
                        string FlusherMN, 
                        string Liner, 
                        string LinerMN, 
                        string Rotator, 
                        string RotatorMN, 
                        string Compressor, 
                        string CompressorMN, 
                        string Selected, 
                        int NotMeasuredYet, 
                        string IssueWithLaterals, 
                        int NotDeliveredYet, 
                        string USMHDescription, 
                        string DSMHDescription, 
                        string FlowOrderID, 
                        int WorkID, 
                        string USMHAddress, 
                        string DSMHAddress, 
                        int AvailableToLine) {
                JlLiningPlanRow rowJlLiningPlanRow = ((JlLiningPlanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        COMPANY_ID,
                        SectionID,
                        Street,
                        Size_,
                        StandardBypass,
                        StandardBypassComments,
                        TrafficControl,
                        TrafficControlDetails,
                        NumLats,
                        NotLinedYet,
                        Length,
                        USMH,
                        DSMH,
                        AllMeasured,
                        Date_,
                        Flusher,
                        FlusherMN,
                        Liner,
                        LinerMN,
                        Rotator,
                        RotatorMN,
                        Compressor,
                        CompressorMN,
                        Selected,
                        NotMeasuredYet,
                        IssueWithLaterals,
                        NotDeliveredYet,
                        USMHDescription,
                        DSMHDescription,
                        FlowOrderID,
                        WorkID,
                        USMHAddress,
                        DSMHAddress,
                        AvailableToLine};
                rowJlLiningPlanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJlLiningPlanRow);
                return rowJlLiningPlanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanRow FindByAssetIDCOMPANY_ID(int AssetID, int COMPANY_ID) {
                return ((JlLiningPlanRow)(this.Rows.Find(new object[] {
                            AssetID,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JlLiningPlanDataTable cln = ((JlLiningPlanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JlLiningPlanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnStreet = base.Columns["Street"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnStandardBypass = base.Columns["StandardBypass"];
                this.columnStandardBypassComments = base.Columns["StandardBypassComments"];
                this.columnTrafficControl = base.Columns["TrafficControl"];
                this.columnTrafficControlDetails = base.Columns["TrafficControlDetails"];
                this.columnNumLats = base.Columns["NumLats"];
                this.columnNotLinedYet = base.Columns["NotLinedYet"];
                this.columnLength = base.Columns["Length"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnAllMeasured = base.Columns["AllMeasured"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnFlusher = base.Columns["Flusher"];
                this.columnFlusherMN = base.Columns["FlusherMN"];
                this.columnLiner = base.Columns["Liner"];
                this.columnLinerMN = base.Columns["LinerMN"];
                this.columnRotator = base.Columns["Rotator"];
                this.columnRotatorMN = base.Columns["RotatorMN"];
                this.columnCompressor = base.Columns["Compressor"];
                this.columnCompressorMN = base.Columns["CompressorMN"];
                this.columnSelected = base.Columns["Selected"];
                this.columnNotMeasuredYet = base.Columns["NotMeasuredYet"];
                this.columnIssueWithLaterals = base.Columns["IssueWithLaterals"];
                this.columnNotDeliveredYet = base.Columns["NotDeliveredYet"];
                this.columnUSMHDescription = base.Columns["USMHDescription"];
                this.columnDSMHDescription = base.Columns["DSMHDescription"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnWorkID = base.Columns["WorkID"];
                this.columnUSMHAddress = base.Columns["USMHAddress"];
                this.columnDSMHAddress = base.Columns["DSMHAddress"];
                this.columnAvailableToLine = base.Columns["AvailableToLine"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnStandardBypass = new global::System.Data.DataColumn("StandardBypass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardBypass);
                this.columnStandardBypassComments = new global::System.Data.DataColumn("StandardBypassComments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardBypassComments);
                this.columnTrafficControl = new global::System.Data.DataColumn("TrafficControl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControl);
                this.columnTrafficControlDetails = new global::System.Data.DataColumn("TrafficControlDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControlDetails);
                this.columnNumLats = new global::System.Data.DataColumn("NumLats", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumLats);
                this.columnNotLinedYet = new global::System.Data.DataColumn("NotLinedYet", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotLinedYet);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnAllMeasured = new global::System.Data.DataColumn("AllMeasured", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllMeasured);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnFlusher = new global::System.Data.DataColumn("Flusher", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlusher);
                this.columnFlusherMN = new global::System.Data.DataColumn("FlusherMN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlusherMN);
                this.columnLiner = new global::System.Data.DataColumn("Liner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiner);
                this.columnLinerMN = new global::System.Data.DataColumn("LinerMN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerMN);
                this.columnRotator = new global::System.Data.DataColumn("Rotator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRotator);
                this.columnRotatorMN = new global::System.Data.DataColumn("RotatorMN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRotatorMN);
                this.columnCompressor = new global::System.Data.DataColumn("Compressor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompressor);
                this.columnCompressorMN = new global::System.Data.DataColumn("CompressorMN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompressorMN);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnNotMeasuredYet = new global::System.Data.DataColumn("NotMeasuredYet", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotMeasuredYet);
                this.columnIssueWithLaterals = new global::System.Data.DataColumn("IssueWithLaterals", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueWithLaterals);
                this.columnNotDeliveredYet = new global::System.Data.DataColumn("NotDeliveredYet", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotDeliveredYet);
                this.columnUSMHDescription = new global::System.Data.DataColumn("USMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHDescription);
                this.columnDSMHDescription = new global::System.Data.DataColumn("DSMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHDescription);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnUSMHAddress = new global::System.Data.DataColumn("USMHAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHAddress);
                this.columnDSMHAddress = new global::System.Data.DataColumn("DSMHAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHAddress);
                this.columnAvailableToLine = new global::System.Data.DataColumn("AvailableToLine", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvailableToLine);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID,
                                this.columnCOMPANY_ID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnSectionID.AllowDBNull = false;
                this.columnSectionID.MaxLength = 50;
                this.columnStreet.MaxLength = 255;
                this.columnTrafficControl.MaxLength = 255;
                this.columnLength.MaxLength = 255;
                this.columnUSMH.MaxLength = 255;
                this.columnDSMH.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanRow NewJlLiningPlanRow() {
                return ((JlLiningPlanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JlLiningPlanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JlLiningPlanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JlLiningPlanRowChanged != null)) {
                    this.JlLiningPlanRowChanged(this, new JlLiningPlanRowChangeEvent(((JlLiningPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JlLiningPlanRowChanging != null)) {
                    this.JlLiningPlanRowChanging(this, new JlLiningPlanRowChangeEvent(((JlLiningPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JlLiningPlanRowDeleted != null)) {
                    this.JlLiningPlanRowDeleted(this, new JlLiningPlanRowChangeEvent(((JlLiningPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JlLiningPlanRowDeleting != null)) {
                    this.JlLiningPlanRowDeleting(this, new JlLiningPlanRowChangeEvent(((JlLiningPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJlLiningPlanRow(JlLiningPlanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JlLiningPlanTDS ds = new JlLiningPlanTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JlLiningPlanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JlLiningPlanJlinerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnSection_;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnLateralID;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnPullInDistance;
            
            private global::System.Data.DataColumn columnLinerSize;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnFlowOrderIDLateralID;
            
            private global::System.Data.DataColumn columnClientLateralID;
            
            private global::System.Data.DataColumn columnFlange;
            
            private global::System.Data.DataColumn columnCoPitLocation;
            
            private global::System.Data.DataColumn columnMainSize;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnParentInstallOrder;
            
            private global::System.Data.DataColumn columnSectionWorkID;
            
            private global::System.Data.DataColumn columnLinerType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanJlinerDataTable() {
                this.TableName = "JlLiningPlanJliner";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlLiningPlanJlinerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JlLiningPlanJlinerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Section_Column {
                get {
                    return this.columnSection_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralIDColumn {
                get {
                    return this.columnLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PullInDistanceColumn {
                get {
                    return this.columnPullInDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerSizeColumn {
                get {
                    return this.columnLinerSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDLateralIDColumn {
                get {
                    return this.columnFlowOrderIDLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientLateralIDColumn {
                get {
                    return this.columnClientLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlangeColumn {
                get {
                    return this.columnFlange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoPitLocationColumn {
                get {
                    return this.columnCoPitLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainSizeColumn {
                get {
                    return this.columnMainSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentInstallOrderColumn {
                get {
                    return this.columnParentInstallOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionWorkIDColumn {
                get {
                    return this.columnSectionWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerTypeColumn {
                get {
                    return this.columnLinerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanJlinerRow this[int index] {
                get {
                    return ((JlLiningPlanJlinerRow)(this.Rows[index]));
                }
            }
            
            public event JlLiningPlanJlinerRowChangeEventHandler JlLiningPlanJlinerRowChanging;
            
            public event JlLiningPlanJlinerRowChangeEventHandler JlLiningPlanJlinerRowChanged;
            
            public event JlLiningPlanJlinerRowChangeEventHandler JlLiningPlanJlinerRowDeleting;
            
            public event JlLiningPlanJlinerRowChangeEventHandler JlLiningPlanJlinerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJlLiningPlanJlinerRow(JlLiningPlanJlinerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanJlinerRow AddJlLiningPlanJlinerRow(
                        int AssetID, 
                        int Section_, 
                        int COMPANY_ID, 
                        string LateralID, 
                        string Address, 
                        string PullInDistance, 
                        string LinerSize, 
                        string Comments, 
                        string FlowOrderIDLateralID, 
                        string ClientLateralID, 
                        string Flange, 
                        string CoPitLocation, 
                        string MainSize, 
                        string FlowOrderID, 
                        int Selected, 
                        string SectionID, 
                        string ParentInstallOrder, 
                        int SectionWorkID, 
                        string LinerType) {
                JlLiningPlanJlinerRow rowJlLiningPlanJlinerRow = ((JlLiningPlanJlinerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        Section_,
                        COMPANY_ID,
                        LateralID,
                        Address,
                        PullInDistance,
                        LinerSize,
                        Comments,
                        FlowOrderIDLateralID,
                        ClientLateralID,
                        Flange,
                        CoPitLocation,
                        MainSize,
                        FlowOrderID,
                        Selected,
                        SectionID,
                        ParentInstallOrder,
                        SectionWorkID,
                        LinerType};
                rowJlLiningPlanJlinerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJlLiningPlanJlinerRow);
                return rowJlLiningPlanJlinerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanJlinerRow FindByAssetIDSection_COMPANY_ID(int AssetID, int Section_, int COMPANY_ID) {
                return ((JlLiningPlanJlinerRow)(this.Rows.Find(new object[] {
                            AssetID,
                            Section_,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JlLiningPlanJlinerDataTable cln = ((JlLiningPlanJlinerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JlLiningPlanJlinerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnSection_ = base.Columns["Section_"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnLateralID = base.Columns["LateralID"];
                this.columnAddress = base.Columns["Address"];
                this.columnPullInDistance = base.Columns["PullInDistance"];
                this.columnLinerSize = base.Columns["LinerSize"];
                this.columnComments = base.Columns["Comments"];
                this.columnFlowOrderIDLateralID = base.Columns["FlowOrderIDLateralID"];
                this.columnClientLateralID = base.Columns["ClientLateralID"];
                this.columnFlange = base.Columns["Flange"];
                this.columnCoPitLocation = base.Columns["CoPitLocation"];
                this.columnMainSize = base.Columns["MainSize"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnSelected = base.Columns["Selected"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnParentInstallOrder = base.Columns["ParentInstallOrder"];
                this.columnSectionWorkID = base.Columns["SectionWorkID"];
                this.columnLinerType = base.Columns["LinerType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnSection_ = new global::System.Data.DataColumn("Section_", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSection_);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnLateralID = new global::System.Data.DataColumn("LateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralID);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnPullInDistance = new global::System.Data.DataColumn("PullInDistance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPullInDistance);
                this.columnLinerSize = new global::System.Data.DataColumn("LinerSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerSize);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnFlowOrderIDLateralID = new global::System.Data.DataColumn("FlowOrderIDLateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderIDLateralID);
                this.columnClientLateralID = new global::System.Data.DataColumn("ClientLateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientLateralID);
                this.columnFlange = new global::System.Data.DataColumn("Flange", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlange);
                this.columnCoPitLocation = new global::System.Data.DataColumn("CoPitLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoPitLocation);
                this.columnMainSize = new global::System.Data.DataColumn("MainSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainSize);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnParentInstallOrder = new global::System.Data.DataColumn("ParentInstallOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentInstallOrder);
                this.columnSectionWorkID = new global::System.Data.DataColumn("SectionWorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionWorkID);
                this.columnLinerType = new global::System.Data.DataColumn("LinerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID,
                                this.columnSection_,
                                this.columnCOMPANY_ID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnSection_.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnLateralID.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnLinerSize.MaxLength = 40;
                this.columnComments.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanJlinerRow NewJlLiningPlanJlinerRow() {
                return ((JlLiningPlanJlinerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JlLiningPlanJlinerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JlLiningPlanJlinerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JlLiningPlanJlinerRowChanged != null)) {
                    this.JlLiningPlanJlinerRowChanged(this, new JlLiningPlanJlinerRowChangeEvent(((JlLiningPlanJlinerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JlLiningPlanJlinerRowChanging != null)) {
                    this.JlLiningPlanJlinerRowChanging(this, new JlLiningPlanJlinerRowChangeEvent(((JlLiningPlanJlinerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JlLiningPlanJlinerRowDeleted != null)) {
                    this.JlLiningPlanJlinerRowDeleted(this, new JlLiningPlanJlinerRowChangeEvent(((JlLiningPlanJlinerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JlLiningPlanJlinerRowDeleting != null)) {
                    this.JlLiningPlanJlinerRowDeleting(this, new JlLiningPlanJlinerRowChangeEvent(((JlLiningPlanJlinerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJlLiningPlanJlinerRow(JlLiningPlanJlinerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JlLiningPlanTDS ds = new JlLiningPlanTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JlLiningPlanJlinerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JlLiningPlanRow : global::System.Data.DataRow {
            
            private JlLiningPlanDataTable tableJlLiningPlan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlLiningPlanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJlLiningPlan = ((JlLiningPlanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableJlLiningPlan.AssetIDColumn]));
                }
                set {
                    this[this.tableJlLiningPlan.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableJlLiningPlan.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableJlLiningPlan.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    return ((string)(this[this.tableJlLiningPlan.SectionIDColumn]));
                }
                set {
                    this[this.tableJlLiningPlan.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_ {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.Size_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StandardBypass {
                get {
                    try {
                        return ((bool)(this[this.tableJlLiningPlan.StandardBypassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StandardBypass\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.StandardBypassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StandardBypassComments {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.StandardBypassCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StandardBypassComments\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.StandardBypassCommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControl {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.TrafficControlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControl\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.TrafficControlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControlDetails {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.TrafficControlDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControlDetails\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.TrafficControlDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumLats {
                get {
                    try {
                        return ((int)(this[this.tableJlLiningPlan.NumLatsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumLats\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.NumLatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NotLinedYet {
                get {
                    try {
                        return ((int)(this[this.tableJlLiningPlan.NotLinedYetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotLinedYet\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.NotLinedYetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMH {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMH {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllMeasured {
                get {
                    try {
                        return ((bool)(this[this.tableJlLiningPlan.AllMeasuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllMeasured\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.AllMeasuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlLiningPlan.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Flusher {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.FlusherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Flusher\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.FlusherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlusherMN {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.FlusherMNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlusherMN\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.FlusherMNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Liner {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.LinerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Liner\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.LinerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerMN {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.LinerMNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerMN\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.LinerMNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rotator {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.RotatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rotator\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.RotatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RotatorMN {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.RotatorMNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RotatorMN\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.RotatorMNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Compressor {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.CompressorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Compressor\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.CompressorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompressorMN {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.CompressorMNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompressorMN\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.CompressorMNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Selected {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NotMeasuredYet {
                get {
                    try {
                        return ((int)(this[this.tableJlLiningPlan.NotMeasuredYetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotMeasuredYet\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.NotMeasuredYetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IssueWithLaterals {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.IssueWithLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueWithLaterals\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.IssueWithLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NotDeliveredYet {
                get {
                    try {
                        return ((int)(this[this.tableJlLiningPlan.NotDeliveredYetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotDeliveredYet\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.NotDeliveredYetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.USMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHDescription\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.USMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.DSMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHDescription\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.DSMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    try {
                        return ((int)(this[this.tableJlLiningPlan.WorkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkID\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHAddress {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.USMHAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHAddress\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.USMHAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHAddress {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlan.DSMHAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHAddress\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.DSMHAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AvailableToLine {
                get {
                    try {
                        return ((int)(this[this.tableJlLiningPlan.AvailableToLineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AvailableToLine\' in table \'JlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlan.AvailableToLineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableJlLiningPlan.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableJlLiningPlan.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null() {
                return this.IsNull(this.tableJlLiningPlan.Size_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null() {
                this[this.tableJlLiningPlan.Size_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardBypassNull() {
                return this.IsNull(this.tableJlLiningPlan.StandardBypassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardBypassNull() {
                this[this.tableJlLiningPlan.StandardBypassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardBypassCommentsNull() {
                return this.IsNull(this.tableJlLiningPlan.StandardBypassCommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardBypassCommentsNull() {
                this[this.tableJlLiningPlan.StandardBypassCommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlNull() {
                return this.IsNull(this.tableJlLiningPlan.TrafficControlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlNull() {
                this[this.tableJlLiningPlan.TrafficControlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlDetailsNull() {
                return this.IsNull(this.tableJlLiningPlan.TrafficControlDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlDetailsNull() {
                this[this.tableJlLiningPlan.TrafficControlDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumLatsNull() {
                return this.IsNull(this.tableJlLiningPlan.NumLatsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumLatsNull() {
                this[this.tableJlLiningPlan.NumLatsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotLinedYetNull() {
                return this.IsNull(this.tableJlLiningPlan.NotLinedYetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotLinedYetNull() {
                this[this.tableJlLiningPlan.NotLinedYetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableJlLiningPlan.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableJlLiningPlan.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableJlLiningPlan.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableJlLiningPlan.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableJlLiningPlan.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableJlLiningPlan.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllMeasuredNull() {
                return this.IsNull(this.tableJlLiningPlan.AllMeasuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllMeasuredNull() {
                this[this.tableJlLiningPlan.AllMeasuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tableJlLiningPlan.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tableJlLiningPlan.Date_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlusherNull() {
                return this.IsNull(this.tableJlLiningPlan.FlusherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlusherNull() {
                this[this.tableJlLiningPlan.FlusherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlusherMNNull() {
                return this.IsNull(this.tableJlLiningPlan.FlusherMNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlusherMNNull() {
                this[this.tableJlLiningPlan.FlusherMNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerNull() {
                return this.IsNull(this.tableJlLiningPlan.LinerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerNull() {
                this[this.tableJlLiningPlan.LinerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerMNNull() {
                return this.IsNull(this.tableJlLiningPlan.LinerMNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerMNNull() {
                this[this.tableJlLiningPlan.LinerMNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRotatorNull() {
                return this.IsNull(this.tableJlLiningPlan.RotatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRotatorNull() {
                this[this.tableJlLiningPlan.RotatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRotatorMNNull() {
                return this.IsNull(this.tableJlLiningPlan.RotatorMNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRotatorMNNull() {
                this[this.tableJlLiningPlan.RotatorMNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompressorNull() {
                return this.IsNull(this.tableJlLiningPlan.CompressorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompressorNull() {
                this[this.tableJlLiningPlan.CompressorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompressorMNNull() {
                return this.IsNull(this.tableJlLiningPlan.CompressorMNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompressorMNNull() {
                this[this.tableJlLiningPlan.CompressorMNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableJlLiningPlan.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableJlLiningPlan.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotMeasuredYetNull() {
                return this.IsNull(this.tableJlLiningPlan.NotMeasuredYetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotMeasuredYetNull() {
                this[this.tableJlLiningPlan.NotMeasuredYetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueWithLateralsNull() {
                return this.IsNull(this.tableJlLiningPlan.IssueWithLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueWithLateralsNull() {
                this[this.tableJlLiningPlan.IssueWithLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotDeliveredYetNull() {
                return this.IsNull(this.tableJlLiningPlan.NotDeliveredYetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotDeliveredYetNull() {
                this[this.tableJlLiningPlan.NotDeliveredYetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHDescriptionNull() {
                return this.IsNull(this.tableJlLiningPlan.USMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHDescriptionNull() {
                this[this.tableJlLiningPlan.USMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHDescriptionNull() {
                return this.IsNull(this.tableJlLiningPlan.DSMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHDescriptionNull() {
                this[this.tableJlLiningPlan.DSMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableJlLiningPlan.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableJlLiningPlan.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkIDNull() {
                return this.IsNull(this.tableJlLiningPlan.WorkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkIDNull() {
                this[this.tableJlLiningPlan.WorkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHAddressNull() {
                return this.IsNull(this.tableJlLiningPlan.USMHAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHAddressNull() {
                this[this.tableJlLiningPlan.USMHAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHAddressNull() {
                return this.IsNull(this.tableJlLiningPlan.DSMHAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHAddressNull() {
                this[this.tableJlLiningPlan.DSMHAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailableToLineNull() {
                return this.IsNull(this.tableJlLiningPlan.AvailableToLineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailableToLineNull() {
                this[this.tableJlLiningPlan.AvailableToLineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanJlinerRow[] GetJlLiningPlanJlinerRows() {
                if ((this.Table.ChildRelations["JlLiningPlan_JlLiningPlanJliner"] == null)) {
                    return new JlLiningPlanJlinerRow[0];
                }
                else {
                    return ((JlLiningPlanJlinerRow[])(base.GetChildRows(this.Table.ChildRelations["JlLiningPlan_JlLiningPlanJliner"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JlLiningPlanJlinerRow : global::System.Data.DataRow {
            
            private JlLiningPlanJlinerDataTable tableJlLiningPlanJliner;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlLiningPlanJlinerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJlLiningPlanJliner = ((JlLiningPlanJlinerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableJlLiningPlanJliner.AssetIDColumn]));
                }
                set {
                    this[this.tableJlLiningPlanJliner.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Section_ {
                get {
                    return ((int)(this[this.tableJlLiningPlanJliner.Section_Column]));
                }
                set {
                    this[this.tableJlLiningPlanJliner.Section_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableJlLiningPlanJliner.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableJlLiningPlanJliner.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralID {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.LateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralID\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.LateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PullInDistance {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.PullInDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PullInDistance\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.PullInDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerSize {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.LinerSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerSize\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.LinerSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderIDLateralID {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.FlowOrderIDLateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderIDLateralID\' in table \'JlLiningPlanJliner\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.FlowOrderIDLateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientLateralID {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.ClientLateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientLateralID\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.ClientLateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Flange {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.FlangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Flange\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.FlangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoPitLocation {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.CoPitLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoPitLocation\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.CoPitLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MainSize {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.MainSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainSize\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.MainSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Selected {
                get {
                    try {
                        return ((int)(this[this.tableJlLiningPlanJliner.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParentInstallOrder {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.ParentInstallOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentInstallOrder\' in table \'JlLiningPlanJliner\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.ParentInstallOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SectionWorkID {
                get {
                    try {
                        return ((int)(this[this.tableJlLiningPlanJliner.SectionWorkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionWorkID\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.SectionWorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerType {
                get {
                    try {
                        return ((string)(this[this.tableJlLiningPlanJliner.LinerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerType\' in table \'JlLiningPlanJliner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlLiningPlanJliner.LinerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanRow JlLiningPlanRowParent {
                get {
                    return ((JlLiningPlanRow)(this.GetParentRow(this.Table.ParentRelations["JlLiningPlan_JlLiningPlanJliner"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["JlLiningPlan_JlLiningPlanJliner"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralIDNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.LateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralIDNull() {
                this[this.tableJlLiningPlanJliner.LateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableJlLiningPlanJliner.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPullInDistanceNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.PullInDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPullInDistanceNull() {
                this[this.tableJlLiningPlanJliner.PullInDistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerSizeNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.LinerSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerSizeNull() {
                this[this.tableJlLiningPlanJliner.LinerSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableJlLiningPlanJliner.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDLateralIDNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.FlowOrderIDLateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDLateralIDNull() {
                this[this.tableJlLiningPlanJliner.FlowOrderIDLateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientLateralIDNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.ClientLateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientLateralIDNull() {
                this[this.tableJlLiningPlanJliner.ClientLateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlangeNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.FlangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlangeNull() {
                this[this.tableJlLiningPlanJliner.FlangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoPitLocationNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.CoPitLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoPitLocationNull() {
                this[this.tableJlLiningPlanJliner.CoPitLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainSizeNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.MainSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainSizeNull() {
                this[this.tableJlLiningPlanJliner.MainSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableJlLiningPlanJliner.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableJlLiningPlanJliner.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableJlLiningPlanJliner.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentInstallOrderNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.ParentInstallOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentInstallOrderNull() {
                this[this.tableJlLiningPlanJliner.ParentInstallOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionWorkIDNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.SectionWorkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionWorkIDNull() {
                this[this.tableJlLiningPlanJliner.SectionWorkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerTypeNull() {
                return this.IsNull(this.tableJlLiningPlanJliner.LinerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerTypeNull() {
                this[this.tableJlLiningPlanJliner.LinerTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JlLiningPlanRowChangeEvent : global::System.EventArgs {
            
            private JlLiningPlanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanRowChangeEvent(JlLiningPlanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JlLiningPlanJlinerRowChangeEvent : global::System.EventArgs {
            
            private JlLiningPlanJlinerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanJlinerRowChangeEvent(JlLiningPlanJlinerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlLiningPlanJlinerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591