//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.JunctionLining {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("JlAddLateralsTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class JlAddLateralsTDS : global::System.Data.DataSet {
        
        private JlAddLateralsSearchDataTable tableJlAddLateralsSearch;
        
        private JlAddLateralsNewDataTable tableJlAddLateralsNew;
        
        private JlAddLateralsTempDataTable tableJlAddLateralsTemp;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JlAddLateralsTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected JlAddLateralsTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["JlAddLateralsSearch"] != null)) {
                    base.Tables.Add(new JlAddLateralsSearchDataTable(ds.Tables["JlAddLateralsSearch"]));
                }
                if ((ds.Tables["JlAddLateralsNew"] != null)) {
                    base.Tables.Add(new JlAddLateralsNewDataTable(ds.Tables["JlAddLateralsNew"]));
                }
                if ((ds.Tables["JlAddLateralsTemp"] != null)) {
                    base.Tables.Add(new JlAddLateralsTempDataTable(ds.Tables["JlAddLateralsTemp"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JlAddLateralsSearchDataTable JlAddLateralsSearch {
            get {
                return this.tableJlAddLateralsSearch;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JlAddLateralsNewDataTable JlAddLateralsNew {
            get {
                return this.tableJlAddLateralsNew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JlAddLateralsTempDataTable JlAddLateralsTemp {
            get {
                return this.tableJlAddLateralsTemp;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            JlAddLateralsTDS cln = ((JlAddLateralsTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["JlAddLateralsSearch"] != null)) {
                    base.Tables.Add(new JlAddLateralsSearchDataTable(ds.Tables["JlAddLateralsSearch"]));
                }
                if ((ds.Tables["JlAddLateralsNew"] != null)) {
                    base.Tables.Add(new JlAddLateralsNewDataTable(ds.Tables["JlAddLateralsNew"]));
                }
                if ((ds.Tables["JlAddLateralsTemp"] != null)) {
                    base.Tables.Add(new JlAddLateralsTempDataTable(ds.Tables["JlAddLateralsTemp"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableJlAddLateralsSearch = ((JlAddLateralsSearchDataTable)(base.Tables["JlAddLateralsSearch"]));
            if ((initTable == true)) {
                if ((this.tableJlAddLateralsSearch != null)) {
                    this.tableJlAddLateralsSearch.InitVars();
                }
            }
            this.tableJlAddLateralsNew = ((JlAddLateralsNewDataTable)(base.Tables["JlAddLateralsNew"]));
            if ((initTable == true)) {
                if ((this.tableJlAddLateralsNew != null)) {
                    this.tableJlAddLateralsNew.InitVars();
                }
            }
            this.tableJlAddLateralsTemp = ((JlAddLateralsTempDataTable)(base.Tables["JlAddLateralsTemp"]));
            if ((initTable == true)) {
                if ((this.tableJlAddLateralsTemp != null)) {
                    this.tableJlAddLateralsTemp.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "JlAddLateralsTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/JlAddLateralsTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableJlAddLateralsSearch = new JlAddLateralsSearchDataTable();
            base.Tables.Add(this.tableJlAddLateralsSearch);
            this.tableJlAddLateralsNew = new JlAddLateralsNewDataTable();
            base.Tables.Add(this.tableJlAddLateralsNew);
            this.tableJlAddLateralsTemp = new JlAddLateralsTempDataTable();
            base.Tables.Add(this.tableJlAddLateralsTemp);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJlAddLateralsSearch() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJlAddLateralsNew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJlAddLateralsTemp() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            JlAddLateralsTDS ds = new JlAddLateralsTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void JlAddLateralsSearchRowChangeEventHandler(object sender, JlAddLateralsSearchRowChangeEvent e);
        
        public delegate void JlAddLateralsNewRowChangeEventHandler(object sender, JlAddLateralsNewRowChangeEvent e);
        
        public delegate void JlAddLateralsTempRowChangeEventHandler(object sender, JlAddLateralsTempRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JlAddLateralsSearchDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnAssetId;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnNumLats;
            
            private global::System.Data.DataColumn columnNotLinedYet;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsSearchDataTable() {
                this.TableName = "JlAddLateralsSearch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlAddLateralsSearchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JlAddLateralsSearchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIdColumn {
                get {
                    return this.columnAssetId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumLatsColumn {
                get {
                    return this.columnNumLats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotLinedYetColumn {
                get {
                    return this.columnNotLinedYet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsSearchRow this[int index] {
                get {
                    return ((JlAddLateralsSearchRow)(this.Rows[index]));
                }
            }
            
            public event JlAddLateralsSearchRowChangeEventHandler JlAddLateralsSearchRowChanging;
            
            public event JlAddLateralsSearchRowChangeEventHandler JlAddLateralsSearchRowChanged;
            
            public event JlAddLateralsSearchRowChangeEventHandler JlAddLateralsSearchRowDeleting;
            
            public event JlAddLateralsSearchRowChangeEventHandler JlAddLateralsSearchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJlAddLateralsSearchRow(JlAddLateralsSearchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsSearchRow AddJlAddLateralsSearchRow(int WorkID, int AssetId, string SectionID, string Street, int NumLats, int NotLinedYet, bool Selected, bool Deleted, string FlowOrderID) {
                JlAddLateralsSearchRow rowJlAddLateralsSearchRow = ((JlAddLateralsSearchRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        AssetId,
                        SectionID,
                        Street,
                        NumLats,
                        NotLinedYet,
                        Selected,
                        Deleted,
                        FlowOrderID};
                rowJlAddLateralsSearchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJlAddLateralsSearchRow);
                return rowJlAddLateralsSearchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsSearchRow FindByWorkID(int WorkID) {
                return ((JlAddLateralsSearchRow)(this.Rows.Find(new object[] {
                            WorkID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JlAddLateralsSearchDataTable cln = ((JlAddLateralsSearchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JlAddLateralsSearchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnAssetId = base.Columns["AssetId"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnStreet = base.Columns["Street"];
                this.columnNumLats = base.Columns["NumLats"];
                this.columnNotLinedYet = base.Columns["NotLinedYet"];
                this.columnSelected = base.Columns["Selected"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnAssetId = new global::System.Data.DataColumn("AssetId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetId);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnNumLats = new global::System.Data.DataColumn("NumLats", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumLats);
                this.columnNotLinedYet = new global::System.Data.DataColumn("NotLinedYet", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotLinedYet);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnWorkID.Unique = true;
                this.columnAssetId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsSearchRow NewJlAddLateralsSearchRow() {
                return ((JlAddLateralsSearchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JlAddLateralsSearchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JlAddLateralsSearchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JlAddLateralsSearchRowChanged != null)) {
                    this.JlAddLateralsSearchRowChanged(this, new JlAddLateralsSearchRowChangeEvent(((JlAddLateralsSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JlAddLateralsSearchRowChanging != null)) {
                    this.JlAddLateralsSearchRowChanging(this, new JlAddLateralsSearchRowChangeEvent(((JlAddLateralsSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JlAddLateralsSearchRowDeleted != null)) {
                    this.JlAddLateralsSearchRowDeleted(this, new JlAddLateralsSearchRowChangeEvent(((JlAddLateralsSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JlAddLateralsSearchRowDeleting != null)) {
                    this.JlAddLateralsSearchRowDeleting(this, new JlAddLateralsSearchRowChangeEvent(((JlAddLateralsSearchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJlAddLateralsSearchRow(JlAddLateralsSearchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JlAddLateralsTDS ds = new JlAddLateralsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JlAddLateralsSearchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JlAddLateralsNewDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnLateralID;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnDistanceFromUSMH;
            
            private global::System.Data.DataColumn columnDistanceFromDSMH;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnInProject;
            
            private global::System.Data.DataColumn columnInProjectDatabase;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsNewDataTable() {
                this.TableName = "JlAddLateralsNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlAddLateralsNewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JlAddLateralsNewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralIDColumn {
                get {
                    return this.columnLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromUSMHColumn {
                get {
                    return this.columnDistanceFromUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromDSMHColumn {
                get {
                    return this.columnDistanceFromDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProjectColumn {
                get {
                    return this.columnInProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProjectDatabaseColumn {
                get {
                    return this.columnInProjectDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsNewRow this[int index] {
                get {
                    return ((JlAddLateralsNewRow)(this.Rows[index]));
                }
            }
            
            public event JlAddLateralsNewRowChangeEventHandler JlAddLateralsNewRowChanging;
            
            public event JlAddLateralsNewRowChangeEventHandler JlAddLateralsNewRowChanged;
            
            public event JlAddLateralsNewRowChangeEventHandler JlAddLateralsNewRowDeleting;
            
            public event JlAddLateralsNewRowChangeEventHandler JlAddLateralsNewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJlAddLateralsNewRow(JlAddLateralsNewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsNewRow AddJlAddLateralsNewRow(int AssetID, string LateralID, string Address, string DistanceFromUSMH, string DistanceFromDSMH, string State, bool InProject, bool InProjectDatabase, bool InDatabase, bool Deleted) {
                JlAddLateralsNewRow rowJlAddLateralsNewRow = ((JlAddLateralsNewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        LateralID,
                        Address,
                        DistanceFromUSMH,
                        DistanceFromDSMH,
                        State,
                        InProject,
                        InProjectDatabase,
                        InDatabase,
                        Deleted};
                rowJlAddLateralsNewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJlAddLateralsNewRow);
                return rowJlAddLateralsNewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsNewRow FindByAssetID(int AssetID) {
                return ((JlAddLateralsNewRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JlAddLateralsNewDataTable cln = ((JlAddLateralsNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JlAddLateralsNewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnLateralID = base.Columns["LateralID"];
                this.columnAddress = base.Columns["Address"];
                this.columnDistanceFromUSMH = base.Columns["DistanceFromUSMH"];
                this.columnDistanceFromDSMH = base.Columns["DistanceFromDSMH"];
                this.columnState = base.Columns["State"];
                this.columnInProject = base.Columns["InProject"];
                this.columnInProjectDatabase = base.Columns["InProjectDatabase"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnLateralID = new global::System.Data.DataColumn("LateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralID);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnDistanceFromUSMH = new global::System.Data.DataColumn("DistanceFromUSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromUSMH);
                this.columnDistanceFromDSMH = new global::System.Data.DataColumn("DistanceFromDSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromDSMH);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnInProject = new global::System.Data.DataColumn("InProject", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProject);
                this.columnInProjectDatabase = new global::System.Data.DataColumn("InProjectDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProjectDatabase);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnLateralID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsNewRow NewJlAddLateralsNewRow() {
                return ((JlAddLateralsNewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JlAddLateralsNewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JlAddLateralsNewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JlAddLateralsNewRowChanged != null)) {
                    this.JlAddLateralsNewRowChanged(this, new JlAddLateralsNewRowChangeEvent(((JlAddLateralsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JlAddLateralsNewRowChanging != null)) {
                    this.JlAddLateralsNewRowChanging(this, new JlAddLateralsNewRowChangeEvent(((JlAddLateralsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JlAddLateralsNewRowDeleted != null)) {
                    this.JlAddLateralsNewRowDeleted(this, new JlAddLateralsNewRowChangeEvent(((JlAddLateralsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JlAddLateralsNewRowDeleting != null)) {
                    this.JlAddLateralsNewRowDeleting(this, new JlAddLateralsNewRowChangeEvent(((JlAddLateralsNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJlAddLateralsNewRow(JlAddLateralsNewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JlAddLateralsTDS ds = new JlAddLateralsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JlAddLateralsNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JlAddLateralsTempDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnSectionWorkID;
            
            private global::System.Data.DataColumn columnSectionAssetID;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnLateralID;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnDistanceFromUSMH;
            
            private global::System.Data.DataColumn columnDistanceFromDSMH;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnInProject;
            
            private global::System.Data.DataColumn columnInProjectDatabase;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsTempDataTable() {
                this.TableName = "JlAddLateralsTemp";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlAddLateralsTempDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JlAddLateralsTempDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionWorkIDColumn {
                get {
                    return this.columnSectionWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionAssetIDColumn {
                get {
                    return this.columnSectionAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralIDColumn {
                get {
                    return this.columnLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromUSMHColumn {
                get {
                    return this.columnDistanceFromUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromDSMHColumn {
                get {
                    return this.columnDistanceFromDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProjectColumn {
                get {
                    return this.columnInProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProjectDatabaseColumn {
                get {
                    return this.columnInProjectDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsTempRow this[int index] {
                get {
                    return ((JlAddLateralsTempRow)(this.Rows[index]));
                }
            }
            
            public event JlAddLateralsTempRowChangeEventHandler JlAddLateralsTempRowChanging;
            
            public event JlAddLateralsTempRowChangeEventHandler JlAddLateralsTempRowChanged;
            
            public event JlAddLateralsTempRowChangeEventHandler JlAddLateralsTempRowDeleting;
            
            public event JlAddLateralsTempRowChangeEventHandler JlAddLateralsTempRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJlAddLateralsTempRow(JlAddLateralsTempRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsTempRow AddJlAddLateralsTempRow(int ID, int AssetID, int SectionWorkID, int SectionAssetID, string SectionID, string LateralID, string Address, string DistanceFromUSMH, string DistanceFromDSMH, string State, bool InProject, bool InProjectDatabase, bool InDatabase, bool Deleted) {
                JlAddLateralsTempRow rowJlAddLateralsTempRow = ((JlAddLateralsTempRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        AssetID,
                        SectionWorkID,
                        SectionAssetID,
                        SectionID,
                        LateralID,
                        Address,
                        DistanceFromUSMH,
                        DistanceFromDSMH,
                        State,
                        InProject,
                        InProjectDatabase,
                        InDatabase,
                        Deleted};
                rowJlAddLateralsTempRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJlAddLateralsTempRow);
                return rowJlAddLateralsTempRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsTempRow FindByID(int ID) {
                return ((JlAddLateralsTempRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JlAddLateralsTempDataTable cln = ((JlAddLateralsTempDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JlAddLateralsTempDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnAssetID = base.Columns["AssetID"];
                this.columnSectionWorkID = base.Columns["SectionWorkID"];
                this.columnSectionAssetID = base.Columns["SectionAssetID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnLateralID = base.Columns["LateralID"];
                this.columnAddress = base.Columns["Address"];
                this.columnDistanceFromUSMH = base.Columns["DistanceFromUSMH"];
                this.columnDistanceFromDSMH = base.Columns["DistanceFromDSMH"];
                this.columnState = base.Columns["State"];
                this.columnInProject = base.Columns["InProject"];
                this.columnInProjectDatabase = base.Columns["InProjectDatabase"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnSectionWorkID = new global::System.Data.DataColumn("SectionWorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionWorkID);
                this.columnSectionAssetID = new global::System.Data.DataColumn("SectionAssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionAssetID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnLateralID = new global::System.Data.DataColumn("LateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralID);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnDistanceFromUSMH = new global::System.Data.DataColumn("DistanceFromUSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromUSMH);
                this.columnDistanceFromDSMH = new global::System.Data.DataColumn("DistanceFromDSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromDSMH);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnInProject = new global::System.Data.DataColumn("InProject", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProject);
                this.columnInProjectDatabase = new global::System.Data.DataColumn("InProjectDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProjectDatabase);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnAssetID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsTempRow NewJlAddLateralsTempRow() {
                return ((JlAddLateralsTempRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JlAddLateralsTempRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JlAddLateralsTempRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JlAddLateralsTempRowChanged != null)) {
                    this.JlAddLateralsTempRowChanged(this, new JlAddLateralsTempRowChangeEvent(((JlAddLateralsTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JlAddLateralsTempRowChanging != null)) {
                    this.JlAddLateralsTempRowChanging(this, new JlAddLateralsTempRowChangeEvent(((JlAddLateralsTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JlAddLateralsTempRowDeleted != null)) {
                    this.JlAddLateralsTempRowDeleted(this, new JlAddLateralsTempRowChangeEvent(((JlAddLateralsTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JlAddLateralsTempRowDeleting != null)) {
                    this.JlAddLateralsTempRowDeleting(this, new JlAddLateralsTempRowChangeEvent(((JlAddLateralsTempRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJlAddLateralsTempRow(JlAddLateralsTempRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JlAddLateralsTDS ds = new JlAddLateralsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JlAddLateralsTempDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JlAddLateralsSearchRow : global::System.Data.DataRow {
            
            private JlAddLateralsSearchDataTable tableJlAddLateralsSearch;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlAddLateralsSearchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJlAddLateralsSearch = ((JlAddLateralsSearchDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableJlAddLateralsSearch.WorkIDColumn]));
                }
                set {
                    this[this.tableJlAddLateralsSearch.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetId {
                get {
                    return ((int)(this[this.tableJlAddLateralsSearch.AssetIdColumn]));
                }
                set {
                    this[this.tableJlAddLateralsSearch.AssetIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsSearch.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'JlAddLateralsSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsSearch.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsSearch.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'JlAddLateralsSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsSearch.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumLats {
                get {
                    try {
                        return ((int)(this[this.tableJlAddLateralsSearch.NumLatsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumLats\' in table \'JlAddLateralsSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsSearch.NumLatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NotLinedYet {
                get {
                    try {
                        return ((int)(this[this.tableJlAddLateralsSearch.NotLinedYetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotLinedYet\' in table \'JlAddLateralsSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsSearch.NotLinedYetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsSearch.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'JlAddLateralsSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsSearch.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsSearch.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'JlAddLateralsSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsSearch.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsSearch.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'JlAddLateralsSearch\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsSearch.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableJlAddLateralsSearch.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableJlAddLateralsSearch.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableJlAddLateralsSearch.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableJlAddLateralsSearch.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumLatsNull() {
                return this.IsNull(this.tableJlAddLateralsSearch.NumLatsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumLatsNull() {
                this[this.tableJlAddLateralsSearch.NumLatsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotLinedYetNull() {
                return this.IsNull(this.tableJlAddLateralsSearch.NotLinedYetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotLinedYetNull() {
                this[this.tableJlAddLateralsSearch.NotLinedYetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableJlAddLateralsSearch.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableJlAddLateralsSearch.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableJlAddLateralsSearch.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableJlAddLateralsSearch.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableJlAddLateralsSearch.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableJlAddLateralsSearch.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JlAddLateralsNewRow : global::System.Data.DataRow {
            
            private JlAddLateralsNewDataTable tableJlAddLateralsNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlAddLateralsNewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJlAddLateralsNew = ((JlAddLateralsNewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableJlAddLateralsNew.AssetIDColumn]));
                }
                set {
                    this[this.tableJlAddLateralsNew.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralID {
                get {
                    return ((string)(this[this.tableJlAddLateralsNew.LateralIDColumn]));
                }
                set {
                    this[this.tableJlAddLateralsNew.LateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsNew.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'JlAddLateralsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsNew.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromUSMH {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsNew.DistanceFromUSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromUSMH\' in table \'JlAddLateralsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsNew.DistanceFromUSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromDSMH {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsNew.DistanceFromDSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromDSMH\' in table \'JlAddLateralsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsNew.DistanceFromDSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsNew.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'JlAddLateralsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsNew.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InProject {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsNew.InProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProject\' in table \'JlAddLateralsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsNew.InProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InProjectDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsNew.InProjectDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProjectDatabase\' in table \'JlAddLateralsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsNew.InProjectDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsNew.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'JlAddLateralsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsNew.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsNew.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'JlAddLateralsNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsNew.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableJlAddLateralsNew.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableJlAddLateralsNew.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromUSMHNull() {
                return this.IsNull(this.tableJlAddLateralsNew.DistanceFromUSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromUSMHNull() {
                this[this.tableJlAddLateralsNew.DistanceFromUSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromDSMHNull() {
                return this.IsNull(this.tableJlAddLateralsNew.DistanceFromDSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromDSMHNull() {
                this[this.tableJlAddLateralsNew.DistanceFromDSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableJlAddLateralsNew.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableJlAddLateralsNew.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProjectNull() {
                return this.IsNull(this.tableJlAddLateralsNew.InProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProjectNull() {
                this[this.tableJlAddLateralsNew.InProjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProjectDatabaseNull() {
                return this.IsNull(this.tableJlAddLateralsNew.InProjectDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProjectDatabaseNull() {
                this[this.tableJlAddLateralsNew.InProjectDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableJlAddLateralsNew.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableJlAddLateralsNew.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableJlAddLateralsNew.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableJlAddLateralsNew.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JlAddLateralsTempRow : global::System.Data.DataRow {
            
            private JlAddLateralsTempDataTable tableJlAddLateralsTemp;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlAddLateralsTempRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJlAddLateralsTemp = ((JlAddLateralsTempDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableJlAddLateralsTemp.IDColumn]));
                }
                set {
                    this[this.tableJlAddLateralsTemp.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableJlAddLateralsTemp.AssetIDColumn]));
                }
                set {
                    this[this.tableJlAddLateralsTemp.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SectionWorkID {
                get {
                    try {
                        return ((int)(this[this.tableJlAddLateralsTemp.SectionWorkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionWorkID\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.SectionWorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SectionAssetID {
                get {
                    try {
                        return ((int)(this[this.tableJlAddLateralsTemp.SectionAssetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionAssetID\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.SectionAssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsTemp.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralID {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsTemp.LateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralID\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.LateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsTemp.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromUSMH {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsTemp.DistanceFromUSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromUSMH\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.DistanceFromUSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromDSMH {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsTemp.DistanceFromDSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromDSMH\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.DistanceFromDSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableJlAddLateralsTemp.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InProject {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsTemp.InProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProject\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.InProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InProjectDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsTemp.InProjectDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProjectDatabase\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.InProjectDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsTemp.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableJlAddLateralsTemp.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'JlAddLateralsTemp\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlAddLateralsTemp.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionWorkIDNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.SectionWorkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionWorkIDNull() {
                this[this.tableJlAddLateralsTemp.SectionWorkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionAssetIDNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.SectionAssetIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionAssetIDNull() {
                this[this.tableJlAddLateralsTemp.SectionAssetIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableJlAddLateralsTemp.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralIDNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.LateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralIDNull() {
                this[this.tableJlAddLateralsTemp.LateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableJlAddLateralsTemp.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromUSMHNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.DistanceFromUSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromUSMHNull() {
                this[this.tableJlAddLateralsTemp.DistanceFromUSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromDSMHNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.DistanceFromDSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromDSMHNull() {
                this[this.tableJlAddLateralsTemp.DistanceFromDSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableJlAddLateralsTemp.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProjectNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.InProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProjectNull() {
                this[this.tableJlAddLateralsTemp.InProjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProjectDatabaseNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.InProjectDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProjectDatabaseNull() {
                this[this.tableJlAddLateralsTemp.InProjectDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableJlAddLateralsTemp.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableJlAddLateralsTemp.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableJlAddLateralsTemp.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JlAddLateralsSearchRowChangeEvent : global::System.EventArgs {
            
            private JlAddLateralsSearchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsSearchRowChangeEvent(JlAddLateralsSearchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsSearchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JlAddLateralsNewRowChangeEvent : global::System.EventArgs {
            
            private JlAddLateralsNewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsNewRowChangeEvent(JlAddLateralsNewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JlAddLateralsTempRowChangeEvent : global::System.EventArgs {
            
            private JlAddLateralsTempRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsTempRowChangeEvent(JlAddLateralsTempRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlAddLateralsTempRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591