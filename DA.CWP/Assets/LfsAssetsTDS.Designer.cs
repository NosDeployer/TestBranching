//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.Assets {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("LfsAssetsTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class LfsAssetsTDS : global::System.Data.DataSet {
        
        private LFS_ASSETDataTable tableLFS_ASSET;
        
        private LFS_ASSET_SEWERDataTable tableLFS_ASSET_SEWER;
        
        private LFS_ASSET_SEWER_LATERALDataTable tableLFS_ASSET_SEWER_LATERAL;
        
        private LFS_ASSET_SEWER_LATERAL_CLIENTDataTable tableLFS_ASSET_SEWER_LATERAL_CLIENT;
        
        private LFS_ASSET_SEWER_SECTIONDataTable tableLFS_ASSET_SEWER_SECTION;
        
        private LFS_ASSET_SEWER_SECTION_THICKNESSDataTable tableLFS_ASSET_SEWER_SECTION_THICKNESS;
        
        private LFS_ASSET_SEWER_MHDataTable tableLFS_ASSET_SEWER_MH;
        
        private global::System.Data.DataRelation relationFK_LFS_ASSET_LFS_ASSET_SEWER;
        
        private global::System.Data.DataRelation relationLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL;
        
        private global::System.Data.DataRelation relationLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT;
        
        private global::System.Data.DataRelation relationFK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION;
        
        private global::System.Data.DataRelation relationLFS_ASSET_LFS_ASSET_SEWER_SECTION;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LfsAssetsTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected LfsAssetsTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_ASSET"] != null)) {
                    base.Tables.Add(new LFS_ASSETDataTable(ds.Tables["LFS_ASSET"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWERDataTable(ds.Tables["LFS_ASSET_SEWER"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_LATERAL"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_LATERALDataTable(ds.Tables["LFS_ASSET_SEWER_LATERAL"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_LATERAL_CLIENT"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_LATERAL_CLIENTDataTable(ds.Tables["LFS_ASSET_SEWER_LATERAL_CLIENT"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_SECTION"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_SECTIONDataTable(ds.Tables["LFS_ASSET_SEWER_SECTION"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_SECTION_THICKNESS"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_SECTION_THICKNESSDataTable(ds.Tables["LFS_ASSET_SEWER_SECTION_THICKNESS"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_MH"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_MHDataTable(ds.Tables["LFS_ASSET_SEWER_MH"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_ASSETDataTable LFS_ASSET {
            get {
                return this.tableLFS_ASSET;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_ASSET_SEWERDataTable LFS_ASSET_SEWER {
            get {
                return this.tableLFS_ASSET_SEWER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_ASSET_SEWER_LATERALDataTable LFS_ASSET_SEWER_LATERAL {
            get {
                return this.tableLFS_ASSET_SEWER_LATERAL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_ASSET_SEWER_LATERAL_CLIENTDataTable LFS_ASSET_SEWER_LATERAL_CLIENT {
            get {
                return this.tableLFS_ASSET_SEWER_LATERAL_CLIENT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_ASSET_SEWER_SECTIONDataTable LFS_ASSET_SEWER_SECTION {
            get {
                return this.tableLFS_ASSET_SEWER_SECTION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_ASSET_SEWER_SECTION_THICKNESSDataTable LFS_ASSET_SEWER_SECTION_THICKNESS {
            get {
                return this.tableLFS_ASSET_SEWER_SECTION_THICKNESS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_ASSET_SEWER_MHDataTable LFS_ASSET_SEWER_MH {
            get {
                return this.tableLFS_ASSET_SEWER_MH;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            LfsAssetsTDS cln = ((LfsAssetsTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_ASSET"] != null)) {
                    base.Tables.Add(new LFS_ASSETDataTable(ds.Tables["LFS_ASSET"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWERDataTable(ds.Tables["LFS_ASSET_SEWER"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_LATERAL"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_LATERALDataTable(ds.Tables["LFS_ASSET_SEWER_LATERAL"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_LATERAL_CLIENT"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_LATERAL_CLIENTDataTable(ds.Tables["LFS_ASSET_SEWER_LATERAL_CLIENT"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_SECTION"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_SECTIONDataTable(ds.Tables["LFS_ASSET_SEWER_SECTION"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_SECTION_THICKNESS"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_SECTION_THICKNESSDataTable(ds.Tables["LFS_ASSET_SEWER_SECTION_THICKNESS"]));
                }
                if ((ds.Tables["LFS_ASSET_SEWER_MH"] != null)) {
                    base.Tables.Add(new LFS_ASSET_SEWER_MHDataTable(ds.Tables["LFS_ASSET_SEWER_MH"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_ASSET = ((LFS_ASSETDataTable)(base.Tables["LFS_ASSET"]));
            if ((initTable == true)) {
                if ((this.tableLFS_ASSET != null)) {
                    this.tableLFS_ASSET.InitVars();
                }
            }
            this.tableLFS_ASSET_SEWER = ((LFS_ASSET_SEWERDataTable)(base.Tables["LFS_ASSET_SEWER"]));
            if ((initTable == true)) {
                if ((this.tableLFS_ASSET_SEWER != null)) {
                    this.tableLFS_ASSET_SEWER.InitVars();
                }
            }
            this.tableLFS_ASSET_SEWER_LATERAL = ((LFS_ASSET_SEWER_LATERALDataTable)(base.Tables["LFS_ASSET_SEWER_LATERAL"]));
            if ((initTable == true)) {
                if ((this.tableLFS_ASSET_SEWER_LATERAL != null)) {
                    this.tableLFS_ASSET_SEWER_LATERAL.InitVars();
                }
            }
            this.tableLFS_ASSET_SEWER_LATERAL_CLIENT = ((LFS_ASSET_SEWER_LATERAL_CLIENTDataTable)(base.Tables["LFS_ASSET_SEWER_LATERAL_CLIENT"]));
            if ((initTable == true)) {
                if ((this.tableLFS_ASSET_SEWER_LATERAL_CLIENT != null)) {
                    this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.InitVars();
                }
            }
            this.tableLFS_ASSET_SEWER_SECTION = ((LFS_ASSET_SEWER_SECTIONDataTable)(base.Tables["LFS_ASSET_SEWER_SECTION"]));
            if ((initTable == true)) {
                if ((this.tableLFS_ASSET_SEWER_SECTION != null)) {
                    this.tableLFS_ASSET_SEWER_SECTION.InitVars();
                }
            }
            this.tableLFS_ASSET_SEWER_SECTION_THICKNESS = ((LFS_ASSET_SEWER_SECTION_THICKNESSDataTable)(base.Tables["LFS_ASSET_SEWER_SECTION_THICKNESS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_ASSET_SEWER_SECTION_THICKNESS != null)) {
                    this.tableLFS_ASSET_SEWER_SECTION_THICKNESS.InitVars();
                }
            }
            this.tableLFS_ASSET_SEWER_MH = ((LFS_ASSET_SEWER_MHDataTable)(base.Tables["LFS_ASSET_SEWER_MH"]));
            if ((initTable == true)) {
                if ((this.tableLFS_ASSET_SEWER_MH != null)) {
                    this.tableLFS_ASSET_SEWER_MH.InitVars();
                }
            }
            this.relationFK_LFS_ASSET_LFS_ASSET_SEWER = this.Relations["FK_LFS_ASSET_LFS_ASSET_SEWER"];
            this.relationLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL = this.Relations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL"];
            this.relationLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT = this.Relations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT"];
            this.relationFK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION = this.Relations["FK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION"];
            this.relationLFS_ASSET_LFS_ASSET_SEWER_SECTION = this.Relations["LFS_ASSET_LFS_ASSET_SEWER_SECTION"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LfsAssetsTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/LfsAssetsTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_ASSET = new LFS_ASSETDataTable();
            base.Tables.Add(this.tableLFS_ASSET);
            this.tableLFS_ASSET_SEWER = new LFS_ASSET_SEWERDataTable();
            base.Tables.Add(this.tableLFS_ASSET_SEWER);
            this.tableLFS_ASSET_SEWER_LATERAL = new LFS_ASSET_SEWER_LATERALDataTable();
            base.Tables.Add(this.tableLFS_ASSET_SEWER_LATERAL);
            this.tableLFS_ASSET_SEWER_LATERAL_CLIENT = new LFS_ASSET_SEWER_LATERAL_CLIENTDataTable();
            base.Tables.Add(this.tableLFS_ASSET_SEWER_LATERAL_CLIENT);
            this.tableLFS_ASSET_SEWER_SECTION = new LFS_ASSET_SEWER_SECTIONDataTable();
            base.Tables.Add(this.tableLFS_ASSET_SEWER_SECTION);
            this.tableLFS_ASSET_SEWER_SECTION_THICKNESS = new LFS_ASSET_SEWER_SECTION_THICKNESSDataTable();
            base.Tables.Add(this.tableLFS_ASSET_SEWER_SECTION_THICKNESS);
            this.tableLFS_ASSET_SEWER_MH = new LFS_ASSET_SEWER_MHDataTable();
            base.Tables.Add(this.tableLFS_ASSET_SEWER_MH);
            this.relationFK_LFS_ASSET_LFS_ASSET_SEWER = new global::System.Data.DataRelation("FK_LFS_ASSET_LFS_ASSET_SEWER", new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET.AssetIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET_SEWER.AssetIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_ASSET_LFS_ASSET_SEWER);
            this.relationLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL = new global::System.Data.DataRelation("LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL", new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET_SEWER.AssetIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET_SEWER_LATERAL.AssetIDColumn}, false);
            this.Relations.Add(this.relationLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL);
            this.relationLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT = new global::System.Data.DataRelation("LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT", new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET_SEWER.AssetIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.AssetIDColumn}, false);
            this.Relations.Add(this.relationLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT);
            this.relationFK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION = new global::System.Data.DataRelation("FK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION", new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET_SEWER_SECTION_THICKNESS.ThicknessColumn,
                        this.tableLFS_ASSET_SEWER_SECTION_THICKNESS.COMPANY_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET_SEWER_SECTION.ThicknessColumn,
                        this.tableLFS_ASSET_SEWER_SECTION.COMPANY_IDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION);
            this.relationLFS_ASSET_LFS_ASSET_SEWER_SECTION = new global::System.Data.DataRelation("LFS_ASSET_LFS_ASSET_SEWER_SECTION", new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET_SEWER.AssetIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_ASSET_SEWER_SECTION.AssetIDColumn}, false);
            this.Relations.Add(this.relationLFS_ASSET_LFS_ASSET_SEWER_SECTION);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_ASSET() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_ASSET_SEWER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_ASSET_SEWER_LATERAL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_ASSET_SEWER_LATERAL_CLIENT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_ASSET_SEWER_SECTION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_ASSET_SEWER_SECTION_THICKNESS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_ASSET_SEWER_MH() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            LfsAssetsTDS ds = new LfsAssetsTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_ASSETRowChangeEventHandler(object sender, LFS_ASSETRowChangeEvent e);
        
        public delegate void LFS_ASSET_SEWERRowChangeEventHandler(object sender, LFS_ASSET_SEWERRowChangeEvent e);
        
        public delegate void LFS_ASSET_SEWER_LATERALRowChangeEventHandler(object sender, LFS_ASSET_SEWER_LATERALRowChangeEvent e);
        
        public delegate void LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEventHandler(object sender, LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEvent e);
        
        public delegate void LFS_ASSET_SEWER_SECTIONRowChangeEventHandler(object sender, LFS_ASSET_SEWER_SECTIONRowChangeEvent e);
        
        public delegate void LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEventHandler(object sender, LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEvent e);
        
        public delegate void LFS_ASSET_SEWER_MHRowChangeEventHandler(object sender, LFS_ASSET_SEWER_MHRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_ASSETDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSETDataTable() {
                this.TableName = "LFS_ASSET";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSETDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_ASSETDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSETRow this[int index] {
                get {
                    return ((LFS_ASSETRow)(this.Rows[index]));
                }
            }
            
            public event LFS_ASSETRowChangeEventHandler LFS_ASSETRowChanging;
            
            public event LFS_ASSETRowChangeEventHandler LFS_ASSETRowChanged;
            
            public event LFS_ASSETRowChangeEventHandler LFS_ASSETRowDeleting;
            
            public event LFS_ASSETRowChangeEventHandler LFS_ASSETRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_ASSETRow(LFS_ASSETRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSETRow AddLFS_ASSETRow(int AssetID, bool Deleted, int COMPANY_ID) {
                LFS_ASSETRow rowLFS_ASSETRow = ((LFS_ASSETRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        Deleted,
                        COMPANY_ID};
                rowLFS_ASSETRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_ASSETRow);
                return rowLFS_ASSETRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSETRow FindByAssetID(int AssetID) {
                return ((LFS_ASSETRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_ASSETDataTable cln = ((LFS_ASSETDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_ASSETDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSETRow NewLFS_ASSETRow() {
                return ((LFS_ASSETRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_ASSETRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_ASSETRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_ASSETRowChanged != null)) {
                    this.LFS_ASSETRowChanged(this, new LFS_ASSETRowChangeEvent(((LFS_ASSETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_ASSETRowChanging != null)) {
                    this.LFS_ASSETRowChanging(this, new LFS_ASSETRowChangeEvent(((LFS_ASSETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_ASSETRowDeleted != null)) {
                    this.LFS_ASSETRowDeleted(this, new LFS_ASSETRowChangeEvent(((LFS_ASSETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_ASSETRowDeleting != null)) {
                    this.LFS_ASSETRowDeleting(this, new LFS_ASSETRowChangeEvent(((LFS_ASSETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_ASSETRow(LFS_ASSETRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LfsAssetsTDS ds = new LfsAssetsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_ASSETDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_ASSET_SEWERDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERDataTable() {
                this.TableName = "LFS_ASSET_SEWER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_ASSET_SEWERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRow this[int index] {
                get {
                    return ((LFS_ASSET_SEWERRow)(this.Rows[index]));
                }
            }
            
            public event LFS_ASSET_SEWERRowChangeEventHandler LFS_ASSET_SEWERRowChanging;
            
            public event LFS_ASSET_SEWERRowChangeEventHandler LFS_ASSET_SEWERRowChanged;
            
            public event LFS_ASSET_SEWERRowChangeEventHandler LFS_ASSET_SEWERRowDeleting;
            
            public event LFS_ASSET_SEWERRowChangeEventHandler LFS_ASSET_SEWERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_ASSET_SEWERRow(LFS_ASSET_SEWERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRow AddLFS_ASSET_SEWERRow(LFS_ASSETRow parentLFS_ASSETRowByFK_LFS_ASSET_LFS_ASSET_SEWER, bool Deleted, int COMPANY_ID) {
                LFS_ASSET_SEWERRow rowLFS_ASSET_SEWERRow = ((LFS_ASSET_SEWERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_ASSETRowByFK_LFS_ASSET_LFS_ASSET_SEWER != null)) {
                    columnValuesArray[0] = parentLFS_ASSETRowByFK_LFS_ASSET_LFS_ASSET_SEWER[0];
                }
                rowLFS_ASSET_SEWERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_ASSET_SEWERRow);
                return rowLFS_ASSET_SEWERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRow FindByAssetID(int AssetID) {
                return ((LFS_ASSET_SEWERRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_ASSET_SEWERDataTable cln = ((LFS_ASSET_SEWERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_ASSET_SEWERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRow NewLFS_ASSET_SEWERRow() {
                return ((LFS_ASSET_SEWERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_ASSET_SEWERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_ASSET_SEWERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_ASSET_SEWERRowChanged != null)) {
                    this.LFS_ASSET_SEWERRowChanged(this, new LFS_ASSET_SEWERRowChangeEvent(((LFS_ASSET_SEWERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_ASSET_SEWERRowChanging != null)) {
                    this.LFS_ASSET_SEWERRowChanging(this, new LFS_ASSET_SEWERRowChangeEvent(((LFS_ASSET_SEWERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_ASSET_SEWERRowDeleted != null)) {
                    this.LFS_ASSET_SEWERRowDeleted(this, new LFS_ASSET_SEWERRowChangeEvent(((LFS_ASSET_SEWERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_ASSET_SEWERRowDeleting != null)) {
                    this.LFS_ASSET_SEWERRowDeleting(this, new LFS_ASSET_SEWERRowChangeEvent(((LFS_ASSET_SEWERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_ASSET_SEWERRow(LFS_ASSET_SEWERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LfsAssetsTDS ds = new LfsAssetsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_ASSET_SEWERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_ASSET_SEWER_LATERALDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERALDataTable() {
                this.TableName = "LFS_ASSET_SEWER_LATERAL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_LATERALDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_ASSET_SEWER_LATERALDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERALRow this[int index] {
                get {
                    return ((LFS_ASSET_SEWER_LATERALRow)(this.Rows[index]));
                }
            }
            
            public event LFS_ASSET_SEWER_LATERALRowChangeEventHandler LFS_ASSET_SEWER_LATERALRowChanging;
            
            public event LFS_ASSET_SEWER_LATERALRowChangeEventHandler LFS_ASSET_SEWER_LATERALRowChanged;
            
            public event LFS_ASSET_SEWER_LATERALRowChangeEventHandler LFS_ASSET_SEWER_LATERALRowDeleting;
            
            public event LFS_ASSET_SEWER_LATERALRowChangeEventHandler LFS_ASSET_SEWER_LATERALRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_ASSET_SEWER_LATERALRow(LFS_ASSET_SEWER_LATERALRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERALRow AddLFS_ASSET_SEWER_LATERALRow(LFS_ASSET_SEWERRow parentLFS_ASSET_SEWERRowByLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL, bool Deleted, int COMPANY_ID) {
                LFS_ASSET_SEWER_LATERALRow rowLFS_ASSET_SEWER_LATERALRow = ((LFS_ASSET_SEWER_LATERALRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_ASSET_SEWERRowByLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL != null)) {
                    columnValuesArray[0] = parentLFS_ASSET_SEWERRowByLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL[0];
                }
                rowLFS_ASSET_SEWER_LATERALRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_ASSET_SEWER_LATERALRow);
                return rowLFS_ASSET_SEWER_LATERALRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERALRow FindByAssetID(int AssetID) {
                return ((LFS_ASSET_SEWER_LATERALRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_ASSET_SEWER_LATERALDataTable cln = ((LFS_ASSET_SEWER_LATERALDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_ASSET_SEWER_LATERALDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERALRow NewLFS_ASSET_SEWER_LATERALRow() {
                return ((LFS_ASSET_SEWER_LATERALRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_ASSET_SEWER_LATERALRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_ASSET_SEWER_LATERALRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_ASSET_SEWER_LATERALRowChanged != null)) {
                    this.LFS_ASSET_SEWER_LATERALRowChanged(this, new LFS_ASSET_SEWER_LATERALRowChangeEvent(((LFS_ASSET_SEWER_LATERALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_ASSET_SEWER_LATERALRowChanging != null)) {
                    this.LFS_ASSET_SEWER_LATERALRowChanging(this, new LFS_ASSET_SEWER_LATERALRowChangeEvent(((LFS_ASSET_SEWER_LATERALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_ASSET_SEWER_LATERALRowDeleted != null)) {
                    this.LFS_ASSET_SEWER_LATERALRowDeleted(this, new LFS_ASSET_SEWER_LATERALRowChangeEvent(((LFS_ASSET_SEWER_LATERALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_ASSET_SEWER_LATERALRowDeleting != null)) {
                    this.LFS_ASSET_SEWER_LATERALRowDeleting(this, new LFS_ASSET_SEWER_LATERALRowChangeEvent(((LFS_ASSET_SEWER_LATERALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_ASSET_SEWER_LATERALRow(LFS_ASSET_SEWER_LATERALRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LfsAssetsTDS ds = new LfsAssetsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_ASSET_SEWER_LATERALDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_ASSET_SEWER_LATERAL_CLIENTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnClientLateralID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERAL_CLIENTDataTable() {
                this.TableName = "LFS_ASSET_SEWER_LATERAL_CLIENT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_LATERAL_CLIENTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_ASSET_SEWER_LATERAL_CLIENTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientLateralIDColumn {
                get {
                    return this.columnClientLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERAL_CLIENTRow this[int index] {
                get {
                    return ((LFS_ASSET_SEWER_LATERAL_CLIENTRow)(this.Rows[index]));
                }
            }
            
            public event LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEventHandler LFS_ASSET_SEWER_LATERAL_CLIENTRowChanging;
            
            public event LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEventHandler LFS_ASSET_SEWER_LATERAL_CLIENTRowChanged;
            
            public event LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEventHandler LFS_ASSET_SEWER_LATERAL_CLIENTRowDeleting;
            
            public event LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEventHandler LFS_ASSET_SEWER_LATERAL_CLIENTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_ASSET_SEWER_LATERAL_CLIENTRow(LFS_ASSET_SEWER_LATERAL_CLIENTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERAL_CLIENTRow AddLFS_ASSET_SEWER_LATERAL_CLIENTRow(LFS_ASSET_SEWERRow parentLFS_ASSET_SEWERRowByLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT, int ClientID, string ClientLateralID, bool Deleted, int COMPANY_ID) {
                LFS_ASSET_SEWER_LATERAL_CLIENTRow rowLFS_ASSET_SEWER_LATERAL_CLIENTRow = ((LFS_ASSET_SEWER_LATERAL_CLIENTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ClientID,
                        ClientLateralID,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_ASSET_SEWERRowByLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT != null)) {
                    columnValuesArray[0] = parentLFS_ASSET_SEWERRowByLFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT[0];
                }
                rowLFS_ASSET_SEWER_LATERAL_CLIENTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_ASSET_SEWER_LATERAL_CLIENTRow);
                return rowLFS_ASSET_SEWER_LATERAL_CLIENTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERAL_CLIENTRow FindByAssetIDClientID(int AssetID, int ClientID) {
                return ((LFS_ASSET_SEWER_LATERAL_CLIENTRow)(this.Rows.Find(new object[] {
                            AssetID,
                            ClientID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_ASSET_SEWER_LATERAL_CLIENTDataTable cln = ((LFS_ASSET_SEWER_LATERAL_CLIENTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_ASSET_SEWER_LATERAL_CLIENTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnClientLateralID = base.Columns["ClientLateralID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnClientLateralID = new global::System.Data.DataColumn("ClientLateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientLateralID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID,
                                this.columnClientID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnClientLateralID.MaxLength = 50;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERAL_CLIENTRow NewLFS_ASSET_SEWER_LATERAL_CLIENTRow() {
                return ((LFS_ASSET_SEWER_LATERAL_CLIENTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_ASSET_SEWER_LATERAL_CLIENTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_ASSET_SEWER_LATERAL_CLIENTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_ASSET_SEWER_LATERAL_CLIENTRowChanged != null)) {
                    this.LFS_ASSET_SEWER_LATERAL_CLIENTRowChanged(this, new LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEvent(((LFS_ASSET_SEWER_LATERAL_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_ASSET_SEWER_LATERAL_CLIENTRowChanging != null)) {
                    this.LFS_ASSET_SEWER_LATERAL_CLIENTRowChanging(this, new LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEvent(((LFS_ASSET_SEWER_LATERAL_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_ASSET_SEWER_LATERAL_CLIENTRowDeleted != null)) {
                    this.LFS_ASSET_SEWER_LATERAL_CLIENTRowDeleted(this, new LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEvent(((LFS_ASSET_SEWER_LATERAL_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_ASSET_SEWER_LATERAL_CLIENTRowDeleting != null)) {
                    this.LFS_ASSET_SEWER_LATERAL_CLIENTRowDeleting(this, new LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEvent(((LFS_ASSET_SEWER_LATERAL_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_ASSET_SEWER_LATERAL_CLIENTRow(LFS_ASSET_SEWER_LATERAL_CLIENTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LfsAssetsTDS ds = new LfsAssetsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_ASSET_SEWER_LATERAL_CLIENTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_ASSET_SEWER_SECTIONDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnSteelTapeThroughSewer;
            
            private global::System.Data.DataColumn columnUSMHMouth12;
            
            private global::System.Data.DataColumn columnUSMHMouth1;
            
            private global::System.Data.DataColumn columnUSMHMouth2;
            
            private global::System.Data.DataColumn columnUSMHMouth3;
            
            private global::System.Data.DataColumn columnUSMHMouth4;
            
            private global::System.Data.DataColumn columnUSMHMouth5;
            
            private global::System.Data.DataColumn columnDSMHMouth12;
            
            private global::System.Data.DataColumn columnDSMHMouth1;
            
            private global::System.Data.DataColumn columnDSMHMouth2;
            
            private global::System.Data.DataColumn columnDSMHMouth3;
            
            private global::System.Data.DataColumn columnDSMHMouth4;
            
            private global::System.Data.DataColumn columnDSMHMouth5;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnSubArea;
            
            private global::System.Data.DataColumn columnThickness;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTIONDataTable() {
                this.TableName = "LFS_ASSET_SEWER_SECTION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_SECTIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_ASSET_SEWER_SECTIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SteelTapeThroughSewerColumn {
                get {
                    return this.columnSteelTapeThroughSewer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth12Column {
                get {
                    return this.columnUSMHMouth12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth1Column {
                get {
                    return this.columnUSMHMouth1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth2Column {
                get {
                    return this.columnUSMHMouth2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth3Column {
                get {
                    return this.columnUSMHMouth3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth4Column {
                get {
                    return this.columnUSMHMouth4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth5Column {
                get {
                    return this.columnUSMHMouth5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth12Column {
                get {
                    return this.columnDSMHMouth12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth1Column {
                get {
                    return this.columnDSMHMouth1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth2Column {
                get {
                    return this.columnDSMHMouth2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth3Column {
                get {
                    return this.columnDSMHMouth3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth4Column {
                get {
                    return this.columnDSMHMouth4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth5Column {
                get {
                    return this.columnDSMHMouth5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaColumn {
                get {
                    return this.columnSubArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThicknessColumn {
                get {
                    return this.columnThickness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTIONRow this[int index] {
                get {
                    return ((LFS_ASSET_SEWER_SECTIONRow)(this.Rows[index]));
                }
            }
            
            public event LFS_ASSET_SEWER_SECTIONRowChangeEventHandler LFS_ASSET_SEWER_SECTIONRowChanging;
            
            public event LFS_ASSET_SEWER_SECTIONRowChangeEventHandler LFS_ASSET_SEWER_SECTIONRowChanged;
            
            public event LFS_ASSET_SEWER_SECTIONRowChangeEventHandler LFS_ASSET_SEWER_SECTIONRowDeleting;
            
            public event LFS_ASSET_SEWER_SECTIONRowChangeEventHandler LFS_ASSET_SEWER_SECTIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_ASSET_SEWER_SECTIONRow(LFS_ASSET_SEWER_SECTIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTIONRow AddLFS_ASSET_SEWER_SECTIONRow(
                        LFS_ASSET_SEWERRow parentLFS_ASSET_SEWERRowByLFS_ASSET_LFS_ASSET_SEWER_SECTION, 
                        string SteelTapeThroughSewer, 
                        string USMHMouth12, 
                        string USMHMouth1, 
                        string USMHMouth2, 
                        string USMHMouth3, 
                        string USMHMouth4, 
                        string USMHMouth5, 
                        string DSMHMouth12, 
                        string DSMHMouth1, 
                        string DSMHMouth2, 
                        string DSMHMouth3, 
                        string DSMHMouth4, 
                        string DSMHMouth5, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string SubArea, 
                        string Thickness) {
                LFS_ASSET_SEWER_SECTIONRow rowLFS_ASSET_SEWER_SECTIONRow = ((LFS_ASSET_SEWER_SECTIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SteelTapeThroughSewer,
                        USMHMouth12,
                        USMHMouth1,
                        USMHMouth2,
                        USMHMouth3,
                        USMHMouth4,
                        USMHMouth5,
                        DSMHMouth12,
                        DSMHMouth1,
                        DSMHMouth2,
                        DSMHMouth3,
                        DSMHMouth4,
                        DSMHMouth5,
                        Deleted,
                        COMPANY_ID,
                        SubArea,
                        Thickness};
                if ((parentLFS_ASSET_SEWERRowByLFS_ASSET_LFS_ASSET_SEWER_SECTION != null)) {
                    columnValuesArray[0] = parentLFS_ASSET_SEWERRowByLFS_ASSET_LFS_ASSET_SEWER_SECTION[0];
                }
                rowLFS_ASSET_SEWER_SECTIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_ASSET_SEWER_SECTIONRow);
                return rowLFS_ASSET_SEWER_SECTIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTIONRow FindByAssetID(int AssetID) {
                return ((LFS_ASSET_SEWER_SECTIONRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_ASSET_SEWER_SECTIONDataTable cln = ((LFS_ASSET_SEWER_SECTIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_ASSET_SEWER_SECTIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnSteelTapeThroughSewer = base.Columns["SteelTapeThroughSewer"];
                this.columnUSMHMouth12 = base.Columns["USMHMouth12"];
                this.columnUSMHMouth1 = base.Columns["USMHMouth1"];
                this.columnUSMHMouth2 = base.Columns["USMHMouth2"];
                this.columnUSMHMouth3 = base.Columns["USMHMouth3"];
                this.columnUSMHMouth4 = base.Columns["USMHMouth4"];
                this.columnUSMHMouth5 = base.Columns["USMHMouth5"];
                this.columnDSMHMouth12 = base.Columns["DSMHMouth12"];
                this.columnDSMHMouth1 = base.Columns["DSMHMouth1"];
                this.columnDSMHMouth2 = base.Columns["DSMHMouth2"];
                this.columnDSMHMouth3 = base.Columns["DSMHMouth3"];
                this.columnDSMHMouth4 = base.Columns["DSMHMouth4"];
                this.columnDSMHMouth5 = base.Columns["DSMHMouth5"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnSubArea = base.Columns["SubArea"];
                this.columnThickness = base.Columns["Thickness"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnSteelTapeThroughSewer = new global::System.Data.DataColumn("SteelTapeThroughSewer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSteelTapeThroughSewer);
                this.columnUSMHMouth12 = new global::System.Data.DataColumn("USMHMouth12", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth12);
                this.columnUSMHMouth1 = new global::System.Data.DataColumn("USMHMouth1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth1);
                this.columnUSMHMouth2 = new global::System.Data.DataColumn("USMHMouth2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth2);
                this.columnUSMHMouth3 = new global::System.Data.DataColumn("USMHMouth3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth3);
                this.columnUSMHMouth4 = new global::System.Data.DataColumn("USMHMouth4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth4);
                this.columnUSMHMouth5 = new global::System.Data.DataColumn("USMHMouth5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth5);
                this.columnDSMHMouth12 = new global::System.Data.DataColumn("DSMHMouth12", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth12);
                this.columnDSMHMouth1 = new global::System.Data.DataColumn("DSMHMouth1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth1);
                this.columnDSMHMouth2 = new global::System.Data.DataColumn("DSMHMouth2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth2);
                this.columnDSMHMouth3 = new global::System.Data.DataColumn("DSMHMouth3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth3);
                this.columnDSMHMouth4 = new global::System.Data.DataColumn("DSMHMouth4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth4);
                this.columnDSMHMouth5 = new global::System.Data.DataColumn("DSMHMouth5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth5);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnSubArea = new global::System.Data.DataColumn("SubArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubArea);
                this.columnThickness = new global::System.Data.DataColumn("Thickness", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThickness);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnSteelTapeThroughSewer.MaxLength = 25;
                this.columnUSMHMouth12.MaxLength = 25;
                this.columnUSMHMouth1.MaxLength = 25;
                this.columnUSMHMouth2.MaxLength = 25;
                this.columnUSMHMouth3.MaxLength = 25;
                this.columnUSMHMouth4.MaxLength = 25;
                this.columnUSMHMouth5.MaxLength = 25;
                this.columnDSMHMouth12.MaxLength = 25;
                this.columnDSMHMouth1.MaxLength = 25;
                this.columnDSMHMouth2.MaxLength = 25;
                this.columnDSMHMouth3.MaxLength = 25;
                this.columnDSMHMouth4.MaxLength = 25;
                this.columnDSMHMouth5.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnSubArea.MaxLength = 255;
                this.columnThickness.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTIONRow NewLFS_ASSET_SEWER_SECTIONRow() {
                return ((LFS_ASSET_SEWER_SECTIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_ASSET_SEWER_SECTIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_ASSET_SEWER_SECTIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_ASSET_SEWER_SECTIONRowChanged != null)) {
                    this.LFS_ASSET_SEWER_SECTIONRowChanged(this, new LFS_ASSET_SEWER_SECTIONRowChangeEvent(((LFS_ASSET_SEWER_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_ASSET_SEWER_SECTIONRowChanging != null)) {
                    this.LFS_ASSET_SEWER_SECTIONRowChanging(this, new LFS_ASSET_SEWER_SECTIONRowChangeEvent(((LFS_ASSET_SEWER_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_ASSET_SEWER_SECTIONRowDeleted != null)) {
                    this.LFS_ASSET_SEWER_SECTIONRowDeleted(this, new LFS_ASSET_SEWER_SECTIONRowChangeEvent(((LFS_ASSET_SEWER_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_ASSET_SEWER_SECTIONRowDeleting != null)) {
                    this.LFS_ASSET_SEWER_SECTIONRowDeleting(this, new LFS_ASSET_SEWER_SECTIONRowChangeEvent(((LFS_ASSET_SEWER_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_ASSET_SEWER_SECTIONRow(LFS_ASSET_SEWER_SECTIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LfsAssetsTDS ds = new LfsAssetsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_ASSET_SEWER_SECTIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_ASSET_SEWER_SECTION_THICKNESSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnThickness;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTION_THICKNESSDataTable() {
                this.TableName = "LFS_ASSET_SEWER_SECTION_THICKNESS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_SECTION_THICKNESSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_ASSET_SEWER_SECTION_THICKNESSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThicknessColumn {
                get {
                    return this.columnThickness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTION_THICKNESSRow this[int index] {
                get {
                    return ((LFS_ASSET_SEWER_SECTION_THICKNESSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEventHandler LFS_ASSET_SEWER_SECTION_THICKNESSRowChanging;
            
            public event LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEventHandler LFS_ASSET_SEWER_SECTION_THICKNESSRowChanged;
            
            public event LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEventHandler LFS_ASSET_SEWER_SECTION_THICKNESSRowDeleting;
            
            public event LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEventHandler LFS_ASSET_SEWER_SECTION_THICKNESSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_ASSET_SEWER_SECTION_THICKNESSRow(LFS_ASSET_SEWER_SECTION_THICKNESSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTION_THICKNESSRow AddLFS_ASSET_SEWER_SECTION_THICKNESSRow(string Thickness, int COMPANY_ID) {
                LFS_ASSET_SEWER_SECTION_THICKNESSRow rowLFS_ASSET_SEWER_SECTION_THICKNESSRow = ((LFS_ASSET_SEWER_SECTION_THICKNESSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Thickness,
                        COMPANY_ID};
                rowLFS_ASSET_SEWER_SECTION_THICKNESSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_ASSET_SEWER_SECTION_THICKNESSRow);
                return rowLFS_ASSET_SEWER_SECTION_THICKNESSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTION_THICKNESSRow FindByThicknessCOMPANY_ID(string Thickness, int COMPANY_ID) {
                return ((LFS_ASSET_SEWER_SECTION_THICKNESSRow)(this.Rows.Find(new object[] {
                            Thickness,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_ASSET_SEWER_SECTION_THICKNESSDataTable cln = ((LFS_ASSET_SEWER_SECTION_THICKNESSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_ASSET_SEWER_SECTION_THICKNESSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnThickness = base.Columns["Thickness"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnThickness = new global::System.Data.DataColumn("Thickness", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThickness);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnThickness,
                                this.columnCOMPANY_ID}, true));
                this.columnThickness.AllowDBNull = false;
                this.columnThickness.MaxLength = 25;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTION_THICKNESSRow NewLFS_ASSET_SEWER_SECTION_THICKNESSRow() {
                return ((LFS_ASSET_SEWER_SECTION_THICKNESSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_ASSET_SEWER_SECTION_THICKNESSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_ASSET_SEWER_SECTION_THICKNESSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_ASSET_SEWER_SECTION_THICKNESSRowChanged != null)) {
                    this.LFS_ASSET_SEWER_SECTION_THICKNESSRowChanged(this, new LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEvent(((LFS_ASSET_SEWER_SECTION_THICKNESSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_ASSET_SEWER_SECTION_THICKNESSRowChanging != null)) {
                    this.LFS_ASSET_SEWER_SECTION_THICKNESSRowChanging(this, new LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEvent(((LFS_ASSET_SEWER_SECTION_THICKNESSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_ASSET_SEWER_SECTION_THICKNESSRowDeleted != null)) {
                    this.LFS_ASSET_SEWER_SECTION_THICKNESSRowDeleted(this, new LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEvent(((LFS_ASSET_SEWER_SECTION_THICKNESSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_ASSET_SEWER_SECTION_THICKNESSRowDeleting != null)) {
                    this.LFS_ASSET_SEWER_SECTION_THICKNESSRowDeleting(this, new LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEvent(((LFS_ASSET_SEWER_SECTION_THICKNESSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_ASSET_SEWER_SECTION_THICKNESSRow(LFS_ASSET_SEWER_SECTION_THICKNESSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LfsAssetsTDS ds = new LfsAssetsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_ASSET_SEWER_SECTION_THICKNESSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_ASSET_SEWER_MHDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnConditionRating;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_MHDataTable() {
                this.TableName = "LFS_ASSET_SEWER_MH";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_MHDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_ASSET_SEWER_MHDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionRatingColumn {
                get {
                    return this.columnConditionRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_MHRow this[int index] {
                get {
                    return ((LFS_ASSET_SEWER_MHRow)(this.Rows[index]));
                }
            }
            
            public event LFS_ASSET_SEWER_MHRowChangeEventHandler LFS_ASSET_SEWER_MHRowChanging;
            
            public event LFS_ASSET_SEWER_MHRowChangeEventHandler LFS_ASSET_SEWER_MHRowChanged;
            
            public event LFS_ASSET_SEWER_MHRowChangeEventHandler LFS_ASSET_SEWER_MHRowDeleting;
            
            public event LFS_ASSET_SEWER_MHRowChangeEventHandler LFS_ASSET_SEWER_MHRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_ASSET_SEWER_MHRow(LFS_ASSET_SEWER_MHRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_MHRow AddLFS_ASSET_SEWER_MHRow(int AssetID, bool Deleted, int COMPANY_ID, int ConditionRating) {
                LFS_ASSET_SEWER_MHRow rowLFS_ASSET_SEWER_MHRow = ((LFS_ASSET_SEWER_MHRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        Deleted,
                        COMPANY_ID,
                        ConditionRating};
                rowLFS_ASSET_SEWER_MHRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_ASSET_SEWER_MHRow);
                return rowLFS_ASSET_SEWER_MHRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_MHRow FindByAssetID(int AssetID) {
                return ((LFS_ASSET_SEWER_MHRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_ASSET_SEWER_MHDataTable cln = ((LFS_ASSET_SEWER_MHDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_ASSET_SEWER_MHDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnConditionRating = base.Columns["ConditionRating"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnConditionRating = new global::System.Data.DataColumn("ConditionRating", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionRating);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_MHRow NewLFS_ASSET_SEWER_MHRow() {
                return ((LFS_ASSET_SEWER_MHRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_ASSET_SEWER_MHRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_ASSET_SEWER_MHRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_ASSET_SEWER_MHRowChanged != null)) {
                    this.LFS_ASSET_SEWER_MHRowChanged(this, new LFS_ASSET_SEWER_MHRowChangeEvent(((LFS_ASSET_SEWER_MHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_ASSET_SEWER_MHRowChanging != null)) {
                    this.LFS_ASSET_SEWER_MHRowChanging(this, new LFS_ASSET_SEWER_MHRowChangeEvent(((LFS_ASSET_SEWER_MHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_ASSET_SEWER_MHRowDeleted != null)) {
                    this.LFS_ASSET_SEWER_MHRowDeleted(this, new LFS_ASSET_SEWER_MHRowChangeEvent(((LFS_ASSET_SEWER_MHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_ASSET_SEWER_MHRowDeleting != null)) {
                    this.LFS_ASSET_SEWER_MHRowDeleting(this, new LFS_ASSET_SEWER_MHRowChangeEvent(((LFS_ASSET_SEWER_MHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_ASSET_SEWER_MHRow(LFS_ASSET_SEWER_MHRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LfsAssetsTDS ds = new LfsAssetsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_ASSET_SEWER_MHDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_ASSETRow : global::System.Data.DataRow {
            
            private LFS_ASSETDataTable tableLFS_ASSET;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSETRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_ASSET = ((LFS_ASSETDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableLFS_ASSET.AssetIDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_ASSET.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_ASSET.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_ASSET.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRow[] GetLFS_ASSET_SEWERRows() {
                if ((this.Table.ChildRelations["FK_LFS_ASSET_LFS_ASSET_SEWER"] == null)) {
                    return new LFS_ASSET_SEWERRow[0];
                }
                else {
                    return ((LFS_ASSET_SEWERRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_ASSET_LFS_ASSET_SEWER"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_ASSET_SEWERRow : global::System.Data.DataRow {
            
            private LFS_ASSET_SEWERDataTable tableLFS_ASSET_SEWER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_ASSET_SEWER = ((LFS_ASSET_SEWERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER.AssetIDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_ASSET_SEWER.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSETRow LFS_ASSETRow {
                get {
                    return ((LFS_ASSETRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_ASSET_LFS_ASSET_SEWER"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_ASSET_LFS_ASSET_SEWER"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERALRow[] GetLFS_ASSET_SEWER_LATERALRows() {
                if ((this.Table.ChildRelations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL"] == null)) {
                    return new LFS_ASSET_SEWER_LATERALRow[0];
                }
                else {
                    return ((LFS_ASSET_SEWER_LATERALRow[])(base.GetChildRows(this.Table.ChildRelations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERAL_CLIENTRow[] GetLFS_ASSET_SEWER_LATERAL_CLIENTRows() {
                if ((this.Table.ChildRelations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT"] == null)) {
                    return new LFS_ASSET_SEWER_LATERAL_CLIENTRow[0];
                }
                else {
                    return ((LFS_ASSET_SEWER_LATERAL_CLIENTRow[])(base.GetChildRows(this.Table.ChildRelations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTIONRow[] GetLFS_ASSET_SEWER_SECTIONRows() {
                if ((this.Table.ChildRelations["LFS_ASSET_LFS_ASSET_SEWER_SECTION"] == null)) {
                    return new LFS_ASSET_SEWER_SECTIONRow[0];
                }
                else {
                    return ((LFS_ASSET_SEWER_SECTIONRow[])(base.GetChildRows(this.Table.ChildRelations["LFS_ASSET_LFS_ASSET_SEWER_SECTION"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_ASSET_SEWER_LATERALRow : global::System.Data.DataRow {
            
            private LFS_ASSET_SEWER_LATERALDataTable tableLFS_ASSET_SEWER_LATERAL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_LATERALRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_ASSET_SEWER_LATERAL = ((LFS_ASSET_SEWER_LATERALDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_LATERAL.AssetIDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_LATERAL.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_ASSET_SEWER_LATERAL.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_LATERAL.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_LATERAL.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_LATERAL.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRow LFS_ASSET_SEWERRow {
                get {
                    return ((LFS_ASSET_SEWERRow)(this.GetParentRow(this.Table.ParentRelations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_ASSET_SEWER_LATERAL_CLIENTRow : global::System.Data.DataRow {
            
            private LFS_ASSET_SEWER_LATERAL_CLIENTDataTable tableLFS_ASSET_SEWER_LATERAL_CLIENT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_LATERAL_CLIENTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_ASSET_SEWER_LATERAL_CLIENT = ((LFS_ASSET_SEWER_LATERAL_CLIENTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.AssetIDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.ClientIDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientLateralID {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.ClientLateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientLateralID\' in table \'LFS_ASSET_SEWER_LATERAL_CLIENT\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.ClientLateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRow LFS_ASSET_SEWERRow {
                get {
                    return ((LFS_ASSET_SEWERRow)(this.GetParentRow(this.Table.ParentRelations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LFS_ASSET_SEWER_LFS_ASSET_SEWER_LATERAL_CLIENT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientLateralIDNull() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.ClientLateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientLateralIDNull() {
                this[this.tableLFS_ASSET_SEWER_LATERAL_CLIENT.ClientLateralIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_ASSET_SEWER_SECTIONRow : global::System.Data.DataRow {
            
            private LFS_ASSET_SEWER_SECTIONDataTable tableLFS_ASSET_SEWER_SECTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_SECTIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_ASSET_SEWER_SECTION = ((LFS_ASSET_SEWER_SECTIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_SECTION.AssetIDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SteelTapeThroughSewer {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.SteelTapeThroughSewerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SteelTapeThroughSewer\' in table \'LFS_ASSET_SEWER_SECTION\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.SteelTapeThroughSewerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth12 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth12\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth1 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth1\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth2 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth2\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth3 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth3\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth4 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth4\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth5 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth5\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth12 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth12\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth1 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth1\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth2 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth2\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth3 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth3\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth4 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth4\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth5 {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth5\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_ASSET_SEWER_SECTION.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_SECTION.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubArea {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.SubAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubArea\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.SubAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thickness {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION.ThicknessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thickness\' in table \'LFS_ASSET_SEWER_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION.ThicknessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTION_THICKNESSRow LFS_ASSET_SEWER_SECTION_THICKNESSRowParent {
                get {
                    return ((LFS_ASSET_SEWER_SECTION_THICKNESSRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRow LFS_ASSET_SEWERRow {
                get {
                    return ((LFS_ASSET_SEWERRow)(this.GetParentRow(this.Table.ParentRelations["LFS_ASSET_LFS_ASSET_SEWER_SECTION"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LFS_ASSET_LFS_ASSET_SEWER_SECTION"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSteelTapeThroughSewerNull() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.SteelTapeThroughSewerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSteelTapeThroughSewerNull() {
                this[this.tableLFS_ASSET_SEWER_SECTION.SteelTapeThroughSewerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth12Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.USMHMouth12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth12Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth1Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.USMHMouth1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth1Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth2Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.USMHMouth2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth2Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth3Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.USMHMouth3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth3Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth4Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.USMHMouth4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth4Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth5Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.USMHMouth5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth5Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.USMHMouth5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth12Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth12Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth1Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth1Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth2Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth2Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth3Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth3Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth4Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth4Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth5Null() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth5Null() {
                this[this.tableLFS_ASSET_SEWER_SECTION.DSMHMouth5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaNull() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.SubAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaNull() {
                this[this.tableLFS_ASSET_SEWER_SECTION.SubAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThicknessNull() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_SECTION.ThicknessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThicknessNull() {
                this[this.tableLFS_ASSET_SEWER_SECTION.ThicknessColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_ASSET_SEWER_SECTION_THICKNESSRow : global::System.Data.DataRow {
            
            private LFS_ASSET_SEWER_SECTION_THICKNESSDataTable tableLFS_ASSET_SEWER_SECTION_THICKNESS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_SECTION_THICKNESSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_ASSET_SEWER_SECTION_THICKNESS = ((LFS_ASSET_SEWER_SECTION_THICKNESSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thickness {
                get {
                    return ((string)(this[this.tableLFS_ASSET_SEWER_SECTION_THICKNESS.ThicknessColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION_THICKNESS.ThicknessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_SECTION_THICKNESS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_SECTION_THICKNESS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTIONRow[] GetLFS_ASSET_SEWER_SECTIONRows() {
                if ((this.Table.ChildRelations["FK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION"] == null)) {
                    return new LFS_ASSET_SEWER_SECTIONRow[0];
                }
                else {
                    return ((LFS_ASSET_SEWER_SECTIONRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_ASSET_SEWER_SECTION_THICKNESS_LFS_ASSET_SEWER_SECTION"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_ASSET_SEWER_MHRow : global::System.Data.DataRow {
            
            private LFS_ASSET_SEWER_MHDataTable tableLFS_ASSET_SEWER_MH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ASSET_SEWER_MHRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_ASSET_SEWER_MH = ((LFS_ASSET_SEWER_MHDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_MH.AssetIDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_MH.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_ASSET_SEWER_MH.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_MH.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_ASSET_SEWER_MH.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_MH.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionRating {
                get {
                    try {
                        return ((int)(this[this.tableLFS_ASSET_SEWER_MH.ConditionRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConditionRating\' in table \'LFS_ASSET_SEWER_MH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ASSET_SEWER_MH.ConditionRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionRatingNull() {
                return this.IsNull(this.tableLFS_ASSET_SEWER_MH.ConditionRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionRatingNull() {
                this[this.tableLFS_ASSET_SEWER_MH.ConditionRatingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_ASSETRowChangeEvent : global::System.EventArgs {
            
            private LFS_ASSETRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSETRowChangeEvent(LFS_ASSETRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSETRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_ASSET_SEWERRowChangeEvent : global::System.EventArgs {
            
            private LFS_ASSET_SEWERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRowChangeEvent(LFS_ASSET_SEWERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_ASSET_SEWER_LATERALRowChangeEvent : global::System.EventArgs {
            
            private LFS_ASSET_SEWER_LATERALRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERALRowChangeEvent(LFS_ASSET_SEWER_LATERALRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERALRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEvent : global::System.EventArgs {
            
            private LFS_ASSET_SEWER_LATERAL_CLIENTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERAL_CLIENTRowChangeEvent(LFS_ASSET_SEWER_LATERAL_CLIENTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_LATERAL_CLIENTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_ASSET_SEWER_SECTIONRowChangeEvent : global::System.EventArgs {
            
            private LFS_ASSET_SEWER_SECTIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTIONRowChangeEvent(LFS_ASSET_SEWER_SECTIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEvent : global::System.EventArgs {
            
            private LFS_ASSET_SEWER_SECTION_THICKNESSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTION_THICKNESSRowChangeEvent(LFS_ASSET_SEWER_SECTION_THICKNESSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_SECTION_THICKNESSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_ASSET_SEWER_MHRowChangeEvent : global::System.EventArgs {
            
            private LFS_ASSET_SEWER_MHRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_MHRowChangeEvent(LFS_ASSET_SEWER_MHRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ASSET_SEWER_MHRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591