//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.FullLengthLining {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FlM2ReportTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FlM2ReportTDS : global::System.Data.DataSet {
        
        private M2_SECTIONDataTable tableM2_SECTION;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FlM2ReportTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FlM2ReportTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["M2_SECTION"] != null)) {
                    base.Tables.Add(new M2_SECTIONDataTable(ds.Tables["M2_SECTION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public M2_SECTIONDataTable M2_SECTION {
            get {
                return this.tableM2_SECTION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FlM2ReportTDS cln = ((FlM2ReportTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["M2_SECTION"] != null)) {
                    base.Tables.Add(new M2_SECTIONDataTable(ds.Tables["M2_SECTION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableM2_SECTION = ((M2_SECTIONDataTable)(base.Tables["M2_SECTION"]));
            if ((initTable == true)) {
                if ((this.tableM2_SECTION != null)) {
                    this.tableM2_SECTION.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FlM2ReportTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FlM2ReportTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableM2_SECTION = new M2_SECTIONDataTable();
            base.Tables.Add(this.tableM2_SECTION);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeM2_SECTION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FlM2ReportTDS ds = new FlM2ReportTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void M2_SECTIONRowChangeEventHandler(object sender, M2_SECTIONRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class M2_SECTIONDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnCOMPANIES_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnSize_;
            
            private global::System.Data.DataColumn columnM2Date;
            
            private global::System.Data.DataColumn columnVideoLength;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnHydrantAddress;
            
            private global::System.Data.DataColumn columnDistanceToInversionMH;
            
            private global::System.Data.DataColumn columnRampRequired;
            
            private global::System.Data.DataColumn columnLineWithID;
            
            private global::System.Data.DataColumn columnHydroPulley;
            
            private global::System.Data.DataColumn columnFridgeCart;
            
            private global::System.Data.DataColumn columnTwoPump;
            
            private global::System.Data.DataColumn columnSixBypass;
            
            private global::System.Data.DataColumn columnScaffolding;
            
            private global::System.Data.DataColumn columnWinchExtention;
            
            private global::System.Data.DataColumn columnExtraGenerator;
            
            private global::System.Data.DataColumn columnGreyCableExtension;
            
            private global::System.Data.DataColumn columnEasementMats;
            
            private global::System.Data.DataColumn columnDropPipe;
            
            private global::System.Data.DataColumn columnDropPipeInvertDepth;
            
            private global::System.Data.DataColumn columnMeasurementTakenBy;
            
            private global::System.Data.DataColumn columnCappedLaterals;
            
            private global::System.Data.DataColumn columnHydroWireWithin10FtOfInversionMH;
            
            private global::System.Data.DataColumn columnSurfaceGrade;
            
            private global::System.Data.DataColumn columnCameraSkid;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnWorkID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONDataTable() {
                this.TableName = "M2_SECTION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M2_SECTIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected M2_SECTIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANIES_IDColumn {
                get {
                    return this.columnCOMPANIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column {
                get {
                    return this.columnSize_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M2DateColumn {
                get {
                    return this.columnM2Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoLengthColumn {
                get {
                    return this.columnVideoLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydrantAddressColumn {
                get {
                    return this.columnHydrantAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToInversionMHColumn {
                get {
                    return this.columnDistanceToInversionMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RampRequiredColumn {
                get {
                    return this.columnRampRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineWithIDColumn {
                get {
                    return this.columnLineWithID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydroPulleyColumn {
                get {
                    return this.columnHydroPulley;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FridgeCartColumn {
                get {
                    return this.columnFridgeCart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TwoPumpColumn {
                get {
                    return this.columnTwoPump;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SixBypassColumn {
                get {
                    return this.columnSixBypass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScaffoldingColumn {
                get {
                    return this.columnScaffolding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WinchExtentionColumn {
                get {
                    return this.columnWinchExtention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraGeneratorColumn {
                get {
                    return this.columnExtraGenerator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreyCableExtensionColumn {
                get {
                    return this.columnGreyCableExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EasementMatsColumn {
                get {
                    return this.columnEasementMats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropPipeColumn {
                get {
                    return this.columnDropPipe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropPipeInvertDepthColumn {
                get {
                    return this.columnDropPipeInvertDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementTakenByColumn {
                get {
                    return this.columnMeasurementTakenBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CappedLateralsColumn {
                get {
                    return this.columnCappedLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydroWireWithin10FtOfInversionMHColumn {
                get {
                    return this.columnHydroWireWithin10FtOfInversionMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurfaceGradeColumn {
                get {
                    return this.columnSurfaceGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CameraSkidColumn {
                get {
                    return this.columnCameraSkid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow this[int index] {
                get {
                    return ((M2_SECTIONRow)(this.Rows[index]));
                }
            }
            
            public event M2_SECTIONRowChangeEventHandler M2_SECTIONRowChanging;
            
            public event M2_SECTIONRowChangeEventHandler M2_SECTIONRowChanged;
            
            public event M2_SECTIONRowChangeEventHandler M2_SECTIONRowDeleting;
            
            public event M2_SECTIONRowChangeEventHandler M2_SECTIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddM2_SECTIONRow(M2_SECTIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow AddM2_SECTIONRow(
                        int AssetID, 
                        int COMPANY_ID, 
                        int ProjectID, 
                        string SectionID, 
                        int COMPANIES_ID, 
                        string NAME, 
                        string Street, 
                        string USMH, 
                        string DSMH, 
                        string Size_, 
                        System.DateTime M2Date, 
                        string VideoLength, 
                        string ProjectName, 
                        string FlowOrderID, 
                        string HydrantAddress, 
                        string DistanceToInversionMH, 
                        bool RampRequired, 
                        string LineWithID, 
                        bool HydroPulley, 
                        bool FridgeCart, 
                        bool TwoPump, 
                        bool SixBypass, 
                        bool Scaffolding, 
                        bool WinchExtention, 
                        bool ExtraGenerator, 
                        bool GreyCableExtension, 
                        bool EasementMats, 
                        bool DropPipe, 
                        string DropPipeInvertDepth, 
                        string MeasurementTakenBy, 
                        int CappedLaterals, 
                        string HydroWireWithin10FtOfInversionMH, 
                        string SurfaceGrade, 
                        bool CameraSkid, 
                        string Comments, 
                        int WorkID) {
                M2_SECTIONRow rowM2_SECTIONRow = ((M2_SECTIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        COMPANY_ID,
                        ProjectID,
                        SectionID,
                        COMPANIES_ID,
                        NAME,
                        Street,
                        USMH,
                        DSMH,
                        Size_,
                        M2Date,
                        VideoLength,
                        ProjectName,
                        FlowOrderID,
                        HydrantAddress,
                        DistanceToInversionMH,
                        RampRequired,
                        LineWithID,
                        HydroPulley,
                        FridgeCart,
                        TwoPump,
                        SixBypass,
                        Scaffolding,
                        WinchExtention,
                        ExtraGenerator,
                        GreyCableExtension,
                        EasementMats,
                        DropPipe,
                        DropPipeInvertDepth,
                        MeasurementTakenBy,
                        CappedLaterals,
                        HydroWireWithin10FtOfInversionMH,
                        SurfaceGrade,
                        CameraSkid,
                        Comments,
                        WorkID};
                rowM2_SECTIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowM2_SECTIONRow);
                return rowM2_SECTIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow FindByProjectIDCOMPANY_IDAssetID(int ProjectID, int COMPANY_ID, int AssetID) {
                return ((M2_SECTIONRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            COMPANY_ID,
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                M2_SECTIONDataTable cln = ((M2_SECTIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new M2_SECTIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnCOMPANIES_ID = base.Columns["COMPANIES_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnStreet = base.Columns["Street"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnM2Date = base.Columns["M2Date"];
                this.columnVideoLength = base.Columns["VideoLength"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnHydrantAddress = base.Columns["HydrantAddress"];
                this.columnDistanceToInversionMH = base.Columns["DistanceToInversionMH"];
                this.columnRampRequired = base.Columns["RampRequired"];
                this.columnLineWithID = base.Columns["LineWithID"];
                this.columnHydroPulley = base.Columns["HydroPulley"];
                this.columnFridgeCart = base.Columns["FridgeCart"];
                this.columnTwoPump = base.Columns["TwoPump"];
                this.columnSixBypass = base.Columns["SixBypass"];
                this.columnScaffolding = base.Columns["Scaffolding"];
                this.columnWinchExtention = base.Columns["WinchExtention"];
                this.columnExtraGenerator = base.Columns["ExtraGenerator"];
                this.columnGreyCableExtension = base.Columns["GreyCableExtension"];
                this.columnEasementMats = base.Columns["EasementMats"];
                this.columnDropPipe = base.Columns["DropPipe"];
                this.columnDropPipeInvertDepth = base.Columns["DropPipeInvertDepth"];
                this.columnMeasurementTakenBy = base.Columns["MeasurementTakenBy"];
                this.columnCappedLaterals = base.Columns["CappedLaterals"];
                this.columnHydroWireWithin10FtOfInversionMH = base.Columns["HydroWireWithin10FtOfInversionMH"];
                this.columnSurfaceGrade = base.Columns["SurfaceGrade"];
                this.columnCameraSkid = base.Columns["CameraSkid"];
                this.columnComments = base.Columns["Comments"];
                this.columnWorkID = base.Columns["WorkID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnCOMPANIES_ID = new global::System.Data.DataColumn("COMPANIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANIES_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnM2Date = new global::System.Data.DataColumn("M2Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM2Date);
                this.columnVideoLength = new global::System.Data.DataColumn("VideoLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoLength);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnHydrantAddress = new global::System.Data.DataColumn("HydrantAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydrantAddress);
                this.columnDistanceToInversionMH = new global::System.Data.DataColumn("DistanceToInversionMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToInversionMH);
                this.columnRampRequired = new global::System.Data.DataColumn("RampRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRampRequired);
                this.columnLineWithID = new global::System.Data.DataColumn("LineWithID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineWithID);
                this.columnHydroPulley = new global::System.Data.DataColumn("HydroPulley", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydroPulley);
                this.columnFridgeCart = new global::System.Data.DataColumn("FridgeCart", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFridgeCart);
                this.columnTwoPump = new global::System.Data.DataColumn("TwoPump", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTwoPump);
                this.columnSixBypass = new global::System.Data.DataColumn("SixBypass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSixBypass);
                this.columnScaffolding = new global::System.Data.DataColumn("Scaffolding", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScaffolding);
                this.columnWinchExtention = new global::System.Data.DataColumn("WinchExtention", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWinchExtention);
                this.columnExtraGenerator = new global::System.Data.DataColumn("ExtraGenerator", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraGenerator);
                this.columnGreyCableExtension = new global::System.Data.DataColumn("GreyCableExtension", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreyCableExtension);
                this.columnEasementMats = new global::System.Data.DataColumn("EasementMats", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEasementMats);
                this.columnDropPipe = new global::System.Data.DataColumn("DropPipe", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropPipe);
                this.columnDropPipeInvertDepth = new global::System.Data.DataColumn("DropPipeInvertDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropPipeInvertDepth);
                this.columnMeasurementTakenBy = new global::System.Data.DataColumn("MeasurementTakenBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementTakenBy);
                this.columnCappedLaterals = new global::System.Data.DataColumn("CappedLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCappedLaterals);
                this.columnHydroWireWithin10FtOfInversionMH = new global::System.Data.DataColumn("HydroWireWithin10FtOfInversionMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydroWireWithin10FtOfInversionMH);
                this.columnSurfaceGrade = new global::System.Data.DataColumn("SurfaceGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurfaceGrade);
                this.columnCameraSkid = new global::System.Data.DataColumn("CameraSkid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCameraSkid);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnCOMPANY_ID,
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow NewM2_SECTIONRow() {
                return ((M2_SECTIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new M2_SECTIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(M2_SECTIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.M2_SECTIONRowChanged != null)) {
                    this.M2_SECTIONRowChanged(this, new M2_SECTIONRowChangeEvent(((M2_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.M2_SECTIONRowChanging != null)) {
                    this.M2_SECTIONRowChanging(this, new M2_SECTIONRowChangeEvent(((M2_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.M2_SECTIONRowDeleted != null)) {
                    this.M2_SECTIONRowDeleted(this, new M2_SECTIONRowChangeEvent(((M2_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.M2_SECTIONRowDeleting != null)) {
                    this.M2_SECTIONRowDeleting(this, new M2_SECTIONRowChangeEvent(((M2_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveM2_SECTIONRow(M2_SECTIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlM2ReportTDS ds = new FlM2ReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "M2_SECTIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class M2_SECTIONRow : global::System.Data.DataRow {
            
            private M2_SECTIONDataTable tableM2_SECTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M2_SECTIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableM2_SECTION = ((M2_SECTIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableM2_SECTION.AssetIDColumn]));
                }
                set {
                    this[this.tableM2_SECTION.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableM2_SECTION.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableM2_SECTION.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableM2_SECTION.ProjectIDColumn]));
                }
                set {
                    this[this.tableM2_SECTION.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableM2_SECTION.COMPANIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANIES_ID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.COMPANIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMH {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMH {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_ {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.Size_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime M2Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableM2_SECTION.M2DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M2Date\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.M2DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoLength {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.VideoLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoLength\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.VideoLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HydrantAddress {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.HydrantAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydrantAddress\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.HydrantAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceToInversionMH {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.DistanceToInversionMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToInversionMH\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.DistanceToInversionMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RampRequired {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.RampRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RampRequired\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.RampRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineWithID {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.LineWithIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineWithID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.LineWithIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HydroPulley {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.HydroPulleyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydroPulley\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.HydroPulleyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FridgeCart {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.FridgeCartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FridgeCart\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.FridgeCartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TwoPump {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.TwoPumpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TwoPump\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.TwoPumpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SixBypass {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.SixBypassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SixBypass\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.SixBypassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Scaffolding {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.ScaffoldingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scaffolding\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.ScaffoldingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool WinchExtention {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.WinchExtentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WinchExtention\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.WinchExtentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ExtraGenerator {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.ExtraGeneratorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExtraGenerator\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.ExtraGeneratorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GreyCableExtension {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.GreyCableExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreyCableExtension\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.GreyCableExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EasementMats {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.EasementMatsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EasementMats\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.EasementMatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DropPipe {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.DropPipeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropPipe\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.DropPipeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DropPipeInvertDepth {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.DropPipeInvertDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropPipeInvertDepth\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.DropPipeInvertDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementTakenBy {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.MeasurementTakenByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementTakenBy\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.MeasurementTakenByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CappedLaterals {
                get {
                    try {
                        return ((int)(this[this.tableM2_SECTION.CappedLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CappedLaterals\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.CappedLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HydroWireWithin10FtOfInversionMH {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.HydroWireWithin10FtOfInversionMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydroWireWithin10FtOfInversionMH\' in table \'M2_SECTION\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.HydroWireWithin10FtOfInversionMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurfaceGrade {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.SurfaceGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurfaceGrade\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.SurfaceGradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CameraSkid {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.CameraSkidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CameraSkid\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.CameraSkidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    try {
                        return ((int)(this[this.tableM2_SECTION.WorkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableM2_SECTION.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableM2_SECTION.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANIES_IDNull() {
                return this.IsNull(this.tableM2_SECTION.COMPANIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANIES_IDNull() {
                this[this.tableM2_SECTION.COMPANIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableM2_SECTION.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableM2_SECTION.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableM2_SECTION.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableM2_SECTION.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableM2_SECTION.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableM2_SECTION.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableM2_SECTION.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableM2_SECTION.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null() {
                return this.IsNull(this.tableM2_SECTION.Size_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null() {
                this[this.tableM2_SECTION.Size_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM2DateNull() {
                return this.IsNull(this.tableM2_SECTION.M2DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM2DateNull() {
                this[this.tableM2_SECTION.M2DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoLengthNull() {
                return this.IsNull(this.tableM2_SECTION.VideoLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoLengthNull() {
                this[this.tableM2_SECTION.VideoLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableM2_SECTION.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableM2_SECTION.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableM2_SECTION.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableM2_SECTION.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydrantAddressNull() {
                return this.IsNull(this.tableM2_SECTION.HydrantAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydrantAddressNull() {
                this[this.tableM2_SECTION.HydrantAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToInversionMHNull() {
                return this.IsNull(this.tableM2_SECTION.DistanceToInversionMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToInversionMHNull() {
                this[this.tableM2_SECTION.DistanceToInversionMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRampRequiredNull() {
                return this.IsNull(this.tableM2_SECTION.RampRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRampRequiredNull() {
                this[this.tableM2_SECTION.RampRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineWithIDNull() {
                return this.IsNull(this.tableM2_SECTION.LineWithIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineWithIDNull() {
                this[this.tableM2_SECTION.LineWithIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydroPulleyNull() {
                return this.IsNull(this.tableM2_SECTION.HydroPulleyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydroPulleyNull() {
                this[this.tableM2_SECTION.HydroPulleyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFridgeCartNull() {
                return this.IsNull(this.tableM2_SECTION.FridgeCartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFridgeCartNull() {
                this[this.tableM2_SECTION.FridgeCartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTwoPumpNull() {
                return this.IsNull(this.tableM2_SECTION.TwoPumpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTwoPumpNull() {
                this[this.tableM2_SECTION.TwoPumpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSixBypassNull() {
                return this.IsNull(this.tableM2_SECTION.SixBypassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSixBypassNull() {
                this[this.tableM2_SECTION.SixBypassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScaffoldingNull() {
                return this.IsNull(this.tableM2_SECTION.ScaffoldingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScaffoldingNull() {
                this[this.tableM2_SECTION.ScaffoldingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWinchExtentionNull() {
                return this.IsNull(this.tableM2_SECTION.WinchExtentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWinchExtentionNull() {
                this[this.tableM2_SECTION.WinchExtentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraGeneratorNull() {
                return this.IsNull(this.tableM2_SECTION.ExtraGeneratorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraGeneratorNull() {
                this[this.tableM2_SECTION.ExtraGeneratorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreyCableExtensionNull() {
                return this.IsNull(this.tableM2_SECTION.GreyCableExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreyCableExtensionNull() {
                this[this.tableM2_SECTION.GreyCableExtensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEasementMatsNull() {
                return this.IsNull(this.tableM2_SECTION.EasementMatsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEasementMatsNull() {
                this[this.tableM2_SECTION.EasementMatsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropPipeNull() {
                return this.IsNull(this.tableM2_SECTION.DropPipeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropPipeNull() {
                this[this.tableM2_SECTION.DropPipeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropPipeInvertDepthNull() {
                return this.IsNull(this.tableM2_SECTION.DropPipeInvertDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropPipeInvertDepthNull() {
                this[this.tableM2_SECTION.DropPipeInvertDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementTakenByNull() {
                return this.IsNull(this.tableM2_SECTION.MeasurementTakenByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementTakenByNull() {
                this[this.tableM2_SECTION.MeasurementTakenByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCappedLateralsNull() {
                return this.IsNull(this.tableM2_SECTION.CappedLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCappedLateralsNull() {
                this[this.tableM2_SECTION.CappedLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydroWireWithin10FtOfInversionMHNull() {
                return this.IsNull(this.tableM2_SECTION.HydroWireWithin10FtOfInversionMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydroWireWithin10FtOfInversionMHNull() {
                this[this.tableM2_SECTION.HydroWireWithin10FtOfInversionMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurfaceGradeNull() {
                return this.IsNull(this.tableM2_SECTION.SurfaceGradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurfaceGradeNull() {
                this[this.tableM2_SECTION.SurfaceGradeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCameraSkidNull() {
                return this.IsNull(this.tableM2_SECTION.CameraSkidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCameraSkidNull() {
                this[this.tableM2_SECTION.CameraSkidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableM2_SECTION.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableM2_SECTION.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkIDNull() {
                return this.IsNull(this.tableM2_SECTION.WorkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkIDNull() {
                this[this.tableM2_SECTION.WorkIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class M2_SECTIONRowChangeEvent : global::System.EventArgs {
            
            private M2_SECTIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRowChangeEvent(M2_SECTIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591