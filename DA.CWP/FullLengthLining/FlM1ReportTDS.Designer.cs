//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3620
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.FullLengthLining {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FlM1ReportTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FlM1ReportTDS : global::System.Data.DataSet {
        
        private M1ReportByClientDataTable tableM1ReportByClient;
        
        private M1_LATERALDataTable tableM1_LATERAL;
        
        private M2_SECTIONDataTable tableM2_SECTION;
        
        private global::System.Data.DataRelation relationM1ReportByClient_M1_LATERAL;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FlM1ReportTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FlM1ReportTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["M1ReportByClient"] != null)) {
                    base.Tables.Add(new M1ReportByClientDataTable(ds.Tables["M1ReportByClient"]));
                }
                if ((ds.Tables["M1_LATERAL"] != null)) {
                    base.Tables.Add(new M1_LATERALDataTable(ds.Tables["M1_LATERAL"]));
                }
                if ((ds.Tables["M2_SECTION"] != null)) {
                    base.Tables.Add(new M2_SECTIONDataTable(ds.Tables["M2_SECTION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public M1ReportByClientDataTable M1ReportByClient {
            get {
                return this.tableM1ReportByClient;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public M1_LATERALDataTable M1_LATERAL {
            get {
                return this.tableM1_LATERAL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public M2_SECTIONDataTable M2_SECTION {
            get {
                return this.tableM2_SECTION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FlM1ReportTDS cln = ((FlM1ReportTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["M1ReportByClient"] != null)) {
                    base.Tables.Add(new M1ReportByClientDataTable(ds.Tables["M1ReportByClient"]));
                }
                if ((ds.Tables["M1_LATERAL"] != null)) {
                    base.Tables.Add(new M1_LATERALDataTable(ds.Tables["M1_LATERAL"]));
                }
                if ((ds.Tables["M2_SECTION"] != null)) {
                    base.Tables.Add(new M2_SECTIONDataTable(ds.Tables["M2_SECTION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableM1ReportByClient = ((M1ReportByClientDataTable)(base.Tables["M1ReportByClient"]));
            if ((initTable == true)) {
                if ((this.tableM1ReportByClient != null)) {
                    this.tableM1ReportByClient.InitVars();
                }
            }
            this.tableM1_LATERAL = ((M1_LATERALDataTable)(base.Tables["M1_LATERAL"]));
            if ((initTable == true)) {
                if ((this.tableM1_LATERAL != null)) {
                    this.tableM1_LATERAL.InitVars();
                }
            }
            this.tableM2_SECTION = ((M2_SECTIONDataTable)(base.Tables["M2_SECTION"]));
            if ((initTable == true)) {
                if ((this.tableM2_SECTION != null)) {
                    this.tableM2_SECTION.InitVars();
                }
            }
            this.relationM1ReportByClient_M1_LATERAL = this.Relations["M1ReportByClient_M1_LATERAL"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FlM1ReportTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FlM1ReportTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableM1ReportByClient = new M1ReportByClientDataTable();
            base.Tables.Add(this.tableM1ReportByClient);
            this.tableM1_LATERAL = new M1_LATERALDataTable();
            base.Tables.Add(this.tableM1_LATERAL);
            this.tableM2_SECTION = new M2_SECTIONDataTable();
            base.Tables.Add(this.tableM2_SECTION);
            this.relationM1ReportByClient_M1_LATERAL = new global::System.Data.DataRelation("M1ReportByClient_M1_LATERAL", new global::System.Data.DataColumn[] {
                        this.tableM1ReportByClient.AssetIDColumn,
                        this.tableM1ReportByClient.COMPANY_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableM1_LATERAL.LateralColumn,
                        this.tableM1_LATERAL.COMPANY_IDColumn}, false);
            this.Relations.Add(this.relationM1ReportByClient_M1_LATERAL);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeM1ReportByClient() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeM1_LATERAL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeM2_SECTION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FlM1ReportTDS ds = new FlM1ReportTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void M1ReportByClientRowChangeEventHandler(object sender, M1ReportByClientRowChangeEvent e);
        
        public delegate void M1_LATERALRowChangeEventHandler(object sender, M1_LATERALRowChangeEvent e);
        
        public delegate void M2_SECTIONRowChangeEventHandler(object sender, M2_SECTIONRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class M1ReportByClientDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnCOMPANIES_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnSubArea;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnM1Date;
            
            private global::System.Data.DataColumn columnSize_;
            
            private global::System.Data.DataColumn columnUSMHAddress;
            
            private global::System.Data.DataColumn columnDSMHAddress;
            
            private global::System.Data.DataColumn columnUSMHDepth;
            
            private global::System.Data.DataColumn columnDSMHDepth;
            
            private global::System.Data.DataColumn columnMeasurementTakenBy;
            
            private global::System.Data.DataColumn columnUSMHMouth12;
            
            private global::System.Data.DataColumn columnUSMHMouth1;
            
            private global::System.Data.DataColumn columnUSMHMouth2;
            
            private global::System.Data.DataColumn columnUSMHMouth3;
            
            private global::System.Data.DataColumn columnUSMHMouth4;
            
            private global::System.Data.DataColumn columnUSMHMouth5;
            
            private global::System.Data.DataColumn columnDSMHMouth12;
            
            private global::System.Data.DataColumn columnDSMHMouth1;
            
            private global::System.Data.DataColumn columnDSMHMouth2;
            
            private global::System.Data.DataColumn columnDSMHMouth3;
            
            private global::System.Data.DataColumn columnDSMHMouth4;
            
            private global::System.Data.DataColumn columnDSMHMouth5;
            
            private global::System.Data.DataColumn columnTrafficControl;
            
            private global::System.Data.DataColumn columnStandardBypass;
            
            private global::System.Data.DataColumn columnPipeMaterialType;
            
            private global::System.Data.DataColumn columnPipeSizeChange;
            
            private global::System.Data.DataColumn columnM1Comments;
            
            private global::System.Data.DataColumn columnTrafficControlDetails;
            
            private global::System.Data.DataColumn columnUSMHDescription;
            
            private global::System.Data.DataColumn columnDSMHDescription;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnMeasurementType;
            
            private global::System.Data.DataColumn columnMeasurementFromMH;
            
            private global::System.Data.DataColumn columnVideoDoneFromMH;
            
            private global::System.Data.DataColumn columnVideoDoneToMH;
            
            private global::System.Data.DataColumn columnSiteDetails;
            
            private global::System.Data.DataColumn columnStandardBypassComments;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientDataTable() {
                this.TableName = "M1ReportByClient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M1ReportByClientDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected M1ReportByClientDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANIES_IDColumn {
                get {
                    return this.columnCOMPANIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaColumn {
                get {
                    return this.columnSubArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M1DateColumn {
                get {
                    return this.columnM1Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column {
                get {
                    return this.columnSize_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHAddressColumn {
                get {
                    return this.columnUSMHAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHAddressColumn {
                get {
                    return this.columnDSMHAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHDepthColumn {
                get {
                    return this.columnUSMHDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHDepthColumn {
                get {
                    return this.columnDSMHDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementTakenByColumn {
                get {
                    return this.columnMeasurementTakenBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth12Column {
                get {
                    return this.columnUSMHMouth12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth1Column {
                get {
                    return this.columnUSMHMouth1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth2Column {
                get {
                    return this.columnUSMHMouth2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth3Column {
                get {
                    return this.columnUSMHMouth3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth4Column {
                get {
                    return this.columnUSMHMouth4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth5Column {
                get {
                    return this.columnUSMHMouth5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth12Column {
                get {
                    return this.columnDSMHMouth12;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth1Column {
                get {
                    return this.columnDSMHMouth1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth2Column {
                get {
                    return this.columnDSMHMouth2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth3Column {
                get {
                    return this.columnDSMHMouth3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth4Column {
                get {
                    return this.columnDSMHMouth4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth5Column {
                get {
                    return this.columnDSMHMouth5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlColumn {
                get {
                    return this.columnTrafficControl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandardBypassColumn {
                get {
                    return this.columnStandardBypass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeMaterialTypeColumn {
                get {
                    return this.columnPipeMaterialType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeSizeChangeColumn {
                get {
                    return this.columnPipeSizeChange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M1CommentsColumn {
                get {
                    return this.columnM1Comments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlDetailsColumn {
                get {
                    return this.columnTrafficControlDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHDescriptionColumn {
                get {
                    return this.columnUSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHDescriptionColumn {
                get {
                    return this.columnDSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementTypeColumn {
                get {
                    return this.columnMeasurementType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementFromMHColumn {
                get {
                    return this.columnMeasurementFromMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDoneFromMHColumn {
                get {
                    return this.columnVideoDoneFromMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDoneToMHColumn {
                get {
                    return this.columnVideoDoneToMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteDetailsColumn {
                get {
                    return this.columnSiteDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandardBypassCommentsColumn {
                get {
                    return this.columnStandardBypassComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow this[int index] {
                get {
                    return ((M1ReportByClientRow)(this.Rows[index]));
                }
            }
            
            public event M1ReportByClientRowChangeEventHandler M1ReportByClientRowChanging;
            
            public event M1ReportByClientRowChangeEventHandler M1ReportByClientRowChanged;
            
            public event M1ReportByClientRowChangeEventHandler M1ReportByClientRowDeleting;
            
            public event M1ReportByClientRowChangeEventHandler M1ReportByClientRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddM1ReportByClientRow(M1ReportByClientRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow AddM1ReportByClientRow(
                        int WorkID, 
                        int AssetID, 
                        int COMPANY_ID, 
                        int ProjectID, 
                        string SectionID, 
                        int COMPANIES_ID, 
                        string NAME, 
                        string SubArea, 
                        string Street, 
                        string Length, 
                        System.DateTime M1Date, 
                        string Size_, 
                        string USMHAddress, 
                        string DSMHAddress, 
                        string USMHDepth, 
                        string DSMHDepth, 
                        string MeasurementTakenBy, 
                        string USMHMouth12, 
                        string USMHMouth1, 
                        string USMHMouth2, 
                        string USMHMouth3, 
                        string USMHMouth4, 
                        string USMHMouth5, 
                        string DSMHMouth12, 
                        string DSMHMouth1, 
                        string DSMHMouth2, 
                        string DSMHMouth3, 
                        string DSMHMouth4, 
                        string DSMHMouth5, 
                        string TrafficControl, 
                        bool StandardBypass, 
                        string PipeMaterialType, 
                        bool PipeSizeChange, 
                        string M1Comments, 
                        string TrafficControlDetails, 
                        string USMHDescription, 
                        string DSMHDescription, 
                        string ProjectName, 
                        string FlowOrderID, 
                        string MeasurementType, 
                        string MeasurementFromMH, 
                        string VideoDoneFromMH, 
                        string VideoDoneToMH, 
                        string SiteDetails, 
                        string StandardBypassComments, 
                        int LiveLaterals) {
                M1ReportByClientRow rowM1ReportByClientRow = ((M1ReportByClientRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        AssetID,
                        COMPANY_ID,
                        ProjectID,
                        SectionID,
                        COMPANIES_ID,
                        NAME,
                        SubArea,
                        Street,
                        Length,
                        M1Date,
                        Size_,
                        USMHAddress,
                        DSMHAddress,
                        USMHDepth,
                        DSMHDepth,
                        MeasurementTakenBy,
                        USMHMouth12,
                        USMHMouth1,
                        USMHMouth2,
                        USMHMouth3,
                        USMHMouth4,
                        USMHMouth5,
                        DSMHMouth12,
                        DSMHMouth1,
                        DSMHMouth2,
                        DSMHMouth3,
                        DSMHMouth4,
                        DSMHMouth5,
                        TrafficControl,
                        StandardBypass,
                        PipeMaterialType,
                        PipeSizeChange,
                        M1Comments,
                        TrafficControlDetails,
                        USMHDescription,
                        DSMHDescription,
                        ProjectName,
                        FlowOrderID,
                        MeasurementType,
                        MeasurementFromMH,
                        VideoDoneFromMH,
                        VideoDoneToMH,
                        SiteDetails,
                        StandardBypassComments,
                        LiveLaterals};
                rowM1ReportByClientRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowM1ReportByClientRow);
                return rowM1ReportByClientRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow FindByProjectIDCOMPANY_IDAssetID(int ProjectID, int COMPANY_ID, int AssetID) {
                return ((M1ReportByClientRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            COMPANY_ID,
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                M1ReportByClientDataTable cln = ((M1ReportByClientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new M1ReportByClientDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnAssetID = base.Columns["AssetID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnCOMPANIES_ID = base.Columns["COMPANIES_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnSubArea = base.Columns["SubArea"];
                this.columnStreet = base.Columns["Street"];
                this.columnLength = base.Columns["Length"];
                this.columnM1Date = base.Columns["M1Date"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnUSMHAddress = base.Columns["USMHAddress"];
                this.columnDSMHAddress = base.Columns["DSMHAddress"];
                this.columnUSMHDepth = base.Columns["USMHDepth"];
                this.columnDSMHDepth = base.Columns["DSMHDepth"];
                this.columnMeasurementTakenBy = base.Columns["MeasurementTakenBy"];
                this.columnUSMHMouth12 = base.Columns["USMHMouth12"];
                this.columnUSMHMouth1 = base.Columns["USMHMouth1"];
                this.columnUSMHMouth2 = base.Columns["USMHMouth2"];
                this.columnUSMHMouth3 = base.Columns["USMHMouth3"];
                this.columnUSMHMouth4 = base.Columns["USMHMouth4"];
                this.columnUSMHMouth5 = base.Columns["USMHMouth5"];
                this.columnDSMHMouth12 = base.Columns["DSMHMouth12"];
                this.columnDSMHMouth1 = base.Columns["DSMHMouth1"];
                this.columnDSMHMouth2 = base.Columns["DSMHMouth2"];
                this.columnDSMHMouth3 = base.Columns["DSMHMouth3"];
                this.columnDSMHMouth4 = base.Columns["DSMHMouth4"];
                this.columnDSMHMouth5 = base.Columns["DSMHMouth5"];
                this.columnTrafficControl = base.Columns["TrafficControl"];
                this.columnStandardBypass = base.Columns["StandardBypass"];
                this.columnPipeMaterialType = base.Columns["PipeMaterialType"];
                this.columnPipeSizeChange = base.Columns["PipeSizeChange"];
                this.columnM1Comments = base.Columns["M1Comments"];
                this.columnTrafficControlDetails = base.Columns["TrafficControlDetails"];
                this.columnUSMHDescription = base.Columns["USMHDescription"];
                this.columnDSMHDescription = base.Columns["DSMHDescription"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnMeasurementType = base.Columns["MeasurementType"];
                this.columnMeasurementFromMH = base.Columns["MeasurementFromMH"];
                this.columnVideoDoneFromMH = base.Columns["VideoDoneFromMH"];
                this.columnVideoDoneToMH = base.Columns["VideoDoneToMH"];
                this.columnSiteDetails = base.Columns["SiteDetails"];
                this.columnStandardBypassComments = base.Columns["StandardBypassComments"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnCOMPANIES_ID = new global::System.Data.DataColumn("COMPANIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANIES_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnSubArea = new global::System.Data.DataColumn("SubArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubArea);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnM1Date = new global::System.Data.DataColumn("M1Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM1Date);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnUSMHAddress = new global::System.Data.DataColumn("USMHAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHAddress);
                this.columnDSMHAddress = new global::System.Data.DataColumn("DSMHAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHAddress);
                this.columnUSMHDepth = new global::System.Data.DataColumn("USMHDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHDepth);
                this.columnDSMHDepth = new global::System.Data.DataColumn("DSMHDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHDepth);
                this.columnMeasurementTakenBy = new global::System.Data.DataColumn("MeasurementTakenBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementTakenBy);
                this.columnUSMHMouth12 = new global::System.Data.DataColumn("USMHMouth12", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth12);
                this.columnUSMHMouth1 = new global::System.Data.DataColumn("USMHMouth1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth1);
                this.columnUSMHMouth2 = new global::System.Data.DataColumn("USMHMouth2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth2);
                this.columnUSMHMouth3 = new global::System.Data.DataColumn("USMHMouth3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth3);
                this.columnUSMHMouth4 = new global::System.Data.DataColumn("USMHMouth4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth4);
                this.columnUSMHMouth5 = new global::System.Data.DataColumn("USMHMouth5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth5);
                this.columnDSMHMouth12 = new global::System.Data.DataColumn("DSMHMouth12", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth12);
                this.columnDSMHMouth1 = new global::System.Data.DataColumn("DSMHMouth1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth1);
                this.columnDSMHMouth2 = new global::System.Data.DataColumn("DSMHMouth2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth2);
                this.columnDSMHMouth3 = new global::System.Data.DataColumn("DSMHMouth3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth3);
                this.columnDSMHMouth4 = new global::System.Data.DataColumn("DSMHMouth4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth4);
                this.columnDSMHMouth5 = new global::System.Data.DataColumn("DSMHMouth5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth5);
                this.columnTrafficControl = new global::System.Data.DataColumn("TrafficControl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControl);
                this.columnStandardBypass = new global::System.Data.DataColumn("StandardBypass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardBypass);
                this.columnPipeMaterialType = new global::System.Data.DataColumn("PipeMaterialType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeMaterialType);
                this.columnPipeSizeChange = new global::System.Data.DataColumn("PipeSizeChange", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeSizeChange);
                this.columnM1Comments = new global::System.Data.DataColumn("M1Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM1Comments);
                this.columnTrafficControlDetails = new global::System.Data.DataColumn("TrafficControlDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControlDetails);
                this.columnUSMHDescription = new global::System.Data.DataColumn("USMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHDescription);
                this.columnDSMHDescription = new global::System.Data.DataColumn("DSMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHDescription);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnMeasurementType = new global::System.Data.DataColumn("MeasurementType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementType);
                this.columnMeasurementFromMH = new global::System.Data.DataColumn("MeasurementFromMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementFromMH);
                this.columnVideoDoneFromMH = new global::System.Data.DataColumn("VideoDoneFromMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDoneFromMH);
                this.columnVideoDoneToMH = new global::System.Data.DataColumn("VideoDoneToMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDoneToMH);
                this.columnSiteDetails = new global::System.Data.DataColumn("SiteDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteDetails);
                this.columnStandardBypassComments = new global::System.Data.DataColumn("StandardBypassComments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardBypassComments);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnCOMPANY_ID,
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow NewM1ReportByClientRow() {
                return ((M1ReportByClientRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new M1ReportByClientRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(M1ReportByClientRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.M1ReportByClientRowChanged != null)) {
                    this.M1ReportByClientRowChanged(this, new M1ReportByClientRowChangeEvent(((M1ReportByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.M1ReportByClientRowChanging != null)) {
                    this.M1ReportByClientRowChanging(this, new M1ReportByClientRowChangeEvent(((M1ReportByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.M1ReportByClientRowDeleted != null)) {
                    this.M1ReportByClientRowDeleted(this, new M1ReportByClientRowChangeEvent(((M1ReportByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.M1ReportByClientRowDeleting != null)) {
                    this.M1ReportByClientRowDeleting(this, new M1ReportByClientRowChangeEvent(((M1ReportByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveM1ReportByClientRow(M1ReportByClientRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlM1ReportTDS ds = new FlM1ReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "M1ReportByClientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class M1_LATERALDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnLateral;
            
            private global::System.Data.DataColumn columnVideoDistance;
            
            private global::System.Data.DataColumn columnClockPosition;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDistanceToCentre;
            
            private global::System.Data.DataColumn columnSize_;
            
            private global::System.Data.DataColumn columnTimeOpened;
            
            private global::System.Data.DataColumn columnReverseSetup;
            
            private global::System.Data.DataColumn columnReinstate;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnClientLateralID;
            
            private global::System.Data.DataColumn columnMaterial;
            
            private global::System.Data.DataColumn columnDistanceFromUSMH;
            
            private global::System.Data.DataColumn columnDistanceFromDSMH;
            
            private global::System.Data.DataColumn columnFlowOrderIDLateralID;
            
            private global::System.Data.DataColumn columnLateralID;
            
            private global::System.Data.DataColumn columnVideoDistanceDouble;
            
            private global::System.Data.DataColumn columnClientInspectionNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1_LATERALDataTable() {
                this.TableName = "M1_LATERAL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M1_LATERALDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected M1_LATERALDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralColumn {
                get {
                    return this.columnLateral;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDistanceColumn {
                get {
                    return this.columnVideoDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClockPositionColumn {
                get {
                    return this.columnClockPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToCentreColumn {
                get {
                    return this.columnDistanceToCentre;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column {
                get {
                    return this.columnSize_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeOpenedColumn {
                get {
                    return this.columnTimeOpened;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReverseSetupColumn {
                get {
                    return this.columnReverseSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReinstateColumn {
                get {
                    return this.columnReinstate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientLateralIDColumn {
                get {
                    return this.columnClientLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialColumn {
                get {
                    return this.columnMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromUSMHColumn {
                get {
                    return this.columnDistanceFromUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromDSMHColumn {
                get {
                    return this.columnDistanceFromDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDLateralIDColumn {
                get {
                    return this.columnFlowOrderIDLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralIDColumn {
                get {
                    return this.columnLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDistanceDoubleColumn {
                get {
                    return this.columnVideoDistanceDouble;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientInspectionNoColumn {
                get {
                    return this.columnClientInspectionNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1_LATERALRow this[int index] {
                get {
                    return ((M1_LATERALRow)(this.Rows[index]));
                }
            }
            
            public event M1_LATERALRowChangeEventHandler M1_LATERALRowChanging;
            
            public event M1_LATERALRowChangeEventHandler M1_LATERALRowChanged;
            
            public event M1_LATERALRowChangeEventHandler M1_LATERALRowDeleting;
            
            public event M1_LATERALRowChangeEventHandler M1_LATERALRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddM1_LATERALRow(M1_LATERALRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1_LATERALRow AddM1_LATERALRow(
                        int WorkID, 
                        int Lateral, 
                        string VideoDistance, 
                        string ClockPosition, 
                        string State, 
                        string DistanceToCentre, 
                        string Size_, 
                        string TimeOpened, 
                        string ReverseSetup, 
                        System.DateTime Reinstate, 
                        string Comments, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string ClientLateralID, 
                        string Material, 
                        string DistanceFromUSMH, 
                        string DistanceFromDSMH, 
                        string FlowOrderIDLateralID, 
                        string LateralID, 
                        double VideoDistanceDouble, 
                        string ClientInspectionNo) {
                M1_LATERALRow rowM1_LATERALRow = ((M1_LATERALRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        Lateral,
                        VideoDistance,
                        ClockPosition,
                        State,
                        DistanceToCentre,
                        Size_,
                        TimeOpened,
                        ReverseSetup,
                        Reinstate,
                        Comments,
                        Deleted,
                        COMPANY_ID,
                        ClientLateralID,
                        Material,
                        DistanceFromUSMH,
                        DistanceFromDSMH,
                        FlowOrderIDLateralID,
                        LateralID,
                        VideoDistanceDouble,
                        ClientInspectionNo};
                rowM1_LATERALRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowM1_LATERALRow);
                return rowM1_LATERALRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1_LATERALRow FindByLateralWorkIDCOMPANY_ID(int Lateral, int WorkID, int COMPANY_ID) {
                return ((M1_LATERALRow)(this.Rows.Find(new object[] {
                            Lateral,
                            WorkID,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                M1_LATERALDataTable cln = ((M1_LATERALDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new M1_LATERALDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnLateral = base.Columns["Lateral"];
                this.columnVideoDistance = base.Columns["VideoDistance"];
                this.columnClockPosition = base.Columns["ClockPosition"];
                this.columnState = base.Columns["State"];
                this.columnDistanceToCentre = base.Columns["DistanceToCentre"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnTimeOpened = base.Columns["TimeOpened"];
                this.columnReverseSetup = base.Columns["ReverseSetup"];
                this.columnReinstate = base.Columns["Reinstate"];
                this.columnComments = base.Columns["Comments"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnClientLateralID = base.Columns["ClientLateralID"];
                this.columnMaterial = base.Columns["Material"];
                this.columnDistanceFromUSMH = base.Columns["DistanceFromUSMH"];
                this.columnDistanceFromDSMH = base.Columns["DistanceFromDSMH"];
                this.columnFlowOrderIDLateralID = base.Columns["FlowOrderIDLateralID"];
                this.columnLateralID = base.Columns["LateralID"];
                this.columnVideoDistanceDouble = base.Columns["VideoDistanceDouble"];
                this.columnClientInspectionNo = base.Columns["ClientInspectionNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnLateral = new global::System.Data.DataColumn("Lateral", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateral);
                this.columnVideoDistance = new global::System.Data.DataColumn("VideoDistance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDistance);
                this.columnClockPosition = new global::System.Data.DataColumn("ClockPosition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClockPosition);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDistanceToCentre = new global::System.Data.DataColumn("DistanceToCentre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToCentre);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnTimeOpened = new global::System.Data.DataColumn("TimeOpened", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOpened);
                this.columnReverseSetup = new global::System.Data.DataColumn("ReverseSetup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReverseSetup);
                this.columnReinstate = new global::System.Data.DataColumn("Reinstate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReinstate);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnClientLateralID = new global::System.Data.DataColumn("ClientLateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientLateralID);
                this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterial);
                this.columnDistanceFromUSMH = new global::System.Data.DataColumn("DistanceFromUSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromUSMH);
                this.columnDistanceFromDSMH = new global::System.Data.DataColumn("DistanceFromDSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromDSMH);
                this.columnFlowOrderIDLateralID = new global::System.Data.DataColumn("FlowOrderIDLateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderIDLateralID);
                this.columnLateralID = new global::System.Data.DataColumn("LateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralID);
                this.columnVideoDistanceDouble = new global::System.Data.DataColumn("VideoDistanceDouble", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDistanceDouble);
                this.columnClientInspectionNo = new global::System.Data.DataColumn("ClientInspectionNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientInspectionNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLateral,
                                this.columnWorkID,
                                this.columnCOMPANY_ID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnLateral.AllowDBNull = false;
                this.columnVideoDistance.MaxLength = 25;
                this.columnClockPosition.MaxLength = 50;
                this.columnDistanceToCentre.MaxLength = 25;
                this.columnTimeOpened.MaxLength = 50;
                this.columnReverseSetup.MaxLength = 25;
                this.columnComments.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1_LATERALRow NewM1_LATERALRow() {
                return ((M1_LATERALRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new M1_LATERALRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(M1_LATERALRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.M1_LATERALRowChanged != null)) {
                    this.M1_LATERALRowChanged(this, new M1_LATERALRowChangeEvent(((M1_LATERALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.M1_LATERALRowChanging != null)) {
                    this.M1_LATERALRowChanging(this, new M1_LATERALRowChangeEvent(((M1_LATERALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.M1_LATERALRowDeleted != null)) {
                    this.M1_LATERALRowDeleted(this, new M1_LATERALRowChangeEvent(((M1_LATERALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.M1_LATERALRowDeleting != null)) {
                    this.M1_LATERALRowDeleting(this, new M1_LATERALRowChangeEvent(((M1_LATERALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveM1_LATERALRow(M1_LATERALRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlM1ReportTDS ds = new FlM1ReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "M1_LATERALDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class M2_SECTIONDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnCOMPANIES_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnSize_;
            
            private global::System.Data.DataColumn columnM2Date;
            
            private global::System.Data.DataColumn columnVideoLength;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnHydrantAddress;
            
            private global::System.Data.DataColumn columnDistanceToInversionMH;
            
            private global::System.Data.DataColumn columnRampRequired;
            
            private global::System.Data.DataColumn columnLineWithID;
            
            private global::System.Data.DataColumn columnHydroPulley;
            
            private global::System.Data.DataColumn columnFridgeCart;
            
            private global::System.Data.DataColumn columnTwoPump;
            
            private global::System.Data.DataColumn columnSixBypass;
            
            private global::System.Data.DataColumn columnScaffolding;
            
            private global::System.Data.DataColumn columnWinchExtention;
            
            private global::System.Data.DataColumn columnExtraGenerator;
            
            private global::System.Data.DataColumn columnGreyCableExtension;
            
            private global::System.Data.DataColumn columnEasementMats;
            
            private global::System.Data.DataColumn columnDropPipe;
            
            private global::System.Data.DataColumn columnDropPipeInvertDepth;
            
            private global::System.Data.DataColumn columnMeasurementTakenBy;
            
            private global::System.Data.DataColumn columnCappedLaterals;
            
            private global::System.Data.DataColumn columnHydroWireWithin10FtOfInversionMH;
            
            private global::System.Data.DataColumn columnSurfaceGrade;
            
            private global::System.Data.DataColumn columnCameraSkid;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnWorkID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONDataTable() {
                this.TableName = "M2_SECTION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M2_SECTIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected M2_SECTIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANIES_IDColumn {
                get {
                    return this.columnCOMPANIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column {
                get {
                    return this.columnSize_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M2DateColumn {
                get {
                    return this.columnM2Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoLengthColumn {
                get {
                    return this.columnVideoLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydrantAddressColumn {
                get {
                    return this.columnHydrantAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToInversionMHColumn {
                get {
                    return this.columnDistanceToInversionMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RampRequiredColumn {
                get {
                    return this.columnRampRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineWithIDColumn {
                get {
                    return this.columnLineWithID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydroPulleyColumn {
                get {
                    return this.columnHydroPulley;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FridgeCartColumn {
                get {
                    return this.columnFridgeCart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TwoPumpColumn {
                get {
                    return this.columnTwoPump;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SixBypassColumn {
                get {
                    return this.columnSixBypass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScaffoldingColumn {
                get {
                    return this.columnScaffolding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WinchExtentionColumn {
                get {
                    return this.columnWinchExtention;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraGeneratorColumn {
                get {
                    return this.columnExtraGenerator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreyCableExtensionColumn {
                get {
                    return this.columnGreyCableExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EasementMatsColumn {
                get {
                    return this.columnEasementMats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropPipeColumn {
                get {
                    return this.columnDropPipe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropPipeInvertDepthColumn {
                get {
                    return this.columnDropPipeInvertDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementTakenByColumn {
                get {
                    return this.columnMeasurementTakenBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CappedLateralsColumn {
                get {
                    return this.columnCappedLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydroWireWithin10FtOfInversionMHColumn {
                get {
                    return this.columnHydroWireWithin10FtOfInversionMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurfaceGradeColumn {
                get {
                    return this.columnSurfaceGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CameraSkidColumn {
                get {
                    return this.columnCameraSkid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow this[int index] {
                get {
                    return ((M2_SECTIONRow)(this.Rows[index]));
                }
            }
            
            public event M2_SECTIONRowChangeEventHandler M2_SECTIONRowChanging;
            
            public event M2_SECTIONRowChangeEventHandler M2_SECTIONRowChanged;
            
            public event M2_SECTIONRowChangeEventHandler M2_SECTIONRowDeleting;
            
            public event M2_SECTIONRowChangeEventHandler M2_SECTIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddM2_SECTIONRow(M2_SECTIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow AddM2_SECTIONRow(
                        int AssetID, 
                        int COMPANY_ID, 
                        int ProjectID, 
                        string SectionID, 
                        int COMPANIES_ID, 
                        string NAME, 
                        string Street, 
                        string USMH, 
                        string DSMH, 
                        string Size_, 
                        System.DateTime M2Date, 
                        string VideoLength, 
                        string ProjectName, 
                        string FlowOrderID, 
                        string HydrantAddress, 
                        string DistanceToInversionMH, 
                        bool RampRequired, 
                        string LineWithID, 
                        bool HydroPulley, 
                        bool FridgeCart, 
                        bool TwoPump, 
                        bool SixBypass, 
                        bool Scaffolding, 
                        bool WinchExtention, 
                        bool ExtraGenerator, 
                        bool GreyCableExtension, 
                        bool EasementMats, 
                        bool DropPipe, 
                        string DropPipeInvertDepth, 
                        string MeasurementTakenBy, 
                        int CappedLaterals, 
                        string HydroWireWithin10FtOfInversionMH, 
                        string SurfaceGrade, 
                        bool CameraSkid, 
                        string Comments, 
                        int WorkID) {
                M2_SECTIONRow rowM2_SECTIONRow = ((M2_SECTIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        COMPANY_ID,
                        ProjectID,
                        SectionID,
                        COMPANIES_ID,
                        NAME,
                        Street,
                        USMH,
                        DSMH,
                        Size_,
                        M2Date,
                        VideoLength,
                        ProjectName,
                        FlowOrderID,
                        HydrantAddress,
                        DistanceToInversionMH,
                        RampRequired,
                        LineWithID,
                        HydroPulley,
                        FridgeCart,
                        TwoPump,
                        SixBypass,
                        Scaffolding,
                        WinchExtention,
                        ExtraGenerator,
                        GreyCableExtension,
                        EasementMats,
                        DropPipe,
                        DropPipeInvertDepth,
                        MeasurementTakenBy,
                        CappedLaterals,
                        HydroWireWithin10FtOfInversionMH,
                        SurfaceGrade,
                        CameraSkid,
                        Comments,
                        WorkID};
                rowM2_SECTIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowM2_SECTIONRow);
                return rowM2_SECTIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow FindByProjectIDCOMPANY_IDAssetID(int ProjectID, int COMPANY_ID, int AssetID) {
                return ((M2_SECTIONRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            COMPANY_ID,
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                M2_SECTIONDataTable cln = ((M2_SECTIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new M2_SECTIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnCOMPANIES_ID = base.Columns["COMPANIES_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnStreet = base.Columns["Street"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnM2Date = base.Columns["M2Date"];
                this.columnVideoLength = base.Columns["VideoLength"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnHydrantAddress = base.Columns["HydrantAddress"];
                this.columnDistanceToInversionMH = base.Columns["DistanceToInversionMH"];
                this.columnRampRequired = base.Columns["RampRequired"];
                this.columnLineWithID = base.Columns["LineWithID"];
                this.columnHydroPulley = base.Columns["HydroPulley"];
                this.columnFridgeCart = base.Columns["FridgeCart"];
                this.columnTwoPump = base.Columns["TwoPump"];
                this.columnSixBypass = base.Columns["SixBypass"];
                this.columnScaffolding = base.Columns["Scaffolding"];
                this.columnWinchExtention = base.Columns["WinchExtention"];
                this.columnExtraGenerator = base.Columns["ExtraGenerator"];
                this.columnGreyCableExtension = base.Columns["GreyCableExtension"];
                this.columnEasementMats = base.Columns["EasementMats"];
                this.columnDropPipe = base.Columns["DropPipe"];
                this.columnDropPipeInvertDepth = base.Columns["DropPipeInvertDepth"];
                this.columnMeasurementTakenBy = base.Columns["MeasurementTakenBy"];
                this.columnCappedLaterals = base.Columns["CappedLaterals"];
                this.columnHydroWireWithin10FtOfInversionMH = base.Columns["HydroWireWithin10FtOfInversionMH"];
                this.columnSurfaceGrade = base.Columns["SurfaceGrade"];
                this.columnCameraSkid = base.Columns["CameraSkid"];
                this.columnComments = base.Columns["Comments"];
                this.columnWorkID = base.Columns["WorkID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnCOMPANIES_ID = new global::System.Data.DataColumn("COMPANIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANIES_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnM2Date = new global::System.Data.DataColumn("M2Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM2Date);
                this.columnVideoLength = new global::System.Data.DataColumn("VideoLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoLength);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnHydrantAddress = new global::System.Data.DataColumn("HydrantAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydrantAddress);
                this.columnDistanceToInversionMH = new global::System.Data.DataColumn("DistanceToInversionMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToInversionMH);
                this.columnRampRequired = new global::System.Data.DataColumn("RampRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRampRequired);
                this.columnLineWithID = new global::System.Data.DataColumn("LineWithID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineWithID);
                this.columnHydroPulley = new global::System.Data.DataColumn("HydroPulley", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydroPulley);
                this.columnFridgeCart = new global::System.Data.DataColumn("FridgeCart", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFridgeCart);
                this.columnTwoPump = new global::System.Data.DataColumn("TwoPump", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTwoPump);
                this.columnSixBypass = new global::System.Data.DataColumn("SixBypass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSixBypass);
                this.columnScaffolding = new global::System.Data.DataColumn("Scaffolding", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScaffolding);
                this.columnWinchExtention = new global::System.Data.DataColumn("WinchExtention", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWinchExtention);
                this.columnExtraGenerator = new global::System.Data.DataColumn("ExtraGenerator", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraGenerator);
                this.columnGreyCableExtension = new global::System.Data.DataColumn("GreyCableExtension", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreyCableExtension);
                this.columnEasementMats = new global::System.Data.DataColumn("EasementMats", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEasementMats);
                this.columnDropPipe = new global::System.Data.DataColumn("DropPipe", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropPipe);
                this.columnDropPipeInvertDepth = new global::System.Data.DataColumn("DropPipeInvertDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropPipeInvertDepth);
                this.columnMeasurementTakenBy = new global::System.Data.DataColumn("MeasurementTakenBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementTakenBy);
                this.columnCappedLaterals = new global::System.Data.DataColumn("CappedLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCappedLaterals);
                this.columnHydroWireWithin10FtOfInversionMH = new global::System.Data.DataColumn("HydroWireWithin10FtOfInversionMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydroWireWithin10FtOfInversionMH);
                this.columnSurfaceGrade = new global::System.Data.DataColumn("SurfaceGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurfaceGrade);
                this.columnCameraSkid = new global::System.Data.DataColumn("CameraSkid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCameraSkid);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnCOMPANY_ID,
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow NewM2_SECTIONRow() {
                return ((M2_SECTIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new M2_SECTIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(M2_SECTIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.M2_SECTIONRowChanged != null)) {
                    this.M2_SECTIONRowChanged(this, new M2_SECTIONRowChangeEvent(((M2_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.M2_SECTIONRowChanging != null)) {
                    this.M2_SECTIONRowChanging(this, new M2_SECTIONRowChangeEvent(((M2_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.M2_SECTIONRowDeleted != null)) {
                    this.M2_SECTIONRowDeleted(this, new M2_SECTIONRowChangeEvent(((M2_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.M2_SECTIONRowDeleting != null)) {
                    this.M2_SECTIONRowDeleting(this, new M2_SECTIONRowChangeEvent(((M2_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveM2_SECTIONRow(M2_SECTIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlM1ReportTDS ds = new FlM1ReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "M2_SECTIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class M1ReportByClientRow : global::System.Data.DataRow {
            
            private M1ReportByClientDataTable tableM1ReportByClient;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M1ReportByClientRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableM1ReportByClient = ((M1ReportByClientDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    try {
                        return ((int)(this[this.tableM1ReportByClient.WorkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkID\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableM1ReportByClient.AssetIDColumn]));
                }
                set {
                    this[this.tableM1ReportByClient.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableM1ReportByClient.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableM1ReportByClient.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableM1ReportByClient.ProjectIDColumn]));
                }
                set {
                    this[this.tableM1ReportByClient.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableM1ReportByClient.COMPANIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANIES_ID\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.COMPANIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubArea {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.SubAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubArea\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.SubAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime M1Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableM1ReportByClient.M1DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M1Date\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.M1DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_ {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.Size_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHAddress {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHAddress\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHAddress {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHAddress\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHDepth {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHDepth\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHDepth {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHDepth\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementTakenBy {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.MeasurementTakenByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementTakenBy\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.MeasurementTakenByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth12 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHMouth12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth12\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHMouth12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth1 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHMouth1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth1\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHMouth1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth2 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHMouth2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth2\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHMouth2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth3 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHMouth3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth3\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHMouth3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth4 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHMouth4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth4\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHMouth4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth5 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHMouth5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth5\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHMouth5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth12 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHMouth12Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth12\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHMouth12Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth1 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHMouth1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth1\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHMouth1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth2 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHMouth2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth2\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHMouth2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth3 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHMouth3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth3\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHMouth3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth4 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHMouth4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth4\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHMouth4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth5 {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHMouth5Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth5\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHMouth5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControl {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.TrafficControlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControl\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.TrafficControlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StandardBypass {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.StandardBypassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StandardBypass\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.StandardBypassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeMaterialType {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.PipeMaterialTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeMaterialType\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.PipeMaterialTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PipeSizeChange {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.PipeSizeChangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeSizeChange\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.PipeSizeChangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string M1Comments {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.M1CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M1Comments\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.M1CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControlDetails {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.TrafficControlDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControlDetails\' in table \'M1ReportByClient\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.TrafficControlDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHDescription\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHDescription\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementType {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.MeasurementTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementType\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.MeasurementTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementFromMH {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.MeasurementFromMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementFromMH\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.MeasurementFromMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoDoneFromMH {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.VideoDoneFromMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDoneFromMH\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.VideoDoneFromMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoDoneToMH {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.VideoDoneToMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDoneToMH\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.VideoDoneToMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteDetails {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.SiteDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteDetails\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.SiteDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StandardBypassComments {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.StandardBypassCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StandardBypassComments\' in table \'M1ReportByClient\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.StandardBypassCommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tableM1ReportByClient.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkIDNull() {
                return this.IsNull(this.tableM1ReportByClient.WorkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkIDNull() {
                this[this.tableM1ReportByClient.WorkIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableM1ReportByClient.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableM1ReportByClient.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANIES_IDNull() {
                return this.IsNull(this.tableM1ReportByClient.COMPANIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANIES_IDNull() {
                this[this.tableM1ReportByClient.COMPANIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableM1ReportByClient.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableM1ReportByClient.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaNull() {
                return this.IsNull(this.tableM1ReportByClient.SubAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaNull() {
                this[this.tableM1ReportByClient.SubAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableM1ReportByClient.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableM1ReportByClient.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableM1ReportByClient.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableM1ReportByClient.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM1DateNull() {
                return this.IsNull(this.tableM1ReportByClient.M1DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM1DateNull() {
                this[this.tableM1ReportByClient.M1DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null() {
                return this.IsNull(this.tableM1ReportByClient.Size_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null() {
                this[this.tableM1ReportByClient.Size_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHAddressNull() {
                return this.IsNull(this.tableM1ReportByClient.USMHAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHAddressNull() {
                this[this.tableM1ReportByClient.USMHAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHAddressNull() {
                return this.IsNull(this.tableM1ReportByClient.DSMHAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHAddressNull() {
                this[this.tableM1ReportByClient.DSMHAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHDepthNull() {
                return this.IsNull(this.tableM1ReportByClient.USMHDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHDepthNull() {
                this[this.tableM1ReportByClient.USMHDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHDepthNull() {
                return this.IsNull(this.tableM1ReportByClient.DSMHDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHDepthNull() {
                this[this.tableM1ReportByClient.DSMHDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementTakenByNull() {
                return this.IsNull(this.tableM1ReportByClient.MeasurementTakenByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementTakenByNull() {
                this[this.tableM1ReportByClient.MeasurementTakenByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth12Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHMouth12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth12Null() {
                this[this.tableM1ReportByClient.USMHMouth12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth1Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHMouth1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth1Null() {
                this[this.tableM1ReportByClient.USMHMouth1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth2Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHMouth2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth2Null() {
                this[this.tableM1ReportByClient.USMHMouth2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth3Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHMouth3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth3Null() {
                this[this.tableM1ReportByClient.USMHMouth3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth4Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHMouth4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth4Null() {
                this[this.tableM1ReportByClient.USMHMouth4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth5Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHMouth5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth5Null() {
                this[this.tableM1ReportByClient.USMHMouth5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth12Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHMouth12Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth12Null() {
                this[this.tableM1ReportByClient.DSMHMouth12Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth1Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHMouth1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth1Null() {
                this[this.tableM1ReportByClient.DSMHMouth1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth2Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHMouth2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth2Null() {
                this[this.tableM1ReportByClient.DSMHMouth2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth3Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHMouth3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth3Null() {
                this[this.tableM1ReportByClient.DSMHMouth3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth4Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHMouth4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth4Null() {
                this[this.tableM1ReportByClient.DSMHMouth4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth5Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHMouth5Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth5Null() {
                this[this.tableM1ReportByClient.DSMHMouth5Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlNull() {
                return this.IsNull(this.tableM1ReportByClient.TrafficControlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlNull() {
                this[this.tableM1ReportByClient.TrafficControlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardBypassNull() {
                return this.IsNull(this.tableM1ReportByClient.StandardBypassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardBypassNull() {
                this[this.tableM1ReportByClient.StandardBypassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeMaterialTypeNull() {
                return this.IsNull(this.tableM1ReportByClient.PipeMaterialTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeMaterialTypeNull() {
                this[this.tableM1ReportByClient.PipeMaterialTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeSizeChangeNull() {
                return this.IsNull(this.tableM1ReportByClient.PipeSizeChangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeSizeChangeNull() {
                this[this.tableM1ReportByClient.PipeSizeChangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM1CommentsNull() {
                return this.IsNull(this.tableM1ReportByClient.M1CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM1CommentsNull() {
                this[this.tableM1ReportByClient.M1CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlDetailsNull() {
                return this.IsNull(this.tableM1ReportByClient.TrafficControlDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlDetailsNull() {
                this[this.tableM1ReportByClient.TrafficControlDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHDescriptionNull() {
                return this.IsNull(this.tableM1ReportByClient.USMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHDescriptionNull() {
                this[this.tableM1ReportByClient.USMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHDescriptionNull() {
                return this.IsNull(this.tableM1ReportByClient.DSMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHDescriptionNull() {
                this[this.tableM1ReportByClient.DSMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableM1ReportByClient.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableM1ReportByClient.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableM1ReportByClient.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableM1ReportByClient.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementTypeNull() {
                return this.IsNull(this.tableM1ReportByClient.MeasurementTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementTypeNull() {
                this[this.tableM1ReportByClient.MeasurementTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementFromMHNull() {
                return this.IsNull(this.tableM1ReportByClient.MeasurementFromMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementFromMHNull() {
                this[this.tableM1ReportByClient.MeasurementFromMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDoneFromMHNull() {
                return this.IsNull(this.tableM1ReportByClient.VideoDoneFromMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDoneFromMHNull() {
                this[this.tableM1ReportByClient.VideoDoneFromMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDoneToMHNull() {
                return this.IsNull(this.tableM1ReportByClient.VideoDoneToMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDoneToMHNull() {
                this[this.tableM1ReportByClient.VideoDoneToMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteDetailsNull() {
                return this.IsNull(this.tableM1ReportByClient.SiteDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteDetailsNull() {
                this[this.tableM1ReportByClient.SiteDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardBypassCommentsNull() {
                return this.IsNull(this.tableM1ReportByClient.StandardBypassCommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardBypassCommentsNull() {
                this[this.tableM1ReportByClient.StandardBypassCommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tableM1ReportByClient.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tableM1ReportByClient.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1_LATERALRow[] GetM1_LATERALRows() {
                if ((this.Table.ChildRelations["M1ReportByClient_M1_LATERAL"] == null)) {
                    return new M1_LATERALRow[0];
                }
                else {
                    return ((M1_LATERALRow[])(base.GetChildRows(this.Table.ChildRelations["M1ReportByClient_M1_LATERAL"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class M1_LATERALRow : global::System.Data.DataRow {
            
            private M1_LATERALDataTable tableM1_LATERAL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M1_LATERALRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableM1_LATERAL = ((M1_LATERALDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableM1_LATERAL.WorkIDColumn]));
                }
                set {
                    this[this.tableM1_LATERAL.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lateral {
                get {
                    return ((int)(this[this.tableM1_LATERAL.LateralColumn]));
                }
                set {
                    this[this.tableM1_LATERAL.LateralColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoDistance {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.VideoDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDistance\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.VideoDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClockPosition {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.ClockPositionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClockPosition\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.ClockPositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceToCentre {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.DistanceToCentreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToCentre\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.DistanceToCentreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_ {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.Size_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeOpened {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.TimeOpenedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeOpened\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.TimeOpenedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReverseSetup {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.ReverseSetupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReverseSetup\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.ReverseSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Reinstate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableM1_LATERAL.ReinstateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reinstate\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.ReinstateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableM1_LATERAL.DeletedColumn]));
                }
                set {
                    this[this.tableM1_LATERAL.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableM1_LATERAL.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableM1_LATERAL.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientLateralID {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.ClientLateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientLateralID\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.ClientLateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Material {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.MaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Material\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.MaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromUSMH {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.DistanceFromUSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromUSMH\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.DistanceFromUSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromDSMH {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.DistanceFromDSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromDSMH\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.DistanceFromDSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderIDLateralID {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.FlowOrderIDLateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderIDLateralID\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.FlowOrderIDLateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralID {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.LateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralID\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.LateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VideoDistanceDouble {
                get {
                    try {
                        return ((double)(this[this.tableM1_LATERAL.VideoDistanceDoubleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDistanceDouble\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.VideoDistanceDoubleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientInspectionNo {
                get {
                    try {
                        return ((string)(this[this.tableM1_LATERAL.ClientInspectionNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientInspectionNo\' in table \'M1_LATERAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1_LATERAL.ClientInspectionNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow M1ReportByClientRowParent {
                get {
                    return ((M1ReportByClientRow)(this.GetParentRow(this.Table.ParentRelations["M1ReportByClient_M1_LATERAL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["M1ReportByClient_M1_LATERAL"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDistanceNull() {
                return this.IsNull(this.tableM1_LATERAL.VideoDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDistanceNull() {
                this[this.tableM1_LATERAL.VideoDistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClockPositionNull() {
                return this.IsNull(this.tableM1_LATERAL.ClockPositionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClockPositionNull() {
                this[this.tableM1_LATERAL.ClockPositionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableM1_LATERAL.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableM1_LATERAL.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToCentreNull() {
                return this.IsNull(this.tableM1_LATERAL.DistanceToCentreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToCentreNull() {
                this[this.tableM1_LATERAL.DistanceToCentreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null() {
                return this.IsNull(this.tableM1_LATERAL.Size_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null() {
                this[this.tableM1_LATERAL.Size_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOpenedNull() {
                return this.IsNull(this.tableM1_LATERAL.TimeOpenedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOpenedNull() {
                this[this.tableM1_LATERAL.TimeOpenedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReverseSetupNull() {
                return this.IsNull(this.tableM1_LATERAL.ReverseSetupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReverseSetupNull() {
                this[this.tableM1_LATERAL.ReverseSetupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReinstateNull() {
                return this.IsNull(this.tableM1_LATERAL.ReinstateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReinstateNull() {
                this[this.tableM1_LATERAL.ReinstateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableM1_LATERAL.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableM1_LATERAL.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientLateralIDNull() {
                return this.IsNull(this.tableM1_LATERAL.ClientLateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientLateralIDNull() {
                this[this.tableM1_LATERAL.ClientLateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialNull() {
                return this.IsNull(this.tableM1_LATERAL.MaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialNull() {
                this[this.tableM1_LATERAL.MaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromUSMHNull() {
                return this.IsNull(this.tableM1_LATERAL.DistanceFromUSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromUSMHNull() {
                this[this.tableM1_LATERAL.DistanceFromUSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromDSMHNull() {
                return this.IsNull(this.tableM1_LATERAL.DistanceFromDSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromDSMHNull() {
                this[this.tableM1_LATERAL.DistanceFromDSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDLateralIDNull() {
                return this.IsNull(this.tableM1_LATERAL.FlowOrderIDLateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDLateralIDNull() {
                this[this.tableM1_LATERAL.FlowOrderIDLateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralIDNull() {
                return this.IsNull(this.tableM1_LATERAL.LateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralIDNull() {
                this[this.tableM1_LATERAL.LateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDistanceDoubleNull() {
                return this.IsNull(this.tableM1_LATERAL.VideoDistanceDoubleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDistanceDoubleNull() {
                this[this.tableM1_LATERAL.VideoDistanceDoubleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientInspectionNoNull() {
                return this.IsNull(this.tableM1_LATERAL.ClientInspectionNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientInspectionNoNull() {
                this[this.tableM1_LATERAL.ClientInspectionNoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class M2_SECTIONRow : global::System.Data.DataRow {
            
            private M2_SECTIONDataTable tableM2_SECTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M2_SECTIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableM2_SECTION = ((M2_SECTIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableM2_SECTION.AssetIDColumn]));
                }
                set {
                    this[this.tableM2_SECTION.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableM2_SECTION.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableM2_SECTION.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableM2_SECTION.ProjectIDColumn]));
                }
                set {
                    this[this.tableM2_SECTION.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableM2_SECTION.COMPANIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANIES_ID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.COMPANIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMH {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMH {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_ {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.Size_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime M2Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableM2_SECTION.M2DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M2Date\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.M2DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoLength {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.VideoLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoLength\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.VideoLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HydrantAddress {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.HydrantAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydrantAddress\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.HydrantAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceToInversionMH {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.DistanceToInversionMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToInversionMH\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.DistanceToInversionMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RampRequired {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.RampRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RampRequired\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.RampRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineWithID {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.LineWithIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineWithID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.LineWithIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HydroPulley {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.HydroPulleyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydroPulley\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.HydroPulleyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FridgeCart {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.FridgeCartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FridgeCart\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.FridgeCartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TwoPump {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.TwoPumpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TwoPump\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.TwoPumpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SixBypass {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.SixBypassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SixBypass\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.SixBypassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Scaffolding {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.ScaffoldingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scaffolding\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.ScaffoldingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool WinchExtention {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.WinchExtentionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WinchExtention\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.WinchExtentionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ExtraGenerator {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.ExtraGeneratorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExtraGenerator\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.ExtraGeneratorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GreyCableExtension {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.GreyCableExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreyCableExtension\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.GreyCableExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EasementMats {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.EasementMatsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EasementMats\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.EasementMatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DropPipe {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.DropPipeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropPipe\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.DropPipeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DropPipeInvertDepth {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.DropPipeInvertDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropPipeInvertDepth\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.DropPipeInvertDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementTakenBy {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.MeasurementTakenByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementTakenBy\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.MeasurementTakenByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CappedLaterals {
                get {
                    try {
                        return ((int)(this[this.tableM2_SECTION.CappedLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CappedLaterals\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.CappedLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HydroWireWithin10FtOfInversionMH {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.HydroWireWithin10FtOfInversionMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydroWireWithin10FtOfInversionMH\' in table \'M2_SECTION\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.HydroWireWithin10FtOfInversionMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurfaceGrade {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.SurfaceGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurfaceGrade\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.SurfaceGradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CameraSkid {
                get {
                    try {
                        return ((bool)(this[this.tableM2_SECTION.CameraSkidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CameraSkid\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.CameraSkidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableM2_SECTION.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    try {
                        return ((int)(this[this.tableM2_SECTION.WorkIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkID\' in table \'M2_SECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM2_SECTION.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableM2_SECTION.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableM2_SECTION.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANIES_IDNull() {
                return this.IsNull(this.tableM2_SECTION.COMPANIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANIES_IDNull() {
                this[this.tableM2_SECTION.COMPANIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableM2_SECTION.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableM2_SECTION.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableM2_SECTION.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableM2_SECTION.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableM2_SECTION.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableM2_SECTION.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableM2_SECTION.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableM2_SECTION.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null() {
                return this.IsNull(this.tableM2_SECTION.Size_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null() {
                this[this.tableM2_SECTION.Size_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM2DateNull() {
                return this.IsNull(this.tableM2_SECTION.M2DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM2DateNull() {
                this[this.tableM2_SECTION.M2DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoLengthNull() {
                return this.IsNull(this.tableM2_SECTION.VideoLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoLengthNull() {
                this[this.tableM2_SECTION.VideoLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableM2_SECTION.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableM2_SECTION.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableM2_SECTION.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableM2_SECTION.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydrantAddressNull() {
                return this.IsNull(this.tableM2_SECTION.HydrantAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydrantAddressNull() {
                this[this.tableM2_SECTION.HydrantAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToInversionMHNull() {
                return this.IsNull(this.tableM2_SECTION.DistanceToInversionMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToInversionMHNull() {
                this[this.tableM2_SECTION.DistanceToInversionMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRampRequiredNull() {
                return this.IsNull(this.tableM2_SECTION.RampRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRampRequiredNull() {
                this[this.tableM2_SECTION.RampRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineWithIDNull() {
                return this.IsNull(this.tableM2_SECTION.LineWithIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineWithIDNull() {
                this[this.tableM2_SECTION.LineWithIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydroPulleyNull() {
                return this.IsNull(this.tableM2_SECTION.HydroPulleyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydroPulleyNull() {
                this[this.tableM2_SECTION.HydroPulleyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFridgeCartNull() {
                return this.IsNull(this.tableM2_SECTION.FridgeCartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFridgeCartNull() {
                this[this.tableM2_SECTION.FridgeCartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTwoPumpNull() {
                return this.IsNull(this.tableM2_SECTION.TwoPumpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTwoPumpNull() {
                this[this.tableM2_SECTION.TwoPumpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSixBypassNull() {
                return this.IsNull(this.tableM2_SECTION.SixBypassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSixBypassNull() {
                this[this.tableM2_SECTION.SixBypassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScaffoldingNull() {
                return this.IsNull(this.tableM2_SECTION.ScaffoldingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScaffoldingNull() {
                this[this.tableM2_SECTION.ScaffoldingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWinchExtentionNull() {
                return this.IsNull(this.tableM2_SECTION.WinchExtentionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWinchExtentionNull() {
                this[this.tableM2_SECTION.WinchExtentionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraGeneratorNull() {
                return this.IsNull(this.tableM2_SECTION.ExtraGeneratorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraGeneratorNull() {
                this[this.tableM2_SECTION.ExtraGeneratorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreyCableExtensionNull() {
                return this.IsNull(this.tableM2_SECTION.GreyCableExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreyCableExtensionNull() {
                this[this.tableM2_SECTION.GreyCableExtensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEasementMatsNull() {
                return this.IsNull(this.tableM2_SECTION.EasementMatsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEasementMatsNull() {
                this[this.tableM2_SECTION.EasementMatsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropPipeNull() {
                return this.IsNull(this.tableM2_SECTION.DropPipeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropPipeNull() {
                this[this.tableM2_SECTION.DropPipeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropPipeInvertDepthNull() {
                return this.IsNull(this.tableM2_SECTION.DropPipeInvertDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropPipeInvertDepthNull() {
                this[this.tableM2_SECTION.DropPipeInvertDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementTakenByNull() {
                return this.IsNull(this.tableM2_SECTION.MeasurementTakenByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementTakenByNull() {
                this[this.tableM2_SECTION.MeasurementTakenByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCappedLateralsNull() {
                return this.IsNull(this.tableM2_SECTION.CappedLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCappedLateralsNull() {
                this[this.tableM2_SECTION.CappedLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydroWireWithin10FtOfInversionMHNull() {
                return this.IsNull(this.tableM2_SECTION.HydroWireWithin10FtOfInversionMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydroWireWithin10FtOfInversionMHNull() {
                this[this.tableM2_SECTION.HydroWireWithin10FtOfInversionMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurfaceGradeNull() {
                return this.IsNull(this.tableM2_SECTION.SurfaceGradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurfaceGradeNull() {
                this[this.tableM2_SECTION.SurfaceGradeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCameraSkidNull() {
                return this.IsNull(this.tableM2_SECTION.CameraSkidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCameraSkidNull() {
                this[this.tableM2_SECTION.CameraSkidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableM2_SECTION.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableM2_SECTION.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkIDNull() {
                return this.IsNull(this.tableM2_SECTION.WorkIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkIDNull() {
                this[this.tableM2_SECTION.WorkIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class M1ReportByClientRowChangeEvent : global::System.EventArgs {
            
            private M1ReportByClientRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRowChangeEvent(M1ReportByClientRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class M1_LATERALRowChangeEvent : global::System.EventArgs {
            
            private M1_LATERALRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1_LATERALRowChangeEvent(M1_LATERALRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1_LATERALRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class M2_SECTIONRowChangeEvent : global::System.EventArgs {
            
            private M2_SECTIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRowChangeEvent(M2_SECTIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M2_SECTIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591