//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3623
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.FullLengthLining
{


    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FullLengthLiningTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FullLengthLiningTDS : global::System.Data.DataSet
    {

        private WorkDetailsDataTable tableWorkDetails;

        private SectionDetailsDataTable tableSectionDetails;

        private LateralDetailsDataTable tableLateralDetails;

        private CommentDetailsDataTable tableCommentDetails;

        private AllCommentsDataTable tableAllComments;

        private WetOutCommentsDetailsDataTable tableWetOutCommentsDetails;

        private WetOutCatalystsDetailsDataTable tableWetOutCatalystsDetails;

        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FullLengthLiningTDS()
        {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FullLengthLiningTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
            base(info, context, false)
        {
            if ((this.IsBinarySerialized(info, context) == true))
            {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["WorkDetails"] != null))
                {
                    base.Tables.Add(new WorkDetailsDataTable(ds.Tables["WorkDetails"]));
                }
                if ((ds.Tables["SectionDetails"] != null))
                {
                    base.Tables.Add(new SectionDetailsDataTable(ds.Tables["SectionDetails"]));
                }
                if ((ds.Tables["LateralDetails"] != null))
                {
                    base.Tables.Add(new LateralDetailsDataTable(ds.Tables["LateralDetails"]));
                }
                if ((ds.Tables["CommentDetails"] != null))
                {
                    base.Tables.Add(new CommentDetailsDataTable(ds.Tables["CommentDetails"]));
                }
                if ((ds.Tables["AllComments"] != null))
                {
                    base.Tables.Add(new AllCommentsDataTable(ds.Tables["AllComments"]));
                }
                if ((ds.Tables["WetOutCommentsDetails"] != null))
                {
                    base.Tables.Add(new WetOutCommentsDetailsDataTable(ds.Tables["WetOutCommentsDetails"]));
                }
                if ((ds.Tables["WetOutCatalystsDetails"] != null))
                {
                    base.Tables.Add(new WetOutCatalystsDetailsDataTable(ds.Tables["WetOutCatalystsDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WorkDetailsDataTable WorkDetails
        {
            get
            {
                return this.tableWorkDetails;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SectionDetailsDataTable SectionDetails
        {
            get
            {
                return this.tableSectionDetails;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LateralDetailsDataTable LateralDetails
        {
            get
            {
                return this.tableLateralDetails;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CommentDetailsDataTable CommentDetails
        {
            get
            {
                return this.tableCommentDetails;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AllCommentsDataTable AllComments
        {
            get
            {
                return this.tableAllComments;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WetOutCommentsDetailsDataTable WetOutCommentsDetails
        {
            get
            {
                return this.tableWetOutCommentsDetails;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WetOutCatalystsDetailsDataTable WetOutCatalystsDetails
        {
            get
            {
                return this.tableWetOutCatalystsDetails;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return this._schemaSerializationMode;
            }
            set
            {
                this._schemaSerializationMode = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet()
        {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone()
        {
            FullLengthLiningTDS cln = ((FullLengthLiningTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
        {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema))
            {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["WorkDetails"] != null))
                {
                    base.Tables.Add(new WorkDetailsDataTable(ds.Tables["WorkDetails"]));
                }
                if ((ds.Tables["SectionDetails"] != null))
                {
                    base.Tables.Add(new SectionDetailsDataTable(ds.Tables["SectionDetails"]));
                }
                if ((ds.Tables["LateralDetails"] != null))
                {
                    base.Tables.Add(new LateralDetailsDataTable(ds.Tables["LateralDetails"]));
                }
                if ((ds.Tables["CommentDetails"] != null))
                {
                    base.Tables.Add(new CommentDetailsDataTable(ds.Tables["CommentDetails"]));
                }
                if ((ds.Tables["AllComments"] != null))
                {
                    base.Tables.Add(new AllCommentsDataTable(ds.Tables["AllComments"]));
                }
                if ((ds.Tables["WetOutCommentsDetails"] != null))
                {
                    base.Tables.Add(new WetOutCommentsDetailsDataTable(ds.Tables["WetOutCommentsDetails"]));
                }
                if ((ds.Tables["WetOutCatalystsDetails"] != null))
                {
                    base.Tables.Add(new WetOutCatalystsDetailsDataTable(ds.Tables["WetOutCatalystsDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else
            {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.InitVars(true);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable)
        {
            this.tableWorkDetails = ((WorkDetailsDataTable)(base.Tables["WorkDetails"]));
            if ((initTable == true))
            {
                if ((this.tableWorkDetails != null))
                {
                    this.tableWorkDetails.InitVars();
                }
            }
            this.tableSectionDetails = ((SectionDetailsDataTable)(base.Tables["SectionDetails"]));
            if ((initTable == true))
            {
                if ((this.tableSectionDetails != null))
                {
                    this.tableSectionDetails.InitVars();
                }
            }
            this.tableLateralDetails = ((LateralDetailsDataTable)(base.Tables["LateralDetails"]));
            if ((initTable == true))
            {
                if ((this.tableLateralDetails != null))
                {
                    this.tableLateralDetails.InitVars();
                }
            }
            this.tableCommentDetails = ((CommentDetailsDataTable)(base.Tables["CommentDetails"]));
            if ((initTable == true))
            {
                if ((this.tableCommentDetails != null))
                {
                    this.tableCommentDetails.InitVars();
                }
            }
            this.tableAllComments = ((AllCommentsDataTable)(base.Tables["AllComments"]));
            if ((initTable == true))
            {
                if ((this.tableAllComments != null))
                {
                    this.tableAllComments.InitVars();
                }
            }
            this.tableWetOutCommentsDetails = ((WetOutCommentsDetailsDataTable)(base.Tables["WetOutCommentsDetails"]));
            if ((initTable == true))
            {
                if ((this.tableWetOutCommentsDetails != null))
                {
                    this.tableWetOutCommentsDetails.InitVars();
                }
            }
            this.tableWetOutCatalystsDetails = ((WetOutCatalystsDetailsDataTable)(base.Tables["WetOutCatalystsDetails"]));
            if ((initTable == true))
            {
                if ((this.tableWetOutCatalystsDetails != null))
                {
                    this.tableWetOutCatalystsDetails.InitVars();
                }
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.DataSetName = "FullLengthLiningTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FullLengthLiningTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableWorkDetails = new WorkDetailsDataTable();
            base.Tables.Add(this.tableWorkDetails);
            this.tableSectionDetails = new SectionDetailsDataTable();
            base.Tables.Add(this.tableSectionDetails);
            this.tableLateralDetails = new LateralDetailsDataTable();
            base.Tables.Add(this.tableLateralDetails);
            this.tableCommentDetails = new CommentDetailsDataTable();
            base.Tables.Add(this.tableCommentDetails);
            this.tableAllComments = new AllCommentsDataTable();
            base.Tables.Add(this.tableAllComments);
            this.tableWetOutCommentsDetails = new WetOutCommentsDetailsDataTable();
            base.Tables.Add(this.tableWetOutCommentsDetails);
            this.tableWetOutCatalystsDetails = new WetOutCatalystsDetailsDataTable();
            base.Tables.Add(this.tableWetOutCatalystsDetails);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWorkDetails()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSectionDetails()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLateralDetails()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCommentDetails()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAllComments()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWetOutCommentsDetails()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWetOutCatalystsDetails()
        {
            return false;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove))
            {
                this.InitVars();
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
        {
            FullLengthLiningTDS ds = new FullLengthLiningTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try
                {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                    {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length))
                        {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte())); )
                            {
                                ;
                            }
                            if ((s1.Position == s1.Length))
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if ((s1 != null))
                    {
                        s1.Close();
                    }
                    if ((s2 != null))
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        public delegate void WorkDetailsRowChangeEventHandler(object sender, WorkDetailsRowChangeEvent e);

        public delegate void SectionDetailsRowChangeEventHandler(object sender, SectionDetailsRowChangeEvent e);

        public delegate void LateralDetailsRowChangeEventHandler(object sender, LateralDetailsRowChangeEvent e);

        public delegate void CommentDetailsRowChangeEventHandler(object sender, CommentDetailsRowChangeEvent e);

        public delegate void AllCommentsRowChangeEventHandler(object sender, AllCommentsRowChangeEvent e);

        public delegate void WetOutCommentsDetailsRowChangeEventHandler(object sender, WetOutCommentsDetailsRowChangeEvent e);

        public delegate void WetOutCatalystsDetailsRowChangeEventHandler(object sender, WetOutCatalystsDetailsRowChangeEvent e);

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WorkDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnWorkID;

            private global::System.Data.DataColumn columnClientID;

            private global::System.Data.DataColumn columnProposedLiningDate;

            private global::System.Data.DataColumn columnDeadlineLiningDate;

            private global::System.Data.DataColumn columnP1Date;

            private global::System.Data.DataColumn columnM1Date;

            private global::System.Data.DataColumn columnM2Date;

            private global::System.Data.DataColumn columnInstallDate;

            private global::System.Data.DataColumn columnFinalVideoDate;

            private global::System.Data.DataColumn columnIssueIdentified;

            private global::System.Data.DataColumn columnIssueLFS;

            private global::System.Data.DataColumn columnIssueClient;

            private global::System.Data.DataColumn columnIssueSales;

            private global::System.Data.DataColumn columnIssueGivenToClient;

            private global::System.Data.DataColumn columnIssueResolved;

            private global::System.Data.DataColumn columnIssueInvestigation;

            private global::System.Data.DataColumn columnCXIsRemoved;

            private global::System.Data.DataColumn columnMeasurementTakenBy;

            private global::System.Data.DataColumn columnMaterial;

            private global::System.Data.DataColumn columnTrafficControl;

            private global::System.Data.DataColumn columnSiteDetails;

            private global::System.Data.DataColumn columnPipeSizeChange;

            private global::System.Data.DataColumn columnStandardBypass;

            private global::System.Data.DataColumn columnStandardBypassComments;

            private global::System.Data.DataColumn columnTrafficControlDetails;

            private global::System.Data.DataColumn columnMeasurementType;

            private global::System.Data.DataColumn columnMeasurementFromMH;

            private global::System.Data.DataColumn columnVideoDoneFromMH;

            private global::System.Data.DataColumn columnVideoDoneToMH;

            private global::System.Data.DataColumn columnMeasurementTakenByM2;

            private global::System.Data.DataColumn columnDropPipe;

            private global::System.Data.DataColumn columnDropPipeInvertDepth;

            private global::System.Data.DataColumn columnCappedLaterals;

            private global::System.Data.DataColumn columnLineWithID;

            private global::System.Data.DataColumn columnHydrantAddress;

            private global::System.Data.DataColumn columnHydroWireWithin10FtOfInversionMH;

            private global::System.Data.DataColumn columnDistanceToInversionMH;

            private global::System.Data.DataColumn columnSurfaceGrade;

            private global::System.Data.DataColumn columnHydroPulley;

            private global::System.Data.DataColumn columnFridgeCart;

            private global::System.Data.DataColumn columnTwoPump;

            private global::System.Data.DataColumn columnSixBypass;

            private global::System.Data.DataColumn columnScaffolding;

            private global::System.Data.DataColumn columnWinchExtension;

            private global::System.Data.DataColumn columnExtraGenerator;

            private global::System.Data.DataColumn columnGreyCableExtension;

            private global::System.Data.DataColumn columnEasementMats;

            private global::System.Data.DataColumn columnRampRequired;

            private global::System.Data.DataColumn columnVideoLength;

            private global::System.Data.DataColumn columnComments;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCOMPANY_ID;

            private global::System.Data.DataColumn columnPreFlushDate;

            private global::System.Data.DataColumn columnPreVideoDate;

            private global::System.Data.DataColumn columnRaProjectId;

            private global::System.Data.DataColumn columnRaWorkId;

            private global::System.Data.DataColumn columnCameraSkid;

            private global::System.Data.DataColumn columnRoboticPrepCompleted;

            private global::System.Data.DataColumn columnRoboticPrepCompletedDate;

            private global::System.Data.DataColumn columnLinerTube;

            private global::System.Data.DataColumn columnResinID;

            private global::System.Data.DataColumn columnExcessResin;

            private global::System.Data.DataColumn columnPoundsDrums;

            private global::System.Data.DataColumn columnDrumDiameter;

            private global::System.Data.DataColumn columnHoistMaximumHeight;

            private global::System.Data.DataColumn columnHoistMinimumHeight;

            private global::System.Data.DataColumn columnDownDropTubeLenght;

            private global::System.Data.DataColumn columnPumpHeightAboveGround;

            private global::System.Data.DataColumn columnTubeResinToFeltFactor;

            private global::System.Data.DataColumn columnDateOfSheet;

            private global::System.Data.DataColumn columnEmployeeID;

            private global::System.Data.DataColumn columnRunDetails;

            private global::System.Data.DataColumn columnRunDetails2;

            private global::System.Data.DataColumn columnWetOutDate;

            private global::System.Data.DataColumn columnWetOutInstallDate;

            private global::System.Data.DataColumn columnThickness;

            private global::System.Data.DataColumn columnLengthToLine;

            private global::System.Data.DataColumn columnPlusExtra;

            private global::System.Data.DataColumn columnForTurnOffset;

            private global::System.Data.DataColumn columnLengthToWetOut;

            private global::System.Data.DataColumn columnTubeMaxColdHead;

            private global::System.Data.DataColumn columnTubeMaxColdHeadPsi;

            private global::System.Data.DataColumn columnTubeMaxHotHead;

            private global::System.Data.DataColumn columnTubeMaxHotHeadPsi;

            private global::System.Data.DataColumn columnTubeIdealHead;

            private global::System.Data.DataColumn columnTubeIdealHeadPsi;

            private global::System.Data.DataColumn columnNetResinForTube;

            private global::System.Data.DataColumn columnNetResinForTubeUsgals;

            private global::System.Data.DataColumn columnNetResinForTubeDrumsIns;

            private global::System.Data.DataColumn columnNetResinForTubeLbsFt;

            private global::System.Data.DataColumn columnNetResinForTubeUsgFt;

            private global::System.Data.DataColumn columnExtraResinForMix;

            private global::System.Data.DataColumn columnExtraLbsForMix;

            private global::System.Data.DataColumn columnTotalMixQuantity;

            private global::System.Data.DataColumn columnTotalMixQuantityUsgals;

            private global::System.Data.DataColumn columnTotalMixQuantityDrumsIns;

            private global::System.Data.DataColumn columnInversionType;

            private global::System.Data.DataColumn columnDepthOfInversionMH;

            private global::System.Data.DataColumn columnTubeForColumn;

            private global::System.Data.DataColumn columnTubeForStartDry;

            private global::System.Data.DataColumn columnTotalTube;

            private global::System.Data.DataColumn columnDropTubeConnects;

            private global::System.Data.DataColumn columnAllowsHeadTo;

            private global::System.Data.DataColumn columnRollerGap;

            private global::System.Data.DataColumn columnHeightNeeded;

            private global::System.Data.DataColumn columnAvailable;

            private global::System.Data.DataColumn columnHoistHeight;

            private global::System.Data.DataColumn columnCommentsCipp;

            private global::System.Data.DataColumn columnResinsLabel;

            private global::System.Data.DataColumn columnDrumContainsLabel;

            private global::System.Data.DataColumn columnLinerTubeLabel;

            private global::System.Data.DataColumn columnForLbDrumsLabel;

            private global::System.Data.DataColumn columnNetResinLabel;

            private global::System.Data.DataColumn columnCatalystLabel;

            private global::System.Data.DataColumn columnInversionComment;

            private global::System.Data.DataColumn columnPipeType;

            private global::System.Data.DataColumn columnPipeCondition;

            private global::System.Data.DataColumn columnGroundMoisture;

            private global::System.Data.DataColumn columnBoilerSize;

            private global::System.Data.DataColumn columnPumpTotalCapacity;

            private global::System.Data.DataColumn columnLayFlatSize;

            private global::System.Data.DataColumn columnLayFlatQuantityTotal;

            private global::System.Data.DataColumn columnWaterStartTemp;

            private global::System.Data.DataColumn columnTemp1;

            private global::System.Data.DataColumn columnHoldAtT1;

            private global::System.Data.DataColumn columnTempT2;

            private global::System.Data.DataColumn columnCookAtT2;

            private global::System.Data.DataColumn columnCoolDownFor;

            private global::System.Data.DataColumn columnCoolToTemp;

            private global::System.Data.DataColumn columnDropInPipeRun;

            private global::System.Data.DataColumn columnPipeSlopOf;

            private global::System.Data.DataColumn columnF45F120;

            private global::System.Data.DataColumn columnHold;

            private global::System.Data.DataColumn columnF120F185;

            private global::System.Data.DataColumn columnCookTime;

            private global::System.Data.DataColumn columnCoolTime;

            private global::System.Data.DataColumn columnAproxTotal;

            private global::System.Data.DataColumn columnWaterChangesPerHour;

            private global::System.Data.DataColumn columnReturnWaterVelocity;

            private global::System.Data.DataColumn columnLayflatBackPressure;

            private global::System.Data.DataColumn columnPumpLiftAtIdealHead;

            private global::System.Data.DataColumn columnWaterToFillLinerColumn;

            private global::System.Data.DataColumn columnWaterPerFit;

            private global::System.Data.DataColumn columnInstallationResults;

            private global::System.Data.DataColumn columnInversionLinerTubeLabel;

            private global::System.Data.DataColumn columnHeadsIdealLabel;

            private global::System.Data.DataColumn columnPumpingAndCirculationLabel;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsDataTable()
            {
                this.TableName = "WorkDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkDetailsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WorkDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn
            {
                get
                {
                    return this.columnWorkID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn
            {
                get
                {
                    return this.columnClientID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProposedLiningDateColumn
            {
                get
                {
                    return this.columnProposedLiningDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeadlineLiningDateColumn
            {
                get
                {
                    return this.columnDeadlineLiningDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P1DateColumn
            {
                get
                {
                    return this.columnP1Date;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M1DateColumn
            {
                get
                {
                    return this.columnM1Date;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M2DateColumn
            {
                get
                {
                    return this.columnM2Date;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstallDateColumn
            {
                get
                {
                    return this.columnInstallDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalVideoDateColumn
            {
                get
                {
                    return this.columnFinalVideoDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueIdentifiedColumn
            {
                get
                {
                    return this.columnIssueIdentified;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueLFSColumn
            {
                get
                {
                    return this.columnIssueLFS;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueClientColumn
            {
                get
                {
                    return this.columnIssueClient;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueSalesColumn
            {
                get
                {
                    return this.columnIssueSales;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueGivenToClientColumn
            {
                get
                {
                    return this.columnIssueGivenToClient;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueResolvedColumn
            {
                get
                {
                    return this.columnIssueResolved;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueInvestigationColumn
            {
                get
                {
                    return this.columnIssueInvestigation;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CXIsRemovedColumn
            {
                get
                {
                    return this.columnCXIsRemoved;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementTakenByColumn
            {
                get
                {
                    return this.columnMeasurementTakenBy;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialColumn
            {
                get
                {
                    return this.columnMaterial;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlColumn
            {
                get
                {
                    return this.columnTrafficControl;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteDetailsColumn
            {
                get
                {
                    return this.columnSiteDetails;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeSizeChangeColumn
            {
                get
                {
                    return this.columnPipeSizeChange;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandardBypassColumn
            {
                get
                {
                    return this.columnStandardBypass;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandardBypassCommentsColumn
            {
                get
                {
                    return this.columnStandardBypassComments;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlDetailsColumn
            {
                get
                {
                    return this.columnTrafficControlDetails;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementTypeColumn
            {
                get
                {
                    return this.columnMeasurementType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementFromMHColumn
            {
                get
                {
                    return this.columnMeasurementFromMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDoneFromMHColumn
            {
                get
                {
                    return this.columnVideoDoneFromMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDoneToMHColumn
            {
                get
                {
                    return this.columnVideoDoneToMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementTakenByM2Column
            {
                get
                {
                    return this.columnMeasurementTakenByM2;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropPipeColumn
            {
                get
                {
                    return this.columnDropPipe;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropPipeInvertDepthColumn
            {
                get
                {
                    return this.columnDropPipeInvertDepth;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CappedLateralsColumn
            {
                get
                {
                    return this.columnCappedLaterals;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineWithIDColumn
            {
                get
                {
                    return this.columnLineWithID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydrantAddressColumn
            {
                get
                {
                    return this.columnHydrantAddress;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydroWireWithin10FtOfInversionMHColumn
            {
                get
                {
                    return this.columnHydroWireWithin10FtOfInversionMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToInversionMHColumn
            {
                get
                {
                    return this.columnDistanceToInversionMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurfaceGradeColumn
            {
                get
                {
                    return this.columnSurfaceGrade;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydroPulleyColumn
            {
                get
                {
                    return this.columnHydroPulley;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FridgeCartColumn
            {
                get
                {
                    return this.columnFridgeCart;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TwoPumpColumn
            {
                get
                {
                    return this.columnTwoPump;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SixBypassColumn
            {
                get
                {
                    return this.columnSixBypass;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScaffoldingColumn
            {
                get
                {
                    return this.columnScaffolding;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WinchExtensionColumn
            {
                get
                {
                    return this.columnWinchExtension;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraGeneratorColumn
            {
                get
                {
                    return this.columnExtraGenerator;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreyCableExtensionColumn
            {
                get
                {
                    return this.columnGreyCableExtension;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EasementMatsColumn
            {
                get
                {
                    return this.columnEasementMats;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RampRequiredColumn
            {
                get
                {
                    return this.columnRampRequired;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoLengthColumn
            {
                get
                {
                    return this.columnVideoLength;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn
            {
                get
                {
                    return this.columnComments;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn
            {
                get
                {
                    return this.columnCOMPANY_ID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreFlushDateColumn
            {
                get
                {
                    return this.columnPreFlushDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreVideoDateColumn
            {
                get
                {
                    return this.columnPreVideoDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RaProjectIdColumn
            {
                get
                {
                    return this.columnRaProjectId;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RaWorkIdColumn
            {
                get
                {
                    return this.columnRaWorkId;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CameraSkidColumn
            {
                get
                {
                    return this.columnCameraSkid;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoboticPrepCompletedColumn
            {
                get
                {
                    return this.columnRoboticPrepCompleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoboticPrepCompletedDateColumn
            {
                get
                {
                    return this.columnRoboticPrepCompletedDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerTubeColumn
            {
                get
                {
                    return this.columnLinerTube;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResinIDColumn
            {
                get
                {
                    return this.columnResinID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExcessResinColumn
            {
                get
                {
                    return this.columnExcessResin;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PoundsDrumsColumn
            {
                get
                {
                    return this.columnPoundsDrums;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DrumDiameterColumn
            {
                get
                {
                    return this.columnDrumDiameter;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoistMaximumHeightColumn
            {
                get
                {
                    return this.columnHoistMaximumHeight;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoistMinimumHeightColumn
            {
                get
                {
                    return this.columnHoistMinimumHeight;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownDropTubeLenghtColumn
            {
                get
                {
                    return this.columnDownDropTubeLenght;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpHeightAboveGroundColumn
            {
                get
                {
                    return this.columnPumpHeightAboveGround;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TubeResinToFeltFactorColumn
            {
                get
                {
                    return this.columnTubeResinToFeltFactor;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOfSheetColumn
            {
                get
                {
                    return this.columnDateOfSheet;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn
            {
                get
                {
                    return this.columnEmployeeID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunDetailsColumn
            {
                get
                {
                    return this.columnRunDetails;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunDetails2Column
            {
                get
                {
                    return this.columnRunDetails2;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WetOutDateColumn
            {
                get
                {
                    return this.columnWetOutDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WetOutInstallDateColumn
            {
                get
                {
                    return this.columnWetOutInstallDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThicknessColumn
            {
                get
                {
                    return this.columnThickness;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthToLineColumn
            {
                get
                {
                    return this.columnLengthToLine;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PlusExtraColumn
            {
                get
                {
                    return this.columnPlusExtra;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForTurnOffsetColumn
            {
                get
                {
                    return this.columnForTurnOffset;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthToWetOutColumn
            {
                get
                {
                    return this.columnLengthToWetOut;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TubeMaxColdHeadColumn
            {
                get
                {
                    return this.columnTubeMaxColdHead;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TubeMaxColdHeadPsiColumn
            {
                get
                {
                    return this.columnTubeMaxColdHeadPsi;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TubeMaxHotHeadColumn
            {
                get
                {
                    return this.columnTubeMaxHotHead;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TubeMaxHotHeadPsiColumn
            {
                get
                {
                    return this.columnTubeMaxHotHeadPsi;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TubeIdealHeadColumn
            {
                get
                {
                    return this.columnTubeIdealHead;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TubeIdealHeadPsiColumn
            {
                get
                {
                    return this.columnTubeIdealHeadPsi;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetResinForTubeColumn
            {
                get
                {
                    return this.columnNetResinForTube;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetResinForTubeUsgalsColumn
            {
                get
                {
                    return this.columnNetResinForTubeUsgals;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetResinForTubeDrumsInsColumn
            {
                get
                {
                    return this.columnNetResinForTubeDrumsIns;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetResinForTubeLbsFtColumn
            {
                get
                {
                    return this.columnNetResinForTubeLbsFt;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetResinForTubeUsgFtColumn
            {
                get
                {
                    return this.columnNetResinForTubeUsgFt;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraResinForMixColumn
            {
                get
                {
                    return this.columnExtraResinForMix;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraLbsForMixColumn
            {
                get
                {
                    return this.columnExtraLbsForMix;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMixQuantityColumn
            {
                get
                {
                    return this.columnTotalMixQuantity;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMixQuantityUsgalsColumn
            {
                get
                {
                    return this.columnTotalMixQuantityUsgals;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMixQuantityDrumsInsColumn
            {
                get
                {
                    return this.columnTotalMixQuantityDrumsIns;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InversionTypeColumn
            {
                get
                {
                    return this.columnInversionType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepthOfInversionMHColumn
            {
                get
                {
                    return this.columnDepthOfInversionMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TubeForColumnColumn
            {
                get
                {
                    return this.columnTubeForColumn;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TubeForStartDryColumn
            {
                get
                {
                    return this.columnTubeForStartDry;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTubeColumn
            {
                get
                {
                    return this.columnTotalTube;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropTubeConnectsColumn
            {
                get
                {
                    return this.columnDropTubeConnects;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllowsHeadToColumn
            {
                get
                {
                    return this.columnAllowsHeadTo;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RollerGapColumn
            {
                get
                {
                    return this.columnRollerGap;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeightNeededColumn
            {
                get
                {
                    return this.columnHeightNeeded;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvailableColumn
            {
                get
                {
                    return this.columnAvailable;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoistHeightColumn
            {
                get
                {
                    return this.columnHoistHeight;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsCippColumn
            {
                get
                {
                    return this.columnCommentsCipp;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResinsLabelColumn
            {
                get
                {
                    return this.columnResinsLabel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DrumContainsLabelColumn
            {
                get
                {
                    return this.columnDrumContainsLabel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerTubeLabelColumn
            {
                get
                {
                    return this.columnLinerTubeLabel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForLbDrumsLabelColumn
            {
                get
                {
                    return this.columnForLbDrumsLabel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetResinLabelColumn
            {
                get
                {
                    return this.columnNetResinLabel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CatalystLabelColumn
            {
                get
                {
                    return this.columnCatalystLabel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InversionCommentColumn
            {
                get
                {
                    return this.columnInversionComment;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeTypeColumn
            {
                get
                {
                    return this.columnPipeType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeConditionColumn
            {
                get
                {
                    return this.columnPipeCondition;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroundMoistureColumn
            {
                get
                {
                    return this.columnGroundMoisture;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoilerSizeColumn
            {
                get
                {
                    return this.columnBoilerSize;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpTotalCapacityColumn
            {
                get
                {
                    return this.columnPumpTotalCapacity;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayFlatSizeColumn
            {
                get
                {
                    return this.columnLayFlatSize;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayFlatQuantityTotalColumn
            {
                get
                {
                    return this.columnLayFlatQuantityTotal;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WaterStartTempColumn
            {
                get
                {
                    return this.columnWaterStartTemp;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Temp1Column
            {
                get
                {
                    return this.columnTemp1;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldAtT1Column
            {
                get
                {
                    return this.columnHoldAtT1;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TempT2Column
            {
                get
                {
                    return this.columnTempT2;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CookAtT2Column
            {
                get
                {
                    return this.columnCookAtT2;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoolDownForColumn
            {
                get
                {
                    return this.columnCoolDownFor;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoolToTempColumn
            {
                get
                {
                    return this.columnCoolToTemp;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropInPipeRunColumn
            {
                get
                {
                    return this.columnDropInPipeRun;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeSlopOfColumn
            {
                get
                {
                    return this.columnPipeSlopOf;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F45F120Column
            {
                get
                {
                    return this.columnF45F120;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldColumn
            {
                get
                {
                    return this.columnHold;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F120F185Column
            {
                get
                {
                    return this.columnF120F185;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CookTimeColumn
            {
                get
                {
                    return this.columnCookTime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoolTimeColumn
            {
                get
                {
                    return this.columnCoolTime;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AproxTotalColumn
            {
                get
                {
                    return this.columnAproxTotal;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WaterChangesPerHourColumn
            {
                get
                {
                    return this.columnWaterChangesPerHour;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReturnWaterVelocityColumn
            {
                get
                {
                    return this.columnReturnWaterVelocity;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LayflatBackPressureColumn
            {
                get
                {
                    return this.columnLayflatBackPressure;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpLiftAtIdealHeadColumn
            {
                get
                {
                    return this.columnPumpLiftAtIdealHead;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WaterToFillLinerColumnColumn
            {
                get
                {
                    return this.columnWaterToFillLinerColumn;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WaterPerFitColumn
            {
                get
                {
                    return this.columnWaterPerFit;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstallationResultsColumn
            {
                get
                {
                    return this.columnInstallationResults;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InversionLinerTubeLabelColumn
            {
                get
                {
                    return this.columnInversionLinerTubeLabel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadsIdealLabelColumn
            {
                get
                {
                    return this.columnHeadsIdealLabel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpingAndCirculationLabelColumn
            {
                get
                {
                    return this.columnPumpingAndCirculationLabel;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow this[int index]
            {
                get
                {
                    return ((WorkDetailsRow)(this.Rows[index]));
                }
            }

            public event WorkDetailsRowChangeEventHandler WorkDetailsRowChanging;

            public event WorkDetailsRowChangeEventHandler WorkDetailsRowChanged;

            public event WorkDetailsRowChangeEventHandler WorkDetailsRowDeleting;

            public event WorkDetailsRowChangeEventHandler WorkDetailsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWorkDetailsRow(WorkDetailsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow AddWorkDetailsRow(
                        int WorkID,
                        string ClientID,
                        System.DateTime ProposedLiningDate,
                        System.DateTime DeadlineLiningDate,
                        System.DateTime P1Date,
                        System.DateTime M1Date,
                        System.DateTime M2Date,
                        System.DateTime InstallDate,
                        System.DateTime FinalVideoDate,
                        bool IssueIdentified,
                        bool IssueLFS,
                        bool IssueClient,
                        bool IssueSales,
                        bool IssueGivenToClient,
                        bool IssueResolved,
                        bool IssueInvestigation,
                        int CXIsRemoved,
                        string MeasurementTakenBy,
                        string Material,
                        string TrafficControl,
                        string SiteDetails,
                        bool PipeSizeChange,
                        bool StandardBypass,
                        string StandardBypassComments,
                        string TrafficControlDetails,
                        string MeasurementType,
                        string MeasurementFromMH,
                        string VideoDoneFromMH,
                        string VideoDoneToMH,
                        string MeasurementTakenByM2,
                        bool DropPipe,
                        string DropPipeInvertDepth,
                        int CappedLaterals,
                        string LineWithID,
                        string HydrantAddress,
                        string HydroWireWithin10FtOfInversionMH,
                        string DistanceToInversionMH,
                        string SurfaceGrade,
                        bool HydroPulley,
                        bool FridgeCart,
                        bool TwoPump,
                        bool SixBypass,
                        bool Scaffolding,
                        bool WinchExtension,
                        bool ExtraGenerator,
                        bool GreyCableExtension,
                        bool EasementMats,
                        bool RampRequired,
                        string VideoLength,
                        string Comments,
                        bool Deleted,
                        int COMPANY_ID,
                        System.DateTime PreFlushDate,
                        System.DateTime PreVideoDate,
                        int RaProjectId,
                        int RaWorkId,
                        bool CameraSkid,
                        bool RoboticPrepCompleted,
                        System.DateTime RoboticPrepCompletedDate,
                        string LinerTube,
                        int ResinID,
                        decimal ExcessResin,
                        string PoundsDrums,
                        decimal DrumDiameter,
                        decimal HoistMaximumHeight,
                        decimal HoistMinimumHeight,
                        decimal DownDropTubeLenght,
                        decimal PumpHeightAboveGround,
                        int TubeResinToFeltFactor,
                        System.DateTime DateOfSheet,
                        int EmployeeID,
                        string RunDetails,
                        string RunDetails2,
                        System.DateTime WetOutDate,
                        System.DateTime WetOutInstallDate,
                        string Thickness,
                        decimal LengthToLine,
                        decimal PlusExtra,
                        decimal ForTurnOffset,
                        decimal LengthToWetOut,
                        decimal TubeMaxColdHead,
                        decimal TubeMaxColdHeadPsi,
                        decimal TubeMaxHotHead,
                        decimal TubeMaxHotHeadPsi,
                        decimal TubeIdealHead,
                        decimal TubeIdealHeadPsi,
                        decimal NetResinForTube,
                        decimal NetResinForTubeUsgals,
                        string NetResinForTubeDrumsIns,
                        decimal NetResinForTubeLbsFt,
                        decimal NetResinForTubeUsgFt,
                        int ExtraResinForMix,
                        decimal ExtraLbsForMix,
                        decimal TotalMixQuantity,
                        decimal TotalMixQuantityUsgals,
                        string TotalMixQuantityDrumsIns,
                        string InversionType,
                        decimal DepthOfInversionMH,
                        decimal TubeForColumn,
                        decimal TubeForStartDry,
                        decimal TotalTube,
                        string DropTubeConnects,
                        decimal AllowsHeadTo,
                        decimal RollerGap,
                        decimal HeightNeeded,
                        string Available,
                        string HoistHeight,
                        string CommentsCipp,
                        string ResinsLabel,
                        string DrumContainsLabel,
                        string LinerTubeLabel,
                        string ForLbDrumsLabel,
                        string NetResinLabel,
                        string CatalystLabel,
                        string InversionComment,
                        string PipeType,
                        string PipeCondition,
                        string GroundMoisture,
                        decimal BoilerSize,
                        decimal PumpTotalCapacity,
                        decimal LayFlatSize,
                        decimal LayFlatQuantityTotal,
                        decimal WaterStartTemp,
                        decimal Temp1,
                        decimal HoldAtT1,
                        decimal TempT2,
                        decimal CookAtT2,
                        decimal CoolDownFor,
                        decimal CoolToTemp,
                        decimal DropInPipeRun,
                        decimal PipeSlopOf,
                        decimal F45F120,
                        decimal Hold,
                        decimal F120F185,
                        decimal CookTime,
                        decimal CoolTime,
                        decimal AproxTotal,
                        decimal WaterChangesPerHour,
                        decimal ReturnWaterVelocity,
                        decimal LayflatBackPressure,
                        decimal PumpLiftAtIdealHead,
                        decimal WaterToFillLinerColumn,
                        decimal WaterPerFit,
                        string InstallationResults,
                        string InversionLinerTubeLabel,
                        string HeadsIdealLabel,
                        string PumpingAndCirculationLabel)
            {
                WorkDetailsRow rowWorkDetailsRow = ((WorkDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        ClientID,
                        ProposedLiningDate,
                        DeadlineLiningDate,
                        P1Date,
                        M1Date,
                        M2Date,
                        InstallDate,
                        FinalVideoDate,
                        IssueIdentified,
                        IssueLFS,
                        IssueClient,
                        IssueSales,
                        IssueGivenToClient,
                        IssueResolved,
                        IssueInvestigation,
                        CXIsRemoved,
                        MeasurementTakenBy,
                        Material,
                        TrafficControl,
                        SiteDetails,
                        PipeSizeChange,
                        StandardBypass,
                        StandardBypassComments,
                        TrafficControlDetails,
                        MeasurementType,
                        MeasurementFromMH,
                        VideoDoneFromMH,
                        VideoDoneToMH,
                        MeasurementTakenByM2,
                        DropPipe,
                        DropPipeInvertDepth,
                        CappedLaterals,
                        LineWithID,
                        HydrantAddress,
                        HydroWireWithin10FtOfInversionMH,
                        DistanceToInversionMH,
                        SurfaceGrade,
                        HydroPulley,
                        FridgeCart,
                        TwoPump,
                        SixBypass,
                        Scaffolding,
                        WinchExtension,
                        ExtraGenerator,
                        GreyCableExtension,
                        EasementMats,
                        RampRequired,
                        VideoLength,
                        Comments,
                        Deleted,
                        COMPANY_ID,
                        PreFlushDate,
                        PreVideoDate,
                        RaProjectId,
                        RaWorkId,
                        CameraSkid,
                        RoboticPrepCompleted,
                        RoboticPrepCompletedDate,
                        LinerTube,
                        ResinID,
                        ExcessResin,
                        PoundsDrums,
                        DrumDiameter,
                        HoistMaximumHeight,
                        HoistMinimumHeight,
                        DownDropTubeLenght,
                        PumpHeightAboveGround,
                        TubeResinToFeltFactor,
                        DateOfSheet,
                        EmployeeID,
                        RunDetails,
                        RunDetails2,
                        WetOutDate,
                        WetOutInstallDate,
                        Thickness,
                        LengthToLine,
                        PlusExtra,
                        ForTurnOffset,
                        LengthToWetOut,
                        TubeMaxColdHead,
                        TubeMaxColdHeadPsi,
                        TubeMaxHotHead,
                        TubeMaxHotHeadPsi,
                        TubeIdealHead,
                        TubeIdealHeadPsi,
                        NetResinForTube,
                        NetResinForTubeUsgals,
                        NetResinForTubeDrumsIns,
                        NetResinForTubeLbsFt,
                        NetResinForTubeUsgFt,
                        ExtraResinForMix,
                        ExtraLbsForMix,
                        TotalMixQuantity,
                        TotalMixQuantityUsgals,
                        TotalMixQuantityDrumsIns,
                        InversionType,
                        DepthOfInversionMH,
                        TubeForColumn,
                        TubeForStartDry,
                        TotalTube,
                        DropTubeConnects,
                        AllowsHeadTo,
                        RollerGap,
                        HeightNeeded,
                        Available,
                        HoistHeight,
                        CommentsCipp,
                        ResinsLabel,
                        DrumContainsLabel,
                        LinerTubeLabel,
                        ForLbDrumsLabel,
                        NetResinLabel,
                        CatalystLabel,
                        InversionComment,
                        PipeType,
                        PipeCondition,
                        GroundMoisture,
                        BoilerSize,
                        PumpTotalCapacity,
                        LayFlatSize,
                        LayFlatQuantityTotal,
                        WaterStartTemp,
                        Temp1,
                        HoldAtT1,
                        TempT2,
                        CookAtT2,
                        CoolDownFor,
                        CoolToTemp,
                        DropInPipeRun,
                        PipeSlopOf,
                        F45F120,
                        Hold,
                        F120F185,
                        CookTime,
                        CoolTime,
                        AproxTotal,
                        WaterChangesPerHour,
                        ReturnWaterVelocity,
                        LayflatBackPressure,
                        PumpLiftAtIdealHead,
                        WaterToFillLinerColumn,
                        WaterPerFit,
                        InstallationResults,
                        InversionLinerTubeLabel,
                        HeadsIdealLabel,
                        PumpingAndCirculationLabel};
                rowWorkDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWorkDetailsRow);
                return rowWorkDetailsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow FindByWorkID(int WorkID)
            {
                return ((WorkDetailsRow)(this.Rows.Find(new object[] {
                            WorkID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                WorkDetailsDataTable cln = ((WorkDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new WorkDetailsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProposedLiningDate = base.Columns["ProposedLiningDate"];
                this.columnDeadlineLiningDate = base.Columns["DeadlineLiningDate"];
                this.columnP1Date = base.Columns["P1Date"];
                this.columnM1Date = base.Columns["M1Date"];
                this.columnM2Date = base.Columns["M2Date"];
                this.columnInstallDate = base.Columns["InstallDate"];
                this.columnFinalVideoDate = base.Columns["FinalVideoDate"];
                this.columnIssueIdentified = base.Columns["IssueIdentified"];
                this.columnIssueLFS = base.Columns["IssueLFS"];
                this.columnIssueClient = base.Columns["IssueClient"];
                this.columnIssueSales = base.Columns["IssueSales"];
                this.columnIssueGivenToClient = base.Columns["IssueGivenToClient"];
                this.columnIssueResolved = base.Columns["IssueResolved"];
                this.columnIssueInvestigation = base.Columns["IssueInvestigation"];
                this.columnCXIsRemoved = base.Columns["CXIsRemoved"];
                this.columnMeasurementTakenBy = base.Columns["MeasurementTakenBy"];
                this.columnMaterial = base.Columns["Material"];
                this.columnTrafficControl = base.Columns["TrafficControl"];
                this.columnSiteDetails = base.Columns["SiteDetails"];
                this.columnPipeSizeChange = base.Columns["PipeSizeChange"];
                this.columnStandardBypass = base.Columns["StandardBypass"];
                this.columnStandardBypassComments = base.Columns["StandardBypassComments"];
                this.columnTrafficControlDetails = base.Columns["TrafficControlDetails"];
                this.columnMeasurementType = base.Columns["MeasurementType"];
                this.columnMeasurementFromMH = base.Columns["MeasurementFromMH"];
                this.columnVideoDoneFromMH = base.Columns["VideoDoneFromMH"];
                this.columnVideoDoneToMH = base.Columns["VideoDoneToMH"];
                this.columnMeasurementTakenByM2 = base.Columns["MeasurementTakenByM2"];
                this.columnDropPipe = base.Columns["DropPipe"];
                this.columnDropPipeInvertDepth = base.Columns["DropPipeInvertDepth"];
                this.columnCappedLaterals = base.Columns["CappedLaterals"];
                this.columnLineWithID = base.Columns["LineWithID"];
                this.columnHydrantAddress = base.Columns["HydrantAddress"];
                this.columnHydroWireWithin10FtOfInversionMH = base.Columns["HydroWireWithin10FtOfInversionMH"];
                this.columnDistanceToInversionMH = base.Columns["DistanceToInversionMH"];
                this.columnSurfaceGrade = base.Columns["SurfaceGrade"];
                this.columnHydroPulley = base.Columns["HydroPulley"];
                this.columnFridgeCart = base.Columns["FridgeCart"];
                this.columnTwoPump = base.Columns["TwoPump"];
                this.columnSixBypass = base.Columns["SixBypass"];
                this.columnScaffolding = base.Columns["Scaffolding"];
                this.columnWinchExtension = base.Columns["WinchExtension"];
                this.columnExtraGenerator = base.Columns["ExtraGenerator"];
                this.columnGreyCableExtension = base.Columns["GreyCableExtension"];
                this.columnEasementMats = base.Columns["EasementMats"];
                this.columnRampRequired = base.Columns["RampRequired"];
                this.columnVideoLength = base.Columns["VideoLength"];
                this.columnComments = base.Columns["Comments"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnPreFlushDate = base.Columns["PreFlushDate"];
                this.columnPreVideoDate = base.Columns["PreVideoDate"];
                this.columnRaProjectId = base.Columns["RaProjectId"];
                this.columnRaWorkId = base.Columns["RaWorkId"];
                this.columnCameraSkid = base.Columns["CameraSkid"];
                this.columnRoboticPrepCompleted = base.Columns["RoboticPrepCompleted"];
                this.columnRoboticPrepCompletedDate = base.Columns["RoboticPrepCompletedDate"];
                this.columnLinerTube = base.Columns["LinerTube"];
                this.columnResinID = base.Columns["ResinID"];
                this.columnExcessResin = base.Columns["ExcessResin"];
                this.columnPoundsDrums = base.Columns["PoundsDrums"];
                this.columnDrumDiameter = base.Columns["DrumDiameter"];
                this.columnHoistMaximumHeight = base.Columns["HoistMaximumHeight"];
                this.columnHoistMinimumHeight = base.Columns["HoistMinimumHeight"];
                this.columnDownDropTubeLenght = base.Columns["DownDropTubeLenght"];
                this.columnPumpHeightAboveGround = base.Columns["PumpHeightAboveGround"];
                this.columnTubeResinToFeltFactor = base.Columns["TubeResinToFeltFactor"];
                this.columnDateOfSheet = base.Columns["DateOfSheet"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnRunDetails = base.Columns["RunDetails"];
                this.columnRunDetails2 = base.Columns["RunDetails2"];
                this.columnWetOutDate = base.Columns["WetOutDate"];
                this.columnWetOutInstallDate = base.Columns["WetOutInstallDate"];
                this.columnThickness = base.Columns["Thickness"];
                this.columnLengthToLine = base.Columns["LengthToLine"];
                this.columnPlusExtra = base.Columns["PlusExtra"];
                this.columnForTurnOffset = base.Columns["ForTurnOffset"];
                this.columnLengthToWetOut = base.Columns["LengthToWetOut"];
                this.columnTubeMaxColdHead = base.Columns["TubeMaxColdHead"];
                this.columnTubeMaxColdHeadPsi = base.Columns["TubeMaxColdHeadPsi"];
                this.columnTubeMaxHotHead = base.Columns["TubeMaxHotHead"];
                this.columnTubeMaxHotHeadPsi = base.Columns["TubeMaxHotHeadPsi"];
                this.columnTubeIdealHead = base.Columns["TubeIdealHead"];
                this.columnTubeIdealHeadPsi = base.Columns["TubeIdealHeadPsi"];
                this.columnNetResinForTube = base.Columns["NetResinForTube"];
                this.columnNetResinForTubeUsgals = base.Columns["NetResinForTubeUsgals"];
                this.columnNetResinForTubeDrumsIns = base.Columns["NetResinForTubeDrumsIns"];
                this.columnNetResinForTubeLbsFt = base.Columns["NetResinForTubeLbsFt"];
                this.columnNetResinForTubeUsgFt = base.Columns["NetResinForTubeUsgFt"];
                this.columnExtraResinForMix = base.Columns["ExtraResinForMix"];
                this.columnExtraLbsForMix = base.Columns["ExtraLbsForMix"];
                this.columnTotalMixQuantity = base.Columns["TotalMixQuantity"];
                this.columnTotalMixQuantityUsgals = base.Columns["TotalMixQuantityUsgals"];
                this.columnTotalMixQuantityDrumsIns = base.Columns["TotalMixQuantityDrumsIns"];
                this.columnInversionType = base.Columns["InversionType"];
                this.columnDepthOfInversionMH = base.Columns["DepthOfInversionMH"];
                this.columnTubeForColumn = base.Columns["TubeForColumn"];
                this.columnTubeForStartDry = base.Columns["TubeForStartDry"];
                this.columnTotalTube = base.Columns["TotalTube"];
                this.columnDropTubeConnects = base.Columns["DropTubeConnects"];
                this.columnAllowsHeadTo = base.Columns["AllowsHeadTo"];
                this.columnRollerGap = base.Columns["RollerGap"];
                this.columnHeightNeeded = base.Columns["HeightNeeded"];
                this.columnAvailable = base.Columns["Available"];
                this.columnHoistHeight = base.Columns["HoistHeight"];
                this.columnCommentsCipp = base.Columns["CommentsCipp"];
                this.columnResinsLabel = base.Columns["ResinsLabel"];
                this.columnDrumContainsLabel = base.Columns["DrumContainsLabel"];
                this.columnLinerTubeLabel = base.Columns["LinerTubeLabel"];
                this.columnForLbDrumsLabel = base.Columns["ForLbDrumsLabel"];
                this.columnNetResinLabel = base.Columns["NetResinLabel"];
                this.columnCatalystLabel = base.Columns["CatalystLabel"];
                this.columnInversionComment = base.Columns["InversionComment"];
                this.columnPipeType = base.Columns["PipeType"];
                this.columnPipeCondition = base.Columns["PipeCondition"];
                this.columnGroundMoisture = base.Columns["GroundMoisture"];
                this.columnBoilerSize = base.Columns["BoilerSize"];
                this.columnPumpTotalCapacity = base.Columns["PumpTotalCapacity"];
                this.columnLayFlatSize = base.Columns["LayFlatSize"];
                this.columnLayFlatQuantityTotal = base.Columns["LayFlatQuantityTotal"];
                this.columnWaterStartTemp = base.Columns["WaterStartTemp"];
                this.columnTemp1 = base.Columns["Temp1"];
                this.columnHoldAtT1 = base.Columns["HoldAtT1"];
                this.columnTempT2 = base.Columns["TempT2"];
                this.columnCookAtT2 = base.Columns["CookAtT2"];
                this.columnCoolDownFor = base.Columns["CoolDownFor"];
                this.columnCoolToTemp = base.Columns["CoolToTemp"];
                this.columnDropInPipeRun = base.Columns["DropInPipeRun"];
                this.columnPipeSlopOf = base.Columns["PipeSlopOf"];
                this.columnF45F120 = base.Columns["F45F120"];
                this.columnHold = base.Columns["Hold"];
                this.columnF120F185 = base.Columns["F120F185"];
                this.columnCookTime = base.Columns["CookTime"];
                this.columnCoolTime = base.Columns["CoolTime"];
                this.columnAproxTotal = base.Columns["AproxTotal"];
                this.columnWaterChangesPerHour = base.Columns["WaterChangesPerHour"];
                this.columnReturnWaterVelocity = base.Columns["ReturnWaterVelocity"];
                this.columnLayflatBackPressure = base.Columns["LayflatBackPressure"];
                this.columnPumpLiftAtIdealHead = base.Columns["PumpLiftAtIdealHead"];
                this.columnWaterToFillLinerColumn = base.Columns["WaterToFillLinerColumn"];
                this.columnWaterPerFit = base.Columns["WaterPerFit"];
                this.columnInstallationResults = base.Columns["InstallationResults"];
                this.columnInversionLinerTubeLabel = base.Columns["InversionLinerTubeLabel"];
                this.columnHeadsIdealLabel = base.Columns["HeadsIdealLabel"];
                this.columnPumpingAndCirculationLabel = base.Columns["PumpingAndCirculationLabel"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProposedLiningDate = new global::System.Data.DataColumn("ProposedLiningDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProposedLiningDate);
                this.columnDeadlineLiningDate = new global::System.Data.DataColumn("DeadlineLiningDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeadlineLiningDate);
                this.columnP1Date = new global::System.Data.DataColumn("P1Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP1Date);
                this.columnM1Date = new global::System.Data.DataColumn("M1Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM1Date);
                this.columnM2Date = new global::System.Data.DataColumn("M2Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM2Date);
                this.columnInstallDate = new global::System.Data.DataColumn("InstallDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstallDate);
                this.columnFinalVideoDate = new global::System.Data.DataColumn("FinalVideoDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalVideoDate);
                this.columnIssueIdentified = new global::System.Data.DataColumn("IssueIdentified", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueIdentified);
                this.columnIssueLFS = new global::System.Data.DataColumn("IssueLFS", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueLFS);
                this.columnIssueClient = new global::System.Data.DataColumn("IssueClient", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueClient);
                this.columnIssueSales = new global::System.Data.DataColumn("IssueSales", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueSales);
                this.columnIssueGivenToClient = new global::System.Data.DataColumn("IssueGivenToClient", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueGivenToClient);
                this.columnIssueResolved = new global::System.Data.DataColumn("IssueResolved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueResolved);
                this.columnIssueInvestigation = new global::System.Data.DataColumn("IssueInvestigation", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueInvestigation);
                this.columnCXIsRemoved = new global::System.Data.DataColumn("CXIsRemoved", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCXIsRemoved);
                this.columnMeasurementTakenBy = new global::System.Data.DataColumn("MeasurementTakenBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementTakenBy);
                this.columnMaterial = new global::System.Data.DataColumn("Material", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterial);
                this.columnTrafficControl = new global::System.Data.DataColumn("TrafficControl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControl);
                this.columnSiteDetails = new global::System.Data.DataColumn("SiteDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteDetails);
                this.columnPipeSizeChange = new global::System.Data.DataColumn("PipeSizeChange", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeSizeChange);
                this.columnStandardBypass = new global::System.Data.DataColumn("StandardBypass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardBypass);
                this.columnStandardBypassComments = new global::System.Data.DataColumn("StandardBypassComments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardBypassComments);
                this.columnTrafficControlDetails = new global::System.Data.DataColumn("TrafficControlDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControlDetails);
                this.columnMeasurementType = new global::System.Data.DataColumn("MeasurementType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementType);
                this.columnMeasurementFromMH = new global::System.Data.DataColumn("MeasurementFromMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementFromMH);
                this.columnVideoDoneFromMH = new global::System.Data.DataColumn("VideoDoneFromMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDoneFromMH);
                this.columnVideoDoneToMH = new global::System.Data.DataColumn("VideoDoneToMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDoneToMH);
                this.columnMeasurementTakenByM2 = new global::System.Data.DataColumn("MeasurementTakenByM2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementTakenByM2);
                this.columnDropPipe = new global::System.Data.DataColumn("DropPipe", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropPipe);
                this.columnDropPipeInvertDepth = new global::System.Data.DataColumn("DropPipeInvertDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropPipeInvertDepth);
                this.columnCappedLaterals = new global::System.Data.DataColumn("CappedLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCappedLaterals);
                this.columnLineWithID = new global::System.Data.DataColumn("LineWithID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineWithID);
                this.columnHydrantAddress = new global::System.Data.DataColumn("HydrantAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydrantAddress);
                this.columnHydroWireWithin10FtOfInversionMH = new global::System.Data.DataColumn("HydroWireWithin10FtOfInversionMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydroWireWithin10FtOfInversionMH);
                this.columnDistanceToInversionMH = new global::System.Data.DataColumn("DistanceToInversionMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToInversionMH);
                this.columnSurfaceGrade = new global::System.Data.DataColumn("SurfaceGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurfaceGrade);
                this.columnHydroPulley = new global::System.Data.DataColumn("HydroPulley", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydroPulley);
                this.columnFridgeCart = new global::System.Data.DataColumn("FridgeCart", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFridgeCart);
                this.columnTwoPump = new global::System.Data.DataColumn("TwoPump", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTwoPump);
                this.columnSixBypass = new global::System.Data.DataColumn("SixBypass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSixBypass);
                this.columnScaffolding = new global::System.Data.DataColumn("Scaffolding", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScaffolding);
                this.columnWinchExtension = new global::System.Data.DataColumn("WinchExtension", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWinchExtension);
                this.columnExtraGenerator = new global::System.Data.DataColumn("ExtraGenerator", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraGenerator);
                this.columnGreyCableExtension = new global::System.Data.DataColumn("GreyCableExtension", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreyCableExtension);
                this.columnEasementMats = new global::System.Data.DataColumn("EasementMats", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEasementMats);
                this.columnRampRequired = new global::System.Data.DataColumn("RampRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRampRequired);
                this.columnVideoLength = new global::System.Data.DataColumn("VideoLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoLength);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnPreFlushDate = new global::System.Data.DataColumn("PreFlushDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreFlushDate);
                this.columnPreVideoDate = new global::System.Data.DataColumn("PreVideoDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreVideoDate);
                this.columnRaProjectId = new global::System.Data.DataColumn("RaProjectId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRaProjectId);
                this.columnRaWorkId = new global::System.Data.DataColumn("RaWorkId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRaWorkId);
                this.columnCameraSkid = new global::System.Data.DataColumn("CameraSkid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCameraSkid);
                this.columnRoboticPrepCompleted = new global::System.Data.DataColumn("RoboticPrepCompleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoboticPrepCompleted);
                this.columnRoboticPrepCompletedDate = new global::System.Data.DataColumn("RoboticPrepCompletedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoboticPrepCompletedDate);
                this.columnLinerTube = new global::System.Data.DataColumn("LinerTube", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerTube);
                this.columnResinID = new global::System.Data.DataColumn("ResinID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResinID);
                this.columnExcessResin = new global::System.Data.DataColumn("ExcessResin", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExcessResin);
                this.columnPoundsDrums = new global::System.Data.DataColumn("PoundsDrums", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPoundsDrums);
                this.columnDrumDiameter = new global::System.Data.DataColumn("DrumDiameter", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDrumDiameter);
                this.columnHoistMaximumHeight = new global::System.Data.DataColumn("HoistMaximumHeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoistMaximumHeight);
                this.columnHoistMinimumHeight = new global::System.Data.DataColumn("HoistMinimumHeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoistMinimumHeight);
                this.columnDownDropTubeLenght = new global::System.Data.DataColumn("DownDropTubeLenght", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownDropTubeLenght);
                this.columnPumpHeightAboveGround = new global::System.Data.DataColumn("PumpHeightAboveGround", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpHeightAboveGround);
                this.columnTubeResinToFeltFactor = new global::System.Data.DataColumn("TubeResinToFeltFactor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTubeResinToFeltFactor);
                this.columnDateOfSheet = new global::System.Data.DataColumn("DateOfSheet", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfSheet);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnRunDetails = new global::System.Data.DataColumn("RunDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunDetails);
                this.columnRunDetails2 = new global::System.Data.DataColumn("RunDetails2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunDetails2);
                this.columnWetOutDate = new global::System.Data.DataColumn("WetOutDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWetOutDate);
                this.columnWetOutInstallDate = new global::System.Data.DataColumn("WetOutInstallDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWetOutInstallDate);
                this.columnThickness = new global::System.Data.DataColumn("Thickness", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThickness);
                this.columnLengthToLine = new global::System.Data.DataColumn("LengthToLine", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLengthToLine);
                this.columnPlusExtra = new global::System.Data.DataColumn("PlusExtra", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPlusExtra);
                this.columnForTurnOffset = new global::System.Data.DataColumn("ForTurnOffset", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForTurnOffset);
                this.columnLengthToWetOut = new global::System.Data.DataColumn("LengthToWetOut", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLengthToWetOut);
                this.columnTubeMaxColdHead = new global::System.Data.DataColumn("TubeMaxColdHead", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTubeMaxColdHead);
                this.columnTubeMaxColdHeadPsi = new global::System.Data.DataColumn("TubeMaxColdHeadPsi", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTubeMaxColdHeadPsi);
                this.columnTubeMaxHotHead = new global::System.Data.DataColumn("TubeMaxHotHead", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTubeMaxHotHead);
                this.columnTubeMaxHotHeadPsi = new global::System.Data.DataColumn("TubeMaxHotHeadPsi", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTubeMaxHotHeadPsi);
                this.columnTubeIdealHead = new global::System.Data.DataColumn("TubeIdealHead", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTubeIdealHead);
                this.columnTubeIdealHeadPsi = new global::System.Data.DataColumn("TubeIdealHeadPsi", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTubeIdealHeadPsi);
                this.columnNetResinForTube = new global::System.Data.DataColumn("NetResinForTube", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetResinForTube);
                this.columnNetResinForTubeUsgals = new global::System.Data.DataColumn("NetResinForTubeUsgals", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetResinForTubeUsgals);
                this.columnNetResinForTubeDrumsIns = new global::System.Data.DataColumn("NetResinForTubeDrumsIns", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetResinForTubeDrumsIns);
                this.columnNetResinForTubeLbsFt = new global::System.Data.DataColumn("NetResinForTubeLbsFt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetResinForTubeLbsFt);
                this.columnNetResinForTubeUsgFt = new global::System.Data.DataColumn("NetResinForTubeUsgFt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetResinForTubeUsgFt);
                this.columnExtraResinForMix = new global::System.Data.DataColumn("ExtraResinForMix", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraResinForMix);
                this.columnExtraLbsForMix = new global::System.Data.DataColumn("ExtraLbsForMix", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraLbsForMix);
                this.columnTotalMixQuantity = new global::System.Data.DataColumn("TotalMixQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMixQuantity);
                this.columnTotalMixQuantityUsgals = new global::System.Data.DataColumn("TotalMixQuantityUsgals", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMixQuantityUsgals);
                this.columnTotalMixQuantityDrumsIns = new global::System.Data.DataColumn("TotalMixQuantityDrumsIns", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMixQuantityDrumsIns);
                this.columnInversionType = new global::System.Data.DataColumn("InversionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInversionType);
                this.columnDepthOfInversionMH = new global::System.Data.DataColumn("DepthOfInversionMH", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepthOfInversionMH);
                this.columnTubeForColumn = new global::System.Data.DataColumn("TubeForColumn", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTubeForColumn);
                this.columnTubeForStartDry = new global::System.Data.DataColumn("TubeForStartDry", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTubeForStartDry);
                this.columnTotalTube = new global::System.Data.DataColumn("TotalTube", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTube);
                this.columnDropTubeConnects = new global::System.Data.DataColumn("DropTubeConnects", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropTubeConnects);
                this.columnAllowsHeadTo = new global::System.Data.DataColumn("AllowsHeadTo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllowsHeadTo);
                this.columnRollerGap = new global::System.Data.DataColumn("RollerGap", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRollerGap);
                this.columnHeightNeeded = new global::System.Data.DataColumn("HeightNeeded", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeightNeeded);
                this.columnAvailable = new global::System.Data.DataColumn("Available", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvailable);
                this.columnHoistHeight = new global::System.Data.DataColumn("HoistHeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoistHeight);
                this.columnCommentsCipp = new global::System.Data.DataColumn("CommentsCipp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommentsCipp);
                this.columnResinsLabel = new global::System.Data.DataColumn("ResinsLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResinsLabel);
                this.columnDrumContainsLabel = new global::System.Data.DataColumn("DrumContainsLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDrumContainsLabel);
                this.columnLinerTubeLabel = new global::System.Data.DataColumn("LinerTubeLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerTubeLabel);
                this.columnForLbDrumsLabel = new global::System.Data.DataColumn("ForLbDrumsLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForLbDrumsLabel);
                this.columnNetResinLabel = new global::System.Data.DataColumn("NetResinLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetResinLabel);
                this.columnCatalystLabel = new global::System.Data.DataColumn("CatalystLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCatalystLabel);
                this.columnInversionComment = new global::System.Data.DataColumn("InversionComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInversionComment);
                this.columnPipeType = new global::System.Data.DataColumn("PipeType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeType);
                this.columnPipeCondition = new global::System.Data.DataColumn("PipeCondition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeCondition);
                this.columnGroundMoisture = new global::System.Data.DataColumn("GroundMoisture", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroundMoisture);
                this.columnBoilerSize = new global::System.Data.DataColumn("BoilerSize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoilerSize);
                this.columnPumpTotalCapacity = new global::System.Data.DataColumn("PumpTotalCapacity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpTotalCapacity);
                this.columnLayFlatSize = new global::System.Data.DataColumn("LayFlatSize", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayFlatSize);
                this.columnLayFlatQuantityTotal = new global::System.Data.DataColumn("LayFlatQuantityTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayFlatQuantityTotal);
                this.columnWaterStartTemp = new global::System.Data.DataColumn("WaterStartTemp", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaterStartTemp);
                this.columnTemp1 = new global::System.Data.DataColumn("Temp1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemp1);
                this.columnHoldAtT1 = new global::System.Data.DataColumn("HoldAtT1", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldAtT1);
                this.columnTempT2 = new global::System.Data.DataColumn("TempT2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTempT2);
                this.columnCookAtT2 = new global::System.Data.DataColumn("CookAtT2", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCookAtT2);
                this.columnCoolDownFor = new global::System.Data.DataColumn("CoolDownFor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoolDownFor);
                this.columnCoolToTemp = new global::System.Data.DataColumn("CoolToTemp", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoolToTemp);
                this.columnDropInPipeRun = new global::System.Data.DataColumn("DropInPipeRun", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropInPipeRun);
                this.columnPipeSlopOf = new global::System.Data.DataColumn("PipeSlopOf", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeSlopOf);
                this.columnF45F120 = new global::System.Data.DataColumn("F45F120", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF45F120);
                this.columnHold = new global::System.Data.DataColumn("Hold", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHold);
                this.columnF120F185 = new global::System.Data.DataColumn("F120F185", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF120F185);
                this.columnCookTime = new global::System.Data.DataColumn("CookTime", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCookTime);
                this.columnCoolTime = new global::System.Data.DataColumn("CoolTime", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoolTime);
                this.columnAproxTotal = new global::System.Data.DataColumn("AproxTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAproxTotal);
                this.columnWaterChangesPerHour = new global::System.Data.DataColumn("WaterChangesPerHour", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaterChangesPerHour);
                this.columnReturnWaterVelocity = new global::System.Data.DataColumn("ReturnWaterVelocity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReturnWaterVelocity);
                this.columnLayflatBackPressure = new global::System.Data.DataColumn("LayflatBackPressure", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayflatBackPressure);
                this.columnPumpLiftAtIdealHead = new global::System.Data.DataColumn("PumpLiftAtIdealHead", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpLiftAtIdealHead);
                this.columnWaterToFillLinerColumn = new global::System.Data.DataColumn("WaterToFillLinerColumn", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaterToFillLinerColumn);
                this.columnWaterPerFit = new global::System.Data.DataColumn("WaterPerFit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWaterPerFit);
                this.columnInstallationResults = new global::System.Data.DataColumn("InstallationResults", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstallationResults);
                this.columnInversionLinerTubeLabel = new global::System.Data.DataColumn("InversionLinerTubeLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInversionLinerTubeLabel);
                this.columnHeadsIdealLabel = new global::System.Data.DataColumn("HeadsIdealLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadsIdealLabel);
                this.columnPumpingAndCirculationLabel = new global::System.Data.DataColumn("PumpingAndCirculationLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpingAndCirculationLabel);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnWorkID.Unique = true;
                this.columnHydroPulley.AllowDBNull = false;
                this.columnFridgeCart.AllowDBNull = false;
                this.columnTwoPump.AllowDBNull = false;
                this.columnSixBypass.AllowDBNull = false;
                this.columnScaffolding.AllowDBNull = false;
                this.columnWinchExtension.AllowDBNull = false;
                this.columnExtraGenerator.AllowDBNull = false;
                this.columnGreyCableExtension.AllowDBNull = false;
                this.columnEasementMats.AllowDBNull = false;
                this.columnVideoLength.MaxLength = 25;
                this.columnRunDetails.MaxLength = 1073741823;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow NewWorkDetailsRow()
            {
                return ((WorkDetailsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new WorkDetailsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(WorkDetailsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.WorkDetailsRowChanged != null))
                {
                    this.WorkDetailsRowChanged(this, new WorkDetailsRowChangeEvent(((WorkDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.WorkDetailsRowChanging != null))
                {
                    this.WorkDetailsRowChanging(this, new WorkDetailsRowChangeEvent(((WorkDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.WorkDetailsRowDeleted != null))
                {
                    this.WorkDetailsRowDeleted(this, new WorkDetailsRowChangeEvent(((WorkDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.WorkDetailsRowDeleting != null))
                {
                    this.WorkDetailsRowDeleting(this, new WorkDetailsRowChangeEvent(((WorkDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWorkDetailsRow(WorkDetailsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FullLengthLiningTDS ds = new FullLengthLiningTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WorkDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SectionDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnWorkID;

            private global::System.Data.DataColumn columnAssetID;

            private global::System.Data.DataColumn columnSectionID;

            private global::System.Data.DataColumn columnStreet;

            private global::System.Data.DataColumn columnUSMH;

            private global::System.Data.DataColumn columnDSMH;

            private global::System.Data.DataColumn columnMapSize;

            private global::System.Data.DataColumn columnSize_;

            private global::System.Data.DataColumn columnMapLength;

            private global::System.Data.DataColumn columnLength;

            private global::System.Data.DataColumn columnLaterals;

            private global::System.Data.DataColumn columnLiveLaterals;

            private global::System.Data.DataColumn columnUSMHDepth;

            private global::System.Data.DataColumn columnDSMHDepth;

            private global::System.Data.DataColumn columnSteelTapeThroughSewer;

            private global::System.Data.DataColumn columnUSMHMouth12;

            private global::System.Data.DataColumn columnUSMHMouth1;

            private global::System.Data.DataColumn columnUSMHMouth2;

            private global::System.Data.DataColumn columnUSMHMouth3;

            private global::System.Data.DataColumn columnUSMHMouth4;

            private global::System.Data.DataColumn columnUSMHMouth5;

            private global::System.Data.DataColumn columnDSMHMouth12;

            private global::System.Data.DataColumn columnDSMHMouth1;

            private global::System.Data.DataColumn columnDSMHMouth2;

            private global::System.Data.DataColumn columnDSMHMouth3;

            private global::System.Data.DataColumn columnDSMHMouth4;

            private global::System.Data.DataColumn columnDSMHMouth5;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCOMPANY_ID;

            private global::System.Data.DataColumn columnUSMHDescription;

            private global::System.Data.DataColumn columnDSMHDescription;

            private global::System.Data.DataColumn columnUSMHAddress;

            private global::System.Data.DataColumn columnDSMHAddress;

            private global::System.Data.DataColumn columnSubArea;

            private global::System.Data.DataColumn columnFlowOrderID;

            private global::System.Data.DataColumn columnOriginalSectionID;

            private global::System.Data.DataColumn columnThickness;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionDetailsDataTable()
            {
                this.TableName = "SectionDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SectionDetailsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SectionDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn
            {
                get
                {
                    return this.columnWorkID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn
            {
                get
                {
                    return this.columnAssetID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn
            {
                get
                {
                    return this.columnSectionID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn
            {
                get
                {
                    return this.columnStreet;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn
            {
                get
                {
                    return this.columnUSMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn
            {
                get
                {
                    return this.columnDSMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapSizeColumn
            {
                get
                {
                    return this.columnMapSize;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column
            {
                get
                {
                    return this.columnSize_;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapLengthColumn
            {
                get
                {
                    return this.columnMapLength;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn
            {
                get
                {
                    return this.columnLength;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralsColumn
            {
                get
                {
                    return this.columnLaterals;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn
            {
                get
                {
                    return this.columnLiveLaterals;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHDepthColumn
            {
                get
                {
                    return this.columnUSMHDepth;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHDepthColumn
            {
                get
                {
                    return this.columnDSMHDepth;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SteelTapeThroughSewerColumn
            {
                get
                {
                    return this.columnSteelTapeThroughSewer;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth12Column
            {
                get
                {
                    return this.columnUSMHMouth12;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth1Column
            {
                get
                {
                    return this.columnUSMHMouth1;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth2Column
            {
                get
                {
                    return this.columnUSMHMouth2;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth3Column
            {
                get
                {
                    return this.columnUSMHMouth3;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth4Column
            {
                get
                {
                    return this.columnUSMHMouth4;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMouth5Column
            {
                get
                {
                    return this.columnUSMHMouth5;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth12Column
            {
                get
                {
                    return this.columnDSMHMouth12;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth1Column
            {
                get
                {
                    return this.columnDSMHMouth1;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth2Column
            {
                get
                {
                    return this.columnDSMHMouth2;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth3Column
            {
                get
                {
                    return this.columnDSMHMouth3;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth4Column
            {
                get
                {
                    return this.columnDSMHMouth4;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMouth5Column
            {
                get
                {
                    return this.columnDSMHMouth5;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn
            {
                get
                {
                    return this.columnCOMPANY_ID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHDescriptionColumn
            {
                get
                {
                    return this.columnUSMHDescription;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHDescriptionColumn
            {
                get
                {
                    return this.columnDSMHDescription;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHAddressColumn
            {
                get
                {
                    return this.columnUSMHAddress;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHAddressColumn
            {
                get
                {
                    return this.columnDSMHAddress;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaColumn
            {
                get
                {
                    return this.columnSubArea;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn
            {
                get
                {
                    return this.columnFlowOrderID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalSectionIDColumn
            {
                get
                {
                    return this.columnOriginalSectionID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThicknessColumn
            {
                get
                {
                    return this.columnThickness;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionDetailsRow this[int index]
            {
                get
                {
                    return ((SectionDetailsRow)(this.Rows[index]));
                }
            }

            public event SectionDetailsRowChangeEventHandler SectionDetailsRowChanging;

            public event SectionDetailsRowChangeEventHandler SectionDetailsRowChanged;

            public event SectionDetailsRowChangeEventHandler SectionDetailsRowDeleting;

            public event SectionDetailsRowChangeEventHandler SectionDetailsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSectionDetailsRow(SectionDetailsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionDetailsRow AddSectionDetailsRow(
                        int WorkID,
                        int AssetID,
                        string SectionID,
                        string Street,
                        int USMH,
                        int DSMH,
                        string MapSize,
                        string Size_,
                        string MapLength,
                        string Length,
                        int Laterals,
                        int LiveLaterals,
                        string USMHDepth,
                        string DSMHDepth,
                        string SteelTapeThroughSewer,
                        string USMHMouth12,
                        string USMHMouth1,
                        string USMHMouth2,
                        string USMHMouth3,
                        string USMHMouth4,
                        string USMHMouth5,
                        string DSMHMouth12,
                        string DSMHMouth1,
                        string DSMHMouth2,
                        string DSMHMouth3,
                        string DSMHMouth4,
                        string DSMHMouth5,
                        bool Deleted,
                        int COMPANY_ID,
                        string USMHDescription,
                        string DSMHDescription,
                        string USMHAddress,
                        string DSMHAddress,
                        string SubArea,
                        string FlowOrderID,
                        string OriginalSectionID,
                        string Thickness)
            {
                SectionDetailsRow rowSectionDetailsRow = ((SectionDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        AssetID,
                        SectionID,
                        Street,
                        USMH,
                        DSMH,
                        MapSize,
                        Size_,
                        MapLength,
                        Length,
                        Laterals,
                        LiveLaterals,
                        USMHDepth,
                        DSMHDepth,
                        SteelTapeThroughSewer,
                        USMHMouth12,
                        USMHMouth1,
                        USMHMouth2,
                        USMHMouth3,
                        USMHMouth4,
                        USMHMouth5,
                        DSMHMouth12,
                        DSMHMouth1,
                        DSMHMouth2,
                        DSMHMouth3,
                        DSMHMouth4,
                        DSMHMouth5,
                        Deleted,
                        COMPANY_ID,
                        USMHDescription,
                        DSMHDescription,
                        USMHAddress,
                        DSMHAddress,
                        SubArea,
                        FlowOrderID,
                        OriginalSectionID,
                        Thickness};
                rowSectionDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSectionDetailsRow);
                return rowSectionDetailsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionDetailsRow FindByWorkID(int WorkID)
            {
                return ((SectionDetailsRow)(this.Rows.Find(new object[] {
                            WorkID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                SectionDetailsDataTable cln = ((SectionDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new SectionDetailsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnAssetID = base.Columns["AssetID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnStreet = base.Columns["Street"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnMapSize = base.Columns["MapSize"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnMapLength = base.Columns["MapLength"];
                this.columnLength = base.Columns["Length"];
                this.columnLaterals = base.Columns["Laterals"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnUSMHDepth = base.Columns["USMHDepth"];
                this.columnDSMHDepth = base.Columns["DSMHDepth"];
                this.columnSteelTapeThroughSewer = base.Columns["SteelTapeThroughSewer"];
                this.columnUSMHMouth12 = base.Columns["USMHMouth12"];
                this.columnUSMHMouth1 = base.Columns["USMHMouth1"];
                this.columnUSMHMouth2 = base.Columns["USMHMouth2"];
                this.columnUSMHMouth3 = base.Columns["USMHMouth3"];
                this.columnUSMHMouth4 = base.Columns["USMHMouth4"];
                this.columnUSMHMouth5 = base.Columns["USMHMouth5"];
                this.columnDSMHMouth12 = base.Columns["DSMHMouth12"];
                this.columnDSMHMouth1 = base.Columns["DSMHMouth1"];
                this.columnDSMHMouth2 = base.Columns["DSMHMouth2"];
                this.columnDSMHMouth3 = base.Columns["DSMHMouth3"];
                this.columnDSMHMouth4 = base.Columns["DSMHMouth4"];
                this.columnDSMHMouth5 = base.Columns["DSMHMouth5"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnUSMHDescription = base.Columns["USMHDescription"];
                this.columnDSMHDescription = base.Columns["DSMHDescription"];
                this.columnUSMHAddress = base.Columns["USMHAddress"];
                this.columnDSMHAddress = base.Columns["DSMHAddress"];
                this.columnSubArea = base.Columns["SubArea"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnOriginalSectionID = base.Columns["OriginalSectionID"];
                this.columnThickness = base.Columns["Thickness"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnMapSize = new global::System.Data.DataColumn("MapSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapSize);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnMapLength = new global::System.Data.DataColumn("MapLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapLength);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnLaterals = new global::System.Data.DataColumn("Laterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaterals);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnUSMHDepth = new global::System.Data.DataColumn("USMHDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHDepth);
                this.columnDSMHDepth = new global::System.Data.DataColumn("DSMHDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHDepth);
                this.columnSteelTapeThroughSewer = new global::System.Data.DataColumn("SteelTapeThroughSewer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSteelTapeThroughSewer);
                this.columnUSMHMouth12 = new global::System.Data.DataColumn("USMHMouth12", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth12);
                this.columnUSMHMouth1 = new global::System.Data.DataColumn("USMHMouth1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth1);
                this.columnUSMHMouth2 = new global::System.Data.DataColumn("USMHMouth2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth2);
                this.columnUSMHMouth3 = new global::System.Data.DataColumn("USMHMouth3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth3);
                this.columnUSMHMouth4 = new global::System.Data.DataColumn("USMHMouth4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth4);
                this.columnUSMHMouth5 = new global::System.Data.DataColumn("USMHMouth5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMouth5);
                this.columnDSMHMouth12 = new global::System.Data.DataColumn("DSMHMouth12", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth12);
                this.columnDSMHMouth1 = new global::System.Data.DataColumn("DSMHMouth1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth1);
                this.columnDSMHMouth2 = new global::System.Data.DataColumn("DSMHMouth2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth2);
                this.columnDSMHMouth3 = new global::System.Data.DataColumn("DSMHMouth3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth3);
                this.columnDSMHMouth4 = new global::System.Data.DataColumn("DSMHMouth4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth4);
                this.columnDSMHMouth5 = new global::System.Data.DataColumn("DSMHMouth5", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMouth5);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnUSMHDescription = new global::System.Data.DataColumn("USMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHDescription);
                this.columnDSMHDescription = new global::System.Data.DataColumn("DSMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHDescription);
                this.columnUSMHAddress = new global::System.Data.DataColumn("USMHAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHAddress);
                this.columnDSMHAddress = new global::System.Data.DataColumn("DSMHAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHAddress);
                this.columnSubArea = new global::System.Data.DataColumn("SubArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubArea);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnOriginalSectionID = new global::System.Data.DataColumn("OriginalSectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalSectionID);
                this.columnThickness = new global::System.Data.DataColumn("Thickness", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThickness);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnWorkID.Unique = true;
                this.columnSteelTapeThroughSewer.MaxLength = 25;
                this.columnUSMHMouth12.MaxLength = 25;
                this.columnUSMHMouth1.MaxLength = 25;
                this.columnUSMHMouth2.MaxLength = 25;
                this.columnUSMHMouth3.MaxLength = 25;
                this.columnUSMHMouth4.MaxLength = 25;
                this.columnUSMHMouth5.MaxLength = 25;
                this.columnDSMHMouth12.MaxLength = 25;
                this.columnDSMHMouth1.MaxLength = 25;
                this.columnDSMHMouth2.MaxLength = 25;
                this.columnDSMHMouth3.MaxLength = 25;
                this.columnDSMHMouth4.MaxLength = 25;
                this.columnDSMHMouth5.MaxLength = 25;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionDetailsRow NewSectionDetailsRow()
            {
                return ((SectionDetailsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new SectionDetailsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(SectionDetailsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.SectionDetailsRowChanged != null))
                {
                    this.SectionDetailsRowChanged(this, new SectionDetailsRowChangeEvent(((SectionDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.SectionDetailsRowChanging != null))
                {
                    this.SectionDetailsRowChanging(this, new SectionDetailsRowChangeEvent(((SectionDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.SectionDetailsRowDeleted != null))
                {
                    this.SectionDetailsRowDeleted(this, new SectionDetailsRowChangeEvent(((SectionDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.SectionDetailsRowDeleting != null))
                {
                    this.SectionDetailsRowDeleting(this, new SectionDetailsRowChangeEvent(((SectionDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSectionDetailsRow(SectionDetailsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FullLengthLiningTDS ds = new FullLengthLiningTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SectionDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LateralDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnLateral;

            private global::System.Data.DataColumn columnVideoDistance;

            private global::System.Data.DataColumn columnClockPosition;

            private global::System.Data.DataColumn columnDistanceToCentre;

            private global::System.Data.DataColumn columnTimeOpened;

            private global::System.Data.DataColumn columnReverseSetup;

            private global::System.Data.DataColumn columnReinstate;

            private global::System.Data.DataColumn columnComments;

            private global::System.Data.DataColumn columnLateralID;

            private global::System.Data.DataColumn columnSize_;

            private global::System.Data.DataColumn columnDistanceFromUSMH;

            private global::System.Data.DataColumn columnDistanceFromDSMH;

            private global::System.Data.DataColumn columnMaterialType;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCOMPANY_ID;

            private global::System.Data.DataColumn columnInProject;

            private global::System.Data.DataColumn columnInProjectDatabase;

            private global::System.Data.DataColumn columnInDatabase;

            private global::System.Data.DataColumn columnLive;

            private global::System.Data.DataColumn columnToProcess;

            private global::System.Data.DataColumn columnClientLateralID;

            private global::System.Data.DataColumn columnConnectionType;

            private global::System.Data.DataColumn columnMn;

            private global::System.Data.DataColumn columnClientInspectionNo;

            private global::System.Data.DataColumn columnV1Inspection;

            private global::System.Data.DataColumn columnRequiresRoboticPrep;

            private global::System.Data.DataColumn columnRequiresRoboticPrepDate;

            private global::System.Data.DataColumn columnHoldClientIssue;

            private global::System.Data.DataColumn columnHoldLFSIssue;

            private global::System.Data.DataColumn columnLineLateral;

            private global::System.Data.DataColumn columnFlange;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LateralDetailsDataTable()
            {
                this.TableName = "LateralDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LateralDetailsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LateralDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralColumn
            {
                get
                {
                    return this.columnLateral;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDistanceColumn
            {
                get
                {
                    return this.columnVideoDistance;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClockPositionColumn
            {
                get
                {
                    return this.columnClockPosition;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToCentreColumn
            {
                get
                {
                    return this.columnDistanceToCentre;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeOpenedColumn
            {
                get
                {
                    return this.columnTimeOpened;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReverseSetupColumn
            {
                get
                {
                    return this.columnReverseSetup;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReinstateColumn
            {
                get
                {
                    return this.columnReinstate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn
            {
                get
                {
                    return this.columnComments;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralIDColumn
            {
                get
                {
                    return this.columnLateralID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column
            {
                get
                {
                    return this.columnSize_;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromUSMHColumn
            {
                get
                {
                    return this.columnDistanceFromUSMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromDSMHColumn
            {
                get
                {
                    return this.columnDistanceFromDSMH;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialTypeColumn
            {
                get
                {
                    return this.columnMaterialType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn
            {
                get
                {
                    return this.columnCOMPANY_ID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProjectColumn
            {
                get
                {
                    return this.columnInProject;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProjectDatabaseColumn
            {
                get
                {
                    return this.columnInProjectDatabase;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn
            {
                get
                {
                    return this.columnInDatabase;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveColumn
            {
                get
                {
                    return this.columnLive;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToProcessColumn
            {
                get
                {
                    return this.columnToProcess;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientLateralIDColumn
            {
                get
                {
                    return this.columnClientLateralID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConnectionTypeColumn
            {
                get
                {
                    return this.columnConnectionType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MnColumn
            {
                get
                {
                    return this.columnMn;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientInspectionNoColumn
            {
                get
                {
                    return this.columnClientInspectionNo;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn V1InspectionColumn
            {
                get
                {
                    return this.columnV1Inspection;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequiresRoboticPrepColumn
            {
                get
                {
                    return this.columnRequiresRoboticPrep;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequiresRoboticPrepDateColumn
            {
                get
                {
                    return this.columnRequiresRoboticPrepDate;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldClientIssueColumn
            {
                get
                {
                    return this.columnHoldClientIssue;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldLFSIssueColumn
            {
                get
                {
                    return this.columnHoldLFSIssue;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineLateralColumn
            {
                get
                {
                    return this.columnLineLateral;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlangeColumn
            {
                get
                {
                    return this.columnFlange;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LateralDetailsRow this[int index]
            {
                get
                {
                    return ((LateralDetailsRow)(this.Rows[index]));
                }
            }

            public event LateralDetailsRowChangeEventHandler LateralDetailsRowChanging;

            public event LateralDetailsRowChangeEventHandler LateralDetailsRowChanged;

            public event LateralDetailsRowChangeEventHandler LateralDetailsRowDeleting;

            public event LateralDetailsRowChangeEventHandler LateralDetailsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLateralDetailsRow(LateralDetailsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LateralDetailsRow AddLateralDetailsRow(
                        int Lateral,
                        string VideoDistance,
                        string ClockPosition,
                        string DistanceToCentre,
                        string TimeOpened,
                        string ReverseSetup,
                        System.DateTime Reinstate,
                        string Comments,
                        string LateralID,
                        string Size_,
                        string DistanceFromUSMH,
                        string DistanceFromDSMH,
                        string MaterialType,
                        bool Deleted,
                        int COMPANY_ID,
                        bool InProject,
                        bool InProjectDatabase,
                        bool InDatabase,
                        string Live,
                        bool ToProcess,
                        string ClientLateralID,
                        string ConnectionType,
                        string Mn,
                        string ClientInspectionNo,
                        System.DateTime V1Inspection,
                        bool RequiresRoboticPrep,
                        System.DateTime RequiresRoboticPrepDate,
                        bool HoldClientIssue,
                        bool HoldLFSIssue,
                        bool LineLateral,
                        string Flange)
            {
                LateralDetailsRow rowLateralDetailsRow = ((LateralDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Lateral,
                        VideoDistance,
                        ClockPosition,
                        DistanceToCentre,
                        TimeOpened,
                        ReverseSetup,
                        Reinstate,
                        Comments,
                        LateralID,
                        Size_,
                        DistanceFromUSMH,
                        DistanceFromDSMH,
                        MaterialType,
                        Deleted,
                        COMPANY_ID,
                        InProject,
                        InProjectDatabase,
                        InDatabase,
                        Live,
                        ToProcess,
                        ClientLateralID,
                        ConnectionType,
                        Mn,
                        ClientInspectionNo,
                        V1Inspection,
                        RequiresRoboticPrep,
                        RequiresRoboticPrepDate,
                        HoldClientIssue,
                        HoldLFSIssue,
                        LineLateral,
                        Flange};
                rowLateralDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLateralDetailsRow);
                return rowLateralDetailsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LateralDetailsRow FindByLateral(int Lateral)
            {
                return ((LateralDetailsRow)(this.Rows.Find(new object[] {
                            Lateral})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                LateralDetailsDataTable cln = ((LateralDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new LateralDetailsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnLateral = base.Columns["Lateral"];
                this.columnVideoDistance = base.Columns["VideoDistance"];
                this.columnClockPosition = base.Columns["ClockPosition"];
                this.columnDistanceToCentre = base.Columns["DistanceToCentre"];
                this.columnTimeOpened = base.Columns["TimeOpened"];
                this.columnReverseSetup = base.Columns["ReverseSetup"];
                this.columnReinstate = base.Columns["Reinstate"];
                this.columnComments = base.Columns["Comments"];
                this.columnLateralID = base.Columns["LateralID"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnDistanceFromUSMH = base.Columns["DistanceFromUSMH"];
                this.columnDistanceFromDSMH = base.Columns["DistanceFromDSMH"];
                this.columnMaterialType = base.Columns["MaterialType"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInProject = base.Columns["InProject"];
                this.columnInProjectDatabase = base.Columns["InProjectDatabase"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnLive = base.Columns["Live"];
                this.columnToProcess = base.Columns["ToProcess"];
                this.columnClientLateralID = base.Columns["ClientLateralID"];
                this.columnConnectionType = base.Columns["ConnectionType"];
                this.columnMn = base.Columns["Mn"];
                this.columnClientInspectionNo = base.Columns["ClientInspectionNo"];
                this.columnV1Inspection = base.Columns["V1Inspection"];
                this.columnRequiresRoboticPrep = base.Columns["RequiresRoboticPrep"];
                this.columnRequiresRoboticPrepDate = base.Columns["RequiresRoboticPrepDate"];
                this.columnHoldClientIssue = base.Columns["HoldClientIssue"];
                this.columnHoldLFSIssue = base.Columns["HoldLFSIssue"];
                this.columnLineLateral = base.Columns["LineLateral"];
                this.columnFlange = base.Columns["Flange"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnLateral = new global::System.Data.DataColumn("Lateral", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateral);
                this.columnVideoDistance = new global::System.Data.DataColumn("VideoDistance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDistance);
                this.columnClockPosition = new global::System.Data.DataColumn("ClockPosition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClockPosition);
                this.columnDistanceToCentre = new global::System.Data.DataColumn("DistanceToCentre", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToCentre);
                this.columnTimeOpened = new global::System.Data.DataColumn("TimeOpened", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeOpened);
                this.columnReverseSetup = new global::System.Data.DataColumn("ReverseSetup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReverseSetup);
                this.columnReinstate = new global::System.Data.DataColumn("Reinstate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReinstate);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnLateralID = new global::System.Data.DataColumn("LateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralID);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnDistanceFromUSMH = new global::System.Data.DataColumn("DistanceFromUSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromUSMH);
                this.columnDistanceFromDSMH = new global::System.Data.DataColumn("DistanceFromDSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromDSMH);
                this.columnMaterialType = new global::System.Data.DataColumn("MaterialType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialType);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInProject = new global::System.Data.DataColumn("InProject", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProject);
                this.columnInProjectDatabase = new global::System.Data.DataColumn("InProjectDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProjectDatabase);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnLive = new global::System.Data.DataColumn("Live", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLive);
                this.columnToProcess = new global::System.Data.DataColumn("ToProcess", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToProcess);
                this.columnClientLateralID = new global::System.Data.DataColumn("ClientLateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientLateralID);
                this.columnConnectionType = new global::System.Data.DataColumn("ConnectionType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionType);
                this.columnMn = new global::System.Data.DataColumn("Mn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMn);
                this.columnClientInspectionNo = new global::System.Data.DataColumn("ClientInspectionNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientInspectionNo);
                this.columnV1Inspection = new global::System.Data.DataColumn("V1Inspection", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnV1Inspection);
                this.columnRequiresRoboticPrep = new global::System.Data.DataColumn("RequiresRoboticPrep", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequiresRoboticPrep);
                this.columnRequiresRoboticPrepDate = new global::System.Data.DataColumn("RequiresRoboticPrepDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequiresRoboticPrepDate);
                this.columnHoldClientIssue = new global::System.Data.DataColumn("HoldClientIssue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldClientIssue);
                this.columnHoldLFSIssue = new global::System.Data.DataColumn("HoldLFSIssue", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHoldLFSIssue);
                this.columnLineLateral = new global::System.Data.DataColumn("LineLateral", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineLateral);
                this.columnFlange = new global::System.Data.DataColumn("Flange", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlange);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLateral}, true));
                this.columnLateral.AllowDBNull = false;
                this.columnLateral.Unique = true;
                this.columnVideoDistance.MaxLength = 25;
                this.columnClockPosition.MaxLength = 50;
                this.columnDistanceToCentre.MaxLength = 25;
                this.columnTimeOpened.MaxLength = 50;
                this.columnReverseSetup.MaxLength = 25;
                this.columnComments.MaxLength = 1073741823;
                this.columnLateralID.AllowDBNull = false;
                this.columnLateralID.MaxLength = 50;
                this.columnSize_.MaxLength = 25;
                this.columnDistanceFromUSMH.MaxLength = 25;
                this.columnDistanceFromDSMH.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnToProcess.DefaultValue = ((bool)(false));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LateralDetailsRow NewLateralDetailsRow()
            {
                return ((LateralDetailsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new LateralDetailsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(LateralDetailsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.LateralDetailsRowChanged != null))
                {
                    this.LateralDetailsRowChanged(this, new LateralDetailsRowChangeEvent(((LateralDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.LateralDetailsRowChanging != null))
                {
                    this.LateralDetailsRowChanging(this, new LateralDetailsRowChangeEvent(((LateralDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.LateralDetailsRowDeleted != null))
                {
                    this.LateralDetailsRowDeleted(this, new LateralDetailsRowChangeEvent(((LateralDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.LateralDetailsRowDeleting != null))
                {
                    this.LateralDetailsRowDeleting(this, new LateralDetailsRowChangeEvent(((LateralDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLateralDetailsRow(LateralDetailsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FullLengthLiningTDS ds = new FullLengthLiningTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LateralDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CommentDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnWorkID;

            private global::System.Data.DataColumn columnRefID;

            private global::System.Data.DataColumn columnType;

            private global::System.Data.DataColumn columnSubject;

            private global::System.Data.DataColumn columnUserID;

            private global::System.Data.DataColumn columnDateTime_;

            private global::System.Data.DataColumn columnComment;

            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCOMPANY_ID;

            private global::System.Data.DataColumn columnInDatabase;

            private global::System.Data.DataColumn columnUserFullName;

            private global::System.Data.DataColumn columnToHistory;

            private global::System.Data.DataColumn columnWorkType;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsDataTable()
            {
                this.TableName = "CommentDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CommentDetailsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CommentDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn
            {
                get
                {
                    return this.columnWorkID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn
            {
                get
                {
                    return this.columnRefID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn
            {
                get
                {
                    return this.columnType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn
            {
                get
                {
                    return this.columnSubject;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn
            {
                get
                {
                    return this.columnUserID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column
            {
                get
                {
                    return this.columnDateTime_;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn
            {
                get
                {
                    return this.columnComment;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn
            {
                get
                {
                    return this.columnLIBRARY_FILES_ID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn
            {
                get
                {
                    return this.columnCOMPANY_ID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn
            {
                get
                {
                    return this.columnInDatabase;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserFullNameColumn
            {
                get
                {
                    return this.columnUserFullName;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToHistoryColumn
            {
                get
                {
                    return this.columnToHistory;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkTypeColumn
            {
                get
                {
                    return this.columnWorkType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow this[int index]
            {
                get
                {
                    return ((CommentDetailsRow)(this.Rows[index]));
                }
            }

            public event CommentDetailsRowChangeEventHandler CommentDetailsRowChanging;

            public event CommentDetailsRowChangeEventHandler CommentDetailsRowChanged;

            public event CommentDetailsRowChangeEventHandler CommentDetailsRowDeleting;

            public event CommentDetailsRowChangeEventHandler CommentDetailsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCommentDetailsRow(CommentDetailsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow AddCommentDetailsRow(int WorkID, int RefID, string Type, string Subject, int UserID, System.DateTime DateTime_, string Comment, int LIBRARY_FILES_ID, bool Deleted, int COMPANY_ID, bool InDatabase, string UserFullName, bool ToHistory, string WorkType)
            {
                CommentDetailsRow rowCommentDetailsRow = ((CommentDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        Type,
                        Subject,
                        UserID,
                        DateTime_,
                        Comment,
                        LIBRARY_FILES_ID,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UserFullName,
                        ToHistory,
                        WorkType};
                rowCommentDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCommentDetailsRow);
                return rowCommentDetailsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow FindByWorkIDRefID(int WorkID, int RefID)
            {
                return ((CommentDetailsRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                CommentDetailsDataTable cln = ((CommentDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new CommentDetailsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnType = base.Columns["Type"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnComment = base.Columns["Comment"];
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUserFullName = base.Columns["UserFullName"];
                this.columnToHistory = base.Columns["ToHistory"];
                this.columnWorkType = base.Columns["WorkType"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUserFullName = new global::System.Data.DataColumn("UserFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserFullName);
                this.columnToHistory = new global::System.Data.DataColumn("ToHistory", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToHistory);
                this.columnWorkType = new global::System.Data.DataColumn("WorkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnType.MaxLength = 50;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 255;
                this.columnUserID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow NewCommentDetailsRow()
            {
                return ((CommentDetailsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new CommentDetailsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(CommentDetailsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.CommentDetailsRowChanged != null))
                {
                    this.CommentDetailsRowChanged(this, new CommentDetailsRowChangeEvent(((CommentDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.CommentDetailsRowChanging != null))
                {
                    this.CommentDetailsRowChanging(this, new CommentDetailsRowChangeEvent(((CommentDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.CommentDetailsRowDeleted != null))
                {
                    this.CommentDetailsRowDeleted(this, new CommentDetailsRowChangeEvent(((CommentDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.CommentDetailsRowDeleting != null))
                {
                    this.CommentDetailsRowDeleting(this, new CommentDetailsRowChangeEvent(((CommentDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCommentDetailsRow(CommentDetailsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FullLengthLiningTDS ds = new FullLengthLiningTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CommentDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AllCommentsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnWorkID;

            private global::System.Data.DataColumn columnRefID;

            private global::System.Data.DataColumn columnType;

            private global::System.Data.DataColumn columnSubject;

            private global::System.Data.DataColumn columnUserID;

            private global::System.Data.DataColumn columnDateTime_;

            private global::System.Data.DataColumn columnComment;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCOMPANY_ID;

            private global::System.Data.DataColumn columnWorkType;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsDataTable()
            {
                this.TableName = "AllComments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllCommentsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AllCommentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn
            {
                get
                {
                    return this.columnWorkID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn
            {
                get
                {
                    return this.columnRefID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn
            {
                get
                {
                    return this.columnType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn
            {
                get
                {
                    return this.columnSubject;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn
            {
                get
                {
                    return this.columnUserID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column
            {
                get
                {
                    return this.columnDateTime_;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn
            {
                get
                {
                    return this.columnComment;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn
            {
                get
                {
                    return this.columnCOMPANY_ID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkTypeColumn
            {
                get
                {
                    return this.columnWorkType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow this[int index]
            {
                get
                {
                    return ((AllCommentsRow)(this.Rows[index]));
                }
            }

            public event AllCommentsRowChangeEventHandler AllCommentsRowChanging;

            public event AllCommentsRowChangeEventHandler AllCommentsRowChanged;

            public event AllCommentsRowChangeEventHandler AllCommentsRowDeleting;

            public event AllCommentsRowChangeEventHandler AllCommentsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAllCommentsRow(AllCommentsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow AddAllCommentsRow(int WorkID, int RefID, string Type, string Subject, int UserID, System.DateTime DateTime_, string Comment, bool Deleted, int COMPANY_ID, string WorkType)
            {
                AllCommentsRow rowAllCommentsRow = ((AllCommentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        Type,
                        Subject,
                        UserID,
                        DateTime_,
                        Comment,
                        Deleted,
                        COMPANY_ID,
                        WorkType};
                rowAllCommentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAllCommentsRow);
                return rowAllCommentsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow FindByWorkIDRefID(int WorkID, int RefID)
            {
                return ((AllCommentsRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                AllCommentsDataTable cln = ((AllCommentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new AllCommentsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnType = base.Columns["Type"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnComment = base.Columns["Comment"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnWorkType = base.Columns["WorkType"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnWorkType = new global::System.Data.DataColumn("WorkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnType.MaxLength = 50;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 255;
                this.columnUserID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow NewAllCommentsRow()
            {
                return ((AllCommentsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new AllCommentsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(AllCommentsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.AllCommentsRowChanged != null))
                {
                    this.AllCommentsRowChanged(this, new AllCommentsRowChangeEvent(((AllCommentsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.AllCommentsRowChanging != null))
                {
                    this.AllCommentsRowChanging(this, new AllCommentsRowChangeEvent(((AllCommentsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.AllCommentsRowDeleted != null))
                {
                    this.AllCommentsRowDeleted(this, new AllCommentsRowChangeEvent(((AllCommentsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.AllCommentsRowDeleting != null))
                {
                    this.AllCommentsRowDeleting(this, new AllCommentsRowChangeEvent(((AllCommentsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAllCommentsRow(AllCommentsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FullLengthLiningTDS ds = new FullLengthLiningTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AllCommentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WetOutCommentsDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnWorkID;

            private global::System.Data.DataColumn columnRefID;

            private global::System.Data.DataColumn columnType;

            private global::System.Data.DataColumn columnSubject;

            private global::System.Data.DataColumn columnUserID;

            private global::System.Data.DataColumn columnDateTime_;

            private global::System.Data.DataColumn columnComment;

            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCOMPANY_ID;

            private global::System.Data.DataColumn columnInDatabase;

            private global::System.Data.DataColumn columnUserFullName;

            private global::System.Data.DataColumn columnWorkType;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCommentsDetailsDataTable()
            {
                this.TableName = "WetOutCommentsDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WetOutCommentsDetailsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WetOutCommentsDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn
            {
                get
                {
                    return this.columnWorkID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn
            {
                get
                {
                    return this.columnRefID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn
            {
                get
                {
                    return this.columnType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn
            {
                get
                {
                    return this.columnSubject;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn
            {
                get
                {
                    return this.columnUserID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column
            {
                get
                {
                    return this.columnDateTime_;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn
            {
                get
                {
                    return this.columnComment;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn
            {
                get
                {
                    return this.columnLIBRARY_FILES_ID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn
            {
                get
                {
                    return this.columnCOMPANY_ID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn
            {
                get
                {
                    return this.columnInDatabase;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserFullNameColumn
            {
                get
                {
                    return this.columnUserFullName;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkTypeColumn
            {
                get
                {
                    return this.columnWorkType;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCommentsDetailsRow this[int index]
            {
                get
                {
                    return ((WetOutCommentsDetailsRow)(this.Rows[index]));
                }
            }

            public event WetOutCommentsDetailsRowChangeEventHandler WetOutCommentsDetailsRowChanging;

            public event WetOutCommentsDetailsRowChangeEventHandler WetOutCommentsDetailsRowChanged;

            public event WetOutCommentsDetailsRowChangeEventHandler WetOutCommentsDetailsRowDeleting;

            public event WetOutCommentsDetailsRowChangeEventHandler WetOutCommentsDetailsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWetOutCommentsDetailsRow(WetOutCommentsDetailsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCommentsDetailsRow AddWetOutCommentsDetailsRow(int WorkID, int RefID, string Type, string Subject, int UserID, System.DateTime DateTime_, string Comment, int LIBRARY_FILES_ID, bool Deleted, int COMPANY_ID, bool InDatabase, string UserFullName, string WorkType)
            {
                WetOutCommentsDetailsRow rowWetOutCommentsDetailsRow = ((WetOutCommentsDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        Type,
                        Subject,
                        UserID,
                        DateTime_,
                        Comment,
                        LIBRARY_FILES_ID,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UserFullName,
                        WorkType};
                rowWetOutCommentsDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWetOutCommentsDetailsRow);
                return rowWetOutCommentsDetailsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCommentsDetailsRow FindByWorkIDRefID(int WorkID, int RefID)
            {
                return ((WetOutCommentsDetailsRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                WetOutCommentsDetailsDataTable cln = ((WetOutCommentsDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new WetOutCommentsDetailsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnType = base.Columns["Type"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnComment = base.Columns["Comment"];
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUserFullName = base.Columns["UserFullName"];
                this.columnWorkType = base.Columns["WorkType"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUserFullName = new global::System.Data.DataColumn("UserFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserFullName);
                this.columnWorkType = new global::System.Data.DataColumn("WorkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 255;
                this.columnUserID.AllowDBNull = false;
                this.columnDateTime_.AllowDBNull = false;
                this.columnComment.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCommentsDetailsRow NewWetOutCommentsDetailsRow()
            {
                return ((WetOutCommentsDetailsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new WetOutCommentsDetailsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(WetOutCommentsDetailsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.WetOutCommentsDetailsRowChanged != null))
                {
                    this.WetOutCommentsDetailsRowChanged(this, new WetOutCommentsDetailsRowChangeEvent(((WetOutCommentsDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.WetOutCommentsDetailsRowChanging != null))
                {
                    this.WetOutCommentsDetailsRowChanging(this, new WetOutCommentsDetailsRowChangeEvent(((WetOutCommentsDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.WetOutCommentsDetailsRowDeleted != null))
                {
                    this.WetOutCommentsDetailsRowDeleted(this, new WetOutCommentsDetailsRowChangeEvent(((WetOutCommentsDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.WetOutCommentsDetailsRowDeleting != null))
                {
                    this.WetOutCommentsDetailsRowDeleting(this, new WetOutCommentsDetailsRowChangeEvent(((WetOutCommentsDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWetOutCommentsDetailsRow(WetOutCommentsDetailsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FullLengthLiningTDS ds = new FullLengthLiningTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WetOutCommentsDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WetOutCatalystsDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable
        {

            private global::System.Data.DataColumn columnWorkID;

            private global::System.Data.DataColumn columnRefID;

            private global::System.Data.DataColumn columnCatalystID;

            private global::System.Data.DataColumn columnName;

            private global::System.Data.DataColumn columnPercentageByWeight;

            private global::System.Data.DataColumn columnLbsForMixQuantity;

            private global::System.Data.DataColumn columnLbsForDrum;

            private global::System.Data.DataColumn columnDeleted;

            private global::System.Data.DataColumn columnCOMPANY_ID;

            private global::System.Data.DataColumn columnInDatabase;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCatalystsDetailsDataTable()
            {
                this.TableName = "WetOutCatalystsDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WetOutCatalystsDetailsDataTable(global::System.Data.DataTable table)
            {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive))
                {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
                {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace))
                {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WetOutCatalystsDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) :
                base(info, context)
            {
                this.InitVars();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn
            {
                get
                {
                    return this.columnWorkID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn
            {
                get
                {
                    return this.columnRefID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CatalystIDColumn
            {
                get
                {
                    return this.columnCatalystID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn
            {
                get
                {
                    return this.columnName;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageByWeightColumn
            {
                get
                {
                    return this.columnPercentageByWeight;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LbsForMixQuantityColumn
            {
                get
                {
                    return this.columnLbsForMixQuantity;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LbsForDrumColumn
            {
                get
                {
                    return this.columnLbsForDrum;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn
            {
                get
                {
                    return this.columnDeleted;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn
            {
                get
                {
                    return this.columnCOMPANY_ID;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn
            {
                get
                {
                    return this.columnInDatabase;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return this.Rows.Count;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCatalystsDetailsRow this[int index]
            {
                get
                {
                    return ((WetOutCatalystsDetailsRow)(this.Rows[index]));
                }
            }

            public event WetOutCatalystsDetailsRowChangeEventHandler WetOutCatalystsDetailsRowChanging;

            public event WetOutCatalystsDetailsRowChangeEventHandler WetOutCatalystsDetailsRowChanged;

            public event WetOutCatalystsDetailsRowChangeEventHandler WetOutCatalystsDetailsRowDeleting;

            public event WetOutCatalystsDetailsRowChangeEventHandler WetOutCatalystsDetailsRowDeleted;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWetOutCatalystsDetailsRow(WetOutCatalystsDetailsRow row)
            {
                this.Rows.Add(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCatalystsDetailsRow AddWetOutCatalystsDetailsRow(int WorkID, int RefID, int CatalystID, string Name, decimal PercentageByWeight, decimal LbsForMixQuantity, string LbsForDrum, bool Deleted, int COMPANY_ID, bool InDatabase)
            {
                WetOutCatalystsDetailsRow rowWetOutCatalystsDetailsRow = ((WetOutCatalystsDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        CatalystID,
                        Name,
                        PercentageByWeight,
                        LbsForMixQuantity,
                        LbsForDrum,
                        Deleted,
                        COMPANY_ID,
                        InDatabase};
                rowWetOutCatalystsDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWetOutCatalystsDetailsRow);
                return rowWetOutCatalystsDetailsRow;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCatalystsDetailsRow FindByWorkIDRefID(int WorkID, int RefID)
            {
                return ((WetOutCatalystsDetailsRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator()
            {
                return this.Rows.GetEnumerator();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone()
            {
                WetOutCatalystsDetailsDataTable cln = ((WetOutCatalystsDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance()
            {
                return new WetOutCatalystsDetailsDataTable();
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars()
            {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnCatalystID = base.Columns["CatalystID"];
                this.columnName = base.Columns["Name"];
                this.columnPercentageByWeight = base.Columns["PercentageByWeight"];
                this.columnLbsForMixQuantity = base.Columns["LbsForMixQuantity"];
                this.columnLbsForDrum = base.Columns["LbsForDrum"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass()
            {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnCatalystID = new global::System.Data.DataColumn("CatalystID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCatalystID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnPercentageByWeight = new global::System.Data.DataColumn("PercentageByWeight", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentageByWeight);
                this.columnLbsForMixQuantity = new global::System.Data.DataColumn("LbsForMixQuantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLbsForMixQuantity);
                this.columnLbsForDrum = new global::System.Data.DataColumn("LbsForDrum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLbsForDrum);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 25;
                this.columnPercentageByWeight.AllowDBNull = false;
                this.columnLbsForMixQuantity.AllowDBNull = false;
                this.columnLbsForDrum.AllowDBNull = false;
                this.columnLbsForDrum.MaxLength = 50;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCatalystsDetailsRow NewWetOutCatalystsDetailsRow()
            {
                return ((WetOutCatalystsDetailsRow)(this.NewRow()));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
            {
                return new WetOutCatalystsDetailsRow(builder);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType()
            {
                return typeof(WetOutCatalystsDetailsRow);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if ((this.WetOutCatalystsDetailsRowChanged != null))
                {
                    this.WetOutCatalystsDetailsRowChanged(this, new WetOutCatalystsDetailsRowChangeEvent(((WetOutCatalystsDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if ((this.WetOutCatalystsDetailsRowChanging != null))
                {
                    this.WetOutCatalystsDetailsRowChanging(this, new WetOutCatalystsDetailsRowChangeEvent(((WetOutCatalystsDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if ((this.WetOutCatalystsDetailsRowDeleted != null))
                {
                    this.WetOutCatalystsDetailsRowDeleted(this, new WetOutCatalystsDetailsRowChangeEvent(((WetOutCatalystsDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if ((this.WetOutCatalystsDetailsRowDeleting != null))
                {
                    this.WetOutCatalystsDetailsRowDeleting(this, new WetOutCatalystsDetailsRowChangeEvent(((WetOutCatalystsDetailsRow)(e.Row)), e.Action));
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWetOutCatalystsDetailsRow(WetOutCatalystsDetailsRow row)
            {
                this.Rows.Remove(row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
            {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FullLengthLiningTDS ds = new FullLengthLiningTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WetOutCatalystsDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try
                    {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); )
                        {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length))
                            {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); )
                                {
                                    ;
                                }
                                if ((s1.Position == s1.Length))
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if ((s1 != null))
                        {
                            s1.Close();
                        }
                        if ((s2 != null))
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WorkDetailsRow : global::System.Data.DataRow
        {

            private WorkDetailsDataTable tableWorkDetails;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkDetailsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableWorkDetails = ((WorkDetailsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID
            {
                get
                {
                    return ((int)(this[this.tableWorkDetails.WorkIDColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.WorkIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ClientIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProposedLiningDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.ProposedLiningDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProposedLiningDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ProposedLiningDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DeadlineLiningDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.DeadlineLiningDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeadlineLiningDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DeadlineLiningDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime P1Date
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.P1DateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'P1Date\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.P1DateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime M1Date
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.M1DateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'M1Date\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.M1DateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime M2Date
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.M2DateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'M2Date\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.M2DateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InstallDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.InstallDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstallDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.InstallDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalVideoDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.FinalVideoDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalVideoDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.FinalVideoDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueIdentified
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.IssueIdentifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueIdentified\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.IssueIdentifiedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueLFS
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.IssueLFSColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueLFS\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.IssueLFSColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueClient
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.IssueClientColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueClient\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.IssueClientColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueSales
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.IssueSalesColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueSales\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.IssueSalesColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueGivenToClient
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.IssueGivenToClientColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueGivenToClient\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.IssueGivenToClientColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueResolved
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.IssueResolvedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueResolved\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.IssueResolvedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueInvestigation
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.IssueInvestigationColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueInvestigation\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.IssueInvestigationColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CXIsRemoved
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkDetails.CXIsRemovedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CXIsRemoved\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CXIsRemovedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementTakenBy
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.MeasurementTakenByColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementTakenBy\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.MeasurementTakenByColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Material
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.MaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Material\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.MaterialColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControl
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.TrafficControlColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControl\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TrafficControlColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteDetails
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.SiteDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteDetails\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.SiteDetailsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PipeSizeChange
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.PipeSizeChangeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeSizeChange\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PipeSizeChangeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StandardBypass
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.StandardBypassColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StandardBypass\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.StandardBypassColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StandardBypassComments
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.StandardBypassCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'StandardBypassComments\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.StandardBypassCommentsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControlDetails
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.TrafficControlDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControlDetails\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TrafficControlDetailsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.MeasurementTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementType\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.MeasurementTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementFromMH
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.MeasurementFromMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementFromMH\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.MeasurementFromMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoDoneFromMH
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.VideoDoneFromMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDoneFromMH\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.VideoDoneFromMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoDoneToMH
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.VideoDoneToMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDoneToMH\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.VideoDoneToMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementTakenByM2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.MeasurementTakenByM2Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementTakenByM2\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.MeasurementTakenByM2Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DropPipe
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.DropPipeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropPipe\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DropPipeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DropPipeInvertDepth
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.DropPipeInvertDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropPipeInvertDepth\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DropPipeInvertDepthColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CappedLaterals
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkDetails.CappedLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CappedLaterals\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CappedLateralsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineWithID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.LineWithIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineWithID\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.LineWithIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HydrantAddress
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.HydrantAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydrantAddress\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.HydrantAddressColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HydroWireWithin10FtOfInversionMH
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.HydroWireWithin10FtOfInversionMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydroWireWithin10FtOfInversionMH\' in table \'WorkDetails\' is" +
                                " DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.HydroWireWithin10FtOfInversionMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceToInversionMH
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.DistanceToInversionMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToInversionMH\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DistanceToInversionMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurfaceGrade
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.SurfaceGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurfaceGrade\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.SurfaceGradeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HydroPulley
            {
                get
                {
                    return ((bool)(this[this.tableWorkDetails.HydroPulleyColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.HydroPulleyColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FridgeCart
            {
                get
                {
                    return ((bool)(this[this.tableWorkDetails.FridgeCartColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.FridgeCartColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TwoPump
            {
                get
                {
                    return ((bool)(this[this.tableWorkDetails.TwoPumpColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.TwoPumpColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SixBypass
            {
                get
                {
                    return ((bool)(this[this.tableWorkDetails.SixBypassColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.SixBypassColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Scaffolding
            {
                get
                {
                    return ((bool)(this[this.tableWorkDetails.ScaffoldingColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.ScaffoldingColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool WinchExtension
            {
                get
                {
                    return ((bool)(this[this.tableWorkDetails.WinchExtensionColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.WinchExtensionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ExtraGenerator
            {
                get
                {
                    return ((bool)(this[this.tableWorkDetails.ExtraGeneratorColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.ExtraGeneratorColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GreyCableExtension
            {
                get
                {
                    return ((bool)(this[this.tableWorkDetails.GreyCableExtensionColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.GreyCableExtensionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EasementMats
            {
                get
                {
                    return ((bool)(this[this.tableWorkDetails.EasementMatsColumn]));
                }
                set
                {
                    this[this.tableWorkDetails.EasementMatsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RampRequired
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.RampRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RampRequired\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.RampRequiredColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoLength
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.VideoLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoLength\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.VideoLengthColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CommentsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkDetails.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.COMPANY_IDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PreFlushDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.PreFlushDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreFlushDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PreFlushDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PreVideoDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.PreVideoDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreVideoDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PreVideoDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RaProjectId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkDetails.RaProjectIdColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RaProjectId\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.RaProjectIdColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RaWorkId
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkDetails.RaWorkIdColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RaWorkId\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.RaWorkIdColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CameraSkid
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.CameraSkidColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CameraSkid\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CameraSkidColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RoboticPrepCompleted
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWorkDetails.RoboticPrepCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RoboticPrepCompleted\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.RoboticPrepCompletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RoboticPrepCompletedDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.RoboticPrepCompletedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RoboticPrepCompletedDate\' in table \'WorkDetails\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.RoboticPrepCompletedDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerTube
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.LinerTubeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerTube\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.LinerTubeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResinID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkDetails.ResinIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResinID\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ResinIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExcessResin
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.ExcessResinColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExcessResin\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ExcessResinColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PoundsDrums
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.PoundsDrumsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PoundsDrums\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PoundsDrumsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DrumDiameter
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.DrumDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DrumDiameter\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DrumDiameterColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HoistMaximumHeight
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.HoistMaximumHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoistMaximumHeight\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.HoistMaximumHeightColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HoistMinimumHeight
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.HoistMinimumHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoistMinimumHeight\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.HoistMinimumHeightColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DownDropTubeLenght
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.DownDropTubeLenghtColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownDropTubeLenght\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DownDropTubeLenghtColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PumpHeightAboveGround
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.PumpHeightAboveGroundColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpHeightAboveGround\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PumpHeightAboveGroundColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TubeResinToFeltFactor
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkDetails.TubeResinToFeltFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TubeResinToFeltFactor\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TubeResinToFeltFactorColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfSheet
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.DateOfSheetColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOfSheet\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DateOfSheetColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkDetails.EmployeeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeID\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.EmployeeIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunDetails
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.RunDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunDetails\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.RunDetailsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunDetails2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.RunDetails2Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunDetails2\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.RunDetails2Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WetOutDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.WetOutDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'WetOutDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.WetOutDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WetOutInstallDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.WetOutInstallDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'WetOutInstallDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.WetOutInstallDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thickness
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.ThicknessColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thickness\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ThicknessColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LengthToLine
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.LengthToLineColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LengthToLine\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.LengthToLineColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PlusExtra
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.PlusExtraColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PlusExtra\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PlusExtraColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ForTurnOffset
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.ForTurnOffsetColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForTurnOffset\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ForTurnOffsetColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LengthToWetOut
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.LengthToWetOutColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LengthToWetOut\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.LengthToWetOutColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TubeMaxColdHead
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TubeMaxColdHeadColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TubeMaxColdHead\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TubeMaxColdHeadColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TubeMaxColdHeadPsi
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TubeMaxColdHeadPsiColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TubeMaxColdHeadPsi\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TubeMaxColdHeadPsiColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TubeMaxHotHead
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TubeMaxHotHeadColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TubeMaxHotHead\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TubeMaxHotHeadColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TubeMaxHotHeadPsi
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TubeMaxHotHeadPsiColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TubeMaxHotHeadPsi\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TubeMaxHotHeadPsiColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TubeIdealHead
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TubeIdealHeadColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TubeIdealHead\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TubeIdealHeadColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TubeIdealHeadPsi
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TubeIdealHeadPsiColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TubeIdealHeadPsi\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TubeIdealHeadPsiColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NetResinForTube
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.NetResinForTubeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetResinForTube\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.NetResinForTubeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NetResinForTubeUsgals
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.NetResinForTubeUsgalsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetResinForTubeUsgals\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.NetResinForTubeUsgalsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NetResinForTubeDrumsIns
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.NetResinForTubeDrumsInsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetResinForTubeDrumsIns\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.NetResinForTubeDrumsInsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NetResinForTubeLbsFt
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.NetResinForTubeLbsFtColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetResinForTubeLbsFt\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.NetResinForTubeLbsFtColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NetResinForTubeUsgFt
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.NetResinForTubeUsgFtColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetResinForTubeUsgFt\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.NetResinForTubeUsgFtColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExtraResinForMix
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWorkDetails.ExtraResinForMixColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExtraResinForMix\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ExtraResinForMixColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExtraLbsForMix
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.ExtraLbsForMixColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExtraLbsForMix\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ExtraLbsForMixColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMixQuantity
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TotalMixQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMixQuantity\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TotalMixQuantityColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMixQuantityUsgals
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TotalMixQuantityUsgalsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMixQuantityUsgals\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TotalMixQuantityUsgalsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalMixQuantityDrumsIns
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.TotalMixQuantityDrumsInsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMixQuantityDrumsIns\' in table \'WorkDetails\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TotalMixQuantityDrumsInsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InversionType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.InversionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InversionType\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.InversionTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DepthOfInversionMH
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.DepthOfInversionMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepthOfInversionMH\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DepthOfInversionMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TubeForColumn
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TubeForColumnColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TubeForColumn\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TubeForColumnColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TubeForStartDry
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TubeForStartDryColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TubeForStartDry\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TubeForStartDryColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalTube
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TotalTubeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTube\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TotalTubeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DropTubeConnects
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.DropTubeConnectsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropTubeConnects\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DropTubeConnectsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AllowsHeadTo
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.AllowsHeadToColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AllowsHeadTo\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.AllowsHeadToColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RollerGap
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.RollerGapColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RollerGap\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.RollerGapColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HeightNeeded
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.HeightNeededColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeightNeeded\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.HeightNeededColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Available
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.AvailableColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Available\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.AvailableColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HoistHeight
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.HoistHeightColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoistHeight\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.HoistHeightColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CommentsCipp
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.CommentsCippColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommentsCipp\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CommentsCippColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResinsLabel
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.ResinsLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResinsLabel\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ResinsLabelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DrumContainsLabel
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.DrumContainsLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DrumContainsLabel\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DrumContainsLabelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerTubeLabel
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.LinerTubeLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerTubeLabel\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.LinerTubeLabelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ForLbDrumsLabel
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.ForLbDrumsLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForLbDrumsLabel\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ForLbDrumsLabelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NetResinLabel
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.NetResinLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetResinLabel\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.NetResinLabelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CatalystLabel
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.CatalystLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CatalystLabel\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CatalystLabelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InversionComment
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.InversionCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InversionComment\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.InversionCommentColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.PipeTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeType\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PipeTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeCondition
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.PipeConditionColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeCondition\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PipeConditionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroundMoisture
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.GroundMoistureColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroundMoisture\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.GroundMoistureColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BoilerSize
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.BoilerSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'BoilerSize\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.BoilerSizeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PumpTotalCapacity
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.PumpTotalCapacityColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpTotalCapacity\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PumpTotalCapacityColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LayFlatSize
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.LayFlatSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LayFlatSize\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.LayFlatSizeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LayFlatQuantityTotal
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.LayFlatQuantityTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LayFlatQuantityTotal\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.LayFlatQuantityTotalColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WaterStartTemp
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.WaterStartTempColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaterStartTemp\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.WaterStartTempColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Temp1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.Temp1Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Temp1\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.Temp1Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HoldAtT1
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.HoldAtT1Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldAtT1\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.HoldAtT1Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TempT2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.TempT2Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TempT2\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.TempT2Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CookAtT2
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.CookAtT2Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CookAtT2\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CookAtT2Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CoolDownFor
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.CoolDownForColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoolDownFor\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CoolDownForColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CoolToTemp
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.CoolToTempColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoolToTemp\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CoolToTempColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DropInPipeRun
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.DropInPipeRunColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropInPipeRun\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.DropInPipeRunColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PipeSlopOf
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.PipeSlopOfColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeSlopOf\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PipeSlopOfColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal F45F120
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.F45F120Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'F45F120\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.F45F120Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Hold
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.HoldColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hold\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.HoldColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal F120F185
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.F120F185Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'F120F185\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.F120F185Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CookTime
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.CookTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CookTime\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CookTimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CoolTime
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.CoolTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoolTime\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.CoolTimeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AproxTotal
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.AproxTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AproxTotal\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.AproxTotalColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WaterChangesPerHour
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.WaterChangesPerHourColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaterChangesPerHour\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.WaterChangesPerHourColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ReturnWaterVelocity
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.ReturnWaterVelocityColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReturnWaterVelocity\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.ReturnWaterVelocityColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LayflatBackPressure
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.LayflatBackPressureColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LayflatBackPressure\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.LayflatBackPressureColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PumpLiftAtIdealHead
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.PumpLiftAtIdealHeadColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpLiftAtIdealHead\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PumpLiftAtIdealHeadColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WaterToFillLinerColumn
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.WaterToFillLinerColumnColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaterToFillLinerColumn\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.WaterToFillLinerColumnColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WaterPerFit
            {
                get
                {
                    try
                    {
                        return ((decimal)(this[this.tableWorkDetails.WaterPerFitColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'WaterPerFit\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.WaterPerFitColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstallationResults
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.InstallationResultsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstallationResults\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.InstallationResultsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InversionLinerTubeLabel
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.InversionLinerTubeLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InversionLinerTubeLabel\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.InversionLinerTubeLabelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HeadsIdealLabel
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.HeadsIdealLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeadsIdealLabel\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.HeadsIdealLabelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PumpingAndCirculationLabel
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWorkDetails.PumpingAndCirculationLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpingAndCirculationLabel\' in table \'WorkDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tableWorkDetails.PumpingAndCirculationLabelColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull()
            {
                return this.IsNull(this.tableWorkDetails.ClientIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull()
            {
                this[this.tableWorkDetails.ClientIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProposedLiningDateNull()
            {
                return this.IsNull(this.tableWorkDetails.ProposedLiningDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProposedLiningDateNull()
            {
                this[this.tableWorkDetails.ProposedLiningDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeadlineLiningDateNull()
            {
                return this.IsNull(this.tableWorkDetails.DeadlineLiningDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeadlineLiningDateNull()
            {
                this[this.tableWorkDetails.DeadlineLiningDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP1DateNull()
            {
                return this.IsNull(this.tableWorkDetails.P1DateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP1DateNull()
            {
                this[this.tableWorkDetails.P1DateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM1DateNull()
            {
                return this.IsNull(this.tableWorkDetails.M1DateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM1DateNull()
            {
                this[this.tableWorkDetails.M1DateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM2DateNull()
            {
                return this.IsNull(this.tableWorkDetails.M2DateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM2DateNull()
            {
                this[this.tableWorkDetails.M2DateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstallDateNull()
            {
                return this.IsNull(this.tableWorkDetails.InstallDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstallDateNull()
            {
                this[this.tableWorkDetails.InstallDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalVideoDateNull()
            {
                return this.IsNull(this.tableWorkDetails.FinalVideoDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalVideoDateNull()
            {
                this[this.tableWorkDetails.FinalVideoDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueIdentifiedNull()
            {
                return this.IsNull(this.tableWorkDetails.IssueIdentifiedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueIdentifiedNull()
            {
                this[this.tableWorkDetails.IssueIdentifiedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueLFSNull()
            {
                return this.IsNull(this.tableWorkDetails.IssueLFSColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueLFSNull()
            {
                this[this.tableWorkDetails.IssueLFSColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueClientNull()
            {
                return this.IsNull(this.tableWorkDetails.IssueClientColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueClientNull()
            {
                this[this.tableWorkDetails.IssueClientColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueSalesNull()
            {
                return this.IsNull(this.tableWorkDetails.IssueSalesColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueSalesNull()
            {
                this[this.tableWorkDetails.IssueSalesColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueGivenToClientNull()
            {
                return this.IsNull(this.tableWorkDetails.IssueGivenToClientColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueGivenToClientNull()
            {
                this[this.tableWorkDetails.IssueGivenToClientColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueResolvedNull()
            {
                return this.IsNull(this.tableWorkDetails.IssueResolvedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueResolvedNull()
            {
                this[this.tableWorkDetails.IssueResolvedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueInvestigationNull()
            {
                return this.IsNull(this.tableWorkDetails.IssueInvestigationColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueInvestigationNull()
            {
                this[this.tableWorkDetails.IssueInvestigationColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCXIsRemovedNull()
            {
                return this.IsNull(this.tableWorkDetails.CXIsRemovedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCXIsRemovedNull()
            {
                this[this.tableWorkDetails.CXIsRemovedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementTakenByNull()
            {
                return this.IsNull(this.tableWorkDetails.MeasurementTakenByColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementTakenByNull()
            {
                this[this.tableWorkDetails.MeasurementTakenByColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialNull()
            {
                return this.IsNull(this.tableWorkDetails.MaterialColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialNull()
            {
                this[this.tableWorkDetails.MaterialColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlNull()
            {
                return this.IsNull(this.tableWorkDetails.TrafficControlColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlNull()
            {
                this[this.tableWorkDetails.TrafficControlColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteDetailsNull()
            {
                return this.IsNull(this.tableWorkDetails.SiteDetailsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteDetailsNull()
            {
                this[this.tableWorkDetails.SiteDetailsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeSizeChangeNull()
            {
                return this.IsNull(this.tableWorkDetails.PipeSizeChangeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeSizeChangeNull()
            {
                this[this.tableWorkDetails.PipeSizeChangeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardBypassNull()
            {
                return this.IsNull(this.tableWorkDetails.StandardBypassColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardBypassNull()
            {
                this[this.tableWorkDetails.StandardBypassColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardBypassCommentsNull()
            {
                return this.IsNull(this.tableWorkDetails.StandardBypassCommentsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardBypassCommentsNull()
            {
                this[this.tableWorkDetails.StandardBypassCommentsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlDetailsNull()
            {
                return this.IsNull(this.tableWorkDetails.TrafficControlDetailsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlDetailsNull()
            {
                this[this.tableWorkDetails.TrafficControlDetailsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementTypeNull()
            {
                return this.IsNull(this.tableWorkDetails.MeasurementTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementTypeNull()
            {
                this[this.tableWorkDetails.MeasurementTypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementFromMHNull()
            {
                return this.IsNull(this.tableWorkDetails.MeasurementFromMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementFromMHNull()
            {
                this[this.tableWorkDetails.MeasurementFromMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDoneFromMHNull()
            {
                return this.IsNull(this.tableWorkDetails.VideoDoneFromMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDoneFromMHNull()
            {
                this[this.tableWorkDetails.VideoDoneFromMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDoneToMHNull()
            {
                return this.IsNull(this.tableWorkDetails.VideoDoneToMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDoneToMHNull()
            {
                this[this.tableWorkDetails.VideoDoneToMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementTakenByM2Null()
            {
                return this.IsNull(this.tableWorkDetails.MeasurementTakenByM2Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementTakenByM2Null()
            {
                this[this.tableWorkDetails.MeasurementTakenByM2Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropPipeNull()
            {
                return this.IsNull(this.tableWorkDetails.DropPipeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropPipeNull()
            {
                this[this.tableWorkDetails.DropPipeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropPipeInvertDepthNull()
            {
                return this.IsNull(this.tableWorkDetails.DropPipeInvertDepthColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropPipeInvertDepthNull()
            {
                this[this.tableWorkDetails.DropPipeInvertDepthColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCappedLateralsNull()
            {
                return this.IsNull(this.tableWorkDetails.CappedLateralsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCappedLateralsNull()
            {
                this[this.tableWorkDetails.CappedLateralsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineWithIDNull()
            {
                return this.IsNull(this.tableWorkDetails.LineWithIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineWithIDNull()
            {
                this[this.tableWorkDetails.LineWithIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydrantAddressNull()
            {
                return this.IsNull(this.tableWorkDetails.HydrantAddressColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydrantAddressNull()
            {
                this[this.tableWorkDetails.HydrantAddressColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydroWireWithin10FtOfInversionMHNull()
            {
                return this.IsNull(this.tableWorkDetails.HydroWireWithin10FtOfInversionMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydroWireWithin10FtOfInversionMHNull()
            {
                this[this.tableWorkDetails.HydroWireWithin10FtOfInversionMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToInversionMHNull()
            {
                return this.IsNull(this.tableWorkDetails.DistanceToInversionMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToInversionMHNull()
            {
                this[this.tableWorkDetails.DistanceToInversionMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurfaceGradeNull()
            {
                return this.IsNull(this.tableWorkDetails.SurfaceGradeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurfaceGradeNull()
            {
                this[this.tableWorkDetails.SurfaceGradeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRampRequiredNull()
            {
                return this.IsNull(this.tableWorkDetails.RampRequiredColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRampRequiredNull()
            {
                this[this.tableWorkDetails.RampRequiredColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoLengthNull()
            {
                return this.IsNull(this.tableWorkDetails.VideoLengthColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoLengthNull()
            {
                this[this.tableWorkDetails.VideoLengthColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull()
            {
                return this.IsNull(this.tableWorkDetails.CommentsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull()
            {
                this[this.tableWorkDetails.CommentsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull()
            {
                return this.IsNull(this.tableWorkDetails.DeletedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull()
            {
                this[this.tableWorkDetails.DeletedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull()
            {
                return this.IsNull(this.tableWorkDetails.COMPANY_IDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull()
            {
                this[this.tableWorkDetails.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreFlushDateNull()
            {
                return this.IsNull(this.tableWorkDetails.PreFlushDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreFlushDateNull()
            {
                this[this.tableWorkDetails.PreFlushDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreVideoDateNull()
            {
                return this.IsNull(this.tableWorkDetails.PreVideoDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreVideoDateNull()
            {
                this[this.tableWorkDetails.PreVideoDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRaProjectIdNull()
            {
                return this.IsNull(this.tableWorkDetails.RaProjectIdColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRaProjectIdNull()
            {
                this[this.tableWorkDetails.RaProjectIdColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRaWorkIdNull()
            {
                return this.IsNull(this.tableWorkDetails.RaWorkIdColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRaWorkIdNull()
            {
                this[this.tableWorkDetails.RaWorkIdColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCameraSkidNull()
            {
                return this.IsNull(this.tableWorkDetails.CameraSkidColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCameraSkidNull()
            {
                this[this.tableWorkDetails.CameraSkidColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoboticPrepCompletedNull()
            {
                return this.IsNull(this.tableWorkDetails.RoboticPrepCompletedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoboticPrepCompletedNull()
            {
                this[this.tableWorkDetails.RoboticPrepCompletedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoboticPrepCompletedDateNull()
            {
                return this.IsNull(this.tableWorkDetails.RoboticPrepCompletedDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoboticPrepCompletedDateNull()
            {
                this[this.tableWorkDetails.RoboticPrepCompletedDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerTubeNull()
            {
                return this.IsNull(this.tableWorkDetails.LinerTubeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerTubeNull()
            {
                this[this.tableWorkDetails.LinerTubeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResinIDNull()
            {
                return this.IsNull(this.tableWorkDetails.ResinIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResinIDNull()
            {
                this[this.tableWorkDetails.ResinIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExcessResinNull()
            {
                return this.IsNull(this.tableWorkDetails.ExcessResinColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExcessResinNull()
            {
                this[this.tableWorkDetails.ExcessResinColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPoundsDrumsNull()
            {
                return this.IsNull(this.tableWorkDetails.PoundsDrumsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPoundsDrumsNull()
            {
                this[this.tableWorkDetails.PoundsDrumsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDrumDiameterNull()
            {
                return this.IsNull(this.tableWorkDetails.DrumDiameterColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDrumDiameterNull()
            {
                this[this.tableWorkDetails.DrumDiameterColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoistMaximumHeightNull()
            {
                return this.IsNull(this.tableWorkDetails.HoistMaximumHeightColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoistMaximumHeightNull()
            {
                this[this.tableWorkDetails.HoistMaximumHeightColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoistMinimumHeightNull()
            {
                return this.IsNull(this.tableWorkDetails.HoistMinimumHeightColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoistMinimumHeightNull()
            {
                this[this.tableWorkDetails.HoistMinimumHeightColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownDropTubeLenghtNull()
            {
                return this.IsNull(this.tableWorkDetails.DownDropTubeLenghtColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownDropTubeLenghtNull()
            {
                this[this.tableWorkDetails.DownDropTubeLenghtColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpHeightAboveGroundNull()
            {
                return this.IsNull(this.tableWorkDetails.PumpHeightAboveGroundColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpHeightAboveGroundNull()
            {
                this[this.tableWorkDetails.PumpHeightAboveGroundColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTubeResinToFeltFactorNull()
            {
                return this.IsNull(this.tableWorkDetails.TubeResinToFeltFactorColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTubeResinToFeltFactorNull()
            {
                this[this.tableWorkDetails.TubeResinToFeltFactorColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOfSheetNull()
            {
                return this.IsNull(this.tableWorkDetails.DateOfSheetColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOfSheetNull()
            {
                this[this.tableWorkDetails.DateOfSheetColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIDNull()
            {
                return this.IsNull(this.tableWorkDetails.EmployeeIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIDNull()
            {
                this[this.tableWorkDetails.EmployeeIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunDetailsNull()
            {
                return this.IsNull(this.tableWorkDetails.RunDetailsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunDetailsNull()
            {
                this[this.tableWorkDetails.RunDetailsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunDetails2Null()
            {
                return this.IsNull(this.tableWorkDetails.RunDetails2Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunDetails2Null()
            {
                this[this.tableWorkDetails.RunDetails2Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWetOutDateNull()
            {
                return this.IsNull(this.tableWorkDetails.WetOutDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWetOutDateNull()
            {
                this[this.tableWorkDetails.WetOutDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWetOutInstallDateNull()
            {
                return this.IsNull(this.tableWorkDetails.WetOutInstallDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWetOutInstallDateNull()
            {
                this[this.tableWorkDetails.WetOutInstallDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThicknessNull()
            {
                return this.IsNull(this.tableWorkDetails.ThicknessColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThicknessNull()
            {
                this[this.tableWorkDetails.ThicknessColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthToLineNull()
            {
                return this.IsNull(this.tableWorkDetails.LengthToLineColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthToLineNull()
            {
                this[this.tableWorkDetails.LengthToLineColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPlusExtraNull()
            {
                return this.IsNull(this.tableWorkDetails.PlusExtraColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPlusExtraNull()
            {
                this[this.tableWorkDetails.PlusExtraColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForTurnOffsetNull()
            {
                return this.IsNull(this.tableWorkDetails.ForTurnOffsetColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForTurnOffsetNull()
            {
                this[this.tableWorkDetails.ForTurnOffsetColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthToWetOutNull()
            {
                return this.IsNull(this.tableWorkDetails.LengthToWetOutColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthToWetOutNull()
            {
                this[this.tableWorkDetails.LengthToWetOutColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTubeMaxColdHeadNull()
            {
                return this.IsNull(this.tableWorkDetails.TubeMaxColdHeadColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTubeMaxColdHeadNull()
            {
                this[this.tableWorkDetails.TubeMaxColdHeadColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTubeMaxColdHeadPsiNull()
            {
                return this.IsNull(this.tableWorkDetails.TubeMaxColdHeadPsiColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTubeMaxColdHeadPsiNull()
            {
                this[this.tableWorkDetails.TubeMaxColdHeadPsiColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTubeMaxHotHeadNull()
            {
                return this.IsNull(this.tableWorkDetails.TubeMaxHotHeadColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTubeMaxHotHeadNull()
            {
                this[this.tableWorkDetails.TubeMaxHotHeadColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTubeMaxHotHeadPsiNull()
            {
                return this.IsNull(this.tableWorkDetails.TubeMaxHotHeadPsiColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTubeMaxHotHeadPsiNull()
            {
                this[this.tableWorkDetails.TubeMaxHotHeadPsiColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTubeIdealHeadNull()
            {
                return this.IsNull(this.tableWorkDetails.TubeIdealHeadColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTubeIdealHeadNull()
            {
                this[this.tableWorkDetails.TubeIdealHeadColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTubeIdealHeadPsiNull()
            {
                return this.IsNull(this.tableWorkDetails.TubeIdealHeadPsiColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTubeIdealHeadPsiNull()
            {
                this[this.tableWorkDetails.TubeIdealHeadPsiColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetResinForTubeNull()
            {
                return this.IsNull(this.tableWorkDetails.NetResinForTubeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetResinForTubeNull()
            {
                this[this.tableWorkDetails.NetResinForTubeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetResinForTubeUsgalsNull()
            {
                return this.IsNull(this.tableWorkDetails.NetResinForTubeUsgalsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetResinForTubeUsgalsNull()
            {
                this[this.tableWorkDetails.NetResinForTubeUsgalsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetResinForTubeDrumsInsNull()
            {
                return this.IsNull(this.tableWorkDetails.NetResinForTubeDrumsInsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetResinForTubeDrumsInsNull()
            {
                this[this.tableWorkDetails.NetResinForTubeDrumsInsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetResinForTubeLbsFtNull()
            {
                return this.IsNull(this.tableWorkDetails.NetResinForTubeLbsFtColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetResinForTubeLbsFtNull()
            {
                this[this.tableWorkDetails.NetResinForTubeLbsFtColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetResinForTubeUsgFtNull()
            {
                return this.IsNull(this.tableWorkDetails.NetResinForTubeUsgFtColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetResinForTubeUsgFtNull()
            {
                this[this.tableWorkDetails.NetResinForTubeUsgFtColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraResinForMixNull()
            {
                return this.IsNull(this.tableWorkDetails.ExtraResinForMixColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraResinForMixNull()
            {
                this[this.tableWorkDetails.ExtraResinForMixColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraLbsForMixNull()
            {
                return this.IsNull(this.tableWorkDetails.ExtraLbsForMixColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraLbsForMixNull()
            {
                this[this.tableWorkDetails.ExtraLbsForMixColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMixQuantityNull()
            {
                return this.IsNull(this.tableWorkDetails.TotalMixQuantityColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMixQuantityNull()
            {
                this[this.tableWorkDetails.TotalMixQuantityColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMixQuantityUsgalsNull()
            {
                return this.IsNull(this.tableWorkDetails.TotalMixQuantityUsgalsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMixQuantityUsgalsNull()
            {
                this[this.tableWorkDetails.TotalMixQuantityUsgalsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMixQuantityDrumsInsNull()
            {
                return this.IsNull(this.tableWorkDetails.TotalMixQuantityDrumsInsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMixQuantityDrumsInsNull()
            {
                this[this.tableWorkDetails.TotalMixQuantityDrumsInsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInversionTypeNull()
            {
                return this.IsNull(this.tableWorkDetails.InversionTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInversionTypeNull()
            {
                this[this.tableWorkDetails.InversionTypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepthOfInversionMHNull()
            {
                return this.IsNull(this.tableWorkDetails.DepthOfInversionMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepthOfInversionMHNull()
            {
                this[this.tableWorkDetails.DepthOfInversionMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTubeForColumnNull()
            {
                return this.IsNull(this.tableWorkDetails.TubeForColumnColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTubeForColumnNull()
            {
                this[this.tableWorkDetails.TubeForColumnColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTubeForStartDryNull()
            {
                return this.IsNull(this.tableWorkDetails.TubeForStartDryColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTubeForStartDryNull()
            {
                this[this.tableWorkDetails.TubeForStartDryColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTubeNull()
            {
                return this.IsNull(this.tableWorkDetails.TotalTubeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTubeNull()
            {
                this[this.tableWorkDetails.TotalTubeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropTubeConnectsNull()
            {
                return this.IsNull(this.tableWorkDetails.DropTubeConnectsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropTubeConnectsNull()
            {
                this[this.tableWorkDetails.DropTubeConnectsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAllowsHeadToNull()
            {
                return this.IsNull(this.tableWorkDetails.AllowsHeadToColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAllowsHeadToNull()
            {
                this[this.tableWorkDetails.AllowsHeadToColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRollerGapNull()
            {
                return this.IsNull(this.tableWorkDetails.RollerGapColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRollerGapNull()
            {
                this[this.tableWorkDetails.RollerGapColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeightNeededNull()
            {
                return this.IsNull(this.tableWorkDetails.HeightNeededColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeightNeededNull()
            {
                this[this.tableWorkDetails.HeightNeededColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAvailableNull()
            {
                return this.IsNull(this.tableWorkDetails.AvailableColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAvailableNull()
            {
                this[this.tableWorkDetails.AvailableColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoistHeightNull()
            {
                return this.IsNull(this.tableWorkDetails.HoistHeightColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoistHeightNull()
            {
                this[this.tableWorkDetails.HoistHeightColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsCippNull()
            {
                return this.IsNull(this.tableWorkDetails.CommentsCippColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsCippNull()
            {
                this[this.tableWorkDetails.CommentsCippColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResinsLabelNull()
            {
                return this.IsNull(this.tableWorkDetails.ResinsLabelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResinsLabelNull()
            {
                this[this.tableWorkDetails.ResinsLabelColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDrumContainsLabelNull()
            {
                return this.IsNull(this.tableWorkDetails.DrumContainsLabelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDrumContainsLabelNull()
            {
                this[this.tableWorkDetails.DrumContainsLabelColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerTubeLabelNull()
            {
                return this.IsNull(this.tableWorkDetails.LinerTubeLabelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerTubeLabelNull()
            {
                this[this.tableWorkDetails.LinerTubeLabelColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForLbDrumsLabelNull()
            {
                return this.IsNull(this.tableWorkDetails.ForLbDrumsLabelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForLbDrumsLabelNull()
            {
                this[this.tableWorkDetails.ForLbDrumsLabelColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetResinLabelNull()
            {
                return this.IsNull(this.tableWorkDetails.NetResinLabelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetResinLabelNull()
            {
                this[this.tableWorkDetails.NetResinLabelColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalystLabelNull()
            {
                return this.IsNull(this.tableWorkDetails.CatalystLabelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalystLabelNull()
            {
                this[this.tableWorkDetails.CatalystLabelColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInversionCommentNull()
            {
                return this.IsNull(this.tableWorkDetails.InversionCommentColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInversionCommentNull()
            {
                this[this.tableWorkDetails.InversionCommentColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeTypeNull()
            {
                return this.IsNull(this.tableWorkDetails.PipeTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeTypeNull()
            {
                this[this.tableWorkDetails.PipeTypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeConditionNull()
            {
                return this.IsNull(this.tableWorkDetails.PipeConditionColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeConditionNull()
            {
                this[this.tableWorkDetails.PipeConditionColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroundMoistureNull()
            {
                return this.IsNull(this.tableWorkDetails.GroundMoistureColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroundMoistureNull()
            {
                this[this.tableWorkDetails.GroundMoistureColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoilerSizeNull()
            {
                return this.IsNull(this.tableWorkDetails.BoilerSizeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoilerSizeNull()
            {
                this[this.tableWorkDetails.BoilerSizeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpTotalCapacityNull()
            {
                return this.IsNull(this.tableWorkDetails.PumpTotalCapacityColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpTotalCapacityNull()
            {
                this[this.tableWorkDetails.PumpTotalCapacityColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayFlatSizeNull()
            {
                return this.IsNull(this.tableWorkDetails.LayFlatSizeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayFlatSizeNull()
            {
                this[this.tableWorkDetails.LayFlatSizeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayFlatQuantityTotalNull()
            {
                return this.IsNull(this.tableWorkDetails.LayFlatQuantityTotalColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayFlatQuantityTotalNull()
            {
                this[this.tableWorkDetails.LayFlatQuantityTotalColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWaterStartTempNull()
            {
                return this.IsNull(this.tableWorkDetails.WaterStartTempColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWaterStartTempNull()
            {
                this[this.tableWorkDetails.WaterStartTempColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemp1Null()
            {
                return this.IsNull(this.tableWorkDetails.Temp1Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemp1Null()
            {
                this[this.tableWorkDetails.Temp1Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldAtT1Null()
            {
                return this.IsNull(this.tableWorkDetails.HoldAtT1Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldAtT1Null()
            {
                this[this.tableWorkDetails.HoldAtT1Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTempT2Null()
            {
                return this.IsNull(this.tableWorkDetails.TempT2Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTempT2Null()
            {
                this[this.tableWorkDetails.TempT2Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCookAtT2Null()
            {
                return this.IsNull(this.tableWorkDetails.CookAtT2Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCookAtT2Null()
            {
                this[this.tableWorkDetails.CookAtT2Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoolDownForNull()
            {
                return this.IsNull(this.tableWorkDetails.CoolDownForColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoolDownForNull()
            {
                this[this.tableWorkDetails.CoolDownForColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoolToTempNull()
            {
                return this.IsNull(this.tableWorkDetails.CoolToTempColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoolToTempNull()
            {
                this[this.tableWorkDetails.CoolToTempColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropInPipeRunNull()
            {
                return this.IsNull(this.tableWorkDetails.DropInPipeRunColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropInPipeRunNull()
            {
                this[this.tableWorkDetails.DropInPipeRunColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeSlopOfNull()
            {
                return this.IsNull(this.tableWorkDetails.PipeSlopOfColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeSlopOfNull()
            {
                this[this.tableWorkDetails.PipeSlopOfColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF45F120Null()
            {
                return this.IsNull(this.tableWorkDetails.F45F120Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF45F120Null()
            {
                this[this.tableWorkDetails.F45F120Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldNull()
            {
                return this.IsNull(this.tableWorkDetails.HoldColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldNull()
            {
                this[this.tableWorkDetails.HoldColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF120F185Null()
            {
                return this.IsNull(this.tableWorkDetails.F120F185Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF120F185Null()
            {
                this[this.tableWorkDetails.F120F185Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCookTimeNull()
            {
                return this.IsNull(this.tableWorkDetails.CookTimeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCookTimeNull()
            {
                this[this.tableWorkDetails.CookTimeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoolTimeNull()
            {
                return this.IsNull(this.tableWorkDetails.CoolTimeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoolTimeNull()
            {
                this[this.tableWorkDetails.CoolTimeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAproxTotalNull()
            {
                return this.IsNull(this.tableWorkDetails.AproxTotalColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAproxTotalNull()
            {
                this[this.tableWorkDetails.AproxTotalColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWaterChangesPerHourNull()
            {
                return this.IsNull(this.tableWorkDetails.WaterChangesPerHourColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWaterChangesPerHourNull()
            {
                this[this.tableWorkDetails.WaterChangesPerHourColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReturnWaterVelocityNull()
            {
                return this.IsNull(this.tableWorkDetails.ReturnWaterVelocityColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReturnWaterVelocityNull()
            {
                this[this.tableWorkDetails.ReturnWaterVelocityColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLayflatBackPressureNull()
            {
                return this.IsNull(this.tableWorkDetails.LayflatBackPressureColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLayflatBackPressureNull()
            {
                this[this.tableWorkDetails.LayflatBackPressureColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpLiftAtIdealHeadNull()
            {
                return this.IsNull(this.tableWorkDetails.PumpLiftAtIdealHeadColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpLiftAtIdealHeadNull()
            {
                this[this.tableWorkDetails.PumpLiftAtIdealHeadColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWaterToFillLinerColumnNull()
            {
                return this.IsNull(this.tableWorkDetails.WaterToFillLinerColumnColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWaterToFillLinerColumnNull()
            {
                this[this.tableWorkDetails.WaterToFillLinerColumnColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWaterPerFitNull()
            {
                return this.IsNull(this.tableWorkDetails.WaterPerFitColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWaterPerFitNull()
            {
                this[this.tableWorkDetails.WaterPerFitColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstallationResultsNull()
            {
                return this.IsNull(this.tableWorkDetails.InstallationResultsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstallationResultsNull()
            {
                this[this.tableWorkDetails.InstallationResultsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInversionLinerTubeLabelNull()
            {
                return this.IsNull(this.tableWorkDetails.InversionLinerTubeLabelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInversionLinerTubeLabelNull()
            {
                this[this.tableWorkDetails.InversionLinerTubeLabelColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeadsIdealLabelNull()
            {
                return this.IsNull(this.tableWorkDetails.HeadsIdealLabelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeadsIdealLabelNull()
            {
                this[this.tableWorkDetails.HeadsIdealLabelColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpingAndCirculationLabelNull()
            {
                return this.IsNull(this.tableWorkDetails.PumpingAndCirculationLabelColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpingAndCirculationLabelNull()
            {
                this[this.tableWorkDetails.PumpingAndCirculationLabelColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SectionDetailsRow : global::System.Data.DataRow
        {

            private SectionDetailsDataTable tableSectionDetails;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SectionDetailsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableSectionDetails = ((SectionDetailsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID
            {
                get
                {
                    return ((int)(this[this.tableSectionDetails.WorkIDColumn]));
                }
                set
                {
                    this[this.tableSectionDetails.WorkIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSectionDetails.AssetIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetID\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.AssetIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.SectionIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.StreetColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USMH
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSectionDetails.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DSMH
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSectionDetails.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapSize
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.MapSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapSize\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.MapSizeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.Size_Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapLength
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.MapLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapLength\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.MapLengthColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.LengthColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Laterals
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSectionDetails.LateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Laterals\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.LateralsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSectionDetails.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.LiveLateralsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHDepth
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.USMHDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHDepth\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHDepthColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHDepth
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.DSMHDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHDepth\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHDepthColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SteelTapeThroughSewer
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.SteelTapeThroughSewerColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SteelTapeThroughSewer\' in table \'SectionDetails\' is DBNull." +
                                "", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.SteelTapeThroughSewerColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth12
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.USMHMouth12Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth12\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHMouth12Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.USMHMouth1Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth1\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHMouth1Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.USMHMouth2Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth2\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHMouth2Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.USMHMouth3Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth3\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHMouth3Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth4
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.USMHMouth4Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth4\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHMouth4Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMouth5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.USMHMouth5Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMouth5\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHMouth5Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth12
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.DSMHMouth12Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth12\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHMouth12Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth1
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.DSMHMouth1Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth1\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHMouth1Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth2
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.DSMHMouth2Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth2\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHMouth2Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth3
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.DSMHMouth3Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth3\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHMouth3Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth4
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.DSMHMouth4Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth4\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHMouth4Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMouth5
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.DSMHMouth5Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMouth5\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHMouth5Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableSectionDetails.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableSectionDetails.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.COMPANY_IDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHDescription
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.USMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHDescription\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHDescriptionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHDescription
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.DSMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHDescription\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHDescriptionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHAddress
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.USMHAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHAddress\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.USMHAddressColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHAddress
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.DSMHAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHAddress\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.DSMHAddressColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubArea
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.SubAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubArea\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.SubAreaColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.FlowOrderIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OriginalSectionID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.OriginalSectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalSectionID\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.OriginalSectionIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thickness
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableSectionDetails.ThicknessColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thickness\' in table \'SectionDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableSectionDetails.ThicknessColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetIDNull()
            {
                return this.IsNull(this.tableSectionDetails.AssetIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetIDNull()
            {
                this[this.tableSectionDetails.AssetIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull()
            {
                return this.IsNull(this.tableSectionDetails.SectionIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull()
            {
                this[this.tableSectionDetails.SectionIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull()
            {
                return this.IsNull(this.tableSectionDetails.StreetColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull()
            {
                this[this.tableSectionDetails.StreetColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull()
            {
                return this.IsNull(this.tableSectionDetails.USMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull()
            {
                this[this.tableSectionDetails.USMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull()
            {
                return this.IsNull(this.tableSectionDetails.DSMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull()
            {
                this[this.tableSectionDetails.DSMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapSizeNull()
            {
                return this.IsNull(this.tableSectionDetails.MapSizeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapSizeNull()
            {
                this[this.tableSectionDetails.MapSizeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null()
            {
                return this.IsNull(this.tableSectionDetails.Size_Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null()
            {
                this[this.tableSectionDetails.Size_Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapLengthNull()
            {
                return this.IsNull(this.tableSectionDetails.MapLengthColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapLengthNull()
            {
                this[this.tableSectionDetails.MapLengthColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull()
            {
                return this.IsNull(this.tableSectionDetails.LengthColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull()
            {
                this[this.tableSectionDetails.LengthColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralsNull()
            {
                return this.IsNull(this.tableSectionDetails.LateralsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralsNull()
            {
                this[this.tableSectionDetails.LateralsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull()
            {
                return this.IsNull(this.tableSectionDetails.LiveLateralsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull()
            {
                this[this.tableSectionDetails.LiveLateralsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHDepthNull()
            {
                return this.IsNull(this.tableSectionDetails.USMHDepthColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHDepthNull()
            {
                this[this.tableSectionDetails.USMHDepthColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHDepthNull()
            {
                return this.IsNull(this.tableSectionDetails.DSMHDepthColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHDepthNull()
            {
                this[this.tableSectionDetails.DSMHDepthColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSteelTapeThroughSewerNull()
            {
                return this.IsNull(this.tableSectionDetails.SteelTapeThroughSewerColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSteelTapeThroughSewerNull()
            {
                this[this.tableSectionDetails.SteelTapeThroughSewerColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth12Null()
            {
                return this.IsNull(this.tableSectionDetails.USMHMouth12Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth12Null()
            {
                this[this.tableSectionDetails.USMHMouth12Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth1Null()
            {
                return this.IsNull(this.tableSectionDetails.USMHMouth1Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth1Null()
            {
                this[this.tableSectionDetails.USMHMouth1Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth2Null()
            {
                return this.IsNull(this.tableSectionDetails.USMHMouth2Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth2Null()
            {
                this[this.tableSectionDetails.USMHMouth2Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth3Null()
            {
                return this.IsNull(this.tableSectionDetails.USMHMouth3Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth3Null()
            {
                this[this.tableSectionDetails.USMHMouth3Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth4Null()
            {
                return this.IsNull(this.tableSectionDetails.USMHMouth4Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth4Null()
            {
                this[this.tableSectionDetails.USMHMouth4Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMouth5Null()
            {
                return this.IsNull(this.tableSectionDetails.USMHMouth5Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMouth5Null()
            {
                this[this.tableSectionDetails.USMHMouth5Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth12Null()
            {
                return this.IsNull(this.tableSectionDetails.DSMHMouth12Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth12Null()
            {
                this[this.tableSectionDetails.DSMHMouth12Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth1Null()
            {
                return this.IsNull(this.tableSectionDetails.DSMHMouth1Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth1Null()
            {
                this[this.tableSectionDetails.DSMHMouth1Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth2Null()
            {
                return this.IsNull(this.tableSectionDetails.DSMHMouth2Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth2Null()
            {
                this[this.tableSectionDetails.DSMHMouth2Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth3Null()
            {
                return this.IsNull(this.tableSectionDetails.DSMHMouth3Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth3Null()
            {
                this[this.tableSectionDetails.DSMHMouth3Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth4Null()
            {
                return this.IsNull(this.tableSectionDetails.DSMHMouth4Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth4Null()
            {
                this[this.tableSectionDetails.DSMHMouth4Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMouth5Null()
            {
                return this.IsNull(this.tableSectionDetails.DSMHMouth5Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMouth5Null()
            {
                this[this.tableSectionDetails.DSMHMouth5Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull()
            {
                return this.IsNull(this.tableSectionDetails.DeletedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull()
            {
                this[this.tableSectionDetails.DeletedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull()
            {
                return this.IsNull(this.tableSectionDetails.COMPANY_IDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull()
            {
                this[this.tableSectionDetails.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHDescriptionNull()
            {
                return this.IsNull(this.tableSectionDetails.USMHDescriptionColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHDescriptionNull()
            {
                this[this.tableSectionDetails.USMHDescriptionColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHDescriptionNull()
            {
                return this.IsNull(this.tableSectionDetails.DSMHDescriptionColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHDescriptionNull()
            {
                this[this.tableSectionDetails.DSMHDescriptionColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHAddressNull()
            {
                return this.IsNull(this.tableSectionDetails.USMHAddressColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHAddressNull()
            {
                this[this.tableSectionDetails.USMHAddressColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHAddressNull()
            {
                return this.IsNull(this.tableSectionDetails.DSMHAddressColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHAddressNull()
            {
                this[this.tableSectionDetails.DSMHAddressColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaNull()
            {
                return this.IsNull(this.tableSectionDetails.SubAreaColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaNull()
            {
                this[this.tableSectionDetails.SubAreaColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull()
            {
                return this.IsNull(this.tableSectionDetails.FlowOrderIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull()
            {
                this[this.tableSectionDetails.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalSectionIDNull()
            {
                return this.IsNull(this.tableSectionDetails.OriginalSectionIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalSectionIDNull()
            {
                this[this.tableSectionDetails.OriginalSectionIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThicknessNull()
            {
                return this.IsNull(this.tableSectionDetails.ThicknessColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThicknessNull()
            {
                this[this.tableSectionDetails.ThicknessColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LateralDetailsRow : global::System.Data.DataRow
        {

            private LateralDetailsDataTable tableLateralDetails;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LateralDetailsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableLateralDetails = ((LateralDetailsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lateral
            {
                get
                {
                    return ((int)(this[this.tableLateralDetails.LateralColumn]));
                }
                set
                {
                    this[this.tableLateralDetails.LateralColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoDistance
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.VideoDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDistance\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.VideoDistanceColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClockPosition
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.ClockPositionColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClockPosition\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.ClockPositionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceToCentre
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.DistanceToCentreColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToCentre\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.DistanceToCentreColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeOpened
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.TimeOpenedColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeOpened\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.TimeOpenedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReverseSetup
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.ReverseSetupColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReverseSetup\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.ReverseSetupColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Reinstate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableLateralDetails.ReinstateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reinstate\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.ReinstateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.CommentsColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralID
            {
                get
                {
                    return ((string)(this[this.tableLateralDetails.LateralIDColumn]));
                }
                set
                {
                    this[this.tableLateralDetails.LateralIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.Size_Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromUSMH
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.DistanceFromUSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromUSMH\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.DistanceFromUSMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromDSMH
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.DistanceFromDSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromDSMH\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.DistanceFromDSMHColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaterialType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.MaterialTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialType\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.MaterialTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    return ((bool)(this[this.tableLateralDetails.DeletedColumn]));
                }
                set
                {
                    this[this.tableLateralDetails.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID
            {
                get
                {
                    return ((int)(this[this.tableLateralDetails.COMPANY_IDColumn]));
                }
                set
                {
                    this[this.tableLateralDetails.COMPANY_IDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InProject
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableLateralDetails.InProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProject\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.InProjectColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InProjectDatabase
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableLateralDetails.InProjectDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProjectDatabase\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.InProjectDatabaseColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableLateralDetails.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.InDatabaseColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Live
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.LiveColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Live\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.LiveColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ToProcess
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableLateralDetails.ToProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToProcess\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.ToProcessColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientLateralID
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.ClientLateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientLateralID\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.ClientLateralIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConnectionType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.ConnectionTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionType\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.ConnectionTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mn
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.MnColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mn\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.MnColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientInspectionNo
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.ClientInspectionNoColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientInspectionNo\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.ClientInspectionNoColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime V1Inspection
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableLateralDetails.V1InspectionColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'V1Inspection\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.V1InspectionColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RequiresRoboticPrep
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableLateralDetails.RequiresRoboticPrepColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequiresRoboticPrep\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.RequiresRoboticPrepColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RequiresRoboticPrepDate
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableLateralDetails.RequiresRoboticPrepDateColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequiresRoboticPrepDate\' in table \'LateralDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.RequiresRoboticPrepDateColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HoldClientIssue
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableLateralDetails.HoldClientIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldClientIssue\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.HoldClientIssueColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HoldLFSIssue
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableLateralDetails.HoldLFSIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'HoldLFSIssue\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.HoldLFSIssueColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LineLateral
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableLateralDetails.LineLateralColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineLateral\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.LineLateralColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Flange
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableLateralDetails.FlangeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Flange\' in table \'LateralDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableLateralDetails.FlangeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDistanceNull()
            {
                return this.IsNull(this.tableLateralDetails.VideoDistanceColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDistanceNull()
            {
                this[this.tableLateralDetails.VideoDistanceColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClockPositionNull()
            {
                return this.IsNull(this.tableLateralDetails.ClockPositionColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClockPositionNull()
            {
                this[this.tableLateralDetails.ClockPositionColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToCentreNull()
            {
                return this.IsNull(this.tableLateralDetails.DistanceToCentreColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToCentreNull()
            {
                this[this.tableLateralDetails.DistanceToCentreColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeOpenedNull()
            {
                return this.IsNull(this.tableLateralDetails.TimeOpenedColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeOpenedNull()
            {
                this[this.tableLateralDetails.TimeOpenedColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReverseSetupNull()
            {
                return this.IsNull(this.tableLateralDetails.ReverseSetupColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReverseSetupNull()
            {
                this[this.tableLateralDetails.ReverseSetupColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReinstateNull()
            {
                return this.IsNull(this.tableLateralDetails.ReinstateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReinstateNull()
            {
                this[this.tableLateralDetails.ReinstateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull()
            {
                return this.IsNull(this.tableLateralDetails.CommentsColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull()
            {
                this[this.tableLateralDetails.CommentsColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null()
            {
                return this.IsNull(this.tableLateralDetails.Size_Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null()
            {
                this[this.tableLateralDetails.Size_Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromUSMHNull()
            {
                return this.IsNull(this.tableLateralDetails.DistanceFromUSMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromUSMHNull()
            {
                this[this.tableLateralDetails.DistanceFromUSMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromDSMHNull()
            {
                return this.IsNull(this.tableLateralDetails.DistanceFromDSMHColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromDSMHNull()
            {
                this[this.tableLateralDetails.DistanceFromDSMHColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialTypeNull()
            {
                return this.IsNull(this.tableLateralDetails.MaterialTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialTypeNull()
            {
                this[this.tableLateralDetails.MaterialTypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProjectNull()
            {
                return this.IsNull(this.tableLateralDetails.InProjectColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProjectNull()
            {
                this[this.tableLateralDetails.InProjectColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProjectDatabaseNull()
            {
                return this.IsNull(this.tableLateralDetails.InProjectDatabaseColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProjectDatabaseNull()
            {
                this[this.tableLateralDetails.InProjectDatabaseColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull()
            {
                return this.IsNull(this.tableLateralDetails.InDatabaseColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull()
            {
                this[this.tableLateralDetails.InDatabaseColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveNull()
            {
                return this.IsNull(this.tableLateralDetails.LiveColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveNull()
            {
                this[this.tableLateralDetails.LiveColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToProcessNull()
            {
                return this.IsNull(this.tableLateralDetails.ToProcessColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToProcessNull()
            {
                this[this.tableLateralDetails.ToProcessColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientLateralIDNull()
            {
                return this.IsNull(this.tableLateralDetails.ClientLateralIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientLateralIDNull()
            {
                this[this.tableLateralDetails.ClientLateralIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConnectionTypeNull()
            {
                return this.IsNull(this.tableLateralDetails.ConnectionTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConnectionTypeNull()
            {
                this[this.tableLateralDetails.ConnectionTypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMnNull()
            {
                return this.IsNull(this.tableLateralDetails.MnColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMnNull()
            {
                this[this.tableLateralDetails.MnColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientInspectionNoNull()
            {
                return this.IsNull(this.tableLateralDetails.ClientInspectionNoColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientInspectionNoNull()
            {
                this[this.tableLateralDetails.ClientInspectionNoColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsV1InspectionNull()
            {
                return this.IsNull(this.tableLateralDetails.V1InspectionColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetV1InspectionNull()
            {
                this[this.tableLateralDetails.V1InspectionColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequiresRoboticPrepNull()
            {
                return this.IsNull(this.tableLateralDetails.RequiresRoboticPrepColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequiresRoboticPrepNull()
            {
                this[this.tableLateralDetails.RequiresRoboticPrepColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequiresRoboticPrepDateNull()
            {
                return this.IsNull(this.tableLateralDetails.RequiresRoboticPrepDateColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequiresRoboticPrepDateNull()
            {
                this[this.tableLateralDetails.RequiresRoboticPrepDateColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldClientIssueNull()
            {
                return this.IsNull(this.tableLateralDetails.HoldClientIssueColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldClientIssueNull()
            {
                this[this.tableLateralDetails.HoldClientIssueColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldLFSIssueNull()
            {
                return this.IsNull(this.tableLateralDetails.HoldLFSIssueColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldLFSIssueNull()
            {
                this[this.tableLateralDetails.HoldLFSIssueColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineLateralNull()
            {
                return this.IsNull(this.tableLateralDetails.LineLateralColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineLateralNull()
            {
                this[this.tableLateralDetails.LineLateralColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlangeNull()
            {
                return this.IsNull(this.tableLateralDetails.FlangeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlangeNull()
            {
                this[this.tableLateralDetails.FlangeColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CommentDetailsRow : global::System.Data.DataRow
        {

            private CommentDetailsDataTable tableCommentDetails;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CommentDetailsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableCommentDetails = ((CommentDetailsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID
            {
                get
                {
                    return ((int)(this[this.tableCommentDetails.WorkIDColumn]));
                }
                set
                {
                    this[this.tableCommentDetails.WorkIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID
            {
                get
                {
                    return ((int)(this[this.tableCommentDetails.RefIDColumn]));
                }
                set
                {
                    this[this.tableCommentDetails.RefIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCommentDetails.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCommentDetails.TypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject
            {
                get
                {
                    return ((string)(this[this.tableCommentDetails.SubjectColumn]));
                }
                set
                {
                    this[this.tableCommentDetails.SubjectColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID
            {
                get
                {
                    return ((int)(this[this.tableCommentDetails.UserIDColumn]));
                }
                set
                {
                    this[this.tableCommentDetails.UserIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableCommentDetails.DateTime_Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTime_\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCommentDetails.DateTime_Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCommentDetails.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCommentDetails.CommentColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableCommentDetails.LIBRARY_FILES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_FILES_ID\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCommentDetails.LIBRARY_FILES_IDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    return ((bool)(this[this.tableCommentDetails.DeletedColumn]));
                }
                set
                {
                    this[this.tableCommentDetails.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID
            {
                get
                {
                    return ((int)(this[this.tableCommentDetails.COMPANY_IDColumn]));
                }
                set
                {
                    this[this.tableCommentDetails.COMPANY_IDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableCommentDetails.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCommentDetails.InDatabaseColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserFullName
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCommentDetails.UserFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserFullName\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCommentDetails.UserFullNameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ToHistory
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableCommentDetails.ToHistoryColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToHistory\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCommentDetails.ToHistoryColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableCommentDetails.WorkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkType\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableCommentDetails.WorkTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull()
            {
                return this.IsNull(this.tableCommentDetails.TypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull()
            {
                this[this.tableCommentDetails.TypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTime_Null()
            {
                return this.IsNull(this.tableCommentDetails.DateTime_Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTime_Null()
            {
                this[this.tableCommentDetails.DateTime_Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull()
            {
                return this.IsNull(this.tableCommentDetails.CommentColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull()
            {
                this[this.tableCommentDetails.CommentColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_FILES_IDNull()
            {
                return this.IsNull(this.tableCommentDetails.LIBRARY_FILES_IDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_FILES_IDNull()
            {
                this[this.tableCommentDetails.LIBRARY_FILES_IDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull()
            {
                return this.IsNull(this.tableCommentDetails.InDatabaseColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull()
            {
                this[this.tableCommentDetails.InDatabaseColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserFullNameNull()
            {
                return this.IsNull(this.tableCommentDetails.UserFullNameColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserFullNameNull()
            {
                this[this.tableCommentDetails.UserFullNameColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToHistoryNull()
            {
                return this.IsNull(this.tableCommentDetails.ToHistoryColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToHistoryNull()
            {
                this[this.tableCommentDetails.ToHistoryColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeNull()
            {
                return this.IsNull(this.tableCommentDetails.WorkTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeNull()
            {
                this[this.tableCommentDetails.WorkTypeColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AllCommentsRow : global::System.Data.DataRow
        {

            private AllCommentsDataTable tableAllComments;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllCommentsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableAllComments = ((AllCommentsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID
            {
                get
                {
                    return ((int)(this[this.tableAllComments.WorkIDColumn]));
                }
                set
                {
                    this[this.tableAllComments.WorkIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID
            {
                get
                {
                    return ((int)(this[this.tableAllComments.RefIDColumn]));
                }
                set
                {
                    this[this.tableAllComments.RefIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAllComments.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'AllComments\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAllComments.TypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject
            {
                get
                {
                    return ((string)(this[this.tableAllComments.SubjectColumn]));
                }
                set
                {
                    this[this.tableAllComments.SubjectColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID
            {
                get
                {
                    return ((int)(this[this.tableAllComments.UserIDColumn]));
                }
                set
                {
                    this[this.tableAllComments.UserIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_
            {
                get
                {
                    try
                    {
                        return ((global::System.DateTime)(this[this.tableAllComments.DateTime_Column]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTime_\' in table \'AllComments\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAllComments.DateTime_Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAllComments.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'AllComments\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAllComments.CommentColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    return ((bool)(this[this.tableAllComments.DeletedColumn]));
                }
                set
                {
                    this[this.tableAllComments.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID
            {
                get
                {
                    return ((int)(this[this.tableAllComments.COMPANY_IDColumn]));
                }
                set
                {
                    this[this.tableAllComments.COMPANY_IDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableAllComments.WorkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkType\' in table \'AllComments\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableAllComments.WorkTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull()
            {
                return this.IsNull(this.tableAllComments.TypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull()
            {
                this[this.tableAllComments.TypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTime_Null()
            {
                return this.IsNull(this.tableAllComments.DateTime_Column);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTime_Null()
            {
                this[this.tableAllComments.DateTime_Column] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull()
            {
                return this.IsNull(this.tableAllComments.CommentColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull()
            {
                this[this.tableAllComments.CommentColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeNull()
            {
                return this.IsNull(this.tableAllComments.WorkTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeNull()
            {
                this[this.tableAllComments.WorkTypeColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WetOutCommentsDetailsRow : global::System.Data.DataRow
        {

            private WetOutCommentsDetailsDataTable tableWetOutCommentsDetails;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WetOutCommentsDetailsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableWetOutCommentsDetails = ((WetOutCommentsDetailsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID
            {
                get
                {
                    return ((int)(this[this.tableWetOutCommentsDetails.WorkIDColumn]));
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.WorkIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID
            {
                get
                {
                    return ((int)(this[this.tableWetOutCommentsDetails.RefIDColumn]));
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.RefIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWetOutCommentsDetails.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'WetOutCommentsDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.TypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject
            {
                get
                {
                    return ((string)(this[this.tableWetOutCommentsDetails.SubjectColumn]));
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.SubjectColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID
            {
                get
                {
                    return ((int)(this[this.tableWetOutCommentsDetails.UserIDColumn]));
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.UserIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_
            {
                get
                {
                    return ((global::System.DateTime)(this[this.tableWetOutCommentsDetails.DateTime_Column]));
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.DateTime_Column] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment
            {
                get
                {
                    return ((string)(this[this.tableWetOutCommentsDetails.CommentColumn]));
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.CommentColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWetOutCommentsDetails.LIBRARY_FILES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_FILES_ID\' in table \'WetOutCommentsDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.LIBRARY_FILES_IDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    return ((bool)(this[this.tableWetOutCommentsDetails.DeletedColumn]));
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID
            {
                get
                {
                    return ((int)(this[this.tableWetOutCommentsDetails.COMPANY_IDColumn]));
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.COMPANY_IDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWetOutCommentsDetails.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'WetOutCommentsDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.InDatabaseColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserFullName
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWetOutCommentsDetails.UserFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserFullName\' in table \'WetOutCommentsDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.UserFullNameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkType
            {
                get
                {
                    try
                    {
                        return ((string)(this[this.tableWetOutCommentsDetails.WorkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkType\' in table \'WetOutCommentsDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWetOutCommentsDetails.WorkTypeColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull()
            {
                return this.IsNull(this.tableWetOutCommentsDetails.TypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull()
            {
                this[this.tableWetOutCommentsDetails.TypeColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_FILES_IDNull()
            {
                return this.IsNull(this.tableWetOutCommentsDetails.LIBRARY_FILES_IDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_FILES_IDNull()
            {
                this[this.tableWetOutCommentsDetails.LIBRARY_FILES_IDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull()
            {
                return this.IsNull(this.tableWetOutCommentsDetails.InDatabaseColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull()
            {
                this[this.tableWetOutCommentsDetails.InDatabaseColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserFullNameNull()
            {
                return this.IsNull(this.tableWetOutCommentsDetails.UserFullNameColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserFullNameNull()
            {
                this[this.tableWetOutCommentsDetails.UserFullNameColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeNull()
            {
                return this.IsNull(this.tableWetOutCommentsDetails.WorkTypeColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeNull()
            {
                this[this.tableWetOutCommentsDetails.WorkTypeColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WetOutCatalystsDetailsRow : global::System.Data.DataRow
        {

            private WetOutCatalystsDetailsDataTable tableWetOutCatalystsDetails;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WetOutCatalystsDetailsRow(global::System.Data.DataRowBuilder rb) :
                base(rb)
            {
                this.tableWetOutCatalystsDetails = ((WetOutCatalystsDetailsDataTable)(this.Table));
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID
            {
                get
                {
                    return ((int)(this[this.tableWetOutCatalystsDetails.WorkIDColumn]));
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.WorkIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID
            {
                get
                {
                    return ((int)(this[this.tableWetOutCatalystsDetails.RefIDColumn]));
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.RefIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CatalystID
            {
                get
                {
                    try
                    {
                        return ((int)(this[this.tableWetOutCatalystsDetails.CatalystIDColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'CatalystID\' in table \'WetOutCatalystsDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.CatalystIDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name
            {
                get
                {
                    return ((string)(this[this.tableWetOutCatalystsDetails.NameColumn]));
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.NameColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PercentageByWeight
            {
                get
                {
                    return ((decimal)(this[this.tableWetOutCatalystsDetails.PercentageByWeightColumn]));
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.PercentageByWeightColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LbsForMixQuantity
            {
                get
                {
                    return ((decimal)(this[this.tableWetOutCatalystsDetails.LbsForMixQuantityColumn]));
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.LbsForMixQuantityColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LbsForDrum
            {
                get
                {
                    return ((string)(this[this.tableWetOutCatalystsDetails.LbsForDrumColumn]));
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.LbsForDrumColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted
            {
                get
                {
                    return ((bool)(this[this.tableWetOutCatalystsDetails.DeletedColumn]));
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.DeletedColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID
            {
                get
                {
                    return ((int)(this[this.tableWetOutCatalystsDetails.COMPANY_IDColumn]));
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.COMPANY_IDColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase
            {
                get
                {
                    try
                    {
                        return ((bool)(this[this.tableWetOutCatalystsDetails.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e)
                    {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'WetOutCatalystsDetails\' is DBNull.", e);
                    }
                }
                set
                {
                    this[this.tableWetOutCatalystsDetails.InDatabaseColumn] = value;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCatalystIDNull()
            {
                return this.IsNull(this.tableWetOutCatalystsDetails.CatalystIDColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCatalystIDNull()
            {
                this[this.tableWetOutCatalystsDetails.CatalystIDColumn] = global::System.Convert.DBNull;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull()
            {
                return this.IsNull(this.tableWetOutCatalystsDetails.InDatabaseColumn);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull()
            {
                this[this.tableWetOutCatalystsDetails.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WorkDetailsRowChangeEvent : global::System.EventArgs
        {

            private WorkDetailsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRowChangeEvent(WorkDetailsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SectionDetailsRowChangeEvent : global::System.EventArgs
        {

            private SectionDetailsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionDetailsRowChangeEvent(SectionDetailsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SectionDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LateralDetailsRowChangeEvent : global::System.EventArgs
        {

            private LateralDetailsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LateralDetailsRowChangeEvent(LateralDetailsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LateralDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CommentDetailsRowChangeEvent : global::System.EventArgs
        {

            private CommentDetailsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRowChangeEvent(CommentDetailsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AllCommentsRowChangeEvent : global::System.EventArgs
        {

            private AllCommentsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRowChangeEvent(AllCommentsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllCommentsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WetOutCommentsDetailsRowChangeEvent : global::System.EventArgs
        {

            private WetOutCommentsDetailsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCommentsDetailsRowChangeEvent(WetOutCommentsDetailsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCommentsDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }

        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WetOutCatalystsDetailsRowChangeEvent : global::System.EventArgs
        {

            private WetOutCatalystsDetailsRow eventRow;

            private global::System.Data.DataRowAction eventAction;

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCatalystsDetailsRowChangeEvent(WetOutCatalystsDetailsRow row, global::System.Data.DataRowAction action)
            {
                this.eventRow = row;
                this.eventAction = action;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WetOutCatalystsDetailsRow Row
            {
                get
                {
                    return this.eventRow;
                }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action
            {
                get
                {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591