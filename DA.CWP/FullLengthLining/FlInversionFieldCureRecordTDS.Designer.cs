//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3620
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.FullLengthLining {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FlInversionFieldCureRecordTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FlInversionFieldCureRecordTDS : global::System.Data.DataSet {
        
        private InversionFieldCureRecordDataTable tableInversionFieldCureRecord;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FlInversionFieldCureRecordTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FlInversionFieldCureRecordTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["InversionFieldCureRecord"] != null)) {
                    base.Tables.Add(new InversionFieldCureRecordDataTable(ds.Tables["InversionFieldCureRecord"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InversionFieldCureRecordDataTable InversionFieldCureRecord {
            get {
                return this.tableInversionFieldCureRecord;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FlInversionFieldCureRecordTDS cln = ((FlInversionFieldCureRecordTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["InversionFieldCureRecord"] != null)) {
                    base.Tables.Add(new InversionFieldCureRecordDataTable(ds.Tables["InversionFieldCureRecord"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableInversionFieldCureRecord = ((InversionFieldCureRecordDataTable)(base.Tables["InversionFieldCureRecord"]));
            if ((initTable == true)) {
                if ((this.tableInversionFieldCureRecord != null)) {
                    this.tableInversionFieldCureRecord.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FlInversionFieldCureRecordTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FlInversionFieldCureRecordTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableInversionFieldCureRecord = new InversionFieldCureRecordDataTable();
            base.Tables.Add(this.tableInversionFieldCureRecord);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInversionFieldCureRecord() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FlInversionFieldCureRecordTDS ds = new FlInversionFieldCureRecordTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void InversionFieldCureRecordRowChangeEventHandler(object sender, InversionFieldCureRecordRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InversionFieldCureRecordDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnReadingTime;
            
            private global::System.Data.DataColumn columnHeadFt;
            
            private global::System.Data.DataColumn columnBoilerInF;
            
            private global::System.Data.DataColumn columnBoilerOutF;
            
            private global::System.Data.DataColumn columnPumpFlow;
            
            private global::System.Data.DataColumn columnPumpPsi;
            
            private global::System.Data.DataColumn columnMH1Top;
            
            private global::System.Data.DataColumn columnMH1Bot;
            
            private global::System.Data.DataColumn columnMH2Top;
            
            private global::System.Data.DataColumn columnMH2Bot;
            
            private global::System.Data.DataColumn columnMH3Top;
            
            private global::System.Data.DataColumn columnMH3Bot;
            
            private global::System.Data.DataColumn columnMH4Top;
            
            private global::System.Data.DataColumn columnMH4Bot;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InversionFieldCureRecordDataTable() {
                this.TableName = "InversionFieldCureRecord";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InversionFieldCureRecordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InversionFieldCureRecordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReadingTimeColumn {
                get {
                    return this.columnReadingTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HeadFtColumn {
                get {
                    return this.columnHeadFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoilerInFColumn {
                get {
                    return this.columnBoilerInF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BoilerOutFColumn {
                get {
                    return this.columnBoilerOutF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpFlowColumn {
                get {
                    return this.columnPumpFlow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PumpPsiColumn {
                get {
                    return this.columnPumpPsi;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MH1TopColumn {
                get {
                    return this.columnMH1Top;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MH1BotColumn {
                get {
                    return this.columnMH1Bot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MH2TopColumn {
                get {
                    return this.columnMH2Top;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MH2BotColumn {
                get {
                    return this.columnMH2Bot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MH3TopColumn {
                get {
                    return this.columnMH3Top;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MH3BotColumn {
                get {
                    return this.columnMH3Bot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MH4TopColumn {
                get {
                    return this.columnMH4Top;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MH4BotColumn {
                get {
                    return this.columnMH4Bot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InversionFieldCureRecordRow this[int index] {
                get {
                    return ((InversionFieldCureRecordRow)(this.Rows[index]));
                }
            }
            
            public event InversionFieldCureRecordRowChangeEventHandler InversionFieldCureRecordRowChanging;
            
            public event InversionFieldCureRecordRowChangeEventHandler InversionFieldCureRecordRowChanged;
            
            public event InversionFieldCureRecordRowChangeEventHandler InversionFieldCureRecordRowDeleting;
            
            public event InversionFieldCureRecordRowChangeEventHandler InversionFieldCureRecordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInversionFieldCureRecordRow(InversionFieldCureRecordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InversionFieldCureRecordRow AddInversionFieldCureRecordRow(
                        int WorkID, 
                        int RefID, 
                        System.DateTime ReadingTime, 
                        decimal HeadFt, 
                        decimal BoilerInF, 
                        decimal BoilerOutF, 
                        decimal PumpFlow, 
                        decimal PumpPsi, 
                        decimal MH1Top, 
                        decimal MH1Bot, 
                        decimal MH2Top, 
                        decimal MH2Bot, 
                        decimal MH3Top, 
                        decimal MH3Bot, 
                        decimal MH4Top, 
                        decimal MH4Bot, 
                        string Comments, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase) {
                InversionFieldCureRecordRow rowInversionFieldCureRecordRow = ((InversionFieldCureRecordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        ReadingTime,
                        HeadFt,
                        BoilerInF,
                        BoilerOutF,
                        PumpFlow,
                        PumpPsi,
                        MH1Top,
                        MH1Bot,
                        MH2Top,
                        MH2Bot,
                        MH3Top,
                        MH3Bot,
                        MH4Top,
                        MH4Bot,
                        Comments,
                        Deleted,
                        COMPANY_ID,
                        InDatabase};
                rowInversionFieldCureRecordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInversionFieldCureRecordRow);
                return rowInversionFieldCureRecordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InversionFieldCureRecordRow FindByWorkIDRefID(int WorkID, int RefID) {
                return ((InversionFieldCureRecordRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InversionFieldCureRecordDataTable cln = ((InversionFieldCureRecordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InversionFieldCureRecordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnReadingTime = base.Columns["ReadingTime"];
                this.columnHeadFt = base.Columns["HeadFt"];
                this.columnBoilerInF = base.Columns["BoilerInF"];
                this.columnBoilerOutF = base.Columns["BoilerOutF"];
                this.columnPumpFlow = base.Columns["PumpFlow"];
                this.columnPumpPsi = base.Columns["PumpPsi"];
                this.columnMH1Top = base.Columns["MH1Top"];
                this.columnMH1Bot = base.Columns["MH1Bot"];
                this.columnMH2Top = base.Columns["MH2Top"];
                this.columnMH2Bot = base.Columns["MH2Bot"];
                this.columnMH3Top = base.Columns["MH3Top"];
                this.columnMH3Bot = base.Columns["MH3Bot"];
                this.columnMH4Top = base.Columns["MH4Top"];
                this.columnMH4Bot = base.Columns["MH4Bot"];
                this.columnComments = base.Columns["Comments"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnReadingTime = new global::System.Data.DataColumn("ReadingTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReadingTime);
                this.columnHeadFt = new global::System.Data.DataColumn("HeadFt", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeadFt);
                this.columnBoilerInF = new global::System.Data.DataColumn("BoilerInF", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoilerInF);
                this.columnBoilerOutF = new global::System.Data.DataColumn("BoilerOutF", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBoilerOutF);
                this.columnPumpFlow = new global::System.Data.DataColumn("PumpFlow", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpFlow);
                this.columnPumpPsi = new global::System.Data.DataColumn("PumpPsi", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPumpPsi);
                this.columnMH1Top = new global::System.Data.DataColumn("MH1Top", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMH1Top);
                this.columnMH1Bot = new global::System.Data.DataColumn("MH1Bot", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMH1Bot);
                this.columnMH2Top = new global::System.Data.DataColumn("MH2Top", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMH2Top);
                this.columnMH2Bot = new global::System.Data.DataColumn("MH2Bot", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMH2Bot);
                this.columnMH3Top = new global::System.Data.DataColumn("MH3Top", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMH3Top);
                this.columnMH3Bot = new global::System.Data.DataColumn("MH3Bot", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMH3Bot);
                this.columnMH4Top = new global::System.Data.DataColumn("MH4Top", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMH4Top);
                this.columnMH4Bot = new global::System.Data.DataColumn("MH4Bot", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMH4Bot);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnReadingTime.AllowDBNull = false;
                this.columnComments.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InversionFieldCureRecordRow NewInversionFieldCureRecordRow() {
                return ((InversionFieldCureRecordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InversionFieldCureRecordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InversionFieldCureRecordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InversionFieldCureRecordRowChanged != null)) {
                    this.InversionFieldCureRecordRowChanged(this, new InversionFieldCureRecordRowChangeEvent(((InversionFieldCureRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InversionFieldCureRecordRowChanging != null)) {
                    this.InversionFieldCureRecordRowChanging(this, new InversionFieldCureRecordRowChangeEvent(((InversionFieldCureRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InversionFieldCureRecordRowDeleted != null)) {
                    this.InversionFieldCureRecordRowDeleted(this, new InversionFieldCureRecordRowChangeEvent(((InversionFieldCureRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InversionFieldCureRecordRowDeleting != null)) {
                    this.InversionFieldCureRecordRowDeleting(this, new InversionFieldCureRecordRowChangeEvent(((InversionFieldCureRecordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInversionFieldCureRecordRow(InversionFieldCureRecordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlInversionFieldCureRecordTDS ds = new FlInversionFieldCureRecordTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InversionFieldCureRecordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InversionFieldCureRecordRow : global::System.Data.DataRow {
            
            private InversionFieldCureRecordDataTable tableInversionFieldCureRecord;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InversionFieldCureRecordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInversionFieldCureRecord = ((InversionFieldCureRecordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableInversionFieldCureRecord.WorkIDColumn]));
                }
                set {
                    this[this.tableInversionFieldCureRecord.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableInversionFieldCureRecord.RefIDColumn]));
                }
                set {
                    this[this.tableInversionFieldCureRecord.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReadingTime {
                get {
                    return ((global::System.DateTime)(this[this.tableInversionFieldCureRecord.ReadingTimeColumn]));
                }
                set {
                    this[this.tableInversionFieldCureRecord.ReadingTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HeadFt {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.HeadFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HeadFt\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.HeadFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BoilerInF {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.BoilerInFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BoilerInF\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.BoilerInFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BoilerOutF {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.BoilerOutFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BoilerOutF\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.BoilerOutFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PumpFlow {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.PumpFlowColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpFlow\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.PumpFlowColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PumpPsi {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.PumpPsiColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PumpPsi\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.PumpPsiColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MH1Top {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.MH1TopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MH1Top\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.MH1TopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MH1Bot {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.MH1BotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MH1Bot\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.MH1BotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MH2Top {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.MH2TopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MH2Top\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.MH2TopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MH2Bot {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.MH2BotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MH2Bot\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.MH2BotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MH3Top {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.MH3TopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MH3Top\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.MH3TopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MH3Bot {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.MH3BotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MH3Bot\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.MH3BotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MH4Top {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.MH4TopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MH4Top\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.MH4TopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MH4Bot {
                get {
                    try {
                        return ((decimal)(this[this.tableInversionFieldCureRecord.MH4BotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MH4Bot\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.MH4BotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableInversionFieldCureRecord.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableInversionFieldCureRecord.DeletedColumn]));
                }
                set {
                    this[this.tableInversionFieldCureRecord.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableInversionFieldCureRecord.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableInversionFieldCureRecord.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableInversionFieldCureRecord.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'InversionFieldCureRecord\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInversionFieldCureRecord.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHeadFtNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.HeadFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHeadFtNull() {
                this[this.tableInversionFieldCureRecord.HeadFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoilerInFNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.BoilerInFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoilerInFNull() {
                this[this.tableInversionFieldCureRecord.BoilerInFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBoilerOutFNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.BoilerOutFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBoilerOutFNull() {
                this[this.tableInversionFieldCureRecord.BoilerOutFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpFlowNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.PumpFlowColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpFlowNull() {
                this[this.tableInversionFieldCureRecord.PumpFlowColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPumpPsiNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.PumpPsiColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPumpPsiNull() {
                this[this.tableInversionFieldCureRecord.PumpPsiColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMH1TopNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.MH1TopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMH1TopNull() {
                this[this.tableInversionFieldCureRecord.MH1TopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMH1BotNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.MH1BotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMH1BotNull() {
                this[this.tableInversionFieldCureRecord.MH1BotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMH2TopNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.MH2TopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMH2TopNull() {
                this[this.tableInversionFieldCureRecord.MH2TopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMH2BotNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.MH2BotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMH2BotNull() {
                this[this.tableInversionFieldCureRecord.MH2BotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMH3TopNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.MH3TopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMH3TopNull() {
                this[this.tableInversionFieldCureRecord.MH3TopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMH3BotNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.MH3BotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMH3BotNull() {
                this[this.tableInversionFieldCureRecord.MH3BotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMH4TopNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.MH4TopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMH4TopNull() {
                this[this.tableInversionFieldCureRecord.MH4TopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMH4BotNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.MH4BotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMH4BotNull() {
                this[this.tableInversionFieldCureRecord.MH4BotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableInversionFieldCureRecord.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableInversionFieldCureRecord.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableInversionFieldCureRecord.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InversionFieldCureRecordRowChangeEvent : global::System.EventArgs {
            
            private InversionFieldCureRecordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InversionFieldCureRecordRowChangeEvent(InversionFieldCureRecordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InversionFieldCureRecordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591