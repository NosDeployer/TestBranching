//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.FullLengthLining {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FlOverviewReportTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class FlOverviewReportTDS : global::System.Data.DataSet {
        
        private OverviewReportDataTable tableOverviewReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FlOverviewReportTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected FlOverviewReportTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["OverviewReport"] != null)) {
                    base.Tables.Add(new OverviewReportDataTable(ds.Tables["OverviewReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OverviewReportDataTable OverviewReport {
            get {
                return this.tableOverviewReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FlOverviewReportTDS cln = ((FlOverviewReportTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["OverviewReport"] != null)) {
                    base.Tables.Add(new OverviewReportDataTable(ds.Tables["OverviewReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableOverviewReport = ((OverviewReportDataTable)(base.Tables["OverviewReport"]));
            if ((initTable == true)) {
                if ((this.tableOverviewReport != null)) {
                    this.tableOverviewReport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FlOverviewReportTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FlOverviewReportTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableOverviewReport = new OverviewReportDataTable();
            base.Tables.Add(this.tableOverviewReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOverviewReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FlOverviewReportTDS ds = new FlOverviewReportTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void OverviewReportRowChangeEventHandler(object sender, OverviewReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OverviewReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnSubArea;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnSize_;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnMapLength;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnP1Date;
            
            private global::System.Data.DataColumn columnCXIsRemoved;
            
            private global::System.Data.DataColumn columnLiveLats;
            
            private global::System.Data.DataColumn columnM1Date;
            
            private global::System.Data.DataColumn columnM2Date;
            
            private global::System.Data.DataColumn columnInstallDate;
            
            private global::System.Data.DataColumn columnFinalVideo;
            
            private global::System.Data.DataColumn columnIssueIdentified;
            
            private global::System.Data.DataColumn columnIssueSales;
            
            private global::System.Data.DataColumn columnIssueLFS;
            
            private global::System.Data.DataColumn columnIssueClient;
            
            private global::System.Data.DataColumn columnIssueGivenToClient;
            
            private global::System.Data.DataColumn columnIssueResolved;
            
            private global::System.Data.DataColumn columnFullLengthLining;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnCOMPANIES_ID;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnUSMHDescription;
            
            private global::System.Data.DataColumn columnDSMHDescription;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnCountryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverviewReportDataTable() {
                this.TableName = "OverviewReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OverviewReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OverviewReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaColumn {
                get {
                    return this.columnSubArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column {
                get {
                    return this.columnSize_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MapLengthColumn {
                get {
                    return this.columnMapLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P1DateColumn {
                get {
                    return this.columnP1Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CXIsRemovedColumn {
                get {
                    return this.columnCXIsRemoved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLatsColumn {
                get {
                    return this.columnLiveLats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M1DateColumn {
                get {
                    return this.columnM1Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M2DateColumn {
                get {
                    return this.columnM2Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstallDateColumn {
                get {
                    return this.columnInstallDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalVideoColumn {
                get {
                    return this.columnFinalVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueIdentifiedColumn {
                get {
                    return this.columnIssueIdentified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueSalesColumn {
                get {
                    return this.columnIssueSales;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueLFSColumn {
                get {
                    return this.columnIssueLFS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueClientColumn {
                get {
                    return this.columnIssueClient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueGivenToClientColumn {
                get {
                    return this.columnIssueGivenToClient;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueResolvedColumn {
                get {
                    return this.columnIssueResolved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FullLengthLiningColumn {
                get {
                    return this.columnFullLengthLining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANIES_IDColumn {
                get {
                    return this.columnCOMPANIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHDescriptionColumn {
                get {
                    return this.columnUSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHDescriptionColumn {
                get {
                    return this.columnDSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverviewReportRow this[int index] {
                get {
                    return ((OverviewReportRow)(this.Rows[index]));
                }
            }
            
            public event OverviewReportRowChangeEventHandler OverviewReportRowChanging;
            
            public event OverviewReportRowChangeEventHandler OverviewReportRowChanged;
            
            public event OverviewReportRowChangeEventHandler OverviewReportRowDeleting;
            
            public event OverviewReportRowChangeEventHandler OverviewReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOverviewReportRow(OverviewReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverviewReportRow AddOverviewReportRow(
                        int AssetID, 
                        int COMPANY_ID, 
                        int ProjectID, 
                        string ClientID, 
                        string SubArea, 
                        string Street, 
                        int USMH, 
                        int DSMH, 
                        string Size_, 
                        string Size, 
                        string MapLength, 
                        string Length, 
                        System.DateTime P1Date, 
                        string CXIsRemoved, 
                        double LiveLats, 
                        System.DateTime M1Date, 
                        System.DateTime M2Date, 
                        System.DateTime InstallDate, 
                        System.DateTime FinalVideo, 
                        bool IssueIdentified, 
                        bool IssueSales, 
                        bool IssueLFS, 
                        bool IssueClient, 
                        bool IssueGivenToClient, 
                        bool IssueResolved, 
                        bool FullLengthLining, 
                        string NAME, 
                        string COMPANIES_ID, 
                        string SectionID, 
                        string USMHDescription, 
                        string DSMHDescription, 
                        string ProjectName, 
                        string FlowOrderID, 
                        string CountryName) {
                OverviewReportRow rowOverviewReportRow = ((OverviewReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        COMPANY_ID,
                        ProjectID,
                        ClientID,
                        SubArea,
                        Street,
                        USMH,
                        DSMH,
                        Size_,
                        Size,
                        MapLength,
                        Length,
                        P1Date,
                        CXIsRemoved,
                        LiveLats,
                        M1Date,
                        M2Date,
                        InstallDate,
                        FinalVideo,
                        IssueIdentified,
                        IssueSales,
                        IssueLFS,
                        IssueClient,
                        IssueGivenToClient,
                        IssueResolved,
                        FullLengthLining,
                        NAME,
                        COMPANIES_ID,
                        SectionID,
                        USMHDescription,
                        DSMHDescription,
                        ProjectName,
                        FlowOrderID,
                        CountryName};
                rowOverviewReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOverviewReportRow);
                return rowOverviewReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverviewReportRow FindByProjectIDCOMPANY_IDAssetID(int ProjectID, int COMPANY_ID, int AssetID) {
                return ((OverviewReportRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            COMPANY_ID,
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OverviewReportDataTable cln = ((OverviewReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OverviewReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnSubArea = base.Columns["SubArea"];
                this.columnStreet = base.Columns["Street"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnSize = base.Columns["Size"];
                this.columnMapLength = base.Columns["MapLength"];
                this.columnLength = base.Columns["Length"];
                this.columnP1Date = base.Columns["P1Date"];
                this.columnCXIsRemoved = base.Columns["CXIsRemoved"];
                this.columnLiveLats = base.Columns["LiveLats"];
                this.columnM1Date = base.Columns["M1Date"];
                this.columnM2Date = base.Columns["M2Date"];
                this.columnInstallDate = base.Columns["InstallDate"];
                this.columnFinalVideo = base.Columns["FinalVideo"];
                this.columnIssueIdentified = base.Columns["IssueIdentified"];
                this.columnIssueSales = base.Columns["IssueSales"];
                this.columnIssueLFS = base.Columns["IssueLFS"];
                this.columnIssueClient = base.Columns["IssueClient"];
                this.columnIssueGivenToClient = base.Columns["IssueGivenToClient"];
                this.columnIssueResolved = base.Columns["IssueResolved"];
                this.columnFullLengthLining = base.Columns["FullLengthLining"];
                this.columnNAME = base.Columns["NAME"];
                this.columnCOMPANIES_ID = base.Columns["COMPANIES_ID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnUSMHDescription = base.Columns["USMHDescription"];
                this.columnDSMHDescription = base.Columns["DSMHDescription"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnCountryName = base.Columns["CountryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnSubArea = new global::System.Data.DataColumn("SubArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubArea);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnMapLength = new global::System.Data.DataColumn("MapLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapLength);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnP1Date = new global::System.Data.DataColumn("P1Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP1Date);
                this.columnCXIsRemoved = new global::System.Data.DataColumn("CXIsRemoved", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCXIsRemoved);
                this.columnLiveLats = new global::System.Data.DataColumn("LiveLats", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLats);
                this.columnM1Date = new global::System.Data.DataColumn("M1Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM1Date);
                this.columnM2Date = new global::System.Data.DataColumn("M2Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM2Date);
                this.columnInstallDate = new global::System.Data.DataColumn("InstallDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstallDate);
                this.columnFinalVideo = new global::System.Data.DataColumn("FinalVideo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalVideo);
                this.columnIssueIdentified = new global::System.Data.DataColumn("IssueIdentified", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueIdentified);
                this.columnIssueSales = new global::System.Data.DataColumn("IssueSales", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueSales);
                this.columnIssueLFS = new global::System.Data.DataColumn("IssueLFS", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueLFS);
                this.columnIssueClient = new global::System.Data.DataColumn("IssueClient", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueClient);
                this.columnIssueGivenToClient = new global::System.Data.DataColumn("IssueGivenToClient", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueGivenToClient);
                this.columnIssueResolved = new global::System.Data.DataColumn("IssueResolved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueResolved);
                this.columnFullLengthLining = new global::System.Data.DataColumn("FullLengthLining", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullLengthLining);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnCOMPANIES_ID = new global::System.Data.DataColumn("COMPANIES_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANIES_ID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnUSMHDescription = new global::System.Data.DataColumn("USMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHDescription);
                this.columnDSMHDescription = new global::System.Data.DataColumn("DSMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHDescription);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnCountryName = new global::System.Data.DataColumn("CountryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnCOMPANY_ID,
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
                this.columnIssueSales.Caption = "SalesIssue";
                this.columnIssueLFS.Caption = "LFSIssue";
                this.columnIssueClient.Caption = "ClientIssue";
                this.columnIssueGivenToClient.Caption = "IssueGivenToBayCity";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverviewReportRow NewOverviewReportRow() {
                return ((OverviewReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OverviewReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OverviewReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OverviewReportRowChanged != null)) {
                    this.OverviewReportRowChanged(this, new OverviewReportRowChangeEvent(((OverviewReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OverviewReportRowChanging != null)) {
                    this.OverviewReportRowChanging(this, new OverviewReportRowChangeEvent(((OverviewReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OverviewReportRowDeleted != null)) {
                    this.OverviewReportRowDeleted(this, new OverviewReportRowChangeEvent(((OverviewReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OverviewReportRowDeleting != null)) {
                    this.OverviewReportRowDeleting(this, new OverviewReportRowChangeEvent(((OverviewReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOverviewReportRow(OverviewReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FlOverviewReportTDS ds = new FlOverviewReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OverviewReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OverviewReportRow : global::System.Data.DataRow {
            
            private OverviewReportDataTable tableOverviewReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OverviewReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOverviewReport = ((OverviewReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableOverviewReport.AssetIDColumn]));
                }
                set {
                    this[this.tableOverviewReport.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableOverviewReport.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableOverviewReport.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableOverviewReport.ProjectIDColumn]));
                }
                set {
                    this[this.tableOverviewReport.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientID {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubArea {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.SubAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubArea\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.SubAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USMH {
                get {
                    try {
                        return ((int)(this[this.tableOverviewReport.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DSMH {
                get {
                    try {
                        return ((int)(this[this.tableOverviewReport.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_ {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.Size_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MapLength {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.MapLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MapLength\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.MapLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime P1Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOverviewReport.P1DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P1Date\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.P1DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CXIsRemoved {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.CXIsRemovedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CXIsRemoved\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.CXIsRemovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LiveLats {
                get {
                    try {
                        return ((double)(this[this.tableOverviewReport.LiveLatsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLats\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.LiveLatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime M1Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOverviewReport.M1DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M1Date\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.M1DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime M2Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOverviewReport.M2DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M2Date\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.M2DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InstallDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOverviewReport.InstallDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstallDate\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.InstallDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalVideo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOverviewReport.FinalVideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalVideo\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.FinalVideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueIdentified {
                get {
                    try {
                        return ((bool)(this[this.tableOverviewReport.IssueIdentifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueIdentified\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.IssueIdentifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueSales {
                get {
                    try {
                        return ((bool)(this[this.tableOverviewReport.IssueSalesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueSales\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.IssueSalesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueLFS {
                get {
                    try {
                        return ((bool)(this[this.tableOverviewReport.IssueLFSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueLFS\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.IssueLFSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueClient {
                get {
                    try {
                        return ((bool)(this[this.tableOverviewReport.IssueClientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueClient\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.IssueClientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueGivenToClient {
                get {
                    try {
                        return ((bool)(this[this.tableOverviewReport.IssueGivenToClientColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueGivenToClient\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.IssueGivenToClientColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssueResolved {
                get {
                    try {
                        return ((bool)(this[this.tableOverviewReport.IssueResolvedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IssueResolved\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.IssueResolvedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FullLengthLining {
                get {
                    try {
                        return ((bool)(this[this.tableOverviewReport.FullLengthLiningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FullLengthLining\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.FullLengthLiningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANIES_ID {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.COMPANIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANIES_ID\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.COMPANIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.USMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHDescription\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.USMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.DSMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHDescription\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.DSMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    try {
                        return ((string)(this[this.tableOverviewReport.CountryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryName\' in table \'OverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOverviewReport.CountryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableOverviewReport.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableOverviewReport.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaNull() {
                return this.IsNull(this.tableOverviewReport.SubAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaNull() {
                this[this.tableOverviewReport.SubAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableOverviewReport.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableOverviewReport.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableOverviewReport.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableOverviewReport.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableOverviewReport.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableOverviewReport.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null() {
                return this.IsNull(this.tableOverviewReport.Size_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null() {
                this[this.tableOverviewReport.Size_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableOverviewReport.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableOverviewReport.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMapLengthNull() {
                return this.IsNull(this.tableOverviewReport.MapLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMapLengthNull() {
                this[this.tableOverviewReport.MapLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableOverviewReport.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableOverviewReport.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP1DateNull() {
                return this.IsNull(this.tableOverviewReport.P1DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP1DateNull() {
                this[this.tableOverviewReport.P1DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCXIsRemovedNull() {
                return this.IsNull(this.tableOverviewReport.CXIsRemovedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCXIsRemovedNull() {
                this[this.tableOverviewReport.CXIsRemovedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLatsNull() {
                return this.IsNull(this.tableOverviewReport.LiveLatsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLatsNull() {
                this[this.tableOverviewReport.LiveLatsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM1DateNull() {
                return this.IsNull(this.tableOverviewReport.M1DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM1DateNull() {
                this[this.tableOverviewReport.M1DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM2DateNull() {
                return this.IsNull(this.tableOverviewReport.M2DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM2DateNull() {
                this[this.tableOverviewReport.M2DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstallDateNull() {
                return this.IsNull(this.tableOverviewReport.InstallDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstallDateNull() {
                this[this.tableOverviewReport.InstallDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalVideoNull() {
                return this.IsNull(this.tableOverviewReport.FinalVideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalVideoNull() {
                this[this.tableOverviewReport.FinalVideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueIdentifiedNull() {
                return this.IsNull(this.tableOverviewReport.IssueIdentifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueIdentifiedNull() {
                this[this.tableOverviewReport.IssueIdentifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueSalesNull() {
                return this.IsNull(this.tableOverviewReport.IssueSalesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueSalesNull() {
                this[this.tableOverviewReport.IssueSalesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueLFSNull() {
                return this.IsNull(this.tableOverviewReport.IssueLFSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueLFSNull() {
                this[this.tableOverviewReport.IssueLFSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueClientNull() {
                return this.IsNull(this.tableOverviewReport.IssueClientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueClientNull() {
                this[this.tableOverviewReport.IssueClientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueGivenToClientNull() {
                return this.IsNull(this.tableOverviewReport.IssueGivenToClientColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueGivenToClientNull() {
                this[this.tableOverviewReport.IssueGivenToClientColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueResolvedNull() {
                return this.IsNull(this.tableOverviewReport.IssueResolvedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueResolvedNull() {
                this[this.tableOverviewReport.IssueResolvedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullLengthLiningNull() {
                return this.IsNull(this.tableOverviewReport.FullLengthLiningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullLengthLiningNull() {
                this[this.tableOverviewReport.FullLengthLiningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableOverviewReport.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableOverviewReport.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANIES_IDNull() {
                return this.IsNull(this.tableOverviewReport.COMPANIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANIES_IDNull() {
                this[this.tableOverviewReport.COMPANIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableOverviewReport.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableOverviewReport.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHDescriptionNull() {
                return this.IsNull(this.tableOverviewReport.USMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHDescriptionNull() {
                this[this.tableOverviewReport.USMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHDescriptionNull() {
                return this.IsNull(this.tableOverviewReport.DSMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHDescriptionNull() {
                this[this.tableOverviewReport.DSMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableOverviewReport.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableOverviewReport.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableOverviewReport.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableOverviewReport.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNameNull() {
                return this.IsNull(this.tableOverviewReport.CountryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNameNull() {
                this[this.tableOverviewReport.CountryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OverviewReportRowChangeEvent : global::System.EventArgs {
            
            private OverviewReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverviewReportRowChangeEvent(OverviewReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OverviewReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591