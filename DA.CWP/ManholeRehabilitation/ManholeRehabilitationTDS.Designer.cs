//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.ManholeRehabilitation {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ManholeRehabilitationTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ManholeRehabilitationTDS : global::System.Data.DataSet {
        
        private CommentDetailsDataTable tableCommentDetails;
        
        private WorkDetailsDataTable tableWorkDetails;
        
        private ManholeDetailsDataTable tableManholeDetails;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ManholeRehabilitationTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ManholeRehabilitationTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CommentDetails"] != null)) {
                    base.Tables.Add(new CommentDetailsDataTable(ds.Tables["CommentDetails"]));
                }
                if ((ds.Tables["WorkDetails"] != null)) {
                    base.Tables.Add(new WorkDetailsDataTable(ds.Tables["WorkDetails"]));
                }
                if ((ds.Tables["ManholeDetails"] != null)) {
                    base.Tables.Add(new ManholeDetailsDataTable(ds.Tables["ManholeDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CommentDetailsDataTable CommentDetails {
            get {
                return this.tableCommentDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WorkDetailsDataTable WorkDetails {
            get {
                return this.tableWorkDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ManholeDetailsDataTable ManholeDetails {
            get {
                return this.tableManholeDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ManholeRehabilitationTDS cln = ((ManholeRehabilitationTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CommentDetails"] != null)) {
                    base.Tables.Add(new CommentDetailsDataTable(ds.Tables["CommentDetails"]));
                }
                if ((ds.Tables["WorkDetails"] != null)) {
                    base.Tables.Add(new WorkDetailsDataTable(ds.Tables["WorkDetails"]));
                }
                if ((ds.Tables["ManholeDetails"] != null)) {
                    base.Tables.Add(new ManholeDetailsDataTable(ds.Tables["ManholeDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCommentDetails = ((CommentDetailsDataTable)(base.Tables["CommentDetails"]));
            if ((initTable == true)) {
                if ((this.tableCommentDetails != null)) {
                    this.tableCommentDetails.InitVars();
                }
            }
            this.tableWorkDetails = ((WorkDetailsDataTable)(base.Tables["WorkDetails"]));
            if ((initTable == true)) {
                if ((this.tableWorkDetails != null)) {
                    this.tableWorkDetails.InitVars();
                }
            }
            this.tableManholeDetails = ((ManholeDetailsDataTable)(base.Tables["ManholeDetails"]));
            if ((initTable == true)) {
                if ((this.tableManholeDetails != null)) {
                    this.tableManholeDetails.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ManholeRehabilitationTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ManholeRehabilitationTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCommentDetails = new CommentDetailsDataTable();
            base.Tables.Add(this.tableCommentDetails);
            this.tableWorkDetails = new WorkDetailsDataTable();
            base.Tables.Add(this.tableWorkDetails);
            this.tableManholeDetails = new ManholeDetailsDataTable();
            base.Tables.Add(this.tableManholeDetails);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCommentDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWorkDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeManholeDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ManholeRehabilitationTDS ds = new ManholeRehabilitationTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CommentDetailsRowChangeEventHandler(object sender, CommentDetailsRowChangeEvent e);
        
        public delegate void WorkDetailsRowChangeEventHandler(object sender, WorkDetailsRowChangeEvent e);
        
        public delegate void ManholeDetailsRowChangeEventHandler(object sender, ManholeDetailsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CommentDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnUserFullName;
            
            private global::System.Data.DataColumn columnToHistory;
            
            private global::System.Data.DataColumn columnWorkType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsDataTable() {
                this.TableName = "CommentDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CommentDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CommentDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn {
                get {
                    return this.columnLIBRARY_FILES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserFullNameColumn {
                get {
                    return this.columnUserFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToHistoryColumn {
                get {
                    return this.columnToHistory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkTypeColumn {
                get {
                    return this.columnWorkType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow this[int index] {
                get {
                    return ((CommentDetailsRow)(this.Rows[index]));
                }
            }
            
            public event CommentDetailsRowChangeEventHandler CommentDetailsRowChanging;
            
            public event CommentDetailsRowChangeEventHandler CommentDetailsRowChanged;
            
            public event CommentDetailsRowChangeEventHandler CommentDetailsRowDeleting;
            
            public event CommentDetailsRowChangeEventHandler CommentDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCommentDetailsRow(CommentDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow AddCommentDetailsRow(int WorkID, int RefID, string Type, string Subject, int UserID, System.DateTime DateTime_, string Comment, int LIBRARY_FILES_ID, bool Deleted, int COMPANY_ID, bool InDatabase, string UserFullName, bool ToHistory, string WorkType) {
                CommentDetailsRow rowCommentDetailsRow = ((CommentDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RefID,
                        Type,
                        Subject,
                        UserID,
                        DateTime_,
                        Comment,
                        LIBRARY_FILES_ID,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UserFullName,
                        ToHistory,
                        WorkType};
                rowCommentDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCommentDetailsRow);
                return rowCommentDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow FindByWorkIDRefID(int WorkID, int RefID) {
                return ((CommentDetailsRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CommentDetailsDataTable cln = ((CommentDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CommentDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnType = base.Columns["Type"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnComment = base.Columns["Comment"];
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUserFullName = base.Columns["UserFullName"];
                this.columnToHistory = base.Columns["ToHistory"];
                this.columnWorkType = base.Columns["WorkType"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUserFullName = new global::System.Data.DataColumn("UserFullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserFullName);
                this.columnToHistory = new global::System.Data.DataColumn("ToHistory", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToHistory);
                this.columnWorkType = new global::System.Data.DataColumn("WorkType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRefID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnType.MaxLength = 50;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 255;
                this.columnUserID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow NewCommentDetailsRow() {
                return ((CommentDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CommentDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CommentDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CommentDetailsRowChanged != null)) {
                    this.CommentDetailsRowChanged(this, new CommentDetailsRowChangeEvent(((CommentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CommentDetailsRowChanging != null)) {
                    this.CommentDetailsRowChanging(this, new CommentDetailsRowChangeEvent(((CommentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CommentDetailsRowDeleted != null)) {
                    this.CommentDetailsRowDeleted(this, new CommentDetailsRowChangeEvent(((CommentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CommentDetailsRowDeleting != null)) {
                    this.CommentDetailsRowDeleting(this, new CommentDetailsRowChangeEvent(((CommentDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCommentDetailsRow(CommentDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ManholeRehabilitationTDS ds = new ManholeRehabilitationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CommentDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WorkDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnPreppedDate;
            
            private global::System.Data.DataColumn columnSprayedDate;
            
            private global::System.Data.DataColumn columnBatchID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnComments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsDataTable() {
                this.TableName = "WorkDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WorkDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreppedDateColumn {
                get {
                    return this.columnPreppedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SprayedDateColumn {
                get {
                    return this.columnSprayedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchIDColumn {
                get {
                    return this.columnBatchID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow this[int index] {
                get {
                    return ((WorkDetailsRow)(this.Rows[index]));
                }
            }
            
            public event WorkDetailsRowChangeEventHandler WorkDetailsRowChanging;
            
            public event WorkDetailsRowChangeEventHandler WorkDetailsRowChanged;
            
            public event WorkDetailsRowChangeEventHandler WorkDetailsRowDeleting;
            
            public event WorkDetailsRowChangeEventHandler WorkDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWorkDetailsRow(WorkDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow AddWorkDetailsRow(int WorkID, System.DateTime PreppedDate, System.DateTime SprayedDate, int BatchID, bool Deleted, int COMPANY_ID, System.DateTime Date, string Description, string Comments) {
                WorkDetailsRow rowWorkDetailsRow = ((WorkDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        PreppedDate,
                        SprayedDate,
                        BatchID,
                        Deleted,
                        COMPANY_ID,
                        Date,
                        Description,
                        Comments};
                rowWorkDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWorkDetailsRow);
                return rowWorkDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow FindByWorkID(int WorkID) {
                return ((WorkDetailsRow)(this.Rows.Find(new object[] {
                            WorkID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WorkDetailsDataTable cln = ((WorkDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WorkDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnPreppedDate = base.Columns["PreppedDate"];
                this.columnSprayedDate = base.Columns["SprayedDate"];
                this.columnBatchID = base.Columns["BatchID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnDate = base.Columns["Date"];
                this.columnDescription = base.Columns["Description"];
                this.columnComments = base.Columns["Comments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnPreppedDate = new global::System.Data.DataColumn("PreppedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreppedDate);
                this.columnSprayedDate = new global::System.Data.DataColumn("SprayedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSprayedDate);
                this.columnBatchID = new global::System.Data.DataColumn("BatchID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnWorkID.Unique = true;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow NewWorkDetailsRow() {
                return ((WorkDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WorkDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WorkDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WorkDetailsRowChanged != null)) {
                    this.WorkDetailsRowChanged(this, new WorkDetailsRowChangeEvent(((WorkDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WorkDetailsRowChanging != null)) {
                    this.WorkDetailsRowChanging(this, new WorkDetailsRowChangeEvent(((WorkDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WorkDetailsRowDeleted != null)) {
                    this.WorkDetailsRowDeleted(this, new WorkDetailsRowChangeEvent(((WorkDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WorkDetailsRowDeleting != null)) {
                    this.WorkDetailsRowDeleting(this, new WorkDetailsRowChangeEvent(((WorkDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWorkDetailsRow(WorkDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ManholeRehabilitationTDS ds = new ManholeRehabilitationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WorkDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ManholeDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnMHID;
            
            private global::System.Data.DataColumn columnLatitud;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnManholeShape;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnTopDiameter;
            
            private global::System.Data.DataColumn columnTopDepth;
            
            private global::System.Data.DataColumn columnTopFloor;
            
            private global::System.Data.DataColumn columnTopCeiling;
            
            private global::System.Data.DataColumn columnTopBenching;
            
            private global::System.Data.DataColumn columnDownDiameter;
            
            private global::System.Data.DataColumn columnDownDepth;
            
            private global::System.Data.DataColumn columnDownFloor;
            
            private global::System.Data.DataColumn columnDownCeiling;
            
            private global::System.Data.DataColumn columnDownBenching;
            
            private global::System.Data.DataColumn columnRectangle1LongSide;
            
            private global::System.Data.DataColumn columnRectangle1ShortSide;
            
            private global::System.Data.DataColumn columnRectangle2LongSide;
            
            private global::System.Data.DataColumn columnRectangle2ShortSide;
            
            private global::System.Data.DataColumn columnTopSurfaceArea;
            
            private global::System.Data.DataColumn columnDownSurfaceArea;
            
            private global::System.Data.DataColumn columnManholeRugs;
            
            private global::System.Data.DataColumn columnTotalDepth;
            
            private global::System.Data.DataColumn columnTotalSurfaceArea;
            
            private global::System.Data.DataColumn columnConditionRating;
            
            private global::System.Data.DataColumn columnMaterialDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManholeDetailsDataTable() {
                this.TableName = "ManholeDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ManholeDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ManholeDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHIDColumn {
                get {
                    return this.columnMHID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudColumn {
                get {
                    return this.columnLatitud;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManholeShapeColumn {
                get {
                    return this.columnManholeShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopDiameterColumn {
                get {
                    return this.columnTopDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopDepthColumn {
                get {
                    return this.columnTopDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopFloorColumn {
                get {
                    return this.columnTopFloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopCeilingColumn {
                get {
                    return this.columnTopCeiling;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopBenchingColumn {
                get {
                    return this.columnTopBenching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownDiameterColumn {
                get {
                    return this.columnDownDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownDepthColumn {
                get {
                    return this.columnDownDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownFloorColumn {
                get {
                    return this.columnDownFloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownCeilingColumn {
                get {
                    return this.columnDownCeiling;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownBenchingColumn {
                get {
                    return this.columnDownBenching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rectangle1LongSideColumn {
                get {
                    return this.columnRectangle1LongSide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rectangle1ShortSideColumn {
                get {
                    return this.columnRectangle1ShortSide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rectangle2LongSideColumn {
                get {
                    return this.columnRectangle2LongSide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rectangle2ShortSideColumn {
                get {
                    return this.columnRectangle2ShortSide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopSurfaceAreaColumn {
                get {
                    return this.columnTopSurfaceArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownSurfaceAreaColumn {
                get {
                    return this.columnDownSurfaceArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManholeRugsColumn {
                get {
                    return this.columnManholeRugs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDepthColumn {
                get {
                    return this.columnTotalDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSurfaceAreaColumn {
                get {
                    return this.columnTotalSurfaceArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionRatingColumn {
                get {
                    return this.columnConditionRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialDescriptionColumn {
                get {
                    return this.columnMaterialDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManholeDetailsRow this[int index] {
                get {
                    return ((ManholeDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ManholeDetailsRowChangeEventHandler ManholeDetailsRowChanging;
            
            public event ManholeDetailsRowChangeEventHandler ManholeDetailsRowChanged;
            
            public event ManholeDetailsRowChangeEventHandler ManholeDetailsRowDeleting;
            
            public event ManholeDetailsRowChangeEventHandler ManholeDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddManholeDetailsRow(ManholeDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManholeDetailsRow AddManholeDetailsRow(
                        int AssetID, 
                        string MHID, 
                        string Latitud, 
                        string Longitude, 
                        string Address, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string ManholeShape, 
                        string Location, 
                        int MaterialID, 
                        string TopDiameter, 
                        string TopDepth, 
                        string TopFloor, 
                        string TopCeiling, 
                        string TopBenching, 
                        string DownDiameter, 
                        string DownDepth, 
                        string DownFloor, 
                        string DownCeiling, 
                        string DownBenching, 
                        string Rectangle1LongSide, 
                        string Rectangle1ShortSide, 
                        string Rectangle2LongSide, 
                        string Rectangle2ShortSide, 
                        string TopSurfaceArea, 
                        string DownSurfaceArea, 
                        int ManholeRugs, 
                        string TotalDepth, 
                        string TotalSurfaceArea, 
                        int ConditionRating, 
                        string MaterialDescription) {
                ManholeDetailsRow rowManholeDetailsRow = ((ManholeDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        MHID,
                        Latitud,
                        Longitude,
                        Address,
                        Deleted,
                        COMPANY_ID,
                        ManholeShape,
                        Location,
                        MaterialID,
                        TopDiameter,
                        TopDepth,
                        TopFloor,
                        TopCeiling,
                        TopBenching,
                        DownDiameter,
                        DownDepth,
                        DownFloor,
                        DownCeiling,
                        DownBenching,
                        Rectangle1LongSide,
                        Rectangle1ShortSide,
                        Rectangle2LongSide,
                        Rectangle2ShortSide,
                        TopSurfaceArea,
                        DownSurfaceArea,
                        ManholeRugs,
                        TotalDepth,
                        TotalSurfaceArea,
                        ConditionRating,
                        MaterialDescription};
                rowManholeDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowManholeDetailsRow);
                return rowManholeDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManholeDetailsRow FindByAssetID(int AssetID) {
                return ((ManholeDetailsRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ManholeDetailsDataTable cln = ((ManholeDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ManholeDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnMHID = base.Columns["MHID"];
                this.columnLatitud = base.Columns["Latitud"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnAddress = base.Columns["Address"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnManholeShape = base.Columns["ManholeShape"];
                this.columnLocation = base.Columns["Location"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnTopDiameter = base.Columns["TopDiameter"];
                this.columnTopDepth = base.Columns["TopDepth"];
                this.columnTopFloor = base.Columns["TopFloor"];
                this.columnTopCeiling = base.Columns["TopCeiling"];
                this.columnTopBenching = base.Columns["TopBenching"];
                this.columnDownDiameter = base.Columns["DownDiameter"];
                this.columnDownDepth = base.Columns["DownDepth"];
                this.columnDownFloor = base.Columns["DownFloor"];
                this.columnDownCeiling = base.Columns["DownCeiling"];
                this.columnDownBenching = base.Columns["DownBenching"];
                this.columnRectangle1LongSide = base.Columns["Rectangle1LongSide"];
                this.columnRectangle1ShortSide = base.Columns["Rectangle1ShortSide"];
                this.columnRectangle2LongSide = base.Columns["Rectangle2LongSide"];
                this.columnRectangle2ShortSide = base.Columns["Rectangle2ShortSide"];
                this.columnTopSurfaceArea = base.Columns["TopSurfaceArea"];
                this.columnDownSurfaceArea = base.Columns["DownSurfaceArea"];
                this.columnManholeRugs = base.Columns["ManholeRugs"];
                this.columnTotalDepth = base.Columns["TotalDepth"];
                this.columnTotalSurfaceArea = base.Columns["TotalSurfaceArea"];
                this.columnConditionRating = base.Columns["ConditionRating"];
                this.columnMaterialDescription = base.Columns["MaterialDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnMHID = new global::System.Data.DataColumn("MHID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHID);
                this.columnLatitud = new global::System.Data.DataColumn("Latitud", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitud);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnManholeShape = new global::System.Data.DataColumn("ManholeShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManholeShape);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnTopDiameter = new global::System.Data.DataColumn("TopDiameter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopDiameter);
                this.columnTopDepth = new global::System.Data.DataColumn("TopDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopDepth);
                this.columnTopFloor = new global::System.Data.DataColumn("TopFloor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopFloor);
                this.columnTopCeiling = new global::System.Data.DataColumn("TopCeiling", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopCeiling);
                this.columnTopBenching = new global::System.Data.DataColumn("TopBenching", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopBenching);
                this.columnDownDiameter = new global::System.Data.DataColumn("DownDiameter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownDiameter);
                this.columnDownDepth = new global::System.Data.DataColumn("DownDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownDepth);
                this.columnDownFloor = new global::System.Data.DataColumn("DownFloor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownFloor);
                this.columnDownCeiling = new global::System.Data.DataColumn("DownCeiling", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownCeiling);
                this.columnDownBenching = new global::System.Data.DataColumn("DownBenching", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownBenching);
                this.columnRectangle1LongSide = new global::System.Data.DataColumn("Rectangle1LongSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRectangle1LongSide);
                this.columnRectangle1ShortSide = new global::System.Data.DataColumn("Rectangle1ShortSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRectangle1ShortSide);
                this.columnRectangle2LongSide = new global::System.Data.DataColumn("Rectangle2LongSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRectangle2LongSide);
                this.columnRectangle2ShortSide = new global::System.Data.DataColumn("Rectangle2ShortSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRectangle2ShortSide);
                this.columnTopSurfaceArea = new global::System.Data.DataColumn("TopSurfaceArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopSurfaceArea);
                this.columnDownSurfaceArea = new global::System.Data.DataColumn("DownSurfaceArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownSurfaceArea);
                this.columnManholeRugs = new global::System.Data.DataColumn("ManholeRugs", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManholeRugs);
                this.columnTotalDepth = new global::System.Data.DataColumn("TotalDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDepth);
                this.columnTotalSurfaceArea = new global::System.Data.DataColumn("TotalSurfaceArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSurfaceArea);
                this.columnConditionRating = new global::System.Data.DataColumn("ConditionRating", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionRating);
                this.columnMaterialDescription = new global::System.Data.DataColumn("MaterialDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnMHID.AllowDBNull = false;
                this.columnMHID.MaxLength = 50;
                this.columnLatitud.MaxLength = 25;
                this.columnLongitude.MaxLength = 25;
                this.columnAddress.MaxLength = 100;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnManholeShape.MaxLength = 50;
                this.columnLocation.MaxLength = 25;
                this.columnTopDiameter.MaxLength = 25;
                this.columnTopDepth.MaxLength = 25;
                this.columnTopFloor.MaxLength = 25;
                this.columnTopCeiling.MaxLength = 25;
                this.columnTopBenching.MaxLength = 25;
                this.columnDownDepth.MaxLength = 25;
                this.columnDownFloor.MaxLength = 25;
                this.columnDownCeiling.MaxLength = 25;
                this.columnDownBenching.MaxLength = 25;
                this.columnRectangle1LongSide.MaxLength = 25;
                this.columnRectangle1ShortSide.MaxLength = 25;
                this.columnRectangle2LongSide.MaxLength = 25;
                this.columnRectangle2ShortSide.MaxLength = 25;
                this.columnTopSurfaceArea.MaxLength = 25;
                this.columnDownSurfaceArea.MaxLength = 25;
                this.columnTotalDepth.MaxLength = 25;
                this.columnTotalSurfaceArea.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManholeDetailsRow NewManholeDetailsRow() {
                return ((ManholeDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ManholeDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ManholeDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ManholeDetailsRowChanged != null)) {
                    this.ManholeDetailsRowChanged(this, new ManholeDetailsRowChangeEvent(((ManholeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ManholeDetailsRowChanging != null)) {
                    this.ManholeDetailsRowChanging(this, new ManholeDetailsRowChangeEvent(((ManholeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ManholeDetailsRowDeleted != null)) {
                    this.ManholeDetailsRowDeleted(this, new ManholeDetailsRowChangeEvent(((ManholeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ManholeDetailsRowDeleting != null)) {
                    this.ManholeDetailsRowDeleting(this, new ManholeDetailsRowChangeEvent(((ManholeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveManholeDetailsRow(ManholeDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ManholeRehabilitationTDS ds = new ManholeRehabilitationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ManholeDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CommentDetailsRow : global::System.Data.DataRow {
            
            private CommentDetailsDataTable tableCommentDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CommentDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCommentDetails = ((CommentDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableCommentDetails.WorkIDColumn]));
                }
                set {
                    this[this.tableCommentDetails.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCommentDetails.RefIDColumn]));
                }
                set {
                    this[this.tableCommentDetails.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableCommentDetails.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentDetails.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    return ((string)(this[this.tableCommentDetails.SubjectColumn]));
                }
                set {
                    this[this.tableCommentDetails.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableCommentDetails.UserIDColumn]));
                }
                set {
                    this[this.tableCommentDetails.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCommentDetails.DateTime_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTime_\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentDetails.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableCommentDetails.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentDetails.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID {
                get {
                    try {
                        return ((int)(this[this.tableCommentDetails.LIBRARY_FILES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_FILES_ID\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentDetails.LIBRARY_FILES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCommentDetails.DeletedColumn]));
                }
                set {
                    this[this.tableCommentDetails.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCommentDetails.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCommentDetails.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCommentDetails.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentDetails.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserFullName {
                get {
                    try {
                        return ((string)(this[this.tableCommentDetails.UserFullNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserFullName\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentDetails.UserFullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ToHistory {
                get {
                    try {
                        return ((bool)(this[this.tableCommentDetails.ToHistoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToHistory\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentDetails.ToHistoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkType {
                get {
                    try {
                        return ((string)(this[this.tableCommentDetails.WorkTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkType\' in table \'CommentDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommentDetails.WorkTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableCommentDetails.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableCommentDetails.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTime_Null() {
                return this.IsNull(this.tableCommentDetails.DateTime_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTime_Null() {
                this[this.tableCommentDetails.DateTime_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableCommentDetails.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableCommentDetails.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_FILES_IDNull() {
                return this.IsNull(this.tableCommentDetails.LIBRARY_FILES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_FILES_IDNull() {
                this[this.tableCommentDetails.LIBRARY_FILES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCommentDetails.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCommentDetails.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserFullNameNull() {
                return this.IsNull(this.tableCommentDetails.UserFullNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserFullNameNull() {
                this[this.tableCommentDetails.UserFullNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToHistoryNull() {
                return this.IsNull(this.tableCommentDetails.ToHistoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToHistoryNull() {
                this[this.tableCommentDetails.ToHistoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkTypeNull() {
                return this.IsNull(this.tableCommentDetails.WorkTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkTypeNull() {
                this[this.tableCommentDetails.WorkTypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WorkDetailsRow : global::System.Data.DataRow {
            
            private WorkDetailsDataTable tableWorkDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWorkDetails = ((WorkDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableWorkDetails.WorkIDColumn]));
                }
                set {
                    this[this.tableWorkDetails.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PreppedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.PreppedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreppedDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkDetails.PreppedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SprayedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.SprayedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SprayedDate\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkDetails.SprayedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BatchID {
                get {
                    try {
                        return ((int)(this[this.tableWorkDetails.BatchIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchID\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkDetails.BatchIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableWorkDetails.DeletedColumn]));
                }
                set {
                    this[this.tableWorkDetails.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableWorkDetails.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableWorkDetails.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWorkDetails.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkDetails.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableWorkDetails.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkDetails.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableWorkDetails.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'WorkDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkDetails.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreppedDateNull() {
                return this.IsNull(this.tableWorkDetails.PreppedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreppedDateNull() {
                this[this.tableWorkDetails.PreppedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSprayedDateNull() {
                return this.IsNull(this.tableWorkDetails.SprayedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSprayedDateNull() {
                this[this.tableWorkDetails.SprayedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchIDNull() {
                return this.IsNull(this.tableWorkDetails.BatchIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchIDNull() {
                this[this.tableWorkDetails.BatchIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableWorkDetails.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableWorkDetails.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableWorkDetails.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableWorkDetails.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableWorkDetails.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableWorkDetails.CommentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ManholeDetailsRow : global::System.Data.DataRow {
            
            private ManholeDetailsDataTable tableManholeDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ManholeDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableManholeDetails = ((ManholeDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableManholeDetails.AssetIDColumn]));
                }
                set {
                    this[this.tableManholeDetails.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MHID {
                get {
                    return ((string)(this[this.tableManholeDetails.MHIDColumn]));
                }
                set {
                    this[this.tableManholeDetails.MHIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Latitud {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.LatitudColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitud\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.LatitudColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Longitude {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableManholeDetails.DeletedColumn]));
                }
                set {
                    this[this.tableManholeDetails.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableManholeDetails.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableManholeDetails.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManholeShape {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.ManholeShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManholeShape\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.ManholeShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableManholeDetails.MaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopDiameter {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.TopDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopDiameter\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.TopDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopDepth {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.TopDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopDepth\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.TopDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopFloor {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.TopFloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopFloor\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.TopFloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopCeiling {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.TopCeilingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopCeiling\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.TopCeilingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopBenching {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.TopBenchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopBenching\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.TopBenchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownDiameter {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.DownDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownDiameter\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.DownDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownDepth {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.DownDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownDepth\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.DownDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownFloor {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.DownFloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownFloor\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.DownFloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownCeiling {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.DownCeilingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownCeiling\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.DownCeilingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownBenching {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.DownBenchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownBenching\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.DownBenchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rectangle1LongSide {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.Rectangle1LongSideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rectangle1LongSide\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.Rectangle1LongSideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rectangle1ShortSide {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.Rectangle1ShortSideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rectangle1ShortSide\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.Rectangle1ShortSideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rectangle2LongSide {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.Rectangle2LongSideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rectangle2LongSide\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.Rectangle2LongSideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rectangle2ShortSide {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.Rectangle2ShortSideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rectangle2ShortSide\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.Rectangle2ShortSideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopSurfaceArea {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.TopSurfaceAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopSurfaceArea\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.TopSurfaceAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownSurfaceArea {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.DownSurfaceAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownSurfaceArea\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.DownSurfaceAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManholeRugs {
                get {
                    try {
                        return ((int)(this[this.tableManholeDetails.ManholeRugsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManholeRugs\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.ManholeRugsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalDepth {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.TotalDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDepth\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.TotalDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalSurfaceArea {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.TotalSurfaceAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSurfaceArea\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.TotalSurfaceAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionRating {
                get {
                    try {
                        return ((int)(this[this.tableManholeDetails.ConditionRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConditionRating\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.ConditionRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaterialDescription {
                get {
                    try {
                        return ((string)(this[this.tableManholeDetails.MaterialDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialDescription\' in table \'ManholeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableManholeDetails.MaterialDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudNull() {
                return this.IsNull(this.tableManholeDetails.LatitudColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudNull() {
                this[this.tableManholeDetails.LatitudColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableManholeDetails.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableManholeDetails.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableManholeDetails.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableManholeDetails.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManholeShapeNull() {
                return this.IsNull(this.tableManholeDetails.ManholeShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManholeShapeNull() {
                this[this.tableManholeDetails.ManholeShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableManholeDetails.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableManholeDetails.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableManholeDetails.MaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableManholeDetails.MaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopDiameterNull() {
                return this.IsNull(this.tableManholeDetails.TopDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopDiameterNull() {
                this[this.tableManholeDetails.TopDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopDepthNull() {
                return this.IsNull(this.tableManholeDetails.TopDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopDepthNull() {
                this[this.tableManholeDetails.TopDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopFloorNull() {
                return this.IsNull(this.tableManholeDetails.TopFloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopFloorNull() {
                this[this.tableManholeDetails.TopFloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopCeilingNull() {
                return this.IsNull(this.tableManholeDetails.TopCeilingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopCeilingNull() {
                this[this.tableManholeDetails.TopCeilingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopBenchingNull() {
                return this.IsNull(this.tableManholeDetails.TopBenchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopBenchingNull() {
                this[this.tableManholeDetails.TopBenchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownDiameterNull() {
                return this.IsNull(this.tableManholeDetails.DownDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownDiameterNull() {
                this[this.tableManholeDetails.DownDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownDepthNull() {
                return this.IsNull(this.tableManholeDetails.DownDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownDepthNull() {
                this[this.tableManholeDetails.DownDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownFloorNull() {
                return this.IsNull(this.tableManholeDetails.DownFloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownFloorNull() {
                this[this.tableManholeDetails.DownFloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownCeilingNull() {
                return this.IsNull(this.tableManholeDetails.DownCeilingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownCeilingNull() {
                this[this.tableManholeDetails.DownCeilingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownBenchingNull() {
                return this.IsNull(this.tableManholeDetails.DownBenchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownBenchingNull() {
                this[this.tableManholeDetails.DownBenchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRectangle1LongSideNull() {
                return this.IsNull(this.tableManholeDetails.Rectangle1LongSideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRectangle1LongSideNull() {
                this[this.tableManholeDetails.Rectangle1LongSideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRectangle1ShortSideNull() {
                return this.IsNull(this.tableManholeDetails.Rectangle1ShortSideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRectangle1ShortSideNull() {
                this[this.tableManholeDetails.Rectangle1ShortSideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRectangle2LongSideNull() {
                return this.IsNull(this.tableManholeDetails.Rectangle2LongSideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRectangle2LongSideNull() {
                this[this.tableManholeDetails.Rectangle2LongSideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRectangle2ShortSideNull() {
                return this.IsNull(this.tableManholeDetails.Rectangle2ShortSideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRectangle2ShortSideNull() {
                this[this.tableManholeDetails.Rectangle2ShortSideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopSurfaceAreaNull() {
                return this.IsNull(this.tableManholeDetails.TopSurfaceAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopSurfaceAreaNull() {
                this[this.tableManholeDetails.TopSurfaceAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownSurfaceAreaNull() {
                return this.IsNull(this.tableManholeDetails.DownSurfaceAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownSurfaceAreaNull() {
                this[this.tableManholeDetails.DownSurfaceAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManholeRugsNull() {
                return this.IsNull(this.tableManholeDetails.ManholeRugsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManholeRugsNull() {
                this[this.tableManholeDetails.ManholeRugsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDepthNull() {
                return this.IsNull(this.tableManholeDetails.TotalDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDepthNull() {
                this[this.tableManholeDetails.TotalDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSurfaceAreaNull() {
                return this.IsNull(this.tableManholeDetails.TotalSurfaceAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSurfaceAreaNull() {
                this[this.tableManholeDetails.TotalSurfaceAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionRatingNull() {
                return this.IsNull(this.tableManholeDetails.ConditionRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionRatingNull() {
                this[this.tableManholeDetails.ConditionRatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialDescriptionNull() {
                return this.IsNull(this.tableManholeDetails.MaterialDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialDescriptionNull() {
                this[this.tableManholeDetails.MaterialDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CommentDetailsRowChangeEvent : global::System.EventArgs {
            
            private CommentDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRowChangeEvent(CommentDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CommentDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WorkDetailsRowChangeEvent : global::System.EventArgs {
            
            private WorkDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRowChangeEvent(WorkDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ManholeDetailsRowChangeEvent : global::System.EventArgs {
            
            private ManholeDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManholeDetailsRowChangeEvent(ManholeDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ManholeDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591