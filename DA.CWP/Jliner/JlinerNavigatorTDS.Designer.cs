//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.Jliner {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("JlinerNavigatorTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class JlinerNavigatorTDS : global::System.Data.DataSet {
        
        private JlinerNavigatorDataTable tableJlinerNavigator;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JlinerNavigatorTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected JlinerNavigatorTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["JlinerNavigator"] != null)) {
                    base.Tables.Add(new JlinerNavigatorDataTable(ds.Tables["JlinerNavigator"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JlinerNavigatorDataTable JlinerNavigator {
            get {
                return this.tableJlinerNavigator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            JlinerNavigatorTDS cln = ((JlinerNavigatorTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["JlinerNavigator"] != null)) {
                    base.Tables.Add(new JlinerNavigatorDataTable(ds.Tables["JlinerNavigator"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableJlinerNavigator = ((JlinerNavigatorDataTable)(base.Tables["JlinerNavigator"]));
            if ((initTable == true)) {
                if ((this.tableJlinerNavigator != null)) {
                    this.tableJlinerNavigator.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "JlinerNavigatorTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/JlinerNavigatorTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableJlinerNavigator = new JlinerNavigatorDataTable();
            base.Tables.Add(this.tableJlinerNavigator);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJlinerNavigator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            JlinerNavigatorTDS ds = new JlinerNavigatorTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void JlinerNavigatorRowChangeEventHandler(object sender, JlinerNavigatorRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JlinerNavigatorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnID_;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnPipeLocated;
            
            private global::System.Data.DataColumn columnServicesLocated;
            
            private global::System.Data.DataColumn columnCoInstalled;
            
            private global::System.Data.DataColumn columnBackfilledConcrete;
            
            private global::System.Data.DataColumn columnBackfilledSoil;
            
            private global::System.Data.DataColumn columnGrouted;
            
            private global::System.Data.DataColumn columnCored;
            
            private global::System.Data.DataColumn columnPrepped;
            
            private global::System.Data.DataColumn columnMeasured;
            
            private global::System.Data.DataColumn columnInProcess;
            
            private global::System.Data.DataColumn columnInStock;
            
            private global::System.Data.DataColumn columnDelivered;
            
            private global::System.Data.DataColumn columnPreVideo;
            
            private global::System.Data.DataColumn columnLinerInstalled;
            
            private global::System.Data.DataColumn columnFinalVideo;
            
            private global::System.Data.DataColumn columnHistory;
            
            private global::System.Data.DataColumn columnVideoInspection;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnCoRequired;
            
            private global::System.Data.DataColumn columnPitRequired;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnCoPitLocation;
            
            private global::System.Data.DataColumn columnDistanceFromUSMH;
            
            private global::System.Data.DataColumn columnDistanceFromDSMH;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnRecordID;
            
            private global::System.Data.DataColumn columnDetailID;
            
            private global::System.Data.DataColumn columnMADeleted;
            
            private global::System.Data.DataColumn columnArchived;
            
            private global::System.Data.DataColumn columnJLDeleted;
            
            private global::System.Data.DataColumn columnCOMPANIES_ID;
            
            private global::System.Data.DataColumn columnIssue;
            
            private global::System.Data.DataColumn columnSubArea;
            
            private global::System.Data.DataColumn columnPostContractDigRequired;
            
            private global::System.Data.DataColumn columnLinerSize;
            
            private global::System.Data.DataColumn columnCoCutDown;
            
            private global::System.Data.DataColumn columnFinalRestoration;
            
            private global::System.Data.DataColumn columnClientLateralID;
            
            private global::System.Data.DataColumn columnVideoLengthToPropertyLine;
            
            private global::System.Data.DataColumn columnLiningThruCo;
            
            private global::System.Data.DataColumn columnHamiltonInspectionNumber;
            
            private global::System.Data.DataColumn columnNoticeDelivered;
            
            private global::System.Data.DataColumn columnBuildRebuild;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerNavigatorDataTable() {
                this.TableName = "JlinerNavigator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlinerNavigatorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JlinerNavigatorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ID_Column {
                get {
                    return this.columnID_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeLocatedColumn {
                get {
                    return this.columnPipeLocated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServicesLocatedColumn {
                get {
                    return this.columnServicesLocated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoInstalledColumn {
                get {
                    return this.columnCoInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledConcreteColumn {
                get {
                    return this.columnBackfilledConcrete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledSoilColumn {
                get {
                    return this.columnBackfilledSoil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroutedColumn {
                get {
                    return this.columnGrouted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoredColumn {
                get {
                    return this.columnCored;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreppedColumn {
                get {
                    return this.columnPrepped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasuredColumn {
                get {
                    return this.columnMeasured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProcessColumn {
                get {
                    return this.columnInProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InStockColumn {
                get {
                    return this.columnInStock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveredColumn {
                get {
                    return this.columnDelivered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreVideoColumn {
                get {
                    return this.columnPreVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInstalledColumn {
                get {
                    return this.columnLinerInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalVideoColumn {
                get {
                    return this.columnFinalVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HistoryColumn {
                get {
                    return this.columnHistory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoInspectionColumn {
                get {
                    return this.columnVideoInspection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoRequiredColumn {
                get {
                    return this.columnCoRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PitRequiredColumn {
                get {
                    return this.columnPitRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoPitLocationColumn {
                get {
                    return this.columnCoPitLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromUSMHColumn {
                get {
                    return this.columnDistanceFromUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromDSMHColumn {
                get {
                    return this.columnDistanceFromDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordIDColumn {
                get {
                    return this.columnRecordID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailIDColumn {
                get {
                    return this.columnDetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MADeletedColumn {
                get {
                    return this.columnMADeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArchivedColumn {
                get {
                    return this.columnArchived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JLDeletedColumn {
                get {
                    return this.columnJLDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANIES_IDColumn {
                get {
                    return this.columnCOMPANIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueColumn {
                get {
                    return this.columnIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaColumn {
                get {
                    return this.columnSubArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostContractDigRequiredColumn {
                get {
                    return this.columnPostContractDigRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerSizeColumn {
                get {
                    return this.columnLinerSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoCutDownColumn {
                get {
                    return this.columnCoCutDown;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalRestorationColumn {
                get {
                    return this.columnFinalRestoration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientLateralIDColumn {
                get {
                    return this.columnClientLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoLengthToPropertyLineColumn {
                get {
                    return this.columnVideoLengthToPropertyLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiningThruCoColumn {
                get {
                    return this.columnLiningThruCo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HamiltonInspectionNumberColumn {
                get {
                    return this.columnHamiltonInspectionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoticeDeliveredColumn {
                get {
                    return this.columnNoticeDelivered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildRebuildColumn {
                get {
                    return this.columnBuildRebuild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerNavigatorRow this[int index] {
                get {
                    return ((JlinerNavigatorRow)(this.Rows[index]));
                }
            }
            
            public event JlinerNavigatorRowChangeEventHandler JlinerNavigatorRowChanging;
            
            public event JlinerNavigatorRowChangeEventHandler JlinerNavigatorRowChanged;
            
            public event JlinerNavigatorRowChangeEventHandler JlinerNavigatorRowDeleting;
            
            public event JlinerNavigatorRowChangeEventHandler JlinerNavigatorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJlinerNavigatorRow(JlinerNavigatorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerNavigatorRow AddJlinerNavigatorRow(
                        bool Selected, 
                        string ID_, 
                        System.Guid ID, 
                        int RefID, 
                        int COMPANY_ID, 
                        string Address, 
                        string Street, 
                        string City, 
                        System.DateTime PipeLocated, 
                        System.DateTime ServicesLocated, 
                        System.DateTime CoInstalled, 
                        System.DateTime BackfilledConcrete, 
                        System.DateTime BackfilledSoil, 
                        System.DateTime Grouted, 
                        System.DateTime Cored, 
                        System.DateTime Prepped, 
                        System.DateTime Measured, 
                        System.DateTime InProcess, 
                        System.DateTime InStock, 
                        System.DateTime Delivered, 
                        System.DateTime PreVideo, 
                        System.DateTime LinerInstalled, 
                        System.DateTime FinalVideo, 
                        string History, 
                        System.DateTime VideoInspection, 
                        string Comments, 
                        bool CoRequired, 
                        bool PitRequired, 
                        string USMH, 
                        string DSMH, 
                        string CoPitLocation, 
                        string DistanceFromUSMH, 
                        string DistanceFromDSMH, 
                        string Cost, 
                        string RecordID, 
                        string DetailID, 
                        string MADeleted, 
                        string Archived, 
                        string JLDeleted, 
                        string COMPANIES_ID, 
                        string Issue, 
                        string SubArea, 
                        bool PostContractDigRequired, 
                        string LinerSize, 
                        System.DateTime CoCutDown, 
                        System.DateTime FinalRestoration, 
                        string ClientLateralID, 
                        string VideoLengthToPropertyLine, 
                        bool LiningThruCo, 
                        string HamiltonInspectionNumber, 
                        System.DateTime NoticeDelivered, 
                        int BuildRebuild) {
                JlinerNavigatorRow rowJlinerNavigatorRow = ((JlinerNavigatorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Selected,
                        ID_,
                        ID,
                        RefID,
                        COMPANY_ID,
                        Address,
                        Street,
                        City,
                        PipeLocated,
                        ServicesLocated,
                        CoInstalled,
                        BackfilledConcrete,
                        BackfilledSoil,
                        Grouted,
                        Cored,
                        Prepped,
                        Measured,
                        InProcess,
                        InStock,
                        Delivered,
                        PreVideo,
                        LinerInstalled,
                        FinalVideo,
                        History,
                        VideoInspection,
                        Comments,
                        CoRequired,
                        PitRequired,
                        USMH,
                        DSMH,
                        CoPitLocation,
                        DistanceFromUSMH,
                        DistanceFromDSMH,
                        Cost,
                        RecordID,
                        DetailID,
                        MADeleted,
                        Archived,
                        JLDeleted,
                        COMPANIES_ID,
                        Issue,
                        SubArea,
                        PostContractDigRequired,
                        LinerSize,
                        CoCutDown,
                        FinalRestoration,
                        ClientLateralID,
                        VideoLengthToPropertyLine,
                        LiningThruCo,
                        HamiltonInspectionNumber,
                        NoticeDelivered,
                        BuildRebuild};
                rowJlinerNavigatorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJlinerNavigatorRow);
                return rowJlinerNavigatorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerNavigatorRow FindByID_(string ID_) {
                return ((JlinerNavigatorRow)(this.Rows.Find(new object[] {
                            ID_})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JlinerNavigatorDataTable cln = ((JlinerNavigatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JlinerNavigatorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSelected = base.Columns["Selected"];
                this.columnID_ = base.Columns["ID_"];
                this.columnID = base.Columns["ID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnAddress = base.Columns["Address"];
                this.columnStreet = base.Columns["Street"];
                this.columnCity = base.Columns["City"];
                this.columnPipeLocated = base.Columns["PipeLocated"];
                this.columnServicesLocated = base.Columns["ServicesLocated"];
                this.columnCoInstalled = base.Columns["CoInstalled"];
                this.columnBackfilledConcrete = base.Columns["BackfilledConcrete"];
                this.columnBackfilledSoil = base.Columns["BackfilledSoil"];
                this.columnGrouted = base.Columns["Grouted"];
                this.columnCored = base.Columns["Cored"];
                this.columnPrepped = base.Columns["Prepped"];
                this.columnMeasured = base.Columns["Measured"];
                this.columnInProcess = base.Columns["InProcess"];
                this.columnInStock = base.Columns["InStock"];
                this.columnDelivered = base.Columns["Delivered"];
                this.columnPreVideo = base.Columns["PreVideo"];
                this.columnLinerInstalled = base.Columns["LinerInstalled"];
                this.columnFinalVideo = base.Columns["FinalVideo"];
                this.columnHistory = base.Columns["History"];
                this.columnVideoInspection = base.Columns["VideoInspection"];
                this.columnComments = base.Columns["Comments"];
                this.columnCoRequired = base.Columns["CoRequired"];
                this.columnPitRequired = base.Columns["PitRequired"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnCoPitLocation = base.Columns["CoPitLocation"];
                this.columnDistanceFromUSMH = base.Columns["DistanceFromUSMH"];
                this.columnDistanceFromDSMH = base.Columns["DistanceFromDSMH"];
                this.columnCost = base.Columns["Cost"];
                this.columnRecordID = base.Columns["RecordID"];
                this.columnDetailID = base.Columns["DetailID"];
                this.columnMADeleted = base.Columns["MADeleted"];
                this.columnArchived = base.Columns["Archived"];
                this.columnJLDeleted = base.Columns["JLDeleted"];
                this.columnCOMPANIES_ID = base.Columns["COMPANIES_ID"];
                this.columnIssue = base.Columns["Issue"];
                this.columnSubArea = base.Columns["SubArea"];
                this.columnPostContractDigRequired = base.Columns["PostContractDigRequired"];
                this.columnLinerSize = base.Columns["LinerSize"];
                this.columnCoCutDown = base.Columns["CoCutDown"];
                this.columnFinalRestoration = base.Columns["FinalRestoration"];
                this.columnClientLateralID = base.Columns["ClientLateralID"];
                this.columnVideoLengthToPropertyLine = base.Columns["VideoLengthToPropertyLine"];
                this.columnLiningThruCo = base.Columns["LiningThruCo"];
                this.columnHamiltonInspectionNumber = base.Columns["HamiltonInspectionNumber"];
                this.columnNoticeDelivered = base.Columns["NoticeDelivered"];
                this.columnBuildRebuild = base.Columns["BuildRebuild"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnID_ = new global::System.Data.DataColumn("ID_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnPipeLocated = new global::System.Data.DataColumn("PipeLocated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeLocated);
                this.columnServicesLocated = new global::System.Data.DataColumn("ServicesLocated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServicesLocated);
                this.columnCoInstalled = new global::System.Data.DataColumn("CoInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoInstalled);
                this.columnBackfilledConcrete = new global::System.Data.DataColumn("BackfilledConcrete", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledConcrete);
                this.columnBackfilledSoil = new global::System.Data.DataColumn("BackfilledSoil", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledSoil);
                this.columnGrouted = new global::System.Data.DataColumn("Grouted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrouted);
                this.columnCored = new global::System.Data.DataColumn("Cored", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCored);
                this.columnPrepped = new global::System.Data.DataColumn("Prepped", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrepped);
                this.columnMeasured = new global::System.Data.DataColumn("Measured", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasured);
                this.columnInProcess = new global::System.Data.DataColumn("InProcess", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProcess);
                this.columnInStock = new global::System.Data.DataColumn("InStock", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInStock);
                this.columnDelivered = new global::System.Data.DataColumn("Delivered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelivered);
                this.columnPreVideo = new global::System.Data.DataColumn("PreVideo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreVideo);
                this.columnLinerInstalled = new global::System.Data.DataColumn("LinerInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInstalled);
                this.columnFinalVideo = new global::System.Data.DataColumn("FinalVideo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalVideo);
                this.columnHistory = new global::System.Data.DataColumn("History", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHistory);
                this.columnVideoInspection = new global::System.Data.DataColumn("VideoInspection", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoInspection);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnCoRequired = new global::System.Data.DataColumn("CoRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoRequired);
                this.columnPitRequired = new global::System.Data.DataColumn("PitRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPitRequired);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnCoPitLocation = new global::System.Data.DataColumn("CoPitLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoPitLocation);
                this.columnDistanceFromUSMH = new global::System.Data.DataColumn("DistanceFromUSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromUSMH);
                this.columnDistanceFromDSMH = new global::System.Data.DataColumn("DistanceFromDSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromDSMH);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnRecordID = new global::System.Data.DataColumn("RecordID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordID);
                this.columnDetailID = new global::System.Data.DataColumn("DetailID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailID);
                this.columnMADeleted = new global::System.Data.DataColumn("MADeleted", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMADeleted);
                this.columnArchived = new global::System.Data.DataColumn("Archived", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnJLDeleted = new global::System.Data.DataColumn("JLDeleted", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJLDeleted);
                this.columnCOMPANIES_ID = new global::System.Data.DataColumn("COMPANIES_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANIES_ID);
                this.columnIssue = new global::System.Data.DataColumn("Issue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssue);
                this.columnSubArea = new global::System.Data.DataColumn("SubArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubArea);
                this.columnPostContractDigRequired = new global::System.Data.DataColumn("PostContractDigRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostContractDigRequired);
                this.columnLinerSize = new global::System.Data.DataColumn("LinerSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerSize);
                this.columnCoCutDown = new global::System.Data.DataColumn("CoCutDown", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoCutDown);
                this.columnFinalRestoration = new global::System.Data.DataColumn("FinalRestoration", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalRestoration);
                this.columnClientLateralID = new global::System.Data.DataColumn("ClientLateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientLateralID);
                this.columnVideoLengthToPropertyLine = new global::System.Data.DataColumn("VideoLengthToPropertyLine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoLengthToPropertyLine);
                this.columnLiningThruCo = new global::System.Data.DataColumn("LiningThruCo", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiningThruCo);
                this.columnHamiltonInspectionNumber = new global::System.Data.DataColumn("HamiltonInspectionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHamiltonInspectionNumber);
                this.columnNoticeDelivered = new global::System.Data.DataColumn("NoticeDelivered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNoticeDelivered);
                this.columnBuildRebuild = new global::System.Data.DataColumn("BuildRebuild", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildRebuild);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_}, true));
                this.columnID_.AllowDBNull = false;
                this.columnID_.ReadOnly = true;
                this.columnID_.Unique = true;
                this.columnID_.MaxLength = 101;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnRefID.AllowDBNull = false;
                this.columnRefID.ReadOnly = true;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnCOMPANY_ID.ReadOnly = true;
                this.columnAddress.ReadOnly = true;
                this.columnAddress.MaxLength = 50;
                this.columnStreet.ReadOnly = true;
                this.columnStreet.MaxLength = 255;
                this.columnCity.ReadOnly = true;
                this.columnCity.MaxLength = 50;
                this.columnPipeLocated.ReadOnly = true;
                this.columnServicesLocated.ReadOnly = true;
                this.columnCoInstalled.ReadOnly = true;
                this.columnBackfilledConcrete.ReadOnly = true;
                this.columnBackfilledSoil.ReadOnly = true;
                this.columnGrouted.ReadOnly = true;
                this.columnCored.ReadOnly = true;
                this.columnPrepped.ReadOnly = true;
                this.columnMeasured.ReadOnly = true;
                this.columnInProcess.ReadOnly = true;
                this.columnInStock.ReadOnly = true;
                this.columnDelivered.ReadOnly = true;
                this.columnPreVideo.ReadOnly = true;
                this.columnLinerInstalled.ReadOnly = true;
                this.columnFinalVideo.ReadOnly = true;
                this.columnVideoInspection.ReadOnly = true;
                this.columnCoRequired.AllowDBNull = false;
                this.columnPitRequired.AllowDBNull = false;
                this.columnPostContractDigRequired.AllowDBNull = false;
                this.columnLinerSize.MaxLength = 40;
                this.columnFinalRestoration.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerNavigatorRow NewJlinerNavigatorRow() {
                return ((JlinerNavigatorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JlinerNavigatorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JlinerNavigatorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JlinerNavigatorRowChanged != null)) {
                    this.JlinerNavigatorRowChanged(this, new JlinerNavigatorRowChangeEvent(((JlinerNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JlinerNavigatorRowChanging != null)) {
                    this.JlinerNavigatorRowChanging(this, new JlinerNavigatorRowChangeEvent(((JlinerNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JlinerNavigatorRowDeleted != null)) {
                    this.JlinerNavigatorRowDeleted(this, new JlinerNavigatorRowChangeEvent(((JlinerNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JlinerNavigatorRowDeleting != null)) {
                    this.JlinerNavigatorRowDeleting(this, new JlinerNavigatorRowChangeEvent(((JlinerNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJlinerNavigatorRow(JlinerNavigatorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JlinerNavigatorTDS ds = new JlinerNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JlinerNavigatorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JlinerNavigatorRow : global::System.Data.DataRow {
            
            private JlinerNavigatorDataTable tableJlinerNavigator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlinerNavigatorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJlinerNavigator = ((JlinerNavigatorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableJlinerNavigator.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID_ {
                get {
                    return ((string)(this[this.tableJlinerNavigator.ID_Column]));
                }
                set {
                    this[this.tableJlinerNavigator.ID_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    return ((global::System.Guid)(this[this.tableJlinerNavigator.IDColumn]));
                }
                set {
                    this[this.tableJlinerNavigator.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableJlinerNavigator.RefIDColumn]));
                }
                set {
                    this[this.tableJlinerNavigator.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableJlinerNavigator.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableJlinerNavigator.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PipeLocated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.PipeLocatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeLocated\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.PipeLocatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ServicesLocated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.ServicesLocatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServicesLocated\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.ServicesLocatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CoInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.CoInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoInstalled\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.CoInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledConcrete {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.BackfilledConcreteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledConcrete\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.BackfilledConcreteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledSoil {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.BackfilledSoilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledSoil\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.BackfilledSoilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Grouted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.GroutedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grouted\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.GroutedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Cored {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.CoredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cored\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.CoredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Prepped {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.PreppedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Prepped\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.PreppedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Measured {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.MeasuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Measured\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.MeasuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InProcess {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.InProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProcess\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.InProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InStock {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.InStockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InStock\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.InStockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Delivered {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.DeliveredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Delivered\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.DeliveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PreVideo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.PreVideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreVideo\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.PreVideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LinerInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.LinerInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInstalled\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.LinerInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalVideo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.FinalVideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalVideo\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.FinalVideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string History {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.HistoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'History\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.HistoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime VideoInspection {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.VideoInspectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoInspection\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.VideoInspectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CoRequired {
                get {
                    return ((bool)(this[this.tableJlinerNavigator.CoRequiredColumn]));
                }
                set {
                    this[this.tableJlinerNavigator.CoRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PitRequired {
                get {
                    return ((bool)(this[this.tableJlinerNavigator.PitRequiredColumn]));
                }
                set {
                    this[this.tableJlinerNavigator.PitRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMH {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMH {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoPitLocation {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.CoPitLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoPitLocation\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.CoPitLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromUSMH {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.DistanceFromUSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromUSMH\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.DistanceFromUSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceFromDSMH {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.DistanceFromDSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromDSMH\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.DistanceFromDSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Cost {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordID {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.RecordIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordID\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.RecordIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DetailID {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.DetailIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DetailID\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.DetailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MADeleted {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.MADeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MADeleted\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.MADeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Archived {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.ArchivedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Archived\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.ArchivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JLDeleted {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.JLDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JLDeleted\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.JLDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANIES_ID {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.COMPANIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANIES_ID\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.COMPANIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Issue {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.IssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Issue\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.IssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubArea {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.SubAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubArea\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.SubAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PostContractDigRequired {
                get {
                    return ((bool)(this[this.tableJlinerNavigator.PostContractDigRequiredColumn]));
                }
                set {
                    this[this.tableJlinerNavigator.PostContractDigRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerSize {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.LinerSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerSize\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.LinerSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CoCutDown {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.CoCutDownColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoCutDown\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.CoCutDownColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalRestoration {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.FinalRestorationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalRestoration\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.FinalRestorationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientLateralID {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.ClientLateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientLateralID\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.ClientLateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoLengthToPropertyLine {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.VideoLengthToPropertyLineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoLengthToPropertyLine\' in table \'JlinerNavigator\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.VideoLengthToPropertyLineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LiningThruCo {
                get {
                    try {
                        return ((bool)(this[this.tableJlinerNavigator.LiningThruCoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiningThruCo\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.LiningThruCoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HamiltonInspectionNumber {
                get {
                    try {
                        return ((string)(this[this.tableJlinerNavigator.HamiltonInspectionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HamiltonInspectionNumber\' in table \'JlinerNavigator\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.HamiltonInspectionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NoticeDelivered {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerNavigator.NoticeDeliveredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NoticeDelivered\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.NoticeDeliveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildRebuild {
                get {
                    try {
                        return ((int)(this[this.tableJlinerNavigator.BuildRebuildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildRebuild\' in table \'JlinerNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerNavigator.BuildRebuildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableJlinerNavigator.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableJlinerNavigator.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableJlinerNavigator.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableJlinerNavigator.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableJlinerNavigator.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableJlinerNavigator.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableJlinerNavigator.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableJlinerNavigator.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeLocatedNull() {
                return this.IsNull(this.tableJlinerNavigator.PipeLocatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeLocatedNull() {
                this[this.tableJlinerNavigator.PipeLocatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServicesLocatedNull() {
                return this.IsNull(this.tableJlinerNavigator.ServicesLocatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServicesLocatedNull() {
                this[this.tableJlinerNavigator.ServicesLocatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoInstalledNull() {
                return this.IsNull(this.tableJlinerNavigator.CoInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoInstalledNull() {
                this[this.tableJlinerNavigator.CoInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledConcreteNull() {
                return this.IsNull(this.tableJlinerNavigator.BackfilledConcreteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledConcreteNull() {
                this[this.tableJlinerNavigator.BackfilledConcreteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledSoilNull() {
                return this.IsNull(this.tableJlinerNavigator.BackfilledSoilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledSoilNull() {
                this[this.tableJlinerNavigator.BackfilledSoilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroutedNull() {
                return this.IsNull(this.tableJlinerNavigator.GroutedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroutedNull() {
                this[this.tableJlinerNavigator.GroutedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoredNull() {
                return this.IsNull(this.tableJlinerNavigator.CoredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoredNull() {
                this[this.tableJlinerNavigator.CoredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreppedNull() {
                return this.IsNull(this.tableJlinerNavigator.PreppedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreppedNull() {
                this[this.tableJlinerNavigator.PreppedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasuredNull() {
                return this.IsNull(this.tableJlinerNavigator.MeasuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasuredNull() {
                this[this.tableJlinerNavigator.MeasuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProcessNull() {
                return this.IsNull(this.tableJlinerNavigator.InProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProcessNull() {
                this[this.tableJlinerNavigator.InProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInStockNull() {
                return this.IsNull(this.tableJlinerNavigator.InStockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInStockNull() {
                this[this.tableJlinerNavigator.InStockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveredNull() {
                return this.IsNull(this.tableJlinerNavigator.DeliveredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveredNull() {
                this[this.tableJlinerNavigator.DeliveredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreVideoNull() {
                return this.IsNull(this.tableJlinerNavigator.PreVideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreVideoNull() {
                this[this.tableJlinerNavigator.PreVideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInstalledNull() {
                return this.IsNull(this.tableJlinerNavigator.LinerInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInstalledNull() {
                this[this.tableJlinerNavigator.LinerInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalVideoNull() {
                return this.IsNull(this.tableJlinerNavigator.FinalVideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalVideoNull() {
                this[this.tableJlinerNavigator.FinalVideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHistoryNull() {
                return this.IsNull(this.tableJlinerNavigator.HistoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHistoryNull() {
                this[this.tableJlinerNavigator.HistoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoInspectionNull() {
                return this.IsNull(this.tableJlinerNavigator.VideoInspectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoInspectionNull() {
                this[this.tableJlinerNavigator.VideoInspectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableJlinerNavigator.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableJlinerNavigator.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableJlinerNavigator.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableJlinerNavigator.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableJlinerNavigator.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableJlinerNavigator.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoPitLocationNull() {
                return this.IsNull(this.tableJlinerNavigator.CoPitLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoPitLocationNull() {
                this[this.tableJlinerNavigator.CoPitLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromUSMHNull() {
                return this.IsNull(this.tableJlinerNavigator.DistanceFromUSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromUSMHNull() {
                this[this.tableJlinerNavigator.DistanceFromUSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromDSMHNull() {
                return this.IsNull(this.tableJlinerNavigator.DistanceFromDSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromDSMHNull() {
                this[this.tableJlinerNavigator.DistanceFromDSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableJlinerNavigator.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableJlinerNavigator.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordIDNull() {
                return this.IsNull(this.tableJlinerNavigator.RecordIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordIDNull() {
                this[this.tableJlinerNavigator.RecordIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetailIDNull() {
                return this.IsNull(this.tableJlinerNavigator.DetailIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetailIDNull() {
                this[this.tableJlinerNavigator.DetailIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMADeletedNull() {
                return this.IsNull(this.tableJlinerNavigator.MADeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMADeletedNull() {
                this[this.tableJlinerNavigator.MADeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArchivedNull() {
                return this.IsNull(this.tableJlinerNavigator.ArchivedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArchivedNull() {
                this[this.tableJlinerNavigator.ArchivedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJLDeletedNull() {
                return this.IsNull(this.tableJlinerNavigator.JLDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJLDeletedNull() {
                this[this.tableJlinerNavigator.JLDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANIES_IDNull() {
                return this.IsNull(this.tableJlinerNavigator.COMPANIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANIES_IDNull() {
                this[this.tableJlinerNavigator.COMPANIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueNull() {
                return this.IsNull(this.tableJlinerNavigator.IssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueNull() {
                this[this.tableJlinerNavigator.IssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaNull() {
                return this.IsNull(this.tableJlinerNavigator.SubAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaNull() {
                this[this.tableJlinerNavigator.SubAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerSizeNull() {
                return this.IsNull(this.tableJlinerNavigator.LinerSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerSizeNull() {
                this[this.tableJlinerNavigator.LinerSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoCutDownNull() {
                return this.IsNull(this.tableJlinerNavigator.CoCutDownColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoCutDownNull() {
                this[this.tableJlinerNavigator.CoCutDownColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalRestorationNull() {
                return this.IsNull(this.tableJlinerNavigator.FinalRestorationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalRestorationNull() {
                this[this.tableJlinerNavigator.FinalRestorationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientLateralIDNull() {
                return this.IsNull(this.tableJlinerNavigator.ClientLateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientLateralIDNull() {
                this[this.tableJlinerNavigator.ClientLateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoLengthToPropertyLineNull() {
                return this.IsNull(this.tableJlinerNavigator.VideoLengthToPropertyLineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoLengthToPropertyLineNull() {
                this[this.tableJlinerNavigator.VideoLengthToPropertyLineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiningThruCoNull() {
                return this.IsNull(this.tableJlinerNavigator.LiningThruCoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiningThruCoNull() {
                this[this.tableJlinerNavigator.LiningThruCoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHamiltonInspectionNumberNull() {
                return this.IsNull(this.tableJlinerNavigator.HamiltonInspectionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHamiltonInspectionNumberNull() {
                this[this.tableJlinerNavigator.HamiltonInspectionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoticeDeliveredNull() {
                return this.IsNull(this.tableJlinerNavigator.NoticeDeliveredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoticeDeliveredNull() {
                this[this.tableJlinerNavigator.NoticeDeliveredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildRebuildNull() {
                return this.IsNull(this.tableJlinerNavigator.BuildRebuildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildRebuildNull() {
                this[this.tableJlinerNavigator.BuildRebuildColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JlinerNavigatorRowChangeEvent : global::System.EventArgs {
            
            private JlinerNavigatorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerNavigatorRowChangeEvent(JlinerNavigatorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerNavigatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591