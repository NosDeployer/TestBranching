//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.Jliner {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("JlinerOverviewReportTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class JlinerOverviewReportTDS : global::System.Data.DataSet {
        
        private JlinerOverviewDataTable tableJlinerOverview;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JlinerOverviewReportTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected JlinerOverviewReportTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["JlinerOverview"] != null)) {
                    base.Tables.Add(new JlinerOverviewDataTable(ds.Tables["JlinerOverview"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JlinerOverviewDataTable JlinerOverview {
            get {
                return this.tableJlinerOverview;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            JlinerOverviewReportTDS cln = ((JlinerOverviewReportTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["JlinerOverview"] != null)) {
                    base.Tables.Add(new JlinerOverviewDataTable(ds.Tables["JlinerOverview"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableJlinerOverview = ((JlinerOverviewDataTable)(base.Tables["JlinerOverview"]));
            if ((initTable == true)) {
                if ((this.tableJlinerOverview != null)) {
                    this.tableJlinerOverview.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "JlinerOverviewReportTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/JlinerOverviewReportTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableJlinerOverview = new JlinerOverviewDataTable();
            base.Tables.Add(this.tableJlinerOverview);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJlinerOverview() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            JlinerOverviewReportTDS ds = new JlinerOverviewReportTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void JlinerOverviewRowChangeEventHandler(object sender, JlinerOverviewRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JlinerOverviewDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnCOMPANIES_ID;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnActualLength;
            
            private global::System.Data.DataColumn columnConfirmedSize;
            
            private global::System.Data.DataColumn columnP1Date;
            
            private global::System.Data.DataColumn columnMainLined;
            
            private global::System.Data.DataColumn columnBenchingIssue;
            
            private global::System.Data.DataColumn columnDetailID;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnIssue;
            
            private global::System.Data.DataColumn columnDistanceFromUSMH;
            
            private global::System.Data.DataColumn columnPipeLocated;
            
            private global::System.Data.DataColumn columnServicesLocated;
            
            private global::System.Data.DataColumn columnCoInstalled;
            
            private global::System.Data.DataColumn columnBackfilledSoil;
            
            private global::System.Data.DataColumn columnBackfilledConcrete;
            
            private global::System.Data.DataColumn columnGrouted;
            
            private global::System.Data.DataColumn columnCored;
            
            private global::System.Data.DataColumn columnPrepped;
            
            private global::System.Data.DataColumn columnMeasured;
            
            private global::System.Data.DataColumn columnLinerSize;
            
            private global::System.Data.DataColumn columnInProcess;
            
            private global::System.Data.DataColumn columnInStock;
            
            private global::System.Data.DataColumn columnDelivered;
            
            private global::System.Data.DataColumn columnBuildRebuild;
            
            private global::System.Data.DataColumn columnPreVideo;
            
            private global::System.Data.DataColumn columnLinerInstalled;
            
            private global::System.Data.DataColumn columnFinalVideo;
            
            private global::System.Data.DataColumn columnRecordID;
            
            private global::System.Data.DataColumn columnSubArea;
            
            private global::System.Data.DataColumn columnJLiner;
            
            private global::System.Data.DataColumn columnDistanceFromDSMH;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnVideoInspection;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnCoRequired;
            
            private global::System.Data.DataColumn columnPitRequired;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnAbbreviation;
            
            private global::System.Data.DataColumn columnCoPitLocation;
            
            private global::System.Data.DataColumn columnPostContractDigRequired;
            
            private global::System.Data.DataColumn columnClientLateralID;
            
            private global::System.Data.DataColumn columnVideoLengthToPropertyLine;
            
            private global::System.Data.DataColumn columnLiningThruCo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerOverviewDataTable() {
                this.TableName = "JlinerOverview";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlinerOverviewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JlinerOverviewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANIES_IDColumn {
                get {
                    return this.columnCOMPANIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualLengthColumn {
                get {
                    return this.columnActualLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedSizeColumn {
                get {
                    return this.columnConfirmedSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P1DateColumn {
                get {
                    return this.columnP1Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainLinedColumn {
                get {
                    return this.columnMainLined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BenchingIssueColumn {
                get {
                    return this.columnBenchingIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailIDColumn {
                get {
                    return this.columnDetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueColumn {
                get {
                    return this.columnIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromUSMHColumn {
                get {
                    return this.columnDistanceFromUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeLocatedColumn {
                get {
                    return this.columnPipeLocated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServicesLocatedColumn {
                get {
                    return this.columnServicesLocated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoInstalledColumn {
                get {
                    return this.columnCoInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledSoilColumn {
                get {
                    return this.columnBackfilledSoil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledConcreteColumn {
                get {
                    return this.columnBackfilledConcrete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroutedColumn {
                get {
                    return this.columnGrouted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoredColumn {
                get {
                    return this.columnCored;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreppedColumn {
                get {
                    return this.columnPrepped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasuredColumn {
                get {
                    return this.columnMeasured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerSizeColumn {
                get {
                    return this.columnLinerSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProcessColumn {
                get {
                    return this.columnInProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InStockColumn {
                get {
                    return this.columnInStock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveredColumn {
                get {
                    return this.columnDelivered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildRebuildColumn {
                get {
                    return this.columnBuildRebuild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreVideoColumn {
                get {
                    return this.columnPreVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInstalledColumn {
                get {
                    return this.columnLinerInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalVideoColumn {
                get {
                    return this.columnFinalVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordIDColumn {
                get {
                    return this.columnRecordID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaColumn {
                get {
                    return this.columnSubArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JLinerColumn {
                get {
                    return this.columnJLiner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromDSMHColumn {
                get {
                    return this.columnDistanceFromDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoInspectionColumn {
                get {
                    return this.columnVideoInspection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoRequiredColumn {
                get {
                    return this.columnCoRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PitRequiredColumn {
                get {
                    return this.columnPitRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbbreviationColumn {
                get {
                    return this.columnAbbreviation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoPitLocationColumn {
                get {
                    return this.columnCoPitLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostContractDigRequiredColumn {
                get {
                    return this.columnPostContractDigRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientLateralIDColumn {
                get {
                    return this.columnClientLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoLengthToPropertyLineColumn {
                get {
                    return this.columnVideoLengthToPropertyLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiningThruCoColumn {
                get {
                    return this.columnLiningThruCo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerOverviewRow this[int index] {
                get {
                    return ((JlinerOverviewRow)(this.Rows[index]));
                }
            }
            
            public event JlinerOverviewRowChangeEventHandler JlinerOverviewRowChanging;
            
            public event JlinerOverviewRowChangeEventHandler JlinerOverviewRowChanged;
            
            public event JlinerOverviewRowChangeEventHandler JlinerOverviewRowDeleting;
            
            public event JlinerOverviewRowChangeEventHandler JlinerOverviewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJlinerOverviewRow(JlinerOverviewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerOverviewRow AddJlinerOverviewRow(
                        System.Guid ID, 
                        int COMPANY_ID, 
                        int COMPANIES_ID, 
                        string Street, 
                        string USMH, 
                        string DSMH, 
                        string ActualLength, 
                        int ConfirmedSize, 
                        System.DateTime P1Date, 
                        string MainLined, 
                        string BenchingIssue, 
                        string DetailID, 
                        string Address, 
                        string Issue, 
                        double DistanceFromUSMH, 
                        System.DateTime PipeLocated, 
                        System.DateTime ServicesLocated, 
                        System.DateTime CoInstalled, 
                        System.DateTime BackfilledSoil, 
                        System.DateTime BackfilledConcrete, 
                        System.DateTime Grouted, 
                        System.DateTime Cored, 
                        System.DateTime Prepped, 
                        System.DateTime Measured, 
                        string LinerSize, 
                        System.DateTime InProcess, 
                        System.DateTime InStock, 
                        System.DateTime Delivered, 
                        int BuildRebuild, 
                        System.DateTime PreVideo, 
                        System.DateTime LinerInstalled, 
                        System.DateTime FinalVideo, 
                        string RecordID, 
                        string SubArea, 
                        bool JLiner, 
                        double DistanceFromDSMH, 
                        string NAME, 
                        string VideoInspection, 
                        int RefID, 
                        bool CoRequired, 
                        bool PitRequired, 
                        string Comments, 
                        string Abbreviation, 
                        string CoPitLocation, 
                        bool PostContractDigRequired, 
                        string ClientLateralID, 
                        string VideoLengthToPropertyLine, 
                        bool LiningThruCo) {
                JlinerOverviewRow rowJlinerOverviewRow = ((JlinerOverviewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        COMPANY_ID,
                        COMPANIES_ID,
                        Street,
                        USMH,
                        DSMH,
                        ActualLength,
                        ConfirmedSize,
                        P1Date,
                        MainLined,
                        BenchingIssue,
                        DetailID,
                        Address,
                        Issue,
                        DistanceFromUSMH,
                        PipeLocated,
                        ServicesLocated,
                        CoInstalled,
                        BackfilledSoil,
                        BackfilledConcrete,
                        Grouted,
                        Cored,
                        Prepped,
                        Measured,
                        LinerSize,
                        InProcess,
                        InStock,
                        Delivered,
                        BuildRebuild,
                        PreVideo,
                        LinerInstalled,
                        FinalVideo,
                        RecordID,
                        SubArea,
                        JLiner,
                        DistanceFromDSMH,
                        NAME,
                        VideoInspection,
                        RefID,
                        CoRequired,
                        PitRequired,
                        Comments,
                        Abbreviation,
                        CoPitLocation,
                        PostContractDigRequired,
                        ClientLateralID,
                        VideoLengthToPropertyLine,
                        LiningThruCo};
                rowJlinerOverviewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJlinerOverviewRow);
                return rowJlinerOverviewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerOverviewRow FindByRefIDCOMPANY_IDID(int RefID, int COMPANY_ID, System.Guid ID) {
                return ((JlinerOverviewRow)(this.Rows.Find(new object[] {
                            RefID,
                            COMPANY_ID,
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JlinerOverviewDataTable cln = ((JlinerOverviewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JlinerOverviewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnCOMPANIES_ID = base.Columns["COMPANIES_ID"];
                this.columnStreet = base.Columns["Street"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnActualLength = base.Columns["ActualLength"];
                this.columnConfirmedSize = base.Columns["ConfirmedSize"];
                this.columnP1Date = base.Columns["P1Date"];
                this.columnMainLined = base.Columns["MainLined"];
                this.columnBenchingIssue = base.Columns["BenchingIssue"];
                this.columnDetailID = base.Columns["DetailID"];
                this.columnAddress = base.Columns["Address"];
                this.columnIssue = base.Columns["Issue"];
                this.columnDistanceFromUSMH = base.Columns["DistanceFromUSMH"];
                this.columnPipeLocated = base.Columns["PipeLocated"];
                this.columnServicesLocated = base.Columns["ServicesLocated"];
                this.columnCoInstalled = base.Columns["CoInstalled"];
                this.columnBackfilledSoil = base.Columns["BackfilledSoil"];
                this.columnBackfilledConcrete = base.Columns["BackfilledConcrete"];
                this.columnGrouted = base.Columns["Grouted"];
                this.columnCored = base.Columns["Cored"];
                this.columnPrepped = base.Columns["Prepped"];
                this.columnMeasured = base.Columns["Measured"];
                this.columnLinerSize = base.Columns["LinerSize"];
                this.columnInProcess = base.Columns["InProcess"];
                this.columnInStock = base.Columns["InStock"];
                this.columnDelivered = base.Columns["Delivered"];
                this.columnBuildRebuild = base.Columns["BuildRebuild"];
                this.columnPreVideo = base.Columns["PreVideo"];
                this.columnLinerInstalled = base.Columns["LinerInstalled"];
                this.columnFinalVideo = base.Columns["FinalVideo"];
                this.columnRecordID = base.Columns["RecordID"];
                this.columnSubArea = base.Columns["SubArea"];
                this.columnJLiner = base.Columns["JLiner"];
                this.columnDistanceFromDSMH = base.Columns["DistanceFromDSMH"];
                this.columnNAME = base.Columns["NAME"];
                this.columnVideoInspection = base.Columns["VideoInspection"];
                this.columnRefID = base.Columns["RefID"];
                this.columnCoRequired = base.Columns["CoRequired"];
                this.columnPitRequired = base.Columns["PitRequired"];
                this.columnComments = base.Columns["Comments"];
                this.columnAbbreviation = base.Columns["Abbreviation"];
                this.columnCoPitLocation = base.Columns["CoPitLocation"];
                this.columnPostContractDigRequired = base.Columns["PostContractDigRequired"];
                this.columnClientLateralID = base.Columns["ClientLateralID"];
                this.columnVideoLengthToPropertyLine = base.Columns["VideoLengthToPropertyLine"];
                this.columnLiningThruCo = base.Columns["LiningThruCo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnCOMPANIES_ID = new global::System.Data.DataColumn("COMPANIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANIES_ID);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnActualLength = new global::System.Data.DataColumn("ActualLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualLength);
                this.columnConfirmedSize = new global::System.Data.DataColumn("ConfirmedSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmedSize);
                this.columnP1Date = new global::System.Data.DataColumn("P1Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP1Date);
                this.columnMainLined = new global::System.Data.DataColumn("MainLined", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainLined);
                this.columnBenchingIssue = new global::System.Data.DataColumn("BenchingIssue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBenchingIssue);
                this.columnDetailID = new global::System.Data.DataColumn("DetailID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailID);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnIssue = new global::System.Data.DataColumn("Issue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssue);
                this.columnDistanceFromUSMH = new global::System.Data.DataColumn("DistanceFromUSMH", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromUSMH);
                this.columnPipeLocated = new global::System.Data.DataColumn("PipeLocated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeLocated);
                this.columnServicesLocated = new global::System.Data.DataColumn("ServicesLocated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServicesLocated);
                this.columnCoInstalled = new global::System.Data.DataColumn("CoInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoInstalled);
                this.columnBackfilledSoil = new global::System.Data.DataColumn("BackfilledSoil", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledSoil);
                this.columnBackfilledConcrete = new global::System.Data.DataColumn("BackfilledConcrete", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledConcrete);
                this.columnGrouted = new global::System.Data.DataColumn("Grouted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrouted);
                this.columnCored = new global::System.Data.DataColumn("Cored", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCored);
                this.columnPrepped = new global::System.Data.DataColumn("Prepped", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrepped);
                this.columnMeasured = new global::System.Data.DataColumn("Measured", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasured);
                this.columnLinerSize = new global::System.Data.DataColumn("LinerSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerSize);
                this.columnInProcess = new global::System.Data.DataColumn("InProcess", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProcess);
                this.columnInStock = new global::System.Data.DataColumn("InStock", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInStock);
                this.columnDelivered = new global::System.Data.DataColumn("Delivered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelivered);
                this.columnBuildRebuild = new global::System.Data.DataColumn("BuildRebuild", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildRebuild);
                this.columnPreVideo = new global::System.Data.DataColumn("PreVideo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreVideo);
                this.columnLinerInstalled = new global::System.Data.DataColumn("LinerInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInstalled);
                this.columnFinalVideo = new global::System.Data.DataColumn("FinalVideo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalVideo);
                this.columnRecordID = new global::System.Data.DataColumn("RecordID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordID);
                this.columnSubArea = new global::System.Data.DataColumn("SubArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubArea);
                this.columnJLiner = new global::System.Data.DataColumn("JLiner", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJLiner);
                this.columnDistanceFromDSMH = new global::System.Data.DataColumn("DistanceFromDSMH", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromDSMH);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnVideoInspection = new global::System.Data.DataColumn("VideoInspection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoInspection);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnCoRequired = new global::System.Data.DataColumn("CoRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoRequired);
                this.columnPitRequired = new global::System.Data.DataColumn("PitRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPitRequired);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnAbbreviation = new global::System.Data.DataColumn("Abbreviation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbbreviation);
                this.columnCoPitLocation = new global::System.Data.DataColumn("CoPitLocation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoPitLocation);
                this.columnPostContractDigRequired = new global::System.Data.DataColumn("PostContractDigRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostContractDigRequired);
                this.columnClientLateralID = new global::System.Data.DataColumn("ClientLateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientLateralID);
                this.columnVideoLengthToPropertyLine = new global::System.Data.DataColumn("VideoLengthToPropertyLine", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoLengthToPropertyLine);
                this.columnLiningThruCo = new global::System.Data.DataColumn("LiningThruCo", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiningThruCo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnCOMPANY_ID,
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnStreet.MaxLength = 255;
                this.columnUSMH.MaxLength = 255;
                this.columnDSMH.MaxLength = 255;
                this.columnActualLength.MaxLength = 255;
                this.columnMainLined.MaxLength = 10;
                this.columnBenchingIssue.MaxLength = 10;
                this.columnDetailID.MaxLength = 50;
                this.columnAddress.MaxLength = 50;
                this.columnLinerSize.MaxLength = 40;
                this.columnRecordID.AllowDBNull = false;
                this.columnRecordID.MaxLength = 50;
                this.columnSubArea.MaxLength = 50;
                this.columnNAME.MaxLength = 150;
                this.columnRefID.AllowDBNull = false;
                this.columnCoRequired.AllowDBNull = false;
                this.columnPitRequired.AllowDBNull = false;
                this.columnPostContractDigRequired.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerOverviewRow NewJlinerOverviewRow() {
                return ((JlinerOverviewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JlinerOverviewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JlinerOverviewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JlinerOverviewRowChanged != null)) {
                    this.JlinerOverviewRowChanged(this, new JlinerOverviewRowChangeEvent(((JlinerOverviewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JlinerOverviewRowChanging != null)) {
                    this.JlinerOverviewRowChanging(this, new JlinerOverviewRowChangeEvent(((JlinerOverviewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JlinerOverviewRowDeleted != null)) {
                    this.JlinerOverviewRowDeleted(this, new JlinerOverviewRowChangeEvent(((JlinerOverviewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JlinerOverviewRowDeleting != null)) {
                    this.JlinerOverviewRowDeleting(this, new JlinerOverviewRowChangeEvent(((JlinerOverviewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJlinerOverviewRow(JlinerOverviewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JlinerOverviewReportTDS ds = new JlinerOverviewReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JlinerOverviewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JlinerOverviewRow : global::System.Data.DataRow {
            
            private JlinerOverviewDataTable tableJlinerOverview;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JlinerOverviewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJlinerOverview = ((JlinerOverviewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    return ((global::System.Guid)(this[this.tableJlinerOverview.IDColumn]));
                }
                set {
                    this[this.tableJlinerOverview.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableJlinerOverview.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableJlinerOverview.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableJlinerOverview.COMPANIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANIES_ID\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.COMPANIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMH {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMH {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualLength {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.ActualLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualLength\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.ActualLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConfirmedSize {
                get {
                    try {
                        return ((int)(this[this.tableJlinerOverview.ConfirmedSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfirmedSize\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.ConfirmedSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime P1Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.P1DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P1Date\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.P1DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MainLined {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.MainLinedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainLined\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.MainLinedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BenchingIssue {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.BenchingIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BenchingIssue\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.BenchingIssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DetailID {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.DetailIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DetailID\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.DetailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Issue {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.IssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Issue\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.IssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DistanceFromUSMH {
                get {
                    try {
                        return ((double)(this[this.tableJlinerOverview.DistanceFromUSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromUSMH\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.DistanceFromUSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PipeLocated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.PipeLocatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeLocated\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.PipeLocatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ServicesLocated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.ServicesLocatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServicesLocated\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.ServicesLocatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CoInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.CoInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoInstalled\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.CoInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledSoil {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.BackfilledSoilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledSoil\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.BackfilledSoilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledConcrete {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.BackfilledConcreteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledConcrete\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.BackfilledConcreteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Grouted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.GroutedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grouted\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.GroutedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Cored {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.CoredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cored\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.CoredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Prepped {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.PreppedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Prepped\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.PreppedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Measured {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.MeasuredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Measured\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.MeasuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerSize {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.LinerSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerSize\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.LinerSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InProcess {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.InProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InProcess\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.InProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InStock {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.InStockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InStock\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.InStockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Delivered {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.DeliveredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Delivered\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.DeliveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BuildRebuild {
                get {
                    try {
                        return ((int)(this[this.tableJlinerOverview.BuildRebuildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildRebuild\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.BuildRebuildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PreVideo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.PreVideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreVideo\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.PreVideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LinerInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.LinerInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInstalled\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.LinerInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalVideo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJlinerOverview.FinalVideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalVideo\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.FinalVideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordID {
                get {
                    return ((string)(this[this.tableJlinerOverview.RecordIDColumn]));
                }
                set {
                    this[this.tableJlinerOverview.RecordIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubArea {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.SubAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubArea\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.SubAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool JLiner {
                get {
                    try {
                        return ((bool)(this[this.tableJlinerOverview.JLinerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JLiner\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.JLinerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DistanceFromDSMH {
                get {
                    try {
                        return ((double)(this[this.tableJlinerOverview.DistanceFromDSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromDSMH\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.DistanceFromDSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoInspection {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.VideoInspectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoInspection\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.VideoInspectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableJlinerOverview.RefIDColumn]));
                }
                set {
                    this[this.tableJlinerOverview.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CoRequired {
                get {
                    return ((bool)(this[this.tableJlinerOverview.CoRequiredColumn]));
                }
                set {
                    this[this.tableJlinerOverview.CoRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PitRequired {
                get {
                    return ((bool)(this[this.tableJlinerOverview.PitRequiredColumn]));
                }
                set {
                    this[this.tableJlinerOverview.PitRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Abbreviation {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.AbbreviationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Abbreviation\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.AbbreviationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CoPitLocation {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.CoPitLocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoPitLocation\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.CoPitLocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PostContractDigRequired {
                get {
                    return ((bool)(this[this.tableJlinerOverview.PostContractDigRequiredColumn]));
                }
                set {
                    this[this.tableJlinerOverview.PostContractDigRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientLateralID {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.ClientLateralIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientLateralID\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.ClientLateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoLengthToPropertyLine {
                get {
                    try {
                        return ((string)(this[this.tableJlinerOverview.VideoLengthToPropertyLineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoLengthToPropertyLine\' in table \'JlinerOverview\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.VideoLengthToPropertyLineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LiningThruCo {
                get {
                    try {
                        return ((bool)(this[this.tableJlinerOverview.LiningThruCoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiningThruCo\' in table \'JlinerOverview\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJlinerOverview.LiningThruCoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANIES_IDNull() {
                return this.IsNull(this.tableJlinerOverview.COMPANIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANIES_IDNull() {
                this[this.tableJlinerOverview.COMPANIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableJlinerOverview.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableJlinerOverview.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableJlinerOverview.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableJlinerOverview.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableJlinerOverview.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableJlinerOverview.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualLengthNull() {
                return this.IsNull(this.tableJlinerOverview.ActualLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualLengthNull() {
                this[this.tableJlinerOverview.ActualLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedSizeNull() {
                return this.IsNull(this.tableJlinerOverview.ConfirmedSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedSizeNull() {
                this[this.tableJlinerOverview.ConfirmedSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP1DateNull() {
                return this.IsNull(this.tableJlinerOverview.P1DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP1DateNull() {
                this[this.tableJlinerOverview.P1DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainLinedNull() {
                return this.IsNull(this.tableJlinerOverview.MainLinedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainLinedNull() {
                this[this.tableJlinerOverview.MainLinedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBenchingIssueNull() {
                return this.IsNull(this.tableJlinerOverview.BenchingIssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBenchingIssueNull() {
                this[this.tableJlinerOverview.BenchingIssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetailIDNull() {
                return this.IsNull(this.tableJlinerOverview.DetailIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetailIDNull() {
                this[this.tableJlinerOverview.DetailIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableJlinerOverview.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableJlinerOverview.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIssueNull() {
                return this.IsNull(this.tableJlinerOverview.IssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIssueNull() {
                this[this.tableJlinerOverview.IssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromUSMHNull() {
                return this.IsNull(this.tableJlinerOverview.DistanceFromUSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromUSMHNull() {
                this[this.tableJlinerOverview.DistanceFromUSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeLocatedNull() {
                return this.IsNull(this.tableJlinerOverview.PipeLocatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeLocatedNull() {
                this[this.tableJlinerOverview.PipeLocatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServicesLocatedNull() {
                return this.IsNull(this.tableJlinerOverview.ServicesLocatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServicesLocatedNull() {
                this[this.tableJlinerOverview.ServicesLocatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoInstalledNull() {
                return this.IsNull(this.tableJlinerOverview.CoInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoInstalledNull() {
                this[this.tableJlinerOverview.CoInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledSoilNull() {
                return this.IsNull(this.tableJlinerOverview.BackfilledSoilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledSoilNull() {
                this[this.tableJlinerOverview.BackfilledSoilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledConcreteNull() {
                return this.IsNull(this.tableJlinerOverview.BackfilledConcreteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledConcreteNull() {
                this[this.tableJlinerOverview.BackfilledConcreteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroutedNull() {
                return this.IsNull(this.tableJlinerOverview.GroutedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroutedNull() {
                this[this.tableJlinerOverview.GroutedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoredNull() {
                return this.IsNull(this.tableJlinerOverview.CoredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoredNull() {
                this[this.tableJlinerOverview.CoredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreppedNull() {
                return this.IsNull(this.tableJlinerOverview.PreppedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreppedNull() {
                this[this.tableJlinerOverview.PreppedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasuredNull() {
                return this.IsNull(this.tableJlinerOverview.MeasuredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasuredNull() {
                this[this.tableJlinerOverview.MeasuredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerSizeNull() {
                return this.IsNull(this.tableJlinerOverview.LinerSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerSizeNull() {
                this[this.tableJlinerOverview.LinerSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProcessNull() {
                return this.IsNull(this.tableJlinerOverview.InProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInProcessNull() {
                this[this.tableJlinerOverview.InProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInStockNull() {
                return this.IsNull(this.tableJlinerOverview.InStockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInStockNull() {
                this[this.tableJlinerOverview.InStockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveredNull() {
                return this.IsNull(this.tableJlinerOverview.DeliveredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveredNull() {
                this[this.tableJlinerOverview.DeliveredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildRebuildNull() {
                return this.IsNull(this.tableJlinerOverview.BuildRebuildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildRebuildNull() {
                this[this.tableJlinerOverview.BuildRebuildColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreVideoNull() {
                return this.IsNull(this.tableJlinerOverview.PreVideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreVideoNull() {
                this[this.tableJlinerOverview.PreVideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInstalledNull() {
                return this.IsNull(this.tableJlinerOverview.LinerInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInstalledNull() {
                this[this.tableJlinerOverview.LinerInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalVideoNull() {
                return this.IsNull(this.tableJlinerOverview.FinalVideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalVideoNull() {
                this[this.tableJlinerOverview.FinalVideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaNull() {
                return this.IsNull(this.tableJlinerOverview.SubAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaNull() {
                this[this.tableJlinerOverview.SubAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJLinerNull() {
                return this.IsNull(this.tableJlinerOverview.JLinerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJLinerNull() {
                this[this.tableJlinerOverview.JLinerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromDSMHNull() {
                return this.IsNull(this.tableJlinerOverview.DistanceFromDSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromDSMHNull() {
                this[this.tableJlinerOverview.DistanceFromDSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableJlinerOverview.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableJlinerOverview.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoInspectionNull() {
                return this.IsNull(this.tableJlinerOverview.VideoInspectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoInspectionNull() {
                this[this.tableJlinerOverview.VideoInspectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableJlinerOverview.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableJlinerOverview.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbbreviationNull() {
                return this.IsNull(this.tableJlinerOverview.AbbreviationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbbreviationNull() {
                this[this.tableJlinerOverview.AbbreviationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoPitLocationNull() {
                return this.IsNull(this.tableJlinerOverview.CoPitLocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoPitLocationNull() {
                this[this.tableJlinerOverview.CoPitLocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientLateralIDNull() {
                return this.IsNull(this.tableJlinerOverview.ClientLateralIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientLateralIDNull() {
                this[this.tableJlinerOverview.ClientLateralIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoLengthToPropertyLineNull() {
                return this.IsNull(this.tableJlinerOverview.VideoLengthToPropertyLineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoLengthToPropertyLineNull() {
                this[this.tableJlinerOverview.VideoLengthToPropertyLineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiningThruCoNull() {
                return this.IsNull(this.tableJlinerOverview.LiningThruCoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiningThruCoNull() {
                this[this.tableJlinerOverview.LiningThruCoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JlinerOverviewRowChangeEvent : global::System.EventArgs {
            
            private JlinerOverviewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerOverviewRowChangeEvent(JlinerOverviewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JlinerOverviewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591