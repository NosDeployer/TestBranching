//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.Common {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AddManholeTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AddManholeTDS : global::System.Data.DataSet {
        
        private AddManholeNewDataTable tableAddManholeNew;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AddManholeTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AddManholeTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AddManholeNew"] != null)) {
                    base.Tables.Add(new AddManholeNewDataTable(ds.Tables["AddManholeNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AddManholeNewDataTable AddManholeNew {
            get {
                return this.tableAddManholeNew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AddManholeTDS cln = ((AddManholeTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AddManholeNew"] != null)) {
                    base.Tables.Add(new AddManholeNewDataTable(ds.Tables["AddManholeNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAddManholeNew = ((AddManholeNewDataTable)(base.Tables["AddManholeNew"]));
            if ((initTable == true)) {
                if ((this.tableAddManholeNew != null)) {
                    this.tableAddManholeNew.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AddManholeTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AddManholeTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAddManholeNew = new AddManholeNewDataTable();
            base.Tables.Add(this.tableAddManholeNew);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAddManholeNew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AddManholeTDS ds = new AddManholeTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AddManholeNewRowChangeEventHandler(object sender, AddManholeNewRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AddManholeNewDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnMHID;
            
            private global::System.Data.DataColumn columnLatitud;
            
            private global::System.Data.DataColumn columnLongitude;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnManholeShape;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnTopDiameter;
            
            private global::System.Data.DataColumn columnTopDepth;
            
            private global::System.Data.DataColumn columnTopFloor;
            
            private global::System.Data.DataColumn columnTopCeiling;
            
            private global::System.Data.DataColumn columnTopBenching;
            
            private global::System.Data.DataColumn columnDownDiameter;
            
            private global::System.Data.DataColumn columnDownDepth;
            
            private global::System.Data.DataColumn columnDownFloor;
            
            private global::System.Data.DataColumn columnDownCeiling;
            
            private global::System.Data.DataColumn columnDownBenching;
            
            private global::System.Data.DataColumn columnRectangle1LongSide;
            
            private global::System.Data.DataColumn columnRectangle1ShortSide;
            
            private global::System.Data.DataColumn columnRectangle2LongSide;
            
            private global::System.Data.DataColumn columnRectangle2ShortSide;
            
            private global::System.Data.DataColumn columnTopSurfaceArea;
            
            private global::System.Data.DataColumn columnDownSurfaceArea;
            
            private global::System.Data.DataColumn columnManholeRugs;
            
            private global::System.Data.DataColumn columnTotalDepth;
            
            private global::System.Data.DataColumn columnTotalSurfaceArea;
            
            private global::System.Data.DataColumn columnConditionRating;
            
            private global::System.Data.DataColumn columnMaterialDescription;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddManholeNewDataTable() {
                this.TableName = "AddManholeNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AddManholeNewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AddManholeNewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHIDColumn {
                get {
                    return this.columnMHID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatitudColumn {
                get {
                    return this.columnLatitud;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongitudeColumn {
                get {
                    return this.columnLongitude;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManholeShapeColumn {
                get {
                    return this.columnManholeShape;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopDiameterColumn {
                get {
                    return this.columnTopDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopDepthColumn {
                get {
                    return this.columnTopDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopFloorColumn {
                get {
                    return this.columnTopFloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopCeilingColumn {
                get {
                    return this.columnTopCeiling;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopBenchingColumn {
                get {
                    return this.columnTopBenching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownDiameterColumn {
                get {
                    return this.columnDownDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownDepthColumn {
                get {
                    return this.columnDownDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownFloorColumn {
                get {
                    return this.columnDownFloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownCeilingColumn {
                get {
                    return this.columnDownCeiling;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownBenchingColumn {
                get {
                    return this.columnDownBenching;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rectangle1LongSideColumn {
                get {
                    return this.columnRectangle1LongSide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rectangle1ShortSideColumn {
                get {
                    return this.columnRectangle1ShortSide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rectangle2LongSideColumn {
                get {
                    return this.columnRectangle2LongSide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Rectangle2ShortSideColumn {
                get {
                    return this.columnRectangle2ShortSide;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TopSurfaceAreaColumn {
                get {
                    return this.columnTopSurfaceArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DownSurfaceAreaColumn {
                get {
                    return this.columnDownSurfaceArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManholeRugsColumn {
                get {
                    return this.columnManholeRugs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalDepthColumn {
                get {
                    return this.columnTotalDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSurfaceAreaColumn {
                get {
                    return this.columnTotalSurfaceArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionRatingColumn {
                get {
                    return this.columnConditionRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialDescriptionColumn {
                get {
                    return this.columnMaterialDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddManholeNewRow this[int index] {
                get {
                    return ((AddManholeNewRow)(this.Rows[index]));
                }
            }
            
            public event AddManholeNewRowChangeEventHandler AddManholeNewRowChanging;
            
            public event AddManholeNewRowChangeEventHandler AddManholeNewRowChanged;
            
            public event AddManholeNewRowChangeEventHandler AddManholeNewRowDeleting;
            
            public event AddManholeNewRowChangeEventHandler AddManholeNewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAddManholeNewRow(AddManholeNewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddManholeNewRow AddAddManholeNewRow(
                        int AssetID, 
                        string MHID, 
                        string Latitud, 
                        string Longitude, 
                        string Address, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string ManholeShape, 
                        string Location, 
                        int MaterialID, 
                        string TopDiameter, 
                        string TopDepth, 
                        string TopFloor, 
                        string TopCeiling, 
                        string TopBenching, 
                        string DownDiameter, 
                        string DownDepth, 
                        string DownFloor, 
                        string DownCeiling, 
                        string DownBenching, 
                        string Rectangle1LongSide, 
                        string Rectangle1ShortSide, 
                        string Rectangle2LongSide, 
                        string Rectangle2ShortSide, 
                        string TopSurfaceArea, 
                        string DownSurfaceArea, 
                        int ManholeRugs, 
                        string TotalDepth, 
                        string TotalSurfaceArea, 
                        int ConditionRating, 
                        string MaterialDescription, 
                        bool InDatabase) {
                AddManholeNewRow rowAddManholeNewRow = ((AddManholeNewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        MHID,
                        Latitud,
                        Longitude,
                        Address,
                        Deleted,
                        COMPANY_ID,
                        ManholeShape,
                        Location,
                        MaterialID,
                        TopDiameter,
                        TopDepth,
                        TopFloor,
                        TopCeiling,
                        TopBenching,
                        DownDiameter,
                        DownDepth,
                        DownFloor,
                        DownCeiling,
                        DownBenching,
                        Rectangle1LongSide,
                        Rectangle1ShortSide,
                        Rectangle2LongSide,
                        Rectangle2ShortSide,
                        TopSurfaceArea,
                        DownSurfaceArea,
                        ManholeRugs,
                        TotalDepth,
                        TotalSurfaceArea,
                        ConditionRating,
                        MaterialDescription,
                        InDatabase};
                rowAddManholeNewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAddManholeNewRow);
                return rowAddManholeNewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddManholeNewRow FindByAssetID(int AssetID) {
                return ((AddManholeNewRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AddManholeNewDataTable cln = ((AddManholeNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AddManholeNewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnMHID = base.Columns["MHID"];
                this.columnLatitud = base.Columns["Latitud"];
                this.columnLongitude = base.Columns["Longitude"];
                this.columnAddress = base.Columns["Address"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnManholeShape = base.Columns["ManholeShape"];
                this.columnLocation = base.Columns["Location"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnTopDiameter = base.Columns["TopDiameter"];
                this.columnTopDepth = base.Columns["TopDepth"];
                this.columnTopFloor = base.Columns["TopFloor"];
                this.columnTopCeiling = base.Columns["TopCeiling"];
                this.columnTopBenching = base.Columns["TopBenching"];
                this.columnDownDiameter = base.Columns["DownDiameter"];
                this.columnDownDepth = base.Columns["DownDepth"];
                this.columnDownFloor = base.Columns["DownFloor"];
                this.columnDownCeiling = base.Columns["DownCeiling"];
                this.columnDownBenching = base.Columns["DownBenching"];
                this.columnRectangle1LongSide = base.Columns["Rectangle1LongSide"];
                this.columnRectangle1ShortSide = base.Columns["Rectangle1ShortSide"];
                this.columnRectangle2LongSide = base.Columns["Rectangle2LongSide"];
                this.columnRectangle2ShortSide = base.Columns["Rectangle2ShortSide"];
                this.columnTopSurfaceArea = base.Columns["TopSurfaceArea"];
                this.columnDownSurfaceArea = base.Columns["DownSurfaceArea"];
                this.columnManholeRugs = base.Columns["ManholeRugs"];
                this.columnTotalDepth = base.Columns["TotalDepth"];
                this.columnTotalSurfaceArea = base.Columns["TotalSurfaceArea"];
                this.columnConditionRating = base.Columns["ConditionRating"];
                this.columnMaterialDescription = base.Columns["MaterialDescription"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnMHID = new global::System.Data.DataColumn("MHID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHID);
                this.columnLatitud = new global::System.Data.DataColumn("Latitud", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLatitud);
                this.columnLongitude = new global::System.Data.DataColumn("Longitude", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongitude);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnManholeShape = new global::System.Data.DataColumn("ManholeShape", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManholeShape);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnTopDiameter = new global::System.Data.DataColumn("TopDiameter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopDiameter);
                this.columnTopDepth = new global::System.Data.DataColumn("TopDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopDepth);
                this.columnTopFloor = new global::System.Data.DataColumn("TopFloor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopFloor);
                this.columnTopCeiling = new global::System.Data.DataColumn("TopCeiling", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopCeiling);
                this.columnTopBenching = new global::System.Data.DataColumn("TopBenching", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopBenching);
                this.columnDownDiameter = new global::System.Data.DataColumn("DownDiameter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownDiameter);
                this.columnDownDepth = new global::System.Data.DataColumn("DownDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownDepth);
                this.columnDownFloor = new global::System.Data.DataColumn("DownFloor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownFloor);
                this.columnDownCeiling = new global::System.Data.DataColumn("DownCeiling", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownCeiling);
                this.columnDownBenching = new global::System.Data.DataColumn("DownBenching", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownBenching);
                this.columnRectangle1LongSide = new global::System.Data.DataColumn("Rectangle1LongSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRectangle1LongSide);
                this.columnRectangle1ShortSide = new global::System.Data.DataColumn("Rectangle1ShortSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRectangle1ShortSide);
                this.columnRectangle2LongSide = new global::System.Data.DataColumn("Rectangle2LongSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRectangle2LongSide);
                this.columnRectangle2ShortSide = new global::System.Data.DataColumn("Rectangle2ShortSide", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRectangle2ShortSide);
                this.columnTopSurfaceArea = new global::System.Data.DataColumn("TopSurfaceArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTopSurfaceArea);
                this.columnDownSurfaceArea = new global::System.Data.DataColumn("DownSurfaceArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDownSurfaceArea);
                this.columnManholeRugs = new global::System.Data.DataColumn("ManholeRugs", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManholeRugs);
                this.columnTotalDepth = new global::System.Data.DataColumn("TotalDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDepth);
                this.columnTotalSurfaceArea = new global::System.Data.DataColumn("TotalSurfaceArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSurfaceArea);
                this.columnConditionRating = new global::System.Data.DataColumn("ConditionRating", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionRating);
                this.columnMaterialDescription = new global::System.Data.DataColumn("MaterialDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialDescription);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnMHID.AllowDBNull = false;
                this.columnMHID.MaxLength = 50;
                this.columnLatitud.MaxLength = 25;
                this.columnLongitude.MaxLength = 25;
                this.columnAddress.MaxLength = 100;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnManholeShape.MaxLength = 50;
                this.columnLocation.MaxLength = 25;
                this.columnTopDiameter.MaxLength = 25;
                this.columnTopDepth.MaxLength = 25;
                this.columnTopFloor.MaxLength = 25;
                this.columnTopCeiling.MaxLength = 25;
                this.columnTopBenching.MaxLength = 25;
                this.columnDownDepth.MaxLength = 25;
                this.columnDownFloor.MaxLength = 25;
                this.columnDownCeiling.MaxLength = 25;
                this.columnDownBenching.MaxLength = 25;
                this.columnRectangle1LongSide.MaxLength = 25;
                this.columnRectangle1ShortSide.MaxLength = 25;
                this.columnRectangle2LongSide.MaxLength = 25;
                this.columnRectangle2ShortSide.MaxLength = 25;
                this.columnTopSurfaceArea.MaxLength = 25;
                this.columnDownSurfaceArea.MaxLength = 25;
                this.columnTotalDepth.MaxLength = 25;
                this.columnTotalSurfaceArea.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddManholeNewRow NewAddManholeNewRow() {
                return ((AddManholeNewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AddManholeNewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AddManholeNewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AddManholeNewRowChanged != null)) {
                    this.AddManholeNewRowChanged(this, new AddManholeNewRowChangeEvent(((AddManholeNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AddManholeNewRowChanging != null)) {
                    this.AddManholeNewRowChanging(this, new AddManholeNewRowChangeEvent(((AddManholeNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AddManholeNewRowDeleted != null)) {
                    this.AddManholeNewRowDeleted(this, new AddManholeNewRowChangeEvent(((AddManholeNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AddManholeNewRowDeleting != null)) {
                    this.AddManholeNewRowDeleting(this, new AddManholeNewRowChangeEvent(((AddManholeNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAddManholeNewRow(AddManholeNewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AddManholeTDS ds = new AddManholeTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AddManholeNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AddManholeNewRow : global::System.Data.DataRow {
            
            private AddManholeNewDataTable tableAddManholeNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AddManholeNewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAddManholeNew = ((AddManholeNewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableAddManholeNew.AssetIDColumn]));
                }
                set {
                    this[this.tableAddManholeNew.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MHID {
                get {
                    return ((string)(this[this.tableAddManholeNew.MHIDColumn]));
                }
                set {
                    this[this.tableAddManholeNew.MHIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Latitud {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.LatitudColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Latitud\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.LatitudColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Longitude {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.LongitudeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Longitude\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.LongitudeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableAddManholeNew.DeletedColumn]));
                }
                set {
                    this[this.tableAddManholeNew.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableAddManholeNew.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableAddManholeNew.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManholeShape {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.ManholeShapeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManholeShape\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.ManholeShapeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableAddManholeNew.MaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopDiameter {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.TopDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopDiameter\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.TopDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopDepth {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.TopDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopDepth\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.TopDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopFloor {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.TopFloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopFloor\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.TopFloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopCeiling {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.TopCeilingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopCeiling\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.TopCeilingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopBenching {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.TopBenchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopBenching\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.TopBenchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownDiameter {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.DownDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownDiameter\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.DownDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownDepth {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.DownDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownDepth\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.DownDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownFloor {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.DownFloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownFloor\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.DownFloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownCeiling {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.DownCeilingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownCeiling\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.DownCeilingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownBenching {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.DownBenchingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownBenching\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.DownBenchingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rectangle1LongSide {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.Rectangle1LongSideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rectangle1LongSide\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.Rectangle1LongSideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rectangle1ShortSide {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.Rectangle1ShortSideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rectangle1ShortSide\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.Rectangle1ShortSideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rectangle2LongSide {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.Rectangle2LongSideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rectangle2LongSide\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.Rectangle2LongSideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Rectangle2ShortSide {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.Rectangle2ShortSideColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rectangle2ShortSide\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.Rectangle2ShortSideColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TopSurfaceArea {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.TopSurfaceAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TopSurfaceArea\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.TopSurfaceAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DownSurfaceArea {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.DownSurfaceAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DownSurfaceArea\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.DownSurfaceAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManholeRugs {
                get {
                    try {
                        return ((int)(this[this.tableAddManholeNew.ManholeRugsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManholeRugs\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.ManholeRugsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalDepth {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.TotalDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDepth\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.TotalDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TotalSurfaceArea {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.TotalSurfaceAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSurfaceArea\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.TotalSurfaceAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionRating {
                get {
                    try {
                        return ((int)(this[this.tableAddManholeNew.ConditionRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConditionRating\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.ConditionRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaterialDescription {
                get {
                    try {
                        return ((string)(this[this.tableAddManholeNew.MaterialDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialDescription\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.MaterialDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableAddManholeNew.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'AddManholeNew\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAddManholeNew.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatitudNull() {
                return this.IsNull(this.tableAddManholeNew.LatitudColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatitudNull() {
                this[this.tableAddManholeNew.LatitudColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongitudeNull() {
                return this.IsNull(this.tableAddManholeNew.LongitudeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongitudeNull() {
                this[this.tableAddManholeNew.LongitudeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableAddManholeNew.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableAddManholeNew.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManholeShapeNull() {
                return this.IsNull(this.tableAddManholeNew.ManholeShapeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManholeShapeNull() {
                this[this.tableAddManholeNew.ManholeShapeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableAddManholeNew.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableAddManholeNew.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableAddManholeNew.MaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableAddManholeNew.MaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopDiameterNull() {
                return this.IsNull(this.tableAddManholeNew.TopDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopDiameterNull() {
                this[this.tableAddManholeNew.TopDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopDepthNull() {
                return this.IsNull(this.tableAddManholeNew.TopDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopDepthNull() {
                this[this.tableAddManholeNew.TopDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopFloorNull() {
                return this.IsNull(this.tableAddManholeNew.TopFloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopFloorNull() {
                this[this.tableAddManholeNew.TopFloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopCeilingNull() {
                return this.IsNull(this.tableAddManholeNew.TopCeilingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopCeilingNull() {
                this[this.tableAddManholeNew.TopCeilingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopBenchingNull() {
                return this.IsNull(this.tableAddManholeNew.TopBenchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopBenchingNull() {
                this[this.tableAddManholeNew.TopBenchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownDiameterNull() {
                return this.IsNull(this.tableAddManholeNew.DownDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownDiameterNull() {
                this[this.tableAddManholeNew.DownDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownDepthNull() {
                return this.IsNull(this.tableAddManholeNew.DownDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownDepthNull() {
                this[this.tableAddManholeNew.DownDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownFloorNull() {
                return this.IsNull(this.tableAddManholeNew.DownFloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownFloorNull() {
                this[this.tableAddManholeNew.DownFloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownCeilingNull() {
                return this.IsNull(this.tableAddManholeNew.DownCeilingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownCeilingNull() {
                this[this.tableAddManholeNew.DownCeilingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownBenchingNull() {
                return this.IsNull(this.tableAddManholeNew.DownBenchingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownBenchingNull() {
                this[this.tableAddManholeNew.DownBenchingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRectangle1LongSideNull() {
                return this.IsNull(this.tableAddManholeNew.Rectangle1LongSideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRectangle1LongSideNull() {
                this[this.tableAddManholeNew.Rectangle1LongSideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRectangle1ShortSideNull() {
                return this.IsNull(this.tableAddManholeNew.Rectangle1ShortSideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRectangle1ShortSideNull() {
                this[this.tableAddManholeNew.Rectangle1ShortSideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRectangle2LongSideNull() {
                return this.IsNull(this.tableAddManholeNew.Rectangle2LongSideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRectangle2LongSideNull() {
                this[this.tableAddManholeNew.Rectangle2LongSideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRectangle2ShortSideNull() {
                return this.IsNull(this.tableAddManholeNew.Rectangle2ShortSideColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRectangle2ShortSideNull() {
                this[this.tableAddManholeNew.Rectangle2ShortSideColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTopSurfaceAreaNull() {
                return this.IsNull(this.tableAddManholeNew.TopSurfaceAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTopSurfaceAreaNull() {
                this[this.tableAddManholeNew.TopSurfaceAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDownSurfaceAreaNull() {
                return this.IsNull(this.tableAddManholeNew.DownSurfaceAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDownSurfaceAreaNull() {
                this[this.tableAddManholeNew.DownSurfaceAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManholeRugsNull() {
                return this.IsNull(this.tableAddManholeNew.ManholeRugsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManholeRugsNull() {
                this[this.tableAddManholeNew.ManholeRugsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalDepthNull() {
                return this.IsNull(this.tableAddManholeNew.TotalDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalDepthNull() {
                this[this.tableAddManholeNew.TotalDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSurfaceAreaNull() {
                return this.IsNull(this.tableAddManholeNew.TotalSurfaceAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSurfaceAreaNull() {
                this[this.tableAddManholeNew.TotalSurfaceAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConditionRatingNull() {
                return this.IsNull(this.tableAddManholeNew.ConditionRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConditionRatingNull() {
                this[this.tableAddManholeNew.ConditionRatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialDescriptionNull() {
                return this.IsNull(this.tableAddManholeNew.MaterialDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialDescriptionNull() {
                this[this.tableAddManholeNew.MaterialDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableAddManholeNew.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableAddManholeNew.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AddManholeNewRowChangeEvent : global::System.EventArgs {
            
            private AddManholeNewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddManholeNewRowChangeEvent(AddManholeNewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AddManholeNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591