//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.CWP.PointRepairs {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PlLiningPlanTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PlLiningPlanTDS : global::System.Data.DataSet {
        
        private PlLiningPlanDataTable tablePlLiningPlan;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PlLiningPlanTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PlLiningPlanTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PlLiningPlan"] != null)) {
                    base.Tables.Add(new PlLiningPlanDataTable(ds.Tables["PlLiningPlan"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlLiningPlanDataTable PlLiningPlan {
            get {
                return this.tablePlLiningPlan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PlLiningPlanTDS cln = ((PlLiningPlanTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PlLiningPlan"] != null)) {
                    base.Tables.Add(new PlLiningPlanDataTable(ds.Tables["PlLiningPlan"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePlLiningPlan = ((PlLiningPlanDataTable)(base.Tables["PlLiningPlan"]));
            if ((initTable == true)) {
                if ((this.tablePlLiningPlan != null)) {
                    this.tablePlLiningPlan.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PlLiningPlanTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PlLiningPlanTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePlLiningPlan = new PlLiningPlanDataTable();
            base.Tables.Add(this.tablePlLiningPlan);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePlLiningPlan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PlLiningPlanTDS ds = new PlLiningPlanTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PlLiningPlanRowChangeEventHandler(object sender, PlLiningPlanRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PlLiningPlanDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnRepairPointID;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnUsmhDescription;
            
            private global::System.Data.DataColumn columnDsmhDescription;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnReamDistance;
            
            private global::System.Data.DataColumn columnReamDate;
            
            private global::System.Data.DataColumn columnLinerDistance;
            
            private global::System.Data.DataColumn columnDirection;
            
            private global::System.Data.DataColumn columnReinstates;
            
            private global::System.Data.DataColumn columnLTMH;
            
            private global::System.Data.DataColumn columnVTMH;
            
            private global::System.Data.DataColumn columnDistance;
            
            private global::System.Data.DataColumn columnSize_;
            
            private global::System.Data.DataColumn columnInstallDate;
            
            private global::System.Data.DataColumn columnMHShot;
            
            private global::System.Data.DataColumn columnGroutDistance;
            
            private global::System.Data.DataColumn columnGroutDate;
            
            private global::System.Data.DataColumn columnApproval;
            
            private global::System.Data.DataColumn columnExtraRepair;
            
            private global::System.Data.DataColumn columnCancelled;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnLiner;
            
            private global::System.Data.DataColumn columnLinerMN;
            
            private global::System.Data.DataColumn columnVideo;
            
            private global::System.Data.DataColumn columnVideoMN;
            
            private global::System.Data.DataColumn columnDefectQualifier;
            
            private global::System.Data.DataColumn columnDefectDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlLiningPlanDataTable() {
                this.TableName = "PlLiningPlan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlLiningPlanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PlLiningPlanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepairPointIDColumn {
                get {
                    return this.columnRepairPointID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsmhDescriptionColumn {
                get {
                    return this.columnUsmhDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DsmhDescriptionColumn {
                get {
                    return this.columnDsmhDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReamDistanceColumn {
                get {
                    return this.columnReamDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReamDateColumn {
                get {
                    return this.columnReamDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerDistanceColumn {
                get {
                    return this.columnLinerDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DirectionColumn {
                get {
                    return this.columnDirection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReinstatesColumn {
                get {
                    return this.columnReinstates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LTMHColumn {
                get {
                    return this.columnLTMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VTMHColumn {
                get {
                    return this.columnVTMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceColumn {
                get {
                    return this.columnDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Size_Column {
                get {
                    return this.columnSize_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstallDateColumn {
                get {
                    return this.columnInstallDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHShotColumn {
                get {
                    return this.columnMHShot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroutDistanceColumn {
                get {
                    return this.columnGroutDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroutDateColumn {
                get {
                    return this.columnGroutDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovalColumn {
                get {
                    return this.columnApproval;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraRepairColumn {
                get {
                    return this.columnExtraRepair;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CancelledColumn {
                get {
                    return this.columnCancelled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerColumn {
                get {
                    return this.columnLiner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerMNColumn {
                get {
                    return this.columnLinerMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoColumn {
                get {
                    return this.columnVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoMNColumn {
                get {
                    return this.columnVideoMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefectQualifierColumn {
                get {
                    return this.columnDefectQualifier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefectDetailsColumn {
                get {
                    return this.columnDefectDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlLiningPlanRow this[int index] {
                get {
                    return ((PlLiningPlanRow)(this.Rows[index]));
                }
            }
            
            public event PlLiningPlanRowChangeEventHandler PlLiningPlanRowChanging;
            
            public event PlLiningPlanRowChangeEventHandler PlLiningPlanRowChanged;
            
            public event PlLiningPlanRowChangeEventHandler PlLiningPlanRowDeleting;
            
            public event PlLiningPlanRowChangeEventHandler PlLiningPlanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPlLiningPlanRow(PlLiningPlanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlLiningPlanRow AddPlLiningPlanRow(
                        int WorkID, 
                        string RepairPointID, 
                        string FlowOrderID, 
                        string Selected, 
                        System.DateTime Date_, 
                        string Street, 
                        string UsmhDescription, 
                        string DsmhDescription, 
                        string Type, 
                        string ReamDistance, 
                        System.DateTime ReamDate, 
                        string LinerDistance, 
                        string Direction, 
                        int Reinstates, 
                        string LTMH, 
                        string VTMH, 
                        string Distance, 
                        string Size_, 
                        System.DateTime InstallDate, 
                        string MHShot, 
                        string GroutDistance, 
                        System.DateTime GroutDate, 
                        string Approval, 
                        bool ExtraRepair, 
                        bool Cancelled, 
                        string Comments, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string Liner, 
                        string LinerMN, 
                        string Video, 
                        string VideoMN, 
                        string DefectQualifier, 
                        string DefectDetails) {
                PlLiningPlanRow rowPlLiningPlanRow = ((PlLiningPlanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        RepairPointID,
                        FlowOrderID,
                        Selected,
                        Date_,
                        Street,
                        UsmhDescription,
                        DsmhDescription,
                        Type,
                        ReamDistance,
                        ReamDate,
                        LinerDistance,
                        Direction,
                        Reinstates,
                        LTMH,
                        VTMH,
                        Distance,
                        Size_,
                        InstallDate,
                        MHShot,
                        GroutDistance,
                        GroutDate,
                        Approval,
                        ExtraRepair,
                        Cancelled,
                        Comments,
                        Deleted,
                        COMPANY_ID,
                        Liner,
                        LinerMN,
                        Video,
                        VideoMN,
                        DefectQualifier,
                        DefectDetails};
                rowPlLiningPlanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPlLiningPlanRow);
                return rowPlLiningPlanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlLiningPlanRow FindByWorkIDRepairPointID(int WorkID, string RepairPointID) {
                return ((PlLiningPlanRow)(this.Rows.Find(new object[] {
                            WorkID,
                            RepairPointID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PlLiningPlanDataTable cln = ((PlLiningPlanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PlLiningPlanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnRepairPointID = base.Columns["RepairPointID"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
                this.columnSelected = base.Columns["Selected"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnStreet = base.Columns["Street"];
                this.columnUsmhDescription = base.Columns["UsmhDescription"];
                this.columnDsmhDescription = base.Columns["DsmhDescription"];
                this.columnType = base.Columns["Type"];
                this.columnReamDistance = base.Columns["ReamDistance"];
                this.columnReamDate = base.Columns["ReamDate"];
                this.columnLinerDistance = base.Columns["LinerDistance"];
                this.columnDirection = base.Columns["Direction"];
                this.columnReinstates = base.Columns["Reinstates"];
                this.columnLTMH = base.Columns["LTMH"];
                this.columnVTMH = base.Columns["VTMH"];
                this.columnDistance = base.Columns["Distance"];
                this.columnSize_ = base.Columns["Size_"];
                this.columnInstallDate = base.Columns["InstallDate"];
                this.columnMHShot = base.Columns["MHShot"];
                this.columnGroutDistance = base.Columns["GroutDistance"];
                this.columnGroutDate = base.Columns["GroutDate"];
                this.columnApproval = base.Columns["Approval"];
                this.columnExtraRepair = base.Columns["ExtraRepair"];
                this.columnCancelled = base.Columns["Cancelled"];
                this.columnComments = base.Columns["Comments"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnLiner = base.Columns["Liner"];
                this.columnLinerMN = base.Columns["LinerMN"];
                this.columnVideo = base.Columns["Video"];
                this.columnVideoMN = base.Columns["VideoMN"];
                this.columnDefectQualifier = base.Columns["DefectQualifier"];
                this.columnDefectDetails = base.Columns["DefectDetails"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnRepairPointID = new global::System.Data.DataColumn("RepairPointID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairPointID);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUsmhDescription = new global::System.Data.DataColumn("UsmhDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsmhDescription);
                this.columnDsmhDescription = new global::System.Data.DataColumn("DsmhDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDsmhDescription);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnReamDistance = new global::System.Data.DataColumn("ReamDistance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReamDistance);
                this.columnReamDate = new global::System.Data.DataColumn("ReamDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReamDate);
                this.columnLinerDistance = new global::System.Data.DataColumn("LinerDistance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerDistance);
                this.columnDirection = new global::System.Data.DataColumn("Direction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDirection);
                this.columnReinstates = new global::System.Data.DataColumn("Reinstates", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReinstates);
                this.columnLTMH = new global::System.Data.DataColumn("LTMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLTMH);
                this.columnVTMH = new global::System.Data.DataColumn("VTMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVTMH);
                this.columnDistance = new global::System.Data.DataColumn("Distance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistance);
                this.columnSize_ = new global::System.Data.DataColumn("Size_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize_);
                this.columnInstallDate = new global::System.Data.DataColumn("InstallDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstallDate);
                this.columnMHShot = new global::System.Data.DataColumn("MHShot", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHShot);
                this.columnGroutDistance = new global::System.Data.DataColumn("GroutDistance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroutDistance);
                this.columnGroutDate = new global::System.Data.DataColumn("GroutDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroutDate);
                this.columnApproval = new global::System.Data.DataColumn("Approval", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApproval);
                this.columnExtraRepair = new global::System.Data.DataColumn("ExtraRepair", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraRepair);
                this.columnCancelled = new global::System.Data.DataColumn("Cancelled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCancelled);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnLiner = new global::System.Data.DataColumn("Liner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiner);
                this.columnLinerMN = new global::System.Data.DataColumn("LinerMN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerMN);
                this.columnVideo = new global::System.Data.DataColumn("Video", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideo);
                this.columnVideoMN = new global::System.Data.DataColumn("VideoMN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoMN);
                this.columnDefectQualifier = new global::System.Data.DataColumn("DefectQualifier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefectQualifier);
                this.columnDefectDetails = new global::System.Data.DataColumn("DefectDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefectDetails);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID,
                                this.columnRepairPointID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnRepairPointID.AllowDBNull = false;
                this.columnRepairPointID.MaxLength = 10;
                this.columnReamDistance.MaxLength = 50;
                this.columnLinerDistance.MaxLength = 50;
                this.columnDirection.MaxLength = 100;
                this.columnLTMH.MaxLength = 50;
                this.columnVTMH.MaxLength = 50;
                this.columnDistance.MaxLength = 100;
                this.columnSize_.MaxLength = 100;
                this.columnMHShot.MaxLength = 100;
                this.columnGroutDistance.MaxLength = 100;
                this.columnApproval.MaxLength = 100;
                this.columnExtraRepair.AllowDBNull = false;
                this.columnCancelled.AllowDBNull = false;
                this.columnComments.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlLiningPlanRow NewPlLiningPlanRow() {
                return ((PlLiningPlanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PlLiningPlanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PlLiningPlanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlLiningPlanRowChanged != null)) {
                    this.PlLiningPlanRowChanged(this, new PlLiningPlanRowChangeEvent(((PlLiningPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlLiningPlanRowChanging != null)) {
                    this.PlLiningPlanRowChanging(this, new PlLiningPlanRowChangeEvent(((PlLiningPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlLiningPlanRowDeleted != null)) {
                    this.PlLiningPlanRowDeleted(this, new PlLiningPlanRowChangeEvent(((PlLiningPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlLiningPlanRowDeleting != null)) {
                    this.PlLiningPlanRowDeleting(this, new PlLiningPlanRowChangeEvent(((PlLiningPlanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePlLiningPlanRow(PlLiningPlanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PlLiningPlanTDS ds = new PlLiningPlanTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PlLiningPlanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PlLiningPlanRow : global::System.Data.DataRow {
            
            private PlLiningPlanDataTable tablePlLiningPlan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PlLiningPlanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlLiningPlan = ((PlLiningPlanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tablePlLiningPlan.WorkIDColumn]));
                }
                set {
                    this[this.tablePlLiningPlan.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepairPointID {
                get {
                    return ((string)(this[this.tablePlLiningPlan.RepairPointIDColumn]));
                }
                set {
                    this[this.tablePlLiningPlan.RepairPointIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Selected {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePlLiningPlan.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UsmhDescription {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.UsmhDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsmhDescription\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.UsmhDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DsmhDescription {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.DsmhDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DsmhDescription\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.DsmhDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReamDistance {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.ReamDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReamDistance\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.ReamDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReamDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePlLiningPlan.ReamDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReamDate\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.ReamDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerDistance {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.LinerDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerDistance\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.LinerDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Direction {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.DirectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Direction\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.DirectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Reinstates {
                get {
                    try {
                        return ((int)(this[this.tablePlLiningPlan.ReinstatesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reinstates\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.ReinstatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LTMH {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.LTMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LTMH\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.LTMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VTMH {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.VTMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VTMH\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.VTMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Distance {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.DistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Distance\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.DistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size_ {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.Size_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size_\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.Size_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InstallDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePlLiningPlan.InstallDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstallDate\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.InstallDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MHShot {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.MHShotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHShot\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.MHShotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GroutDistance {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.GroutDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroutDistance\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.GroutDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime GroutDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePlLiningPlan.GroutDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroutDate\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.GroutDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Approval {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.ApprovalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Approval\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.ApprovalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ExtraRepair {
                get {
                    return ((bool)(this[this.tablePlLiningPlan.ExtraRepairColumn]));
                }
                set {
                    this[this.tablePlLiningPlan.ExtraRepairColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Cancelled {
                get {
                    return ((bool)(this[this.tablePlLiningPlan.CancelledColumn]));
                }
                set {
                    this[this.tablePlLiningPlan.CancelledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tablePlLiningPlan.DeletedColumn]));
                }
                set {
                    this[this.tablePlLiningPlan.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tablePlLiningPlan.COMPANY_IDColumn]));
                }
                set {
                    this[this.tablePlLiningPlan.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Liner {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.LinerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Liner\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.LinerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerMN {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.LinerMNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerMN\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.LinerMNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Video {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.VideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Video\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.VideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoMN {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.VideoMNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoMN\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.VideoMNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefectQualifier {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.DefectQualifierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefectQualifier\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.DefectQualifierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefectDetails {
                get {
                    try {
                        return ((string)(this[this.tablePlLiningPlan.DefectDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DefectDetails\' in table \'PlLiningPlan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePlLiningPlan.DefectDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tablePlLiningPlan.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tablePlLiningPlan.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tablePlLiningPlan.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tablePlLiningPlan.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tablePlLiningPlan.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tablePlLiningPlan.Date_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tablePlLiningPlan.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tablePlLiningPlan.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsmhDescriptionNull() {
                return this.IsNull(this.tablePlLiningPlan.UsmhDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsmhDescriptionNull() {
                this[this.tablePlLiningPlan.UsmhDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDsmhDescriptionNull() {
                return this.IsNull(this.tablePlLiningPlan.DsmhDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDsmhDescriptionNull() {
                this[this.tablePlLiningPlan.DsmhDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tablePlLiningPlan.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tablePlLiningPlan.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReamDistanceNull() {
                return this.IsNull(this.tablePlLiningPlan.ReamDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReamDistanceNull() {
                this[this.tablePlLiningPlan.ReamDistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReamDateNull() {
                return this.IsNull(this.tablePlLiningPlan.ReamDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReamDateNull() {
                this[this.tablePlLiningPlan.ReamDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerDistanceNull() {
                return this.IsNull(this.tablePlLiningPlan.LinerDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerDistanceNull() {
                this[this.tablePlLiningPlan.LinerDistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDirectionNull() {
                return this.IsNull(this.tablePlLiningPlan.DirectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDirectionNull() {
                this[this.tablePlLiningPlan.DirectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReinstatesNull() {
                return this.IsNull(this.tablePlLiningPlan.ReinstatesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReinstatesNull() {
                this[this.tablePlLiningPlan.ReinstatesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLTMHNull() {
                return this.IsNull(this.tablePlLiningPlan.LTMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLTMHNull() {
                this[this.tablePlLiningPlan.LTMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVTMHNull() {
                return this.IsNull(this.tablePlLiningPlan.VTMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVTMHNull() {
                this[this.tablePlLiningPlan.VTMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceNull() {
                return this.IsNull(this.tablePlLiningPlan.DistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceNull() {
                this[this.tablePlLiningPlan.DistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSize_Null() {
                return this.IsNull(this.tablePlLiningPlan.Size_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSize_Null() {
                this[this.tablePlLiningPlan.Size_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstallDateNull() {
                return this.IsNull(this.tablePlLiningPlan.InstallDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstallDateNull() {
                this[this.tablePlLiningPlan.InstallDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHShotNull() {
                return this.IsNull(this.tablePlLiningPlan.MHShotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHShotNull() {
                this[this.tablePlLiningPlan.MHShotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroutDistanceNull() {
                return this.IsNull(this.tablePlLiningPlan.GroutDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroutDistanceNull() {
                this[this.tablePlLiningPlan.GroutDistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroutDateNull() {
                return this.IsNull(this.tablePlLiningPlan.GroutDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroutDateNull() {
                this[this.tablePlLiningPlan.GroutDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovalNull() {
                return this.IsNull(this.tablePlLiningPlan.ApprovalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovalNull() {
                this[this.tablePlLiningPlan.ApprovalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tablePlLiningPlan.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tablePlLiningPlan.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerNull() {
                return this.IsNull(this.tablePlLiningPlan.LinerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerNull() {
                this[this.tablePlLiningPlan.LinerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerMNNull() {
                return this.IsNull(this.tablePlLiningPlan.LinerMNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerMNNull() {
                this[this.tablePlLiningPlan.LinerMNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoNull() {
                return this.IsNull(this.tablePlLiningPlan.VideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoNull() {
                this[this.tablePlLiningPlan.VideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoMNNull() {
                return this.IsNull(this.tablePlLiningPlan.VideoMNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoMNNull() {
                this[this.tablePlLiningPlan.VideoMNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefectQualifierNull() {
                return this.IsNull(this.tablePlLiningPlan.DefectQualifierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefectQualifierNull() {
                this[this.tablePlLiningPlan.DefectQualifierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefectDetailsNull() {
                return this.IsNull(this.tablePlLiningPlan.DefectDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefectDetailsNull() {
                this[this.tablePlLiningPlan.DefectDetailsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PlLiningPlanRowChangeEvent : global::System.EventArgs {
            
            private PlLiningPlanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlLiningPlanRowChangeEvent(PlLiningPlanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PlLiningPlanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591