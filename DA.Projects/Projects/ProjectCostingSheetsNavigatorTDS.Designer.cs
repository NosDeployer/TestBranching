//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Projects.Projects {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectCostingSheetsNavigatorTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectCostingSheetsNavigatorTDS : global::System.Data.DataSet {
        
        private ProjectCostingSheetsNavigatorDataTable tableProjectCostingSheetsNavigator;
        
        private ProjectCombinedCostingSheetsNavigatorDataTable tableProjectCombinedCostingSheetsNavigator;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectCostingSheetsNavigatorTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectCostingSheetsNavigatorTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ProjectCostingSheetsNavigator"] != null)) {
                    base.Tables.Add(new ProjectCostingSheetsNavigatorDataTable(ds.Tables["ProjectCostingSheetsNavigator"]));
                }
                if ((ds.Tables["ProjectCombinedCostingSheetsNavigator"] != null)) {
                    base.Tables.Add(new ProjectCombinedCostingSheetsNavigatorDataTable(ds.Tables["ProjectCombinedCostingSheetsNavigator"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectCostingSheetsNavigatorDataTable ProjectCostingSheetsNavigator {
            get {
                return this.tableProjectCostingSheetsNavigator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectCombinedCostingSheetsNavigatorDataTable ProjectCombinedCostingSheetsNavigator {
            get {
                return this.tableProjectCombinedCostingSheetsNavigator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectCostingSheetsNavigatorTDS cln = ((ProjectCostingSheetsNavigatorTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ProjectCostingSheetsNavigator"] != null)) {
                    base.Tables.Add(new ProjectCostingSheetsNavigatorDataTable(ds.Tables["ProjectCostingSheetsNavigator"]));
                }
                if ((ds.Tables["ProjectCombinedCostingSheetsNavigator"] != null)) {
                    base.Tables.Add(new ProjectCombinedCostingSheetsNavigatorDataTable(ds.Tables["ProjectCombinedCostingSheetsNavigator"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProjectCostingSheetsNavigator = ((ProjectCostingSheetsNavigatorDataTable)(base.Tables["ProjectCostingSheetsNavigator"]));
            if ((initTable == true)) {
                if ((this.tableProjectCostingSheetsNavigator != null)) {
                    this.tableProjectCostingSheetsNavigator.InitVars();
                }
            }
            this.tableProjectCombinedCostingSheetsNavigator = ((ProjectCombinedCostingSheetsNavigatorDataTable)(base.Tables["ProjectCombinedCostingSheetsNavigator"]));
            if ((initTable == true)) {
                if ((this.tableProjectCombinedCostingSheetsNavigator != null)) {
                    this.tableProjectCombinedCostingSheetsNavigator.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectCostingSheetsNavigatorTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectCostingSheetsNavigatorTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProjectCostingSheetsNavigator = new ProjectCostingSheetsNavigatorDataTable();
            base.Tables.Add(this.tableProjectCostingSheetsNavigator);
            this.tableProjectCombinedCostingSheetsNavigator = new ProjectCombinedCostingSheetsNavigatorDataTable();
            base.Tables.Add(this.tableProjectCombinedCostingSheetsNavigator);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectCostingSheetsNavigator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectCombinedCostingSheetsNavigator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectCostingSheetsNavigatorTDS ds = new ProjectCostingSheetsNavigatorTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ProjectCostingSheetsNavigatorRowChangeEventHandler(object sender, ProjectCostingSheetsNavigatorRowChangeEvent e);
        
        public delegate void ProjectCombinedCostingSheetsNavigatorRowChangeEventHandler(object sender, ProjectCombinedCostingSheetsNavigatorRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectCostingSheetsNavigatorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDataRange;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCostingSheetsNavigatorDataTable() {
                this.TableName = "ProjectCostingSheetsNavigator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectCostingSheetsNavigatorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectCostingSheetsNavigatorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataRangeColumn {
                get {
                    return this.columnDataRange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCostingSheetsNavigatorRow this[int index] {
                get {
                    return ((ProjectCostingSheetsNavigatorRow)(this.Rows[index]));
                }
            }
            
            public event ProjectCostingSheetsNavigatorRowChangeEventHandler ProjectCostingSheetsNavigatorRowChanging;
            
            public event ProjectCostingSheetsNavigatorRowChangeEventHandler ProjectCostingSheetsNavigatorRowChanged;
            
            public event ProjectCostingSheetsNavigatorRowChangeEventHandler ProjectCostingSheetsNavigatorRowDeleting;
            
            public event ProjectCostingSheetsNavigatorRowChangeEventHandler ProjectCostingSheetsNavigatorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectCostingSheetsNavigatorRow(ProjectCostingSheetsNavigatorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCostingSheetsNavigatorRow AddProjectCostingSheetsNavigatorRow(int CostingSheetID, System.DateTime StartDate, System.DateTime EndDate, string DataRange, bool Selected, string State) {
                ProjectCostingSheetsNavigatorRow rowProjectCostingSheetsNavigatorRow = ((ProjectCostingSheetsNavigatorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        StartDate,
                        EndDate,
                        DataRange,
                        Selected,
                        State};
                rowProjectCostingSheetsNavigatorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectCostingSheetsNavigatorRow);
                return rowProjectCostingSheetsNavigatorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCostingSheetsNavigatorRow FindByCostingSheetID(int CostingSheetID) {
                return ((ProjectCostingSheetsNavigatorRow)(this.Rows.Find(new object[] {
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectCostingSheetsNavigatorDataTable cln = ((ProjectCostingSheetsNavigatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectCostingSheetsNavigatorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDataRange = base.Columns["DataRange"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDataRange = new global::System.Data.DataColumn("DataRange", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataRange);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCostingSheetsNavigatorRow NewProjectCostingSheetsNavigatorRow() {
                return ((ProjectCostingSheetsNavigatorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectCostingSheetsNavigatorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectCostingSheetsNavigatorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectCostingSheetsNavigatorRowChanged != null)) {
                    this.ProjectCostingSheetsNavigatorRowChanged(this, new ProjectCostingSheetsNavigatorRowChangeEvent(((ProjectCostingSheetsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectCostingSheetsNavigatorRowChanging != null)) {
                    this.ProjectCostingSheetsNavigatorRowChanging(this, new ProjectCostingSheetsNavigatorRowChangeEvent(((ProjectCostingSheetsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectCostingSheetsNavigatorRowDeleted != null)) {
                    this.ProjectCostingSheetsNavigatorRowDeleted(this, new ProjectCostingSheetsNavigatorRowChangeEvent(((ProjectCostingSheetsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectCostingSheetsNavigatorRowDeleting != null)) {
                    this.ProjectCostingSheetsNavigatorRowDeleting(this, new ProjectCostingSheetsNavigatorRowChangeEvent(((ProjectCostingSheetsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectCostingSheetsNavigatorRow(ProjectCostingSheetsNavigatorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetsNavigatorTDS ds = new ProjectCostingSheetsNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectCostingSheetsNavigatorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectCombinedCostingSheetsNavigatorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDataRange;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnCombinedProjects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCombinedCostingSheetsNavigatorDataTable() {
                this.TableName = "ProjectCombinedCostingSheetsNavigator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectCombinedCostingSheetsNavigatorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectCombinedCostingSheetsNavigatorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DataRangeColumn {
                get {
                    return this.columnDataRange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CombinedProjectsColumn {
                get {
                    return this.columnCombinedProjects;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCombinedCostingSheetsNavigatorRow this[int index] {
                get {
                    return ((ProjectCombinedCostingSheetsNavigatorRow)(this.Rows[index]));
                }
            }
            
            public event ProjectCombinedCostingSheetsNavigatorRowChangeEventHandler ProjectCombinedCostingSheetsNavigatorRowChanging;
            
            public event ProjectCombinedCostingSheetsNavigatorRowChangeEventHandler ProjectCombinedCostingSheetsNavigatorRowChanged;
            
            public event ProjectCombinedCostingSheetsNavigatorRowChangeEventHandler ProjectCombinedCostingSheetsNavigatorRowDeleting;
            
            public event ProjectCombinedCostingSheetsNavigatorRowChangeEventHandler ProjectCombinedCostingSheetsNavigatorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectCombinedCostingSheetsNavigatorRow(ProjectCombinedCostingSheetsNavigatorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCombinedCostingSheetsNavigatorRow AddProjectCombinedCostingSheetsNavigatorRow(int CostingSheetID, System.DateTime StartDate, System.DateTime EndDate, string DataRange, bool Selected, string State, string CombinedProjects) {
                ProjectCombinedCostingSheetsNavigatorRow rowProjectCombinedCostingSheetsNavigatorRow = ((ProjectCombinedCostingSheetsNavigatorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        StartDate,
                        EndDate,
                        DataRange,
                        Selected,
                        State,
                        CombinedProjects};
                rowProjectCombinedCostingSheetsNavigatorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectCombinedCostingSheetsNavigatorRow);
                return rowProjectCombinedCostingSheetsNavigatorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCombinedCostingSheetsNavigatorRow FindByCostingSheetID(int CostingSheetID) {
                return ((ProjectCombinedCostingSheetsNavigatorRow)(this.Rows.Find(new object[] {
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectCombinedCostingSheetsNavigatorDataTable cln = ((ProjectCombinedCostingSheetsNavigatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectCombinedCostingSheetsNavigatorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDataRange = base.Columns["DataRange"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnCombinedProjects = base.Columns["CombinedProjects"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDataRange = new global::System.Data.DataColumn("DataRange", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataRange);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnCombinedProjects = new global::System.Data.DataColumn("CombinedProjects", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCombinedProjects);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCombinedCostingSheetsNavigatorRow NewProjectCombinedCostingSheetsNavigatorRow() {
                return ((ProjectCombinedCostingSheetsNavigatorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectCombinedCostingSheetsNavigatorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectCombinedCostingSheetsNavigatorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectCombinedCostingSheetsNavigatorRowChanged != null)) {
                    this.ProjectCombinedCostingSheetsNavigatorRowChanged(this, new ProjectCombinedCostingSheetsNavigatorRowChangeEvent(((ProjectCombinedCostingSheetsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectCombinedCostingSheetsNavigatorRowChanging != null)) {
                    this.ProjectCombinedCostingSheetsNavigatorRowChanging(this, new ProjectCombinedCostingSheetsNavigatorRowChangeEvent(((ProjectCombinedCostingSheetsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectCombinedCostingSheetsNavigatorRowDeleted != null)) {
                    this.ProjectCombinedCostingSheetsNavigatorRowDeleted(this, new ProjectCombinedCostingSheetsNavigatorRowChangeEvent(((ProjectCombinedCostingSheetsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectCombinedCostingSheetsNavigatorRowDeleting != null)) {
                    this.ProjectCombinedCostingSheetsNavigatorRowDeleting(this, new ProjectCombinedCostingSheetsNavigatorRowChangeEvent(((ProjectCombinedCostingSheetsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectCombinedCostingSheetsNavigatorRow(ProjectCombinedCostingSheetsNavigatorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetsNavigatorTDS ds = new ProjectCostingSheetsNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectCombinedCostingSheetsNavigatorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectCostingSheetsNavigatorRow : global::System.Data.DataRow {
            
            private ProjectCostingSheetsNavigatorDataTable tableProjectCostingSheetsNavigator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectCostingSheetsNavigatorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectCostingSheetsNavigator = ((ProjectCostingSheetsNavigatorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableProjectCostingSheetsNavigator.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableProjectCostingSheetsNavigator.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjectCostingSheetsNavigator.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'ProjectCostingSheetsNavigator\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableProjectCostingSheetsNavigator.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjectCostingSheetsNavigator.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'ProjectCostingSheetsNavigator\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableProjectCostingSheetsNavigator.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataRange {
                get {
                    try {
                        return ((string)(this[this.tableProjectCostingSheetsNavigator.DataRangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataRange\' in table \'ProjectCostingSheetsNavigator\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableProjectCostingSheetsNavigator.DataRangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableProjectCostingSheetsNavigator.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'ProjectCostingSheetsNavigator\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableProjectCostingSheetsNavigator.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableProjectCostingSheetsNavigator.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ProjectCostingSheetsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectCostingSheetsNavigator.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableProjectCostingSheetsNavigator.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableProjectCostingSheetsNavigator.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableProjectCostingSheetsNavigator.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableProjectCostingSheetsNavigator.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataRangeNull() {
                return this.IsNull(this.tableProjectCostingSheetsNavigator.DataRangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataRangeNull() {
                this[this.tableProjectCostingSheetsNavigator.DataRangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableProjectCostingSheetsNavigator.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableProjectCostingSheetsNavigator.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableProjectCostingSheetsNavigator.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableProjectCostingSheetsNavigator.StateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectCombinedCostingSheetsNavigatorRow : global::System.Data.DataRow {
            
            private ProjectCombinedCostingSheetsNavigatorDataTable tableProjectCombinedCostingSheetsNavigator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectCombinedCostingSheetsNavigatorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectCombinedCostingSheetsNavigator = ((ProjectCombinedCostingSheetsNavigatorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableProjectCombinedCostingSheetsNavigator.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableProjectCombinedCostingSheetsNavigator.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjectCombinedCostingSheetsNavigator.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'ProjectCombinedCostingSheetsNavigator\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectCombinedCostingSheetsNavigator.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjectCombinedCostingSheetsNavigator.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'ProjectCombinedCostingSheetsNavigator\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectCombinedCostingSheetsNavigator.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataRange {
                get {
                    try {
                        return ((string)(this[this.tableProjectCombinedCostingSheetsNavigator.DataRangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DataRange\' in table \'ProjectCombinedCostingSheetsNavigator\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectCombinedCostingSheetsNavigator.DataRangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableProjectCombinedCostingSheetsNavigator.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'ProjectCombinedCostingSheetsNavigator\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectCombinedCostingSheetsNavigator.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableProjectCombinedCostingSheetsNavigator.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ProjectCombinedCostingSheetsNavigator\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectCombinedCostingSheetsNavigator.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CombinedProjects {
                get {
                    try {
                        return ((string)(this[this.tableProjectCombinedCostingSheetsNavigator.CombinedProjectsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CombinedProjects\' in table \'ProjectCombinedCostingSheetsNav" +
                                "igator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectCombinedCostingSheetsNavigator.CombinedProjectsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableProjectCombinedCostingSheetsNavigator.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableProjectCombinedCostingSheetsNavigator.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableProjectCombinedCostingSheetsNavigator.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableProjectCombinedCostingSheetsNavigator.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDataRangeNull() {
                return this.IsNull(this.tableProjectCombinedCostingSheetsNavigator.DataRangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDataRangeNull() {
                this[this.tableProjectCombinedCostingSheetsNavigator.DataRangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableProjectCombinedCostingSheetsNavigator.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableProjectCombinedCostingSheetsNavigator.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableProjectCombinedCostingSheetsNavigator.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableProjectCombinedCostingSheetsNavigator.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombinedProjectsNull() {
                return this.IsNull(this.tableProjectCombinedCostingSheetsNavigator.CombinedProjectsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCombinedProjectsNull() {
                this[this.tableProjectCombinedCostingSheetsNavigator.CombinedProjectsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectCostingSheetsNavigatorRowChangeEvent : global::System.EventArgs {
            
            private ProjectCostingSheetsNavigatorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCostingSheetsNavigatorRowChangeEvent(ProjectCostingSheetsNavigatorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCostingSheetsNavigatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectCombinedCostingSheetsNavigatorRowChangeEvent : global::System.EventArgs {
            
            private ProjectCombinedCostingSheetsNavigatorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCombinedCostingSheetsNavigatorRowChangeEvent(ProjectCombinedCostingSheetsNavigatorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectCombinedCostingSheetsNavigatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591