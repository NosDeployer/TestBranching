//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3643
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Projects.Projects {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectNavigatorTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectNavigatorTDS : global::System.Data.DataSet {
        
        private LFS_PROJECT_NAVIGATORDataTable tableLFS_PROJECT_NAVIGATOR;
        
        private ProjectNotesDataTable tableProjectNotes;
        
        private ProjectServiceDataTable tableProjectService;
        
        private LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE;
        
        private LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable tableLFS_PROJECT_JOB_CLASS_TYPE_RATE;
        
        private ProjectWorkFunctionBudgetDataTable tableProjectWorkFunctionBudget;
        
        private ProjectUnitsBudgetDataTable tableProjectUnitsBudget;
        
        private ProjectMaterialsBudgetDataTable tableProjectMaterialsBudget;
        
        private ProjectSubcontractorsBudgetDataTable tableProjectSubcontractorsBudget;
        
        private ProjectHotelsBudgetDataTable tableProjectHotelsBudget;
        
        private ProjectBondingsBudgetDataTable tableProjectBondingsBudget;
        
        private ProjectInsurancesBudgetDataTable tableProjectInsurancesBudget;
        
        private ProjectOtherCostsBudgetDataTable tableProjectOtherCostsBudget;
        
        private ProjectJobInfoDataTable tableProjectJobInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectNavigatorTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectNavigatorTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_PROJECT_NAVIGATOR"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_NAVIGATORDataTable(ds.Tables["LFS_PROJECT_NAVIGATOR"]));
                }
                if ((ds.Tables["ProjectNotes"] != null)) {
                    base.Tables.Add(new ProjectNotesDataTable(ds.Tables["ProjectNotes"]));
                }
                if ((ds.Tables["ProjectService"] != null)) {
                    base.Tables.Add(new ProjectServiceDataTable(ds.Tables["ProjectService"]));
                }
                if ((ds.Tables["LFS_PROJECT_WORK_FUNCTION_FAIR_WAGE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable(ds.Tables["LFS_PROJECT_WORK_FUNCTION_FAIR_WAGE"]));
                }
                if ((ds.Tables["LFS_PROJECT_JOB_CLASS_TYPE_RATE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable(ds.Tables["LFS_PROJECT_JOB_CLASS_TYPE_RATE"]));
                }
                if ((ds.Tables["ProjectWorkFunctionBudget"] != null)) {
                    base.Tables.Add(new ProjectWorkFunctionBudgetDataTable(ds.Tables["ProjectWorkFunctionBudget"]));
                }
                if ((ds.Tables["ProjectUnitsBudget"] != null)) {
                    base.Tables.Add(new ProjectUnitsBudgetDataTable(ds.Tables["ProjectUnitsBudget"]));
                }
                if ((ds.Tables["ProjectMaterialsBudget"] != null)) {
                    base.Tables.Add(new ProjectMaterialsBudgetDataTable(ds.Tables["ProjectMaterialsBudget"]));
                }
                if ((ds.Tables["ProjectSubcontractorsBudget"] != null)) {
                    base.Tables.Add(new ProjectSubcontractorsBudgetDataTable(ds.Tables["ProjectSubcontractorsBudget"]));
                }
                if ((ds.Tables["ProjectHotelsBudget"] != null)) {
                    base.Tables.Add(new ProjectHotelsBudgetDataTable(ds.Tables["ProjectHotelsBudget"]));
                }
                if ((ds.Tables["ProjectBondingsBudget"] != null)) {
                    base.Tables.Add(new ProjectBondingsBudgetDataTable(ds.Tables["ProjectBondingsBudget"]));
                }
                if ((ds.Tables["ProjectInsurancesBudget"] != null)) {
                    base.Tables.Add(new ProjectInsurancesBudgetDataTable(ds.Tables["ProjectInsurancesBudget"]));
                }
                if ((ds.Tables["ProjectOtherCostsBudget"] != null)) {
                    base.Tables.Add(new ProjectOtherCostsBudgetDataTable(ds.Tables["ProjectOtherCostsBudget"]));
                }
                if ((ds.Tables["ProjectJobInfo"] != null)) {
                    base.Tables.Add(new ProjectJobInfoDataTable(ds.Tables["ProjectJobInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_NAVIGATORDataTable LFS_PROJECT_NAVIGATOR {
            get {
                return this.tableLFS_PROJECT_NAVIGATOR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectNotesDataTable ProjectNotes {
            get {
                return this.tableProjectNotes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectServiceDataTable ProjectService {
            get {
                return this.tableProjectService;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable LFS_PROJECT_WORK_FUNCTION_FAIR_WAGE {
            get {
                return this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable LFS_PROJECT_JOB_CLASS_TYPE_RATE {
            get {
                return this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectWorkFunctionBudgetDataTable ProjectWorkFunctionBudget {
            get {
                return this.tableProjectWorkFunctionBudget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectUnitsBudgetDataTable ProjectUnitsBudget {
            get {
                return this.tableProjectUnitsBudget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectMaterialsBudgetDataTable ProjectMaterialsBudget {
            get {
                return this.tableProjectMaterialsBudget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectSubcontractorsBudgetDataTable ProjectSubcontractorsBudget {
            get {
                return this.tableProjectSubcontractorsBudget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectHotelsBudgetDataTable ProjectHotelsBudget {
            get {
                return this.tableProjectHotelsBudget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectBondingsBudgetDataTable ProjectBondingsBudget {
            get {
                return this.tableProjectBondingsBudget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectInsurancesBudgetDataTable ProjectInsurancesBudget {
            get {
                return this.tableProjectInsurancesBudget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectOtherCostsBudgetDataTable ProjectOtherCostsBudget {
            get {
                return this.tableProjectOtherCostsBudget;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectJobInfoDataTable ProjectJobInfo {
            get {
                return this.tableProjectJobInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectNavigatorTDS cln = ((ProjectNavigatorTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_PROJECT_NAVIGATOR"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_NAVIGATORDataTable(ds.Tables["LFS_PROJECT_NAVIGATOR"]));
                }
                if ((ds.Tables["ProjectNotes"] != null)) {
                    base.Tables.Add(new ProjectNotesDataTable(ds.Tables["ProjectNotes"]));
                }
                if ((ds.Tables["ProjectService"] != null)) {
                    base.Tables.Add(new ProjectServiceDataTable(ds.Tables["ProjectService"]));
                }
                if ((ds.Tables["LFS_PROJECT_WORK_FUNCTION_FAIR_WAGE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable(ds.Tables["LFS_PROJECT_WORK_FUNCTION_FAIR_WAGE"]));
                }
                if ((ds.Tables["LFS_PROJECT_JOB_CLASS_TYPE_RATE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable(ds.Tables["LFS_PROJECT_JOB_CLASS_TYPE_RATE"]));
                }
                if ((ds.Tables["ProjectWorkFunctionBudget"] != null)) {
                    base.Tables.Add(new ProjectWorkFunctionBudgetDataTable(ds.Tables["ProjectWorkFunctionBudget"]));
                }
                if ((ds.Tables["ProjectUnitsBudget"] != null)) {
                    base.Tables.Add(new ProjectUnitsBudgetDataTable(ds.Tables["ProjectUnitsBudget"]));
                }
                if ((ds.Tables["ProjectMaterialsBudget"] != null)) {
                    base.Tables.Add(new ProjectMaterialsBudgetDataTable(ds.Tables["ProjectMaterialsBudget"]));
                }
                if ((ds.Tables["ProjectSubcontractorsBudget"] != null)) {
                    base.Tables.Add(new ProjectSubcontractorsBudgetDataTable(ds.Tables["ProjectSubcontractorsBudget"]));
                }
                if ((ds.Tables["ProjectHotelsBudget"] != null)) {
                    base.Tables.Add(new ProjectHotelsBudgetDataTable(ds.Tables["ProjectHotelsBudget"]));
                }
                if ((ds.Tables["ProjectBondingsBudget"] != null)) {
                    base.Tables.Add(new ProjectBondingsBudgetDataTable(ds.Tables["ProjectBondingsBudget"]));
                }
                if ((ds.Tables["ProjectInsurancesBudget"] != null)) {
                    base.Tables.Add(new ProjectInsurancesBudgetDataTable(ds.Tables["ProjectInsurancesBudget"]));
                }
                if ((ds.Tables["ProjectOtherCostsBudget"] != null)) {
                    base.Tables.Add(new ProjectOtherCostsBudgetDataTable(ds.Tables["ProjectOtherCostsBudget"]));
                }
                if ((ds.Tables["ProjectJobInfo"] != null)) {
                    base.Tables.Add(new ProjectJobInfoDataTable(ds.Tables["ProjectJobInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_PROJECT_NAVIGATOR = ((LFS_PROJECT_NAVIGATORDataTable)(base.Tables["LFS_PROJECT_NAVIGATOR"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_NAVIGATOR != null)) {
                    this.tableLFS_PROJECT_NAVIGATOR.InitVars();
                }
            }
            this.tableProjectNotes = ((ProjectNotesDataTable)(base.Tables["ProjectNotes"]));
            if ((initTable == true)) {
                if ((this.tableProjectNotes != null)) {
                    this.tableProjectNotes.InitVars();
                }
            }
            this.tableProjectService = ((ProjectServiceDataTable)(base.Tables["ProjectService"]));
            if ((initTable == true)) {
                if ((this.tableProjectService != null)) {
                    this.tableProjectService.InitVars();
                }
            }
            this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE = ((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable)(base.Tables["LFS_PROJECT_WORK_FUNCTION_FAIR_WAGE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE != null)) {
                    this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.InitVars();
                }
            }
            this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE = ((LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable)(base.Tables["LFS_PROJECT_JOB_CLASS_TYPE_RATE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE != null)) {
                    this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.InitVars();
                }
            }
            this.tableProjectWorkFunctionBudget = ((ProjectWorkFunctionBudgetDataTable)(base.Tables["ProjectWorkFunctionBudget"]));
            if ((initTable == true)) {
                if ((this.tableProjectWorkFunctionBudget != null)) {
                    this.tableProjectWorkFunctionBudget.InitVars();
                }
            }
            this.tableProjectUnitsBudget = ((ProjectUnitsBudgetDataTable)(base.Tables["ProjectUnitsBudget"]));
            if ((initTable == true)) {
                if ((this.tableProjectUnitsBudget != null)) {
                    this.tableProjectUnitsBudget.InitVars();
                }
            }
            this.tableProjectMaterialsBudget = ((ProjectMaterialsBudgetDataTable)(base.Tables["ProjectMaterialsBudget"]));
            if ((initTable == true)) {
                if ((this.tableProjectMaterialsBudget != null)) {
                    this.tableProjectMaterialsBudget.InitVars();
                }
            }
            this.tableProjectSubcontractorsBudget = ((ProjectSubcontractorsBudgetDataTable)(base.Tables["ProjectSubcontractorsBudget"]));
            if ((initTable == true)) {
                if ((this.tableProjectSubcontractorsBudget != null)) {
                    this.tableProjectSubcontractorsBudget.InitVars();
                }
            }
            this.tableProjectHotelsBudget = ((ProjectHotelsBudgetDataTable)(base.Tables["ProjectHotelsBudget"]));
            if ((initTable == true)) {
                if ((this.tableProjectHotelsBudget != null)) {
                    this.tableProjectHotelsBudget.InitVars();
                }
            }
            this.tableProjectBondingsBudget = ((ProjectBondingsBudgetDataTable)(base.Tables["ProjectBondingsBudget"]));
            if ((initTable == true)) {
                if ((this.tableProjectBondingsBudget != null)) {
                    this.tableProjectBondingsBudget.InitVars();
                }
            }
            this.tableProjectInsurancesBudget = ((ProjectInsurancesBudgetDataTable)(base.Tables["ProjectInsurancesBudget"]));
            if ((initTable == true)) {
                if ((this.tableProjectInsurancesBudget != null)) {
                    this.tableProjectInsurancesBudget.InitVars();
                }
            }
            this.tableProjectOtherCostsBudget = ((ProjectOtherCostsBudgetDataTable)(base.Tables["ProjectOtherCostsBudget"]));
            if ((initTable == true)) {
                if ((this.tableProjectOtherCostsBudget != null)) {
                    this.tableProjectOtherCostsBudget.InitVars();
                }
            }
            this.tableProjectJobInfo = ((ProjectJobInfoDataTable)(base.Tables["ProjectJobInfo"]));
            if ((initTable == true)) {
                if ((this.tableProjectJobInfo != null)) {
                    this.tableProjectJobInfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectNavigatorTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectNavigatorTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_PROJECT_NAVIGATOR = new LFS_PROJECT_NAVIGATORDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_NAVIGATOR);
            this.tableProjectNotes = new ProjectNotesDataTable();
            base.Tables.Add(this.tableProjectNotes);
            this.tableProjectService = new ProjectServiceDataTable();
            base.Tables.Add(this.tableProjectService);
            this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE = new LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE);
            this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE = new LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE);
            this.tableProjectWorkFunctionBudget = new ProjectWorkFunctionBudgetDataTable();
            base.Tables.Add(this.tableProjectWorkFunctionBudget);
            this.tableProjectUnitsBudget = new ProjectUnitsBudgetDataTable();
            base.Tables.Add(this.tableProjectUnitsBudget);
            this.tableProjectMaterialsBudget = new ProjectMaterialsBudgetDataTable();
            base.Tables.Add(this.tableProjectMaterialsBudget);
            this.tableProjectSubcontractorsBudget = new ProjectSubcontractorsBudgetDataTable();
            base.Tables.Add(this.tableProjectSubcontractorsBudget);
            this.tableProjectHotelsBudget = new ProjectHotelsBudgetDataTable();
            base.Tables.Add(this.tableProjectHotelsBudget);
            this.tableProjectBondingsBudget = new ProjectBondingsBudgetDataTable();
            base.Tables.Add(this.tableProjectBondingsBudget);
            this.tableProjectInsurancesBudget = new ProjectInsurancesBudgetDataTable();
            base.Tables.Add(this.tableProjectInsurancesBudget);
            this.tableProjectOtherCostsBudget = new ProjectOtherCostsBudgetDataTable();
            base.Tables.Add(this.tableProjectOtherCostsBudget);
            this.tableProjectJobInfo = new ProjectJobInfoDataTable();
            base.Tables.Add(this.tableProjectJobInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_NAVIGATOR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectNotes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectService() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_JOB_CLASS_TYPE_RATE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectWorkFunctionBudget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectUnitsBudget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectMaterialsBudget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectSubcontractorsBudget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectHotelsBudget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectBondingsBudget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectInsurancesBudget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectOtherCostsBudget() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectJobInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_PROJECT_NAVIGATORRowChangeEventHandler(object sender, LFS_PROJECT_NAVIGATORRowChangeEvent e);
        
        public delegate void ProjectNotesRowChangeEventHandler(object sender, ProjectNotesRowChangeEvent e);
        
        public delegate void ProjectServiceRowChangeEventHandler(object sender, ProjectServiceRowChangeEvent e);
        
        public delegate void LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEventHandler(object sender, LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEvent e);
        
        public delegate void LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEventHandler(object sender, LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEvent e);
        
        public delegate void ProjectWorkFunctionBudgetRowChangeEventHandler(object sender, ProjectWorkFunctionBudgetRowChangeEvent e);
        
        public delegate void ProjectUnitsBudgetRowChangeEventHandler(object sender, ProjectUnitsBudgetRowChangeEvent e);
        
        public delegate void ProjectMaterialsBudgetRowChangeEventHandler(object sender, ProjectMaterialsBudgetRowChangeEvent e);
        
        public delegate void ProjectSubcontractorsBudgetRowChangeEventHandler(object sender, ProjectSubcontractorsBudgetRowChangeEvent e);
        
        public delegate void ProjectHotelsBudgetRowChangeEventHandler(object sender, ProjectHotelsBudgetRowChangeEvent e);
        
        public delegate void ProjectBondingsBudgetRowChangeEventHandler(object sender, ProjectBondingsBudgetRowChangeEvent e);
        
        public delegate void ProjectInsurancesBudgetRowChangeEventHandler(object sender, ProjectInsurancesBudgetRowChangeEvent e);
        
        public delegate void ProjectOtherCostsBudgetRowChangeEventHandler(object sender, ProjectOtherCostsBudgetRowChangeEvent e);
        
        public delegate void ProjectJobInfoRowChangeEventHandler(object sender, ProjectJobInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_NAVIGATORDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProjectNumber;
            
            private global::System.Data.DataColumn columnProjectType;
            
            private global::System.Data.DataColumn columnProjectState;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnInvoicedToDate;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_NAVIGATORDataTable() {
                this.TableName = "LFS_PROJECT_NAVIGATOR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_NAVIGATORDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_NAVIGATORDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNumberColumn {
                get {
                    return this.columnProjectNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTypeColumn {
                get {
                    return this.columnProjectType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectStateColumn {
                get {
                    return this.columnProjectState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoicedToDateColumn {
                get {
                    return this.columnInvoicedToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_NAVIGATORRow this[int index] {
                get {
                    return ((LFS_PROJECT_NAVIGATORRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_NAVIGATORRowChangeEventHandler LFS_PROJECT_NAVIGATORRowChanging;
            
            public event LFS_PROJECT_NAVIGATORRowChangeEventHandler LFS_PROJECT_NAVIGATORRowChanged;
            
            public event LFS_PROJECT_NAVIGATORRowChangeEventHandler LFS_PROJECT_NAVIGATORRowDeleting;
            
            public event LFS_PROJECT_NAVIGATORRowChangeEventHandler LFS_PROJECT_NAVIGATORRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_NAVIGATORRow(LFS_PROJECT_NAVIGATORRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_NAVIGATORRow AddLFS_PROJECT_NAVIGATORRow(string ProjectNumber, string ProjectType, string ProjectState, string Name, int ClientID, string ClientName, bool Deleted, decimal InvoicedToDate, bool Selected, string Description) {
                LFS_PROJECT_NAVIGATORRow rowLFS_PROJECT_NAVIGATORRow = ((LFS_PROJECT_NAVIGATORRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectNumber,
                        ProjectType,
                        ProjectState,
                        Name,
                        ClientID,
                        ClientName,
                        Deleted,
                        InvoicedToDate,
                        Selected,
                        Description};
                rowLFS_PROJECT_NAVIGATORRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_NAVIGATORRow);
                return rowLFS_PROJECT_NAVIGATORRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_NAVIGATORRow FindByProjectID(int ProjectID) {
                return ((LFS_PROJECT_NAVIGATORRow)(this.Rows.Find(new object[] {
                            ProjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_NAVIGATORDataTable cln = ((LFS_PROJECT_NAVIGATORDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_NAVIGATORDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProjectNumber = base.Columns["ProjectNumber"];
                this.columnProjectType = base.Columns["ProjectType"];
                this.columnProjectState = base.Columns["ProjectState"];
                this.columnName = base.Columns["Name"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnInvoicedToDate = base.Columns["InvoicedToDate"];
                this.columnSelected = base.Columns["Selected"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProjectNumber = new global::System.Data.DataColumn("ProjectNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectNumber);
                this.columnProjectType = new global::System.Data.DataColumn("ProjectType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectType);
                this.columnProjectState = new global::System.Data.DataColumn("ProjectState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectState);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnInvoicedToDate = new global::System.Data.DataColumn("InvoicedToDate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoicedToDate);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID}, true));
                this.columnProjectID.AutoIncrement = true;
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.ReadOnly = true;
                this.columnProjectID.Unique = true;
                this.columnProjectNumber.AllowDBNull = false;
                this.columnProjectNumber.MaxLength = 25;
                this.columnProjectType.AllowDBNull = false;
                this.columnProjectType.MaxLength = 25;
                this.columnProjectState.AllowDBNull = false;
                this.columnProjectState.MaxLength = 25;
                this.columnName.MaxLength = 100;
                this.columnClientID.AllowDBNull = false;
                this.columnClientName.MaxLength = 150;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_NAVIGATORRow NewLFS_PROJECT_NAVIGATORRow() {
                return ((LFS_PROJECT_NAVIGATORRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_NAVIGATORRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_NAVIGATORRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_NAVIGATORRowChanged != null)) {
                    this.LFS_PROJECT_NAVIGATORRowChanged(this, new LFS_PROJECT_NAVIGATORRowChangeEvent(((LFS_PROJECT_NAVIGATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_NAVIGATORRowChanging != null)) {
                    this.LFS_PROJECT_NAVIGATORRowChanging(this, new LFS_PROJECT_NAVIGATORRowChangeEvent(((LFS_PROJECT_NAVIGATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_NAVIGATORRowDeleted != null)) {
                    this.LFS_PROJECT_NAVIGATORRowDeleted(this, new LFS_PROJECT_NAVIGATORRowChangeEvent(((LFS_PROJECT_NAVIGATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_NAVIGATORRowDeleting != null)) {
                    this.LFS_PROJECT_NAVIGATORRowDeleting(this, new LFS_PROJECT_NAVIGATORRowChangeEvent(((LFS_PROJECT_NAVIGATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_NAVIGATORRow(LFS_PROJECT_NAVIGATORRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_NAVIGATORDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectNotesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnDateTime;
            
            private global::System.Data.DataColumn columnLoginID;
            
            private global::System.Data.DataColumn columnNote;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnORIGINAL_FILENAME;
            
            private global::System.Data.DataColumn columnFILENAME;
            
            private global::System.Data.DataColumn columnInNoteDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectNotesDataTable() {
                this.TableName = "ProjectNotes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectNotesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectNotesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTimeColumn {
                get {
                    return this.columnDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoginIDColumn {
                get {
                    return this.columnLoginID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn {
                get {
                    return this.columnLIBRARY_FILES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORIGINAL_FILENAMEColumn {
                get {
                    return this.columnORIGINAL_FILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILENAMEColumn {
                get {
                    return this.columnFILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InNoteDatabaseColumn {
                get {
                    return this.columnInNoteDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectNotesRow this[int index] {
                get {
                    return ((ProjectNotesRow)(this.Rows[index]));
                }
            }
            
            public event ProjectNotesRowChangeEventHandler ProjectNotesRowChanging;
            
            public event ProjectNotesRowChangeEventHandler ProjectNotesRowChanged;
            
            public event ProjectNotesRowChangeEventHandler ProjectNotesRowDeleting;
            
            public event ProjectNotesRowChangeEventHandler ProjectNotesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectNotesRow(ProjectNotesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectNotesRow AddProjectNotesRow(int ProjectID, int RefID, string Subject, System.DateTime DateTime, int LoginID, string Note, bool Deleted, int LIBRARY_FILES_ID, int COMPANY_ID, string ORIGINAL_FILENAME, string FILENAME, bool InNoteDatabase) {
                ProjectNotesRow rowProjectNotesRow = ((ProjectNotesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        RefID,
                        Subject,
                        DateTime,
                        LoginID,
                        Note,
                        Deleted,
                        LIBRARY_FILES_ID,
                        COMPANY_ID,
                        ORIGINAL_FILENAME,
                        FILENAME,
                        InNoteDatabase};
                rowProjectNotesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectNotesRow);
                return rowProjectNotesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectNotesRow FindByProjectIDRefID(int ProjectID, int RefID) {
                return ((ProjectNotesRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectNotesDataTable cln = ((ProjectNotesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectNotesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnDateTime = base.Columns["DateTime"];
                this.columnLoginID = base.Columns["LoginID"];
                this.columnNote = base.Columns["Note"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnORIGINAL_FILENAME = base.Columns["ORIGINAL_FILENAME"];
                this.columnFILENAME = base.Columns["FILENAME"];
                this.columnInNoteDatabase = base.Columns["InNoteDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnDateTime = new global::System.Data.DataColumn("DateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime);
                this.columnLoginID = new global::System.Data.DataColumn("LoginID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoginID);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnORIGINAL_FILENAME = new global::System.Data.DataColumn("ORIGINAL_FILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORIGINAL_FILENAME);
                this.columnFILENAME = new global::System.Data.DataColumn("FILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILENAME);
                this.columnInNoteDatabase = new global::System.Data.DataColumn("InNoteDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInNoteDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 100;
                this.columnDateTime.AllowDBNull = false;
                this.columnLoginID.AllowDBNull = false;
                this.columnNote.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectNotesRow NewProjectNotesRow() {
                return ((ProjectNotesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectNotesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectNotesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectNotesRowChanged != null)) {
                    this.ProjectNotesRowChanged(this, new ProjectNotesRowChangeEvent(((ProjectNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectNotesRowChanging != null)) {
                    this.ProjectNotesRowChanging(this, new ProjectNotesRowChangeEvent(((ProjectNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectNotesRowDeleted != null)) {
                    this.ProjectNotesRowDeleted(this, new ProjectNotesRowChangeEvent(((ProjectNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectNotesRowDeleting != null)) {
                    this.ProjectNotesRowDeleting(this, new ProjectNotesRowChangeEvent(((ProjectNotesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectNotesRow(ProjectNotesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectNotesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectServiceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAverageSize;
            
            private global::System.Data.DataColumn columnAveragePrice;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnTotal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectServiceDataTable() {
                this.TableName = "ProjectService";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectServiceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectServiceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageSizeColumn {
                get {
                    return this.columnAverageSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AveragePriceColumn {
                get {
                    return this.columnAveragePrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectServiceRow this[int index] {
                get {
                    return ((ProjectServiceRow)(this.Rows[index]));
                }
            }
            
            public event ProjectServiceRowChangeEventHandler ProjectServiceRowChanging;
            
            public event ProjectServiceRowChangeEventHandler ProjectServiceRowChanged;
            
            public event ProjectServiceRowChangeEventHandler ProjectServiceRowDeleting;
            
            public event ProjectServiceRowChangeEventHandler ProjectServiceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectServiceRow(ProjectServiceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectServiceRow AddProjectServiceRow(int ProjectID, int RefID, int ServiceID, string Description, string AverageSize, decimal AveragePrice, int Quantity, bool Deleted, int COMPANY_ID, bool InDatabase, decimal Total) {
                ProjectServiceRow rowProjectServiceRow = ((ProjectServiceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        RefID,
                        ServiceID,
                        Description,
                        AverageSize,
                        AveragePrice,
                        Quantity,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Total};
                rowProjectServiceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectServiceRow);
                return rowProjectServiceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectServiceRow FindByProjectIDRefID(int ProjectID, int RefID) {
                return ((ProjectServiceRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectServiceDataTable cln = ((ProjectServiceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectServiceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnDescription = base.Columns["Description"];
                this.columnAverageSize = base.Columns["AverageSize"];
                this.columnAveragePrice = base.Columns["AveragePrice"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnTotal = base.Columns["Total"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAverageSize = new global::System.Data.DataColumn("AverageSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageSize);
                this.columnAveragePrice = new global::System.Data.DataColumn("AveragePrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAveragePrice);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnDescription.MaxLength = 100;
                this.columnAverageSize.MaxLength = 10;
                this.columnQuantity.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectServiceRow NewProjectServiceRow() {
                return ((ProjectServiceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectServiceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectServiceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectServiceRowChanged != null)) {
                    this.ProjectServiceRowChanged(this, new ProjectServiceRowChangeEvent(((ProjectServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectServiceRowChanging != null)) {
                    this.ProjectServiceRowChanging(this, new ProjectServiceRowChangeEvent(((ProjectServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectServiceRowDeleted != null)) {
                    this.ProjectServiceRowDeleted(this, new ProjectServiceRowChangeEvent(((ProjectServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectServiceRowDeleting != null)) {
                    this.ProjectServiceRowDeleting(this, new ProjectServiceRowChangeEvent(((ProjectServiceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectServiceRow(ProjectServiceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectServiceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnIsFairWage;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable() {
                this.TableName = "LFS_PROJECT_WORK_FUNCTION_FAIR_WAGE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFairWageColumn {
                get {
                    return this.columnIsFairWage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow this[int index] {
                get {
                    return ((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEventHandler LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChanging;
            
            public event LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEventHandler LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChanged;
            
            public event LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEventHandler LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowDeleting;
            
            public event LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEventHandler LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow(LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow AddLFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow(int ProjectID, string Work_, string Function_, int RefID, bool IsFairWage, bool Deleted, int COMPANY_ID, bool InDatabase, string WorkFunction) {
                LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow rowLFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow = ((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        Work_,
                        Function_,
                        RefID,
                        IsFairWage,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        WorkFunction};
                rowLFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow);
                return rowLFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow FindByProjectIDWork_Function_RefID(int ProjectID, string Work_, string Function_, int RefID) {
                return ((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow)(this.Rows.Find(new object[] {
                            ProjectID,
                            Work_,
                            Function_,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable cln = ((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnRefID = base.Columns["RefID"];
                this.columnIsFairWage = base.Columns["IsFairWage"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnIsFairWage = new global::System.Data.DataColumn("IsFairWage", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFairWage);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnWork_,
                                this.columnFunction_,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.AllowDBNull = false;
                this.columnFunction_.MaxLength = 50;
                this.columnRefID.AllowDBNull = false;
                this.columnIsFairWage.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow NewLFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow() {
                return ((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChanged != null)) {
                    this.LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChanged(this, new LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEvent(((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChanging != null)) {
                    this.LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChanging(this, new LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEvent(((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowDeleted != null)) {
                    this.LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowDeleted(this, new LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEvent(((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowDeleting != null)) {
                    this.LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowDeleting(this, new LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEvent(((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow(LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnJobClassType;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnFringeRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable() {
                this.TableName = "LFS_PROJECT_JOB_CLASS_TYPE_RATE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobClassTypeColumn {
                get {
                    return this.columnJobClassType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FringeRateColumn {
                get {
                    return this.columnFringeRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_JOB_CLASS_TYPE_RATERow this[int index] {
                get {
                    return ((LFS_PROJECT_JOB_CLASS_TYPE_RATERow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEventHandler LFS_PROJECT_JOB_CLASS_TYPE_RATERowChanging;
            
            public event LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEventHandler LFS_PROJECT_JOB_CLASS_TYPE_RATERowChanged;
            
            public event LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEventHandler LFS_PROJECT_JOB_CLASS_TYPE_RATERowDeleting;
            
            public event LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEventHandler LFS_PROJECT_JOB_CLASS_TYPE_RATERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_JOB_CLASS_TYPE_RATERow(LFS_PROJECT_JOB_CLASS_TYPE_RATERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_JOB_CLASS_TYPE_RATERow AddLFS_PROJECT_JOB_CLASS_TYPE_RATERow(int ProjectID, string JobClassType, int RefID, decimal Rate, bool Deleted, int COMPANY_ID, bool InDatabase, decimal FringeRate) {
                LFS_PROJECT_JOB_CLASS_TYPE_RATERow rowLFS_PROJECT_JOB_CLASS_TYPE_RATERow = ((LFS_PROJECT_JOB_CLASS_TYPE_RATERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        JobClassType,
                        RefID,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        FringeRate};
                rowLFS_PROJECT_JOB_CLASS_TYPE_RATERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_JOB_CLASS_TYPE_RATERow);
                return rowLFS_PROJECT_JOB_CLASS_TYPE_RATERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_JOB_CLASS_TYPE_RATERow FindByProjectIDJobClassTypeRefID(int ProjectID, string JobClassType, int RefID) {
                return ((LFS_PROJECT_JOB_CLASS_TYPE_RATERow)(this.Rows.Find(new object[] {
                            ProjectID,
                            JobClassType,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable cln = ((LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnJobClassType = base.Columns["JobClassType"];
                this.columnRefID = base.Columns["RefID"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnFringeRate = base.Columns["FringeRate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnJobClassType = new global::System.Data.DataColumn("JobClassType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobClassType);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnFringeRate = new global::System.Data.DataColumn("FringeRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFringeRate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnJobClassType,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnJobClassType.AllowDBNull = false;
                this.columnJobClassType.MaxLength = 50;
                this.columnRefID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_JOB_CLASS_TYPE_RATERow NewLFS_PROJECT_JOB_CLASS_TYPE_RATERow() {
                return ((LFS_PROJECT_JOB_CLASS_TYPE_RATERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_JOB_CLASS_TYPE_RATERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_JOB_CLASS_TYPE_RATERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_JOB_CLASS_TYPE_RATERowChanged != null)) {
                    this.LFS_PROJECT_JOB_CLASS_TYPE_RATERowChanged(this, new LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEvent(((LFS_PROJECT_JOB_CLASS_TYPE_RATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_JOB_CLASS_TYPE_RATERowChanging != null)) {
                    this.LFS_PROJECT_JOB_CLASS_TYPE_RATERowChanging(this, new LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEvent(((LFS_PROJECT_JOB_CLASS_TYPE_RATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_JOB_CLASS_TYPE_RATERowDeleted != null)) {
                    this.LFS_PROJECT_JOB_CLASS_TYPE_RATERowDeleted(this, new LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEvent(((LFS_PROJECT_JOB_CLASS_TYPE_RATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_JOB_CLASS_TYPE_RATERowDeleting != null)) {
                    this.LFS_PROJECT_JOB_CLASS_TYPE_RATERowDeleting(this, new LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEvent(((LFS_PROJECT_JOB_CLASS_TYPE_RATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_JOB_CLASS_TYPE_RATERow(LFS_PROJECT_JOB_CLASS_TYPE_RATERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectWorkFunctionBudgetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnBudget_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectWorkFunctionBudgetDataTable() {
                this.TableName = "ProjectWorkFunctionBudget";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectWorkFunctionBudgetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectWorkFunctionBudgetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Budget_Column {
                get {
                    return this.columnBudget_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectWorkFunctionBudgetRow this[int index] {
                get {
                    return ((ProjectWorkFunctionBudgetRow)(this.Rows[index]));
                }
            }
            
            public event ProjectWorkFunctionBudgetRowChangeEventHandler ProjectWorkFunctionBudgetRowChanging;
            
            public event ProjectWorkFunctionBudgetRowChangeEventHandler ProjectWorkFunctionBudgetRowChanged;
            
            public event ProjectWorkFunctionBudgetRowChangeEventHandler ProjectWorkFunctionBudgetRowDeleting;
            
            public event ProjectWorkFunctionBudgetRowChangeEventHandler ProjectWorkFunctionBudgetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectWorkFunctionBudgetRow(ProjectWorkFunctionBudgetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectWorkFunctionBudgetRow AddProjectWorkFunctionBudgetRow(int ProjectID, string Work_, string Function_, int RefID, decimal Budget, bool Deleted, int COMPANY_ID, bool InDatabase, string WorkFunction, decimal Budget_) {
                ProjectWorkFunctionBudgetRow rowProjectWorkFunctionBudgetRow = ((ProjectWorkFunctionBudgetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        Work_,
                        Function_,
                        RefID,
                        Budget,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        WorkFunction,
                        Budget_};
                rowProjectWorkFunctionBudgetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectWorkFunctionBudgetRow);
                return rowProjectWorkFunctionBudgetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectWorkFunctionBudgetRow FindByProjectIDWork_Function_RefID(int ProjectID, string Work_, string Function_, int RefID) {
                return ((ProjectWorkFunctionBudgetRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            Work_,
                            Function_,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectWorkFunctionBudgetDataTable cln = ((ProjectWorkFunctionBudgetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectWorkFunctionBudgetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnRefID = base.Columns["RefID"];
                this.columnBudget = base.Columns["Budget"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnBudget_ = base.Columns["Budget_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnBudget_ = new global::System.Data.DataColumn("Budget_", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnWork_,
                                this.columnFunction_,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.AllowDBNull = false;
                this.columnFunction_.MaxLength = 50;
                this.columnRefID.AllowDBNull = false;
                this.columnBudget.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectWorkFunctionBudgetRow NewProjectWorkFunctionBudgetRow() {
                return ((ProjectWorkFunctionBudgetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectWorkFunctionBudgetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectWorkFunctionBudgetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectWorkFunctionBudgetRowChanged != null)) {
                    this.ProjectWorkFunctionBudgetRowChanged(this, new ProjectWorkFunctionBudgetRowChangeEvent(((ProjectWorkFunctionBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectWorkFunctionBudgetRowChanging != null)) {
                    this.ProjectWorkFunctionBudgetRowChanging(this, new ProjectWorkFunctionBudgetRowChangeEvent(((ProjectWorkFunctionBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectWorkFunctionBudgetRowDeleted != null)) {
                    this.ProjectWorkFunctionBudgetRowDeleted(this, new ProjectWorkFunctionBudgetRowChangeEvent(((ProjectWorkFunctionBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectWorkFunctionBudgetRowDeleting != null)) {
                    this.ProjectWorkFunctionBudgetRowDeleting(this, new ProjectWorkFunctionBudgetRowChangeEvent(((ProjectWorkFunctionBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectWorkFunctionBudgetRow(ProjectWorkFunctionBudgetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectWorkFunctionBudgetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectUnitsBudgetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUnitsBudgetDataTable() {
                this.TableName = "ProjectUnitsBudget";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectUnitsBudgetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectUnitsBudgetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUnitsBudgetRow this[int index] {
                get {
                    return ((ProjectUnitsBudgetRow)(this.Rows[index]));
                }
            }
            
            public event ProjectUnitsBudgetRowChangeEventHandler ProjectUnitsBudgetRowChanging;
            
            public event ProjectUnitsBudgetRowChangeEventHandler ProjectUnitsBudgetRowChanged;
            
            public event ProjectUnitsBudgetRowChangeEventHandler ProjectUnitsBudgetRowDeleting;
            
            public event ProjectUnitsBudgetRowChangeEventHandler ProjectUnitsBudgetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectUnitsBudgetRow(ProjectUnitsBudgetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUnitsBudgetRow AddProjectUnitsBudgetRow(int ProjectID, decimal Budget, bool Deleted, int COMPANY_ID, bool InDatabase) {
                ProjectUnitsBudgetRow rowProjectUnitsBudgetRow = ((ProjectUnitsBudgetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        Budget,
                        Deleted,
                        COMPANY_ID,
                        InDatabase};
                rowProjectUnitsBudgetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectUnitsBudgetRow);
                return rowProjectUnitsBudgetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUnitsBudgetRow FindByProjectID(int ProjectID) {
                return ((ProjectUnitsBudgetRow)(this.Rows.Find(new object[] {
                            ProjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectUnitsBudgetDataTable cln = ((ProjectUnitsBudgetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectUnitsBudgetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnBudget = base.Columns["Budget"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.Unique = true;
                this.columnBudget.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUnitsBudgetRow NewProjectUnitsBudgetRow() {
                return ((ProjectUnitsBudgetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectUnitsBudgetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectUnitsBudgetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectUnitsBudgetRowChanged != null)) {
                    this.ProjectUnitsBudgetRowChanged(this, new ProjectUnitsBudgetRowChangeEvent(((ProjectUnitsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectUnitsBudgetRowChanging != null)) {
                    this.ProjectUnitsBudgetRowChanging(this, new ProjectUnitsBudgetRowChangeEvent(((ProjectUnitsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectUnitsBudgetRowDeleted != null)) {
                    this.ProjectUnitsBudgetRowDeleted(this, new ProjectUnitsBudgetRowChangeEvent(((ProjectUnitsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectUnitsBudgetRowDeleting != null)) {
                    this.ProjectUnitsBudgetRowDeleting(this, new ProjectUnitsBudgetRowChangeEvent(((ProjectUnitsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectUnitsBudgetRow(ProjectUnitsBudgetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectUnitsBudgetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectMaterialsBudgetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectMaterialsBudgetDataTable() {
                this.TableName = "ProjectMaterialsBudget";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectMaterialsBudgetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectMaterialsBudgetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectMaterialsBudgetRow this[int index] {
                get {
                    return ((ProjectMaterialsBudgetRow)(this.Rows[index]));
                }
            }
            
            public event ProjectMaterialsBudgetRowChangeEventHandler ProjectMaterialsBudgetRowChanging;
            
            public event ProjectMaterialsBudgetRowChangeEventHandler ProjectMaterialsBudgetRowChanged;
            
            public event ProjectMaterialsBudgetRowChangeEventHandler ProjectMaterialsBudgetRowDeleting;
            
            public event ProjectMaterialsBudgetRowChangeEventHandler ProjectMaterialsBudgetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectMaterialsBudgetRow(ProjectMaterialsBudgetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectMaterialsBudgetRow AddProjectMaterialsBudgetRow(int ProjectID, decimal Budget, bool Deleted, int COMPANY_ID, bool InDatabase) {
                ProjectMaterialsBudgetRow rowProjectMaterialsBudgetRow = ((ProjectMaterialsBudgetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        Budget,
                        Deleted,
                        COMPANY_ID,
                        InDatabase};
                rowProjectMaterialsBudgetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectMaterialsBudgetRow);
                return rowProjectMaterialsBudgetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectMaterialsBudgetRow FindByProjectID(int ProjectID) {
                return ((ProjectMaterialsBudgetRow)(this.Rows.Find(new object[] {
                            ProjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectMaterialsBudgetDataTable cln = ((ProjectMaterialsBudgetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectMaterialsBudgetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnBudget = base.Columns["Budget"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.Unique = true;
                this.columnBudget.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectMaterialsBudgetRow NewProjectMaterialsBudgetRow() {
                return ((ProjectMaterialsBudgetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectMaterialsBudgetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectMaterialsBudgetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectMaterialsBudgetRowChanged != null)) {
                    this.ProjectMaterialsBudgetRowChanged(this, new ProjectMaterialsBudgetRowChangeEvent(((ProjectMaterialsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectMaterialsBudgetRowChanging != null)) {
                    this.ProjectMaterialsBudgetRowChanging(this, new ProjectMaterialsBudgetRowChangeEvent(((ProjectMaterialsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectMaterialsBudgetRowDeleted != null)) {
                    this.ProjectMaterialsBudgetRowDeleted(this, new ProjectMaterialsBudgetRowChangeEvent(((ProjectMaterialsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectMaterialsBudgetRowDeleting != null)) {
                    this.ProjectMaterialsBudgetRowDeleting(this, new ProjectMaterialsBudgetRowChangeEvent(((ProjectMaterialsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectMaterialsBudgetRow(ProjectMaterialsBudgetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectMaterialsBudgetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectSubcontractorsBudgetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnSubcontractorID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnSubcontractor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSubcontractorsBudgetDataTable() {
                this.TableName = "ProjectSubcontractorsBudget";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectSubcontractorsBudgetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectSubcontractorsBudgetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorColumn {
                get {
                    return this.columnSubcontractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSubcontractorsBudgetRow this[int index] {
                get {
                    return ((ProjectSubcontractorsBudgetRow)(this.Rows[index]));
                }
            }
            
            public event ProjectSubcontractorsBudgetRowChangeEventHandler ProjectSubcontractorsBudgetRowChanging;
            
            public event ProjectSubcontractorsBudgetRowChangeEventHandler ProjectSubcontractorsBudgetRowChanged;
            
            public event ProjectSubcontractorsBudgetRowChangeEventHandler ProjectSubcontractorsBudgetRowDeleting;
            
            public event ProjectSubcontractorsBudgetRowChangeEventHandler ProjectSubcontractorsBudgetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectSubcontractorsBudgetRow(ProjectSubcontractorsBudgetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSubcontractorsBudgetRow AddProjectSubcontractorsBudgetRow(int ProjectID, int SubcontractorID, int RefID, decimal Budget, bool Deleted, int COMPANY_ID, bool InDatabase, string Subcontractor) {
                ProjectSubcontractorsBudgetRow rowProjectSubcontractorsBudgetRow = ((ProjectSubcontractorsBudgetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        SubcontractorID,
                        RefID,
                        Budget,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Subcontractor};
                rowProjectSubcontractorsBudgetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectSubcontractorsBudgetRow);
                return rowProjectSubcontractorsBudgetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSubcontractorsBudgetRow FindByProjectIDSubcontractorIDRefID(int ProjectID, int SubcontractorID, int RefID) {
                return ((ProjectSubcontractorsBudgetRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            SubcontractorID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectSubcontractorsBudgetDataTable cln = ((ProjectSubcontractorsBudgetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectSubcontractorsBudgetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnSubcontractorID = base.Columns["SubcontractorID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnBudget = base.Columns["Budget"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnSubcontractor = base.Columns["Subcontractor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnSubcontractorID = new global::System.Data.DataColumn("SubcontractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnSubcontractor = new global::System.Data.DataColumn("Subcontractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractor);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnSubcontractorID,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnSubcontractorID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnBudget.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSubcontractorsBudgetRow NewProjectSubcontractorsBudgetRow() {
                return ((ProjectSubcontractorsBudgetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectSubcontractorsBudgetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectSubcontractorsBudgetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectSubcontractorsBudgetRowChanged != null)) {
                    this.ProjectSubcontractorsBudgetRowChanged(this, new ProjectSubcontractorsBudgetRowChangeEvent(((ProjectSubcontractorsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectSubcontractorsBudgetRowChanging != null)) {
                    this.ProjectSubcontractorsBudgetRowChanging(this, new ProjectSubcontractorsBudgetRowChangeEvent(((ProjectSubcontractorsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectSubcontractorsBudgetRowDeleted != null)) {
                    this.ProjectSubcontractorsBudgetRowDeleted(this, new ProjectSubcontractorsBudgetRowChangeEvent(((ProjectSubcontractorsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectSubcontractorsBudgetRowDeleting != null)) {
                    this.ProjectSubcontractorsBudgetRowDeleting(this, new ProjectSubcontractorsBudgetRowChangeEvent(((ProjectSubcontractorsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectSubcontractorsBudgetRow(ProjectSubcontractorsBudgetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectSubcontractorsBudgetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectHotelsBudgetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnHolelID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnHotel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectHotelsBudgetDataTable() {
                this.TableName = "ProjectHotelsBudget";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectHotelsBudgetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectHotelsBudgetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HolelIDColumn {
                get {
                    return this.columnHolelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotelColumn {
                get {
                    return this.columnHotel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectHotelsBudgetRow this[int index] {
                get {
                    return ((ProjectHotelsBudgetRow)(this.Rows[index]));
                }
            }
            
            public event ProjectHotelsBudgetRowChangeEventHandler ProjectHotelsBudgetRowChanging;
            
            public event ProjectHotelsBudgetRowChangeEventHandler ProjectHotelsBudgetRowChanged;
            
            public event ProjectHotelsBudgetRowChangeEventHandler ProjectHotelsBudgetRowDeleting;
            
            public event ProjectHotelsBudgetRowChangeEventHandler ProjectHotelsBudgetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectHotelsBudgetRow(ProjectHotelsBudgetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectHotelsBudgetRow AddProjectHotelsBudgetRow(int ProjectID, int HolelID, int RefID, decimal Budget, bool Deleted, int COMPANY_ID, bool InDatabase, string Hotel) {
                ProjectHotelsBudgetRow rowProjectHotelsBudgetRow = ((ProjectHotelsBudgetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        HolelID,
                        RefID,
                        Budget,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Hotel};
                rowProjectHotelsBudgetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectHotelsBudgetRow);
                return rowProjectHotelsBudgetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectHotelsBudgetRow FindByProjectIDHolelIDRefID(int ProjectID, int HolelID, int RefID) {
                return ((ProjectHotelsBudgetRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            HolelID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectHotelsBudgetDataTable cln = ((ProjectHotelsBudgetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectHotelsBudgetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnHolelID = base.Columns["HolelID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnBudget = base.Columns["Budget"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnHotel = base.Columns["Hotel"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnHolelID = new global::System.Data.DataColumn("HolelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHolelID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnHotel = new global::System.Data.DataColumn("Hotel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotel);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnHolelID,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnHolelID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnBudget.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectHotelsBudgetRow NewProjectHotelsBudgetRow() {
                return ((ProjectHotelsBudgetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectHotelsBudgetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectHotelsBudgetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectHotelsBudgetRowChanged != null)) {
                    this.ProjectHotelsBudgetRowChanged(this, new ProjectHotelsBudgetRowChangeEvent(((ProjectHotelsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectHotelsBudgetRowChanging != null)) {
                    this.ProjectHotelsBudgetRowChanging(this, new ProjectHotelsBudgetRowChangeEvent(((ProjectHotelsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectHotelsBudgetRowDeleted != null)) {
                    this.ProjectHotelsBudgetRowDeleted(this, new ProjectHotelsBudgetRowChangeEvent(((ProjectHotelsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectHotelsBudgetRowDeleting != null)) {
                    this.ProjectHotelsBudgetRowDeleting(this, new ProjectHotelsBudgetRowChangeEvent(((ProjectHotelsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectHotelsBudgetRow(ProjectHotelsBudgetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectHotelsBudgetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectBondingsBudgetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnBondingCompanyID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnBonding;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectBondingsBudgetDataTable() {
                this.TableName = "ProjectBondingsBudget";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectBondingsBudgetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectBondingsBudgetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingCompanyIDColumn {
                get {
                    return this.columnBondingCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingColumn {
                get {
                    return this.columnBonding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectBondingsBudgetRow this[int index] {
                get {
                    return ((ProjectBondingsBudgetRow)(this.Rows[index]));
                }
            }
            
            public event ProjectBondingsBudgetRowChangeEventHandler ProjectBondingsBudgetRowChanging;
            
            public event ProjectBondingsBudgetRowChangeEventHandler ProjectBondingsBudgetRowChanged;
            
            public event ProjectBondingsBudgetRowChangeEventHandler ProjectBondingsBudgetRowDeleting;
            
            public event ProjectBondingsBudgetRowChangeEventHandler ProjectBondingsBudgetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectBondingsBudgetRow(ProjectBondingsBudgetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectBondingsBudgetRow AddProjectBondingsBudgetRow(int ProjectID, int BondingCompanyID, int RefID, decimal Budget, bool Deleted, int COMPANY_ID, bool InDatabase, string Bonding) {
                ProjectBondingsBudgetRow rowProjectBondingsBudgetRow = ((ProjectBondingsBudgetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        BondingCompanyID,
                        RefID,
                        Budget,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Bonding};
                rowProjectBondingsBudgetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectBondingsBudgetRow);
                return rowProjectBondingsBudgetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectBondingsBudgetRow FindByProjectIDBondingCompanyIDRefID(int ProjectID, int BondingCompanyID, int RefID) {
                return ((ProjectBondingsBudgetRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            BondingCompanyID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectBondingsBudgetDataTable cln = ((ProjectBondingsBudgetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectBondingsBudgetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnBondingCompanyID = base.Columns["BondingCompanyID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnBudget = base.Columns["Budget"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnBonding = base.Columns["Bonding"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnBondingCompanyID = new global::System.Data.DataColumn("BondingCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBondingCompanyID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnBonding = new global::System.Data.DataColumn("Bonding", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonding);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnBondingCompanyID,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnBondingCompanyID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnBudget.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectBondingsBudgetRow NewProjectBondingsBudgetRow() {
                return ((ProjectBondingsBudgetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectBondingsBudgetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectBondingsBudgetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectBondingsBudgetRowChanged != null)) {
                    this.ProjectBondingsBudgetRowChanged(this, new ProjectBondingsBudgetRowChangeEvent(((ProjectBondingsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectBondingsBudgetRowChanging != null)) {
                    this.ProjectBondingsBudgetRowChanging(this, new ProjectBondingsBudgetRowChangeEvent(((ProjectBondingsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectBondingsBudgetRowDeleted != null)) {
                    this.ProjectBondingsBudgetRowDeleted(this, new ProjectBondingsBudgetRowChangeEvent(((ProjectBondingsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectBondingsBudgetRowDeleting != null)) {
                    this.ProjectBondingsBudgetRowDeleting(this, new ProjectBondingsBudgetRowChangeEvent(((ProjectBondingsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectBondingsBudgetRow(ProjectBondingsBudgetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectBondingsBudgetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectInsurancesBudgetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnInsuranceCompanyID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnInsurance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectInsurancesBudgetDataTable() {
                this.TableName = "ProjectInsurancesBudget";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectInsurancesBudgetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectInsurancesBudgetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceCompanyIDColumn {
                get {
                    return this.columnInsuranceCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceColumn {
                get {
                    return this.columnInsurance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectInsurancesBudgetRow this[int index] {
                get {
                    return ((ProjectInsurancesBudgetRow)(this.Rows[index]));
                }
            }
            
            public event ProjectInsurancesBudgetRowChangeEventHandler ProjectInsurancesBudgetRowChanging;
            
            public event ProjectInsurancesBudgetRowChangeEventHandler ProjectInsurancesBudgetRowChanged;
            
            public event ProjectInsurancesBudgetRowChangeEventHandler ProjectInsurancesBudgetRowDeleting;
            
            public event ProjectInsurancesBudgetRowChangeEventHandler ProjectInsurancesBudgetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectInsurancesBudgetRow(ProjectInsurancesBudgetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectInsurancesBudgetRow AddProjectInsurancesBudgetRow(int ProjectID, int InsuranceCompanyID, int RefID, decimal Budget, bool Deleted, int COMPANY_ID, bool InDatabase, string Insurance) {
                ProjectInsurancesBudgetRow rowProjectInsurancesBudgetRow = ((ProjectInsurancesBudgetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        InsuranceCompanyID,
                        RefID,
                        Budget,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Insurance};
                rowProjectInsurancesBudgetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectInsurancesBudgetRow);
                return rowProjectInsurancesBudgetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectInsurancesBudgetRow FindByProjectIDInsuranceCompanyIDRefID(int ProjectID, int InsuranceCompanyID, int RefID) {
                return ((ProjectInsurancesBudgetRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            InsuranceCompanyID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectInsurancesBudgetDataTable cln = ((ProjectInsurancesBudgetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectInsurancesBudgetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnInsuranceCompanyID = base.Columns["InsuranceCompanyID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnBudget = base.Columns["Budget"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnInsurance = base.Columns["Insurance"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnInsuranceCompanyID = new global::System.Data.DataColumn("InsuranceCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCompanyID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnInsurance = new global::System.Data.DataColumn("Insurance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsurance);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnInsuranceCompanyID,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnInsuranceCompanyID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnBudget.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectInsurancesBudgetRow NewProjectInsurancesBudgetRow() {
                return ((ProjectInsurancesBudgetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectInsurancesBudgetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectInsurancesBudgetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectInsurancesBudgetRowChanged != null)) {
                    this.ProjectInsurancesBudgetRowChanged(this, new ProjectInsurancesBudgetRowChangeEvent(((ProjectInsurancesBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectInsurancesBudgetRowChanging != null)) {
                    this.ProjectInsurancesBudgetRowChanging(this, new ProjectInsurancesBudgetRowChangeEvent(((ProjectInsurancesBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectInsurancesBudgetRowDeleted != null)) {
                    this.ProjectInsurancesBudgetRowDeleted(this, new ProjectInsurancesBudgetRowChangeEvent(((ProjectInsurancesBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectInsurancesBudgetRowDeleting != null)) {
                    this.ProjectInsurancesBudgetRowDeleting(this, new ProjectInsurancesBudgetRowChangeEvent(((ProjectInsurancesBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectInsurancesBudgetRow(ProjectInsurancesBudgetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectInsurancesBudgetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectOtherCostsBudgetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectOtherCostsBudgetDataTable() {
                this.TableName = "ProjectOtherCostsBudget";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectOtherCostsBudgetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectOtherCostsBudgetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectOtherCostsBudgetRow this[int index] {
                get {
                    return ((ProjectOtherCostsBudgetRow)(this.Rows[index]));
                }
            }
            
            public event ProjectOtherCostsBudgetRowChangeEventHandler ProjectOtherCostsBudgetRowChanging;
            
            public event ProjectOtherCostsBudgetRowChangeEventHandler ProjectOtherCostsBudgetRowChanged;
            
            public event ProjectOtherCostsBudgetRowChangeEventHandler ProjectOtherCostsBudgetRowDeleting;
            
            public event ProjectOtherCostsBudgetRowChangeEventHandler ProjectOtherCostsBudgetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectOtherCostsBudgetRow(ProjectOtherCostsBudgetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectOtherCostsBudgetRow AddProjectOtherCostsBudgetRow(int ProjectID, string Category, int RefID, decimal Budget, bool Deleted, int COMPANY_ID, bool InDatabase) {
                ProjectOtherCostsBudgetRow rowProjectOtherCostsBudgetRow = ((ProjectOtherCostsBudgetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        Category,
                        RefID,
                        Budget,
                        Deleted,
                        COMPANY_ID,
                        InDatabase};
                rowProjectOtherCostsBudgetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectOtherCostsBudgetRow);
                return rowProjectOtherCostsBudgetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectOtherCostsBudgetRow FindByProjectIDCategoryRefID(int ProjectID, string Category, int RefID) {
                return ((ProjectOtherCostsBudgetRow)(this.Rows.Find(new object[] {
                            ProjectID,
                            Category,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectOtherCostsBudgetDataTable cln = ((ProjectOtherCostsBudgetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectOtherCostsBudgetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnCategory = base.Columns["Category"];
                this.columnRefID = base.Columns["RefID"];
                this.columnBudget = base.Columns["Budget"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID,
                                this.columnCategory,
                                this.columnRefID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnCategory.AllowDBNull = false;
                this.columnCategory.MaxLength = 50;
                this.columnRefID.AllowDBNull = false;
                this.columnBudget.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectOtherCostsBudgetRow NewProjectOtherCostsBudgetRow() {
                return ((ProjectOtherCostsBudgetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectOtherCostsBudgetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectOtherCostsBudgetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectOtherCostsBudgetRowChanged != null)) {
                    this.ProjectOtherCostsBudgetRowChanged(this, new ProjectOtherCostsBudgetRowChangeEvent(((ProjectOtherCostsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectOtherCostsBudgetRowChanging != null)) {
                    this.ProjectOtherCostsBudgetRowChanging(this, new ProjectOtherCostsBudgetRowChangeEvent(((ProjectOtherCostsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectOtherCostsBudgetRowDeleted != null)) {
                    this.ProjectOtherCostsBudgetRowDeleted(this, new ProjectOtherCostsBudgetRowChangeEvent(((ProjectOtherCostsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectOtherCostsBudgetRowDeleting != null)) {
                    this.ProjectOtherCostsBudgetRowDeleting(this, new ProjectOtherCostsBudgetRowChangeEvent(((ProjectOtherCostsBudgetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectOtherCostsBudgetRow(ProjectOtherCostsBudgetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectOtherCostsBudgetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectJobInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnTypeOfWorkMhRehab;
            
            private global::System.Data.DataColumn columnTypeOfWorkJuntionLining;
            
            private global::System.Data.DataColumn columnTypeOfWorkProjectManagement;
            
            private global::System.Data.DataColumn columnTypeOfWorkFullLenghtLining;
            
            private global::System.Data.DataColumn columnTypeOfWorkPointRepairs;
            
            private global::System.Data.DataColumn columnTypeOfWorkRehabAssessment;
            
            private global::System.Data.DataColumn columnTypeOfWorkGrout;
            
            private global::System.Data.DataColumn columnTypeOfWorkOther;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnAgreement;
            
            private global::System.Data.DataColumn columnWrittenQuote;
            
            private global::System.Data.DataColumn columnRole;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectJobInfoDataTable() {
                this.TableName = "ProjectJobInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectJobInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectJobInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkMhRehabColumn {
                get {
                    return this.columnTypeOfWorkMhRehab;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkJuntionLiningColumn {
                get {
                    return this.columnTypeOfWorkJuntionLining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkProjectManagementColumn {
                get {
                    return this.columnTypeOfWorkProjectManagement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkFullLenghtLiningColumn {
                get {
                    return this.columnTypeOfWorkFullLenghtLining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkPointRepairsColumn {
                get {
                    return this.columnTypeOfWorkPointRepairs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkRehabAssessmentColumn {
                get {
                    return this.columnTypeOfWorkRehabAssessment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkGroutColumn {
                get {
                    return this.columnTypeOfWorkGrout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkOtherColumn {
                get {
                    return this.columnTypeOfWorkOther;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgreementColumn {
                get {
                    return this.columnAgreement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WrittenQuoteColumn {
                get {
                    return this.columnWrittenQuote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoleColumn {
                get {
                    return this.columnRole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectJobInfoRow this[int index] {
                get {
                    return ((ProjectJobInfoRow)(this.Rows[index]));
                }
            }
            
            public event ProjectJobInfoRowChangeEventHandler ProjectJobInfoRowChanging;
            
            public event ProjectJobInfoRowChangeEventHandler ProjectJobInfoRowChanged;
            
            public event ProjectJobInfoRowChangeEventHandler ProjectJobInfoRowDeleting;
            
            public event ProjectJobInfoRowChangeEventHandler ProjectJobInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectJobInfoRow(ProjectJobInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectJobInfoRow AddProjectJobInfoRow(int ProjectID, bool TypeOfWorkMhRehab, bool TypeOfWorkJuntionLining, bool TypeOfWorkProjectManagement, bool TypeOfWorkFullLenghtLining, bool TypeOfWorkPointRepairs, bool TypeOfWorkRehabAssessment, bool TypeOfWorkGrout, bool TypeOfWorkOther, int COMPANY_ID, bool Agreement, bool WrittenQuote, string Role, bool InDatabase) {
                ProjectJobInfoRow rowProjectJobInfoRow = ((ProjectJobInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        TypeOfWorkMhRehab,
                        TypeOfWorkJuntionLining,
                        TypeOfWorkProjectManagement,
                        TypeOfWorkFullLenghtLining,
                        TypeOfWorkPointRepairs,
                        TypeOfWorkRehabAssessment,
                        TypeOfWorkGrout,
                        TypeOfWorkOther,
                        COMPANY_ID,
                        Agreement,
                        WrittenQuote,
                        Role,
                        InDatabase};
                rowProjectJobInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectJobInfoRow);
                return rowProjectJobInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectJobInfoRow FindByProjectID(int ProjectID) {
                return ((ProjectJobInfoRow)(this.Rows.Find(new object[] {
                            ProjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectJobInfoDataTable cln = ((ProjectJobInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectJobInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnTypeOfWorkMhRehab = base.Columns["TypeOfWorkMhRehab"];
                this.columnTypeOfWorkJuntionLining = base.Columns["TypeOfWorkJuntionLining"];
                this.columnTypeOfWorkProjectManagement = base.Columns["TypeOfWorkProjectManagement"];
                this.columnTypeOfWorkFullLenghtLining = base.Columns["TypeOfWorkFullLenghtLining"];
                this.columnTypeOfWorkPointRepairs = base.Columns["TypeOfWorkPointRepairs"];
                this.columnTypeOfWorkRehabAssessment = base.Columns["TypeOfWorkRehabAssessment"];
                this.columnTypeOfWorkGrout = base.Columns["TypeOfWorkGrout"];
                this.columnTypeOfWorkOther = base.Columns["TypeOfWorkOther"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnAgreement = base.Columns["Agreement"];
                this.columnWrittenQuote = base.Columns["WrittenQuote"];
                this.columnRole = base.Columns["Role"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnTypeOfWorkMhRehab = new global::System.Data.DataColumn("TypeOfWorkMhRehab", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWorkMhRehab);
                this.columnTypeOfWorkJuntionLining = new global::System.Data.DataColumn("TypeOfWorkJuntionLining", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWorkJuntionLining);
                this.columnTypeOfWorkProjectManagement = new global::System.Data.DataColumn("TypeOfWorkProjectManagement", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWorkProjectManagement);
                this.columnTypeOfWorkFullLenghtLining = new global::System.Data.DataColumn("TypeOfWorkFullLenghtLining", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWorkFullLenghtLining);
                this.columnTypeOfWorkPointRepairs = new global::System.Data.DataColumn("TypeOfWorkPointRepairs", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWorkPointRepairs);
                this.columnTypeOfWorkRehabAssessment = new global::System.Data.DataColumn("TypeOfWorkRehabAssessment", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWorkRehabAssessment);
                this.columnTypeOfWorkGrout = new global::System.Data.DataColumn("TypeOfWorkGrout", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWorkGrout);
                this.columnTypeOfWorkOther = new global::System.Data.DataColumn("TypeOfWorkOther", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWorkOther);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnAgreement = new global::System.Data.DataColumn("Agreement", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgreement);
                this.columnWrittenQuote = new global::System.Data.DataColumn("WrittenQuote", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWrittenQuote);
                this.columnRole = new global::System.Data.DataColumn("Role", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRole);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.Unique = true;
                this.columnTypeOfWorkMhRehab.AllowDBNull = false;
                this.columnTypeOfWorkJuntionLining.AllowDBNull = false;
                this.columnTypeOfWorkProjectManagement.AllowDBNull = false;
                this.columnTypeOfWorkProjectManagement.Caption = "TypeOfWorkProjectmanagement";
                this.columnTypeOfWorkFullLenghtLining.AllowDBNull = false;
                this.columnTypeOfWorkPointRepairs.AllowDBNull = false;
                this.columnTypeOfWorkRehabAssessment.AllowDBNull = false;
                this.columnTypeOfWorkGrout.AllowDBNull = false;
                this.columnTypeOfWorkOther.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectJobInfoRow NewProjectJobInfoRow() {
                return ((ProjectJobInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectJobInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectJobInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectJobInfoRowChanged != null)) {
                    this.ProjectJobInfoRowChanged(this, new ProjectJobInfoRowChangeEvent(((ProjectJobInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectJobInfoRowChanging != null)) {
                    this.ProjectJobInfoRowChanging(this, new ProjectJobInfoRowChangeEvent(((ProjectJobInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectJobInfoRowDeleted != null)) {
                    this.ProjectJobInfoRowDeleted(this, new ProjectJobInfoRowChangeEvent(((ProjectJobInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectJobInfoRowDeleting != null)) {
                    this.ProjectJobInfoRowDeleting(this, new ProjectJobInfoRowChangeEvent(((ProjectJobInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectJobInfoRow(ProjectJobInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectNavigatorTDS ds = new ProjectNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectJobInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_NAVIGATORRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_NAVIGATORDataTable tableLFS_PROJECT_NAVIGATOR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_NAVIGATORRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_NAVIGATOR = ((LFS_PROJECT_NAVIGATORDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_NAVIGATOR.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectNumber {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_NAVIGATOR.ProjectNumberColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.ProjectNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectType {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_NAVIGATOR.ProjectTypeColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.ProjectTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectState {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_NAVIGATOR.ProjectStateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.ProjectStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_NAVIGATOR.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'LFS_PROJECT_NAVIGATOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_NAVIGATOR.ClientIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_NAVIGATOR.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'LFS_PROJECT_NAVIGATOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_NAVIGATOR.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InvoicedToDate {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_NAVIGATOR.InvoicedToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoicedToDate\' in table \'LFS_PROJECT_NAVIGATOR\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.InvoicedToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_PROJECT_NAVIGATOR.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'LFS_PROJECT_NAVIGATOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_NAVIGATOR.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'LFS_PROJECT_NAVIGATOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_NAVIGATOR.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLFS_PROJECT_NAVIGATOR.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLFS_PROJECT_NAVIGATOR.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableLFS_PROJECT_NAVIGATOR.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableLFS_PROJECT_NAVIGATOR.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoicedToDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_NAVIGATOR.InvoicedToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoicedToDateNull() {
                this[this.tableLFS_PROJECT_NAVIGATOR.InvoicedToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableLFS_PROJECT_NAVIGATOR.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableLFS_PROJECT_NAVIGATOR.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableLFS_PROJECT_NAVIGATOR.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableLFS_PROJECT_NAVIGATOR.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectNotesRow : global::System.Data.DataRow {
            
            private ProjectNotesDataTable tableProjectNotes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectNotesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectNotes = ((ProjectNotesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectNotes.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectNotes.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableProjectNotes.RefIDColumn]));
                }
                set {
                    this[this.tableProjectNotes.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    return ((string)(this[this.tableProjectNotes.SubjectColumn]));
                }
                set {
                    this[this.tableProjectNotes.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableProjectNotes.DateTimeColumn]));
                }
                set {
                    this[this.tableProjectNotes.DateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LoginID {
                get {
                    return ((int)(this[this.tableProjectNotes.LoginIDColumn]));
                }
                set {
                    this[this.tableProjectNotes.LoginIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableProjectNotes.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'ProjectNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectNotes.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectNotes.DeletedColumn]));
                }
                set {
                    this[this.tableProjectNotes.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID {
                get {
                    try {
                        return ((int)(this[this.tableProjectNotes.LIBRARY_FILES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_FILES_ID\' in table \'ProjectNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectNotes.LIBRARY_FILES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectNotes.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectNotes.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORIGINAL_FILENAME {
                get {
                    try {
                        return ((string)(this[this.tableProjectNotes.ORIGINAL_FILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORIGINAL_FILENAME\' in table \'ProjectNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectNotes.ORIGINAL_FILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILENAME {
                get {
                    try {
                        return ((string)(this[this.tableProjectNotes.FILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FILENAME\' in table \'ProjectNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectNotes.FILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InNoteDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectNotes.InNoteDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InNoteDatabase\' in table \'ProjectNotes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectNotes.InNoteDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tableProjectNotes.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tableProjectNotes.NoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_FILES_IDNull() {
                return this.IsNull(this.tableProjectNotes.LIBRARY_FILES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_FILES_IDNull() {
                this[this.tableProjectNotes.LIBRARY_FILES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORIGINAL_FILENAMENull() {
                return this.IsNull(this.tableProjectNotes.ORIGINAL_FILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORIGINAL_FILENAMENull() {
                this[this.tableProjectNotes.ORIGINAL_FILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFILENAMENull() {
                return this.IsNull(this.tableProjectNotes.FILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFILENAMENull() {
                this[this.tableProjectNotes.FILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInNoteDatabaseNull() {
                return this.IsNull(this.tableProjectNotes.InNoteDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInNoteDatabaseNull() {
                this[this.tableProjectNotes.InNoteDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectServiceRow : global::System.Data.DataRow {
            
            private ProjectServiceDataTable tableProjectService;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectServiceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectService = ((ProjectServiceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectService.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectService.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableProjectService.RefIDColumn]));
                }
                set {
                    this[this.tableProjectService.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    try {
                        return ((int)(this[this.tableProjectService.ServiceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceID\' in table \'ProjectService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectService.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableProjectService.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ProjectService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectService.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AverageSize {
                get {
                    try {
                        return ((string)(this[this.tableProjectService.AverageSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageSize\' in table \'ProjectService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectService.AverageSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AveragePrice {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectService.AveragePriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AveragePrice\' in table \'ProjectService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectService.AveragePriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Quantity {
                get {
                    return ((int)(this[this.tableProjectService.QuantityColumn]));
                }
                set {
                    this[this.tableProjectService.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectService.DeletedColumn]));
                }
                set {
                    this[this.tableProjectService.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectService.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectService.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectService.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectService.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Total {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectService.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'ProjectService\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectService.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceIDNull() {
                return this.IsNull(this.tableProjectService.ServiceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceIDNull() {
                this[this.tableProjectService.ServiceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableProjectService.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableProjectService.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageSizeNull() {
                return this.IsNull(this.tableProjectService.AverageSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageSizeNull() {
                this[this.tableProjectService.AverageSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAveragePriceNull() {
                return this.IsNull(this.tableProjectService.AveragePriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAveragePriceNull() {
                this[this.tableProjectService.AveragePriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectService.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectService.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableProjectService.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableProjectService.TotalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow : global::System.Data.DataRow {
            
            private LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE = ((LFS_PROJECT_WORK_FUNCTION_FAIR_WAGEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.Work_Column]));
                }
                set {
                    this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.Function_Column]));
                }
                set {
                    this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFairWage {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.IsFairWageColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.IsFairWageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'LFS_PROJECT_WORK_FUNCTION_FAIR_WAGE\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'LFS_PROJECT_WORK_FUNCTION_FAIR_WAGE" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableLFS_PROJECT_WORK_FUNCTION_FAIR_WAGE.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_JOB_CLASS_TYPE_RATERow : global::System.Data.DataRow {
            
            private LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable tableLFS_PROJECT_JOB_CLASS_TYPE_RATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_JOB_CLASS_TYPE_RATERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE = ((LFS_PROJECT_JOB_CLASS_TYPE_RATEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobClassType {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.JobClassTypeColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.JobClassTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.RateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'LFS_PROJECT_JOB_CLASS_TYPE_RATE\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FringeRate {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.FringeRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FringeRate\' in table \'LFS_PROJECT_JOB_CLASS_TYPE_RATE\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.FringeRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFringeRateNull() {
                return this.IsNull(this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.FringeRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFringeRateNull() {
                this[this.tableLFS_PROJECT_JOB_CLASS_TYPE_RATE.FringeRateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectWorkFunctionBudgetRow : global::System.Data.DataRow {
            
            private ProjectWorkFunctionBudgetDataTable tableProjectWorkFunctionBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectWorkFunctionBudgetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectWorkFunctionBudget = ((ProjectWorkFunctionBudgetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectWorkFunctionBudget.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableProjectWorkFunctionBudget.Work_Column]));
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    return ((string)(this[this.tableProjectWorkFunctionBudget.Function_Column]));
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableProjectWorkFunctionBudget.RefIDColumn]));
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    return ((decimal)(this[this.tableProjectWorkFunctionBudget.BudgetColumn]));
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectWorkFunctionBudget.DeletedColumn]));
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectWorkFunctionBudget.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectWorkFunctionBudget.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectWorkFunctionBudget\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableProjectWorkFunctionBudget.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'ProjectWorkFunctionBudget\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget_ {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectWorkFunctionBudget.Budget_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget_\' in table \'ProjectWorkFunctionBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectWorkFunctionBudget.Budget_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectWorkFunctionBudget.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectWorkFunctionBudget.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableProjectWorkFunctionBudget.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableProjectWorkFunctionBudget.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudget_Null() {
                return this.IsNull(this.tableProjectWorkFunctionBudget.Budget_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudget_Null() {
                this[this.tableProjectWorkFunctionBudget.Budget_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectUnitsBudgetRow : global::System.Data.DataRow {
            
            private ProjectUnitsBudgetDataTable tableProjectUnitsBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectUnitsBudgetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectUnitsBudget = ((ProjectUnitsBudgetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectUnitsBudget.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectUnitsBudget.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    return ((decimal)(this[this.tableProjectUnitsBudget.BudgetColumn]));
                }
                set {
                    this[this.tableProjectUnitsBudget.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectUnitsBudget.DeletedColumn]));
                }
                set {
                    this[this.tableProjectUnitsBudget.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectUnitsBudget.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectUnitsBudget.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectUnitsBudget.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectUnitsBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectUnitsBudget.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectUnitsBudget.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectUnitsBudget.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectMaterialsBudgetRow : global::System.Data.DataRow {
            
            private ProjectMaterialsBudgetDataTable tableProjectMaterialsBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectMaterialsBudgetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectMaterialsBudget = ((ProjectMaterialsBudgetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectMaterialsBudget.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectMaterialsBudget.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    return ((decimal)(this[this.tableProjectMaterialsBudget.BudgetColumn]));
                }
                set {
                    this[this.tableProjectMaterialsBudget.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectMaterialsBudget.DeletedColumn]));
                }
                set {
                    this[this.tableProjectMaterialsBudget.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectMaterialsBudget.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectMaterialsBudget.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectMaterialsBudget.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectMaterialsBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectMaterialsBudget.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectMaterialsBudget.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectMaterialsBudget.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectSubcontractorsBudgetRow : global::System.Data.DataRow {
            
            private ProjectSubcontractorsBudgetDataTable tableProjectSubcontractorsBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectSubcontractorsBudgetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectSubcontractorsBudget = ((ProjectSubcontractorsBudgetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectSubcontractorsBudget.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectSubcontractorsBudget.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubcontractorID {
                get {
                    return ((int)(this[this.tableProjectSubcontractorsBudget.SubcontractorIDColumn]));
                }
                set {
                    this[this.tableProjectSubcontractorsBudget.SubcontractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableProjectSubcontractorsBudget.RefIDColumn]));
                }
                set {
                    this[this.tableProjectSubcontractorsBudget.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    return ((decimal)(this[this.tableProjectSubcontractorsBudget.BudgetColumn]));
                }
                set {
                    this[this.tableProjectSubcontractorsBudget.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectSubcontractorsBudget.DeletedColumn]));
                }
                set {
                    this[this.tableProjectSubcontractorsBudget.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectSubcontractorsBudget.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectSubcontractorsBudget.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectSubcontractorsBudget.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectSubcontractorsBudget\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableProjectSubcontractorsBudget.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subcontractor {
                get {
                    try {
                        return ((string)(this[this.tableProjectSubcontractorsBudget.SubcontractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subcontractor\' in table \'ProjectSubcontractorsBudget\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableProjectSubcontractorsBudget.SubcontractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectSubcontractorsBudget.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectSubcontractorsBudget.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubcontractorNull() {
                return this.IsNull(this.tableProjectSubcontractorsBudget.SubcontractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubcontractorNull() {
                this[this.tableProjectSubcontractorsBudget.SubcontractorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectHotelsBudgetRow : global::System.Data.DataRow {
            
            private ProjectHotelsBudgetDataTable tableProjectHotelsBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectHotelsBudgetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectHotelsBudget = ((ProjectHotelsBudgetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectHotelsBudget.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectHotelsBudget.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HolelID {
                get {
                    return ((int)(this[this.tableProjectHotelsBudget.HolelIDColumn]));
                }
                set {
                    this[this.tableProjectHotelsBudget.HolelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableProjectHotelsBudget.RefIDColumn]));
                }
                set {
                    this[this.tableProjectHotelsBudget.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    return ((decimal)(this[this.tableProjectHotelsBudget.BudgetColumn]));
                }
                set {
                    this[this.tableProjectHotelsBudget.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectHotelsBudget.DeletedColumn]));
                }
                set {
                    this[this.tableProjectHotelsBudget.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectHotelsBudget.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectHotelsBudget.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectHotelsBudget.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectHotelsBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectHotelsBudget.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hotel {
                get {
                    try {
                        return ((string)(this[this.tableProjectHotelsBudget.HotelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hotel\' in table \'ProjectHotelsBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectHotelsBudget.HotelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectHotelsBudget.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectHotelsBudget.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHotelNull() {
                return this.IsNull(this.tableProjectHotelsBudget.HotelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHotelNull() {
                this[this.tableProjectHotelsBudget.HotelColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectBondingsBudgetRow : global::System.Data.DataRow {
            
            private ProjectBondingsBudgetDataTable tableProjectBondingsBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectBondingsBudgetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectBondingsBudget = ((ProjectBondingsBudgetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectBondingsBudget.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectBondingsBudget.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BondingCompanyID {
                get {
                    return ((int)(this[this.tableProjectBondingsBudget.BondingCompanyIDColumn]));
                }
                set {
                    this[this.tableProjectBondingsBudget.BondingCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableProjectBondingsBudget.RefIDColumn]));
                }
                set {
                    this[this.tableProjectBondingsBudget.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    return ((decimal)(this[this.tableProjectBondingsBudget.BudgetColumn]));
                }
                set {
                    this[this.tableProjectBondingsBudget.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectBondingsBudget.DeletedColumn]));
                }
                set {
                    this[this.tableProjectBondingsBudget.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectBondingsBudget.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectBondingsBudget.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectBondingsBudget.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectBondingsBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectBondingsBudget.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bonding {
                get {
                    try {
                        return ((string)(this[this.tableProjectBondingsBudget.BondingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bonding\' in table \'ProjectBondingsBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectBondingsBudget.BondingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectBondingsBudget.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectBondingsBudget.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBondingNull() {
                return this.IsNull(this.tableProjectBondingsBudget.BondingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBondingNull() {
                this[this.tableProjectBondingsBudget.BondingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectInsurancesBudgetRow : global::System.Data.DataRow {
            
            private ProjectInsurancesBudgetDataTable tableProjectInsurancesBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectInsurancesBudgetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectInsurancesBudget = ((ProjectInsurancesBudgetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectInsurancesBudget.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectInsurancesBudget.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsuranceCompanyID {
                get {
                    return ((int)(this[this.tableProjectInsurancesBudget.InsuranceCompanyIDColumn]));
                }
                set {
                    this[this.tableProjectInsurancesBudget.InsuranceCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableProjectInsurancesBudget.RefIDColumn]));
                }
                set {
                    this[this.tableProjectInsurancesBudget.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    return ((decimal)(this[this.tableProjectInsurancesBudget.BudgetColumn]));
                }
                set {
                    this[this.tableProjectInsurancesBudget.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectInsurancesBudget.DeletedColumn]));
                }
                set {
                    this[this.tableProjectInsurancesBudget.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectInsurancesBudget.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectInsurancesBudget.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectInsurancesBudget.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectInsurancesBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectInsurancesBudget.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Insurance {
                get {
                    try {
                        return ((string)(this[this.tableProjectInsurancesBudget.InsuranceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Insurance\' in table \'ProjectInsurancesBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectInsurancesBudget.InsuranceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectInsurancesBudget.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectInsurancesBudget.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceNull() {
                return this.IsNull(this.tableProjectInsurancesBudget.InsuranceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceNull() {
                this[this.tableProjectInsurancesBudget.InsuranceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectOtherCostsBudgetRow : global::System.Data.DataRow {
            
            private ProjectOtherCostsBudgetDataTable tableProjectOtherCostsBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectOtherCostsBudgetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectOtherCostsBudget = ((ProjectOtherCostsBudgetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectOtherCostsBudget.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectOtherCostsBudget.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    return ((string)(this[this.tableProjectOtherCostsBudget.CategoryColumn]));
                }
                set {
                    this[this.tableProjectOtherCostsBudget.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableProjectOtherCostsBudget.RefIDColumn]));
                }
                set {
                    this[this.tableProjectOtherCostsBudget.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    return ((decimal)(this[this.tableProjectOtherCostsBudget.BudgetColumn]));
                }
                set {
                    this[this.tableProjectOtherCostsBudget.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableProjectOtherCostsBudget.DeletedColumn]));
                }
                set {
                    this[this.tableProjectOtherCostsBudget.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectOtherCostsBudget.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectOtherCostsBudget.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectOtherCostsBudget.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectOtherCostsBudget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectOtherCostsBudget.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectOtherCostsBudget.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectOtherCostsBudget.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectJobInfoRow : global::System.Data.DataRow {
            
            private ProjectJobInfoDataTable tableProjectJobInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectJobInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectJobInfo = ((ProjectJobInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectJobInfo.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TypeOfWorkMhRehab {
                get {
                    return ((bool)(this[this.tableProjectJobInfo.TypeOfWorkMhRehabColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.TypeOfWorkMhRehabColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TypeOfWorkJuntionLining {
                get {
                    return ((bool)(this[this.tableProjectJobInfo.TypeOfWorkJuntionLiningColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.TypeOfWorkJuntionLiningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TypeOfWorkProjectManagement {
                get {
                    return ((bool)(this[this.tableProjectJobInfo.TypeOfWorkProjectManagementColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.TypeOfWorkProjectManagementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TypeOfWorkFullLenghtLining {
                get {
                    return ((bool)(this[this.tableProjectJobInfo.TypeOfWorkFullLenghtLiningColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.TypeOfWorkFullLenghtLiningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TypeOfWorkPointRepairs {
                get {
                    return ((bool)(this[this.tableProjectJobInfo.TypeOfWorkPointRepairsColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.TypeOfWorkPointRepairsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TypeOfWorkRehabAssessment {
                get {
                    return ((bool)(this[this.tableProjectJobInfo.TypeOfWorkRehabAssessmentColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.TypeOfWorkRehabAssessmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TypeOfWorkGrout {
                get {
                    return ((bool)(this[this.tableProjectJobInfo.TypeOfWorkGroutColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.TypeOfWorkGroutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TypeOfWorkOther {
                get {
                    return ((bool)(this[this.tableProjectJobInfo.TypeOfWorkOtherColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.TypeOfWorkOtherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectJobInfo.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectJobInfo.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Agreement {
                get {
                    try {
                        return ((bool)(this[this.tableProjectJobInfo.AgreementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Agreement\' in table \'ProjectJobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectJobInfo.AgreementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool WrittenQuote {
                get {
                    try {
                        return ((bool)(this[this.tableProjectJobInfo.WrittenQuoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WrittenQuote\' in table \'ProjectJobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectJobInfo.WrittenQuoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Role {
                get {
                    try {
                        return ((string)(this[this.tableProjectJobInfo.RoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Role\' in table \'ProjectJobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectJobInfo.RoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableProjectJobInfo.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'ProjectJobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectJobInfo.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgreementNull() {
                return this.IsNull(this.tableProjectJobInfo.AgreementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgreementNull() {
                this[this.tableProjectJobInfo.AgreementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWrittenQuoteNull() {
                return this.IsNull(this.tableProjectJobInfo.WrittenQuoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWrittenQuoteNull() {
                this[this.tableProjectJobInfo.WrittenQuoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoleNull() {
                return this.IsNull(this.tableProjectJobInfo.RoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoleNull() {
                this[this.tableProjectJobInfo.RoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableProjectJobInfo.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableProjectJobInfo.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_NAVIGATORRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_NAVIGATORRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_NAVIGATORRowChangeEvent(LFS_PROJECT_NAVIGATORRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_NAVIGATORRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectNotesRowChangeEvent : global::System.EventArgs {
            
            private ProjectNotesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectNotesRowChangeEvent(ProjectNotesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectNotesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectServiceRowChangeEvent : global::System.EventArgs {
            
            private ProjectServiceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectServiceRowChangeEvent(ProjectServiceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectServiceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERowChangeEvent(LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_WORK_FUNCTION_FAIR_WAGERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_JOB_CLASS_TYPE_RATERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_JOB_CLASS_TYPE_RATERowChangeEvent(LFS_PROJECT_JOB_CLASS_TYPE_RATERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_JOB_CLASS_TYPE_RATERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectWorkFunctionBudgetRowChangeEvent : global::System.EventArgs {
            
            private ProjectWorkFunctionBudgetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectWorkFunctionBudgetRowChangeEvent(ProjectWorkFunctionBudgetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectWorkFunctionBudgetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectUnitsBudgetRowChangeEvent : global::System.EventArgs {
            
            private ProjectUnitsBudgetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUnitsBudgetRowChangeEvent(ProjectUnitsBudgetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUnitsBudgetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectMaterialsBudgetRowChangeEvent : global::System.EventArgs {
            
            private ProjectMaterialsBudgetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectMaterialsBudgetRowChangeEvent(ProjectMaterialsBudgetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectMaterialsBudgetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectSubcontractorsBudgetRowChangeEvent : global::System.EventArgs {
            
            private ProjectSubcontractorsBudgetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSubcontractorsBudgetRowChangeEvent(ProjectSubcontractorsBudgetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSubcontractorsBudgetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectHotelsBudgetRowChangeEvent : global::System.EventArgs {
            
            private ProjectHotelsBudgetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectHotelsBudgetRowChangeEvent(ProjectHotelsBudgetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectHotelsBudgetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectBondingsBudgetRowChangeEvent : global::System.EventArgs {
            
            private ProjectBondingsBudgetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectBondingsBudgetRowChangeEvent(ProjectBondingsBudgetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectBondingsBudgetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectInsurancesBudgetRowChangeEvent : global::System.EventArgs {
            
            private ProjectInsurancesBudgetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectInsurancesBudgetRowChangeEvent(ProjectInsurancesBudgetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectInsurancesBudgetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectOtherCostsBudgetRowChangeEvent : global::System.EventArgs {
            
            private ProjectOtherCostsBudgetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectOtherCostsBudgetRowChangeEvent(ProjectOtherCostsBudgetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectOtherCostsBudgetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectJobInfoRowChangeEvent : global::System.EventArgs {
            
            private ProjectJobInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectJobInfoRowChangeEvent(ProjectJobInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectJobInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591