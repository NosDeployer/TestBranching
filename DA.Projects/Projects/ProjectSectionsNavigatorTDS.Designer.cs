//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Projects.Projects {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectSectionsNavigatorTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectSectionsNavigatorTDS : global::System.Data.DataSet {
        
        private LFS_PROJECT_SECTIONS_NAVIGATORDataTable tableLFS_PROJECT_SECTIONS_NAVIGATOR;
        
        private ProjectSectionNavigatorLateralsDataTable tableProjectSectionNavigatorLaterals;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectSectionsNavigatorTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectSectionsNavigatorTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_PROJECT_SECTIONS_NAVIGATOR"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_SECTIONS_NAVIGATORDataTable(ds.Tables["LFS_PROJECT_SECTIONS_NAVIGATOR"]));
                }
                if ((ds.Tables["ProjectSectionNavigatorLaterals"] != null)) {
                    base.Tables.Add(new ProjectSectionNavigatorLateralsDataTable(ds.Tables["ProjectSectionNavigatorLaterals"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_SECTIONS_NAVIGATORDataTable LFS_PROJECT_SECTIONS_NAVIGATOR {
            get {
                return this.tableLFS_PROJECT_SECTIONS_NAVIGATOR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectSectionNavigatorLateralsDataTable ProjectSectionNavigatorLaterals {
            get {
                return this.tableProjectSectionNavigatorLaterals;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectSectionsNavigatorTDS cln = ((ProjectSectionsNavigatorTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_PROJECT_SECTIONS_NAVIGATOR"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_SECTIONS_NAVIGATORDataTable(ds.Tables["LFS_PROJECT_SECTIONS_NAVIGATOR"]));
                }
                if ((ds.Tables["ProjectSectionNavigatorLaterals"] != null)) {
                    base.Tables.Add(new ProjectSectionNavigatorLateralsDataTable(ds.Tables["ProjectSectionNavigatorLaterals"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_PROJECT_SECTIONS_NAVIGATOR = ((LFS_PROJECT_SECTIONS_NAVIGATORDataTable)(base.Tables["LFS_PROJECT_SECTIONS_NAVIGATOR"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_SECTIONS_NAVIGATOR != null)) {
                    this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.InitVars();
                }
            }
            this.tableProjectSectionNavigatorLaterals = ((ProjectSectionNavigatorLateralsDataTable)(base.Tables["ProjectSectionNavigatorLaterals"]));
            if ((initTable == true)) {
                if ((this.tableProjectSectionNavigatorLaterals != null)) {
                    this.tableProjectSectionNavigatorLaterals.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectSectionsNavigatorTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectSectionsNavigatorTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_PROJECT_SECTIONS_NAVIGATOR = new LFS_PROJECT_SECTIONS_NAVIGATORDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR);
            this.tableProjectSectionNavigatorLaterals = new ProjectSectionNavigatorLateralsDataTable();
            base.Tables.Add(this.tableProjectSectionNavigatorLaterals);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_SECTIONS_NAVIGATOR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectSectionNavigatorLaterals() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectSectionsNavigatorTDS ds = new ProjectSectionsNavigatorTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEventHandler(object sender, LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEvent e);
        
        public delegate void ProjectSectionNavigatorLateralsRowChangeEventHandler(object sender, ProjectSectionNavigatorLateralsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_SECTIONS_NAVIGATORDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnSectionID;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnLaterals;
            
            private global::System.Data.DataColumn columnLiveLaterals;
            
            private global::System.Data.DataColumn columnLateralsDescription;
            
            private global::System.Data.DataColumn columnUSMHDescription;
            
            private global::System.Data.DataColumn columnDSMHDescription;
            
            private global::System.Data.DataColumn columnRehabAssessment;
            
            private global::System.Data.DataColumn columnFullLengthLining;
            
            private global::System.Data.DataColumn columnJunctionLining;
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnWorksDescription;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnFlowOrderID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_SECTIONS_NAVIGATORDataTable() {
                this.TableName = "LFS_PROJECT_SECTIONS_NAVIGATOR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_SECTIONS_NAVIGATORDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_SECTIONS_NAVIGATORDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionIDColumn {
                get {
                    return this.columnSectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralsColumn {
                get {
                    return this.columnLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLateralsColumn {
                get {
                    return this.columnLiveLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralsDescriptionColumn {
                get {
                    return this.columnLateralsDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHDescriptionColumn {
                get {
                    return this.columnUSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHDescriptionColumn {
                get {
                    return this.columnDSMHDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RehabAssessmentColumn {
                get {
                    return this.columnRehabAssessment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FullLengthLiningColumn {
                get {
                    return this.columnFullLengthLining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JunctionLiningColumn {
                get {
                    return this.columnJunctionLining;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorksDescriptionColumn {
                get {
                    return this.columnWorksDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlowOrderIDColumn {
                get {
                    return this.columnFlowOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_SECTIONS_NAVIGATORRow this[int index] {
                get {
                    return ((LFS_PROJECT_SECTIONS_NAVIGATORRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEventHandler LFS_PROJECT_SECTIONS_NAVIGATORRowChanging;
            
            public event LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEventHandler LFS_PROJECT_SECTIONS_NAVIGATORRowChanged;
            
            public event LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEventHandler LFS_PROJECT_SECTIONS_NAVIGATORRowDeleting;
            
            public event LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEventHandler LFS_PROJECT_SECTIONS_NAVIGATORRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_SECTIONS_NAVIGATORRow(LFS_PROJECT_SECTIONS_NAVIGATORRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_SECTIONS_NAVIGATORRow AddLFS_PROJECT_SECTIONS_NAVIGATORRow(
                        int AssetID, 
                        string SectionID, 
                        string Street, 
                        int USMH, 
                        int DSMH, 
                        int Laterals, 
                        int LiveLaterals, 
                        string LateralsDescription, 
                        string USMHDescription, 
                        string DSMHDescription, 
                        bool RehabAssessment, 
                        bool FullLengthLining, 
                        bool JunctionLining, 
                        int WorkID, 
                        string WorksDescription, 
                        bool Selected, 
                        string FlowOrderID) {
                LFS_PROJECT_SECTIONS_NAVIGATORRow rowLFS_PROJECT_SECTIONS_NAVIGATORRow = ((LFS_PROJECT_SECTIONS_NAVIGATORRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        SectionID,
                        Street,
                        USMH,
                        DSMH,
                        Laterals,
                        LiveLaterals,
                        LateralsDescription,
                        USMHDescription,
                        DSMHDescription,
                        RehabAssessment,
                        FullLengthLining,
                        JunctionLining,
                        WorkID,
                        WorksDescription,
                        Selected,
                        FlowOrderID};
                rowLFS_PROJECT_SECTIONS_NAVIGATORRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_SECTIONS_NAVIGATORRow);
                return rowLFS_PROJECT_SECTIONS_NAVIGATORRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_SECTIONS_NAVIGATORRow FindByAssetID(int AssetID) {
                return ((LFS_PROJECT_SECTIONS_NAVIGATORRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_SECTIONS_NAVIGATORDataTable cln = ((LFS_PROJECT_SECTIONS_NAVIGATORDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_SECTIONS_NAVIGATORDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnSectionID = base.Columns["SectionID"];
                this.columnStreet = base.Columns["Street"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnLaterals = base.Columns["Laterals"];
                this.columnLiveLaterals = base.Columns["LiveLaterals"];
                this.columnLateralsDescription = base.Columns["LateralsDescription"];
                this.columnUSMHDescription = base.Columns["USMHDescription"];
                this.columnDSMHDescription = base.Columns["DSMHDescription"];
                this.columnRehabAssessment = base.Columns["RehabAssessment"];
                this.columnFullLengthLining = base.Columns["FullLengthLining"];
                this.columnJunctionLining = base.Columns["JunctionLining"];
                this.columnWorkID = base.Columns["WorkID"];
                this.columnWorksDescription = base.Columns["WorksDescription"];
                this.columnSelected = base.Columns["Selected"];
                this.columnFlowOrderID = base.Columns["FlowOrderID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnSectionID = new global::System.Data.DataColumn("SectionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSectionID);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnLaterals = new global::System.Data.DataColumn("Laterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaterals);
                this.columnLiveLaterals = new global::System.Data.DataColumn("LiveLaterals", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLaterals);
                this.columnLateralsDescription = new global::System.Data.DataColumn("LateralsDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralsDescription);
                this.columnUSMHDescription = new global::System.Data.DataColumn("USMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHDescription);
                this.columnDSMHDescription = new global::System.Data.DataColumn("DSMHDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHDescription);
                this.columnRehabAssessment = new global::System.Data.DataColumn("RehabAssessment", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRehabAssessment);
                this.columnFullLengthLining = new global::System.Data.DataColumn("FullLengthLining", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullLengthLining);
                this.columnJunctionLining = new global::System.Data.DataColumn("JunctionLining", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJunctionLining);
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnWorksDescription = new global::System.Data.DataColumn("WorksDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorksDescription);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnFlowOrderID = new global::System.Data.DataColumn("FlowOrderID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlowOrderID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnWorkID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_SECTIONS_NAVIGATORRow NewLFS_PROJECT_SECTIONS_NAVIGATORRow() {
                return ((LFS_PROJECT_SECTIONS_NAVIGATORRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_SECTIONS_NAVIGATORRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_SECTIONS_NAVIGATORRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_SECTIONS_NAVIGATORRowChanged != null)) {
                    this.LFS_PROJECT_SECTIONS_NAVIGATORRowChanged(this, new LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEvent(((LFS_PROJECT_SECTIONS_NAVIGATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_SECTIONS_NAVIGATORRowChanging != null)) {
                    this.LFS_PROJECT_SECTIONS_NAVIGATORRowChanging(this, new LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEvent(((LFS_PROJECT_SECTIONS_NAVIGATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_SECTIONS_NAVIGATORRowDeleted != null)) {
                    this.LFS_PROJECT_SECTIONS_NAVIGATORRowDeleted(this, new LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEvent(((LFS_PROJECT_SECTIONS_NAVIGATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_SECTIONS_NAVIGATORRowDeleting != null)) {
                    this.LFS_PROJECT_SECTIONS_NAVIGATORRowDeleting(this, new LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEvent(((LFS_PROJECT_SECTIONS_NAVIGATORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_SECTIONS_NAVIGATORRow(LFS_PROJECT_SECTIONS_NAVIGATORRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectSectionsNavigatorTDS ds = new ProjectSectionsNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_SECTIONS_NAVIGATORDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectSectionNavigatorLateralsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAssetID;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnLateralID;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnInProject;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSectionNavigatorLateralsDataTable() {
                this.TableName = "ProjectSectionNavigatorLaterals";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectSectionNavigatorLateralsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectSectionNavigatorLateralsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetIDColumn {
                get {
                    return this.columnAssetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralIDColumn {
                get {
                    return this.columnLateralID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InProjectColumn {
                get {
                    return this.columnInProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSectionNavigatorLateralsRow this[int index] {
                get {
                    return ((ProjectSectionNavigatorLateralsRow)(this.Rows[index]));
                }
            }
            
            public event ProjectSectionNavigatorLateralsRowChangeEventHandler ProjectSectionNavigatorLateralsRowChanging;
            
            public event ProjectSectionNavigatorLateralsRowChangeEventHandler ProjectSectionNavigatorLateralsRowChanged;
            
            public event ProjectSectionNavigatorLateralsRowChangeEventHandler ProjectSectionNavigatorLateralsRowDeleting;
            
            public event ProjectSectionNavigatorLateralsRowChangeEventHandler ProjectSectionNavigatorLateralsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectSectionNavigatorLateralsRow(ProjectSectionNavigatorLateralsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSectionNavigatorLateralsRow AddProjectSectionNavigatorLateralsRow(int AssetID, string Address, string LateralID, string State, bool InProject, int COMPANY_ID) {
                ProjectSectionNavigatorLateralsRow rowProjectSectionNavigatorLateralsRow = ((ProjectSectionNavigatorLateralsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AssetID,
                        Address,
                        LateralID,
                        State,
                        InProject,
                        COMPANY_ID};
                rowProjectSectionNavigatorLateralsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectSectionNavigatorLateralsRow);
                return rowProjectSectionNavigatorLateralsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSectionNavigatorLateralsRow FindByAssetID(int AssetID) {
                return ((ProjectSectionNavigatorLateralsRow)(this.Rows.Find(new object[] {
                            AssetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectSectionNavigatorLateralsDataTable cln = ((ProjectSectionNavigatorLateralsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectSectionNavigatorLateralsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAssetID = base.Columns["AssetID"];
                this.columnAddress = base.Columns["Address"];
                this.columnLateralID = base.Columns["LateralID"];
                this.columnState = base.Columns["State"];
                this.columnInProject = base.Columns["InProject"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAssetID = new global::System.Data.DataColumn("AssetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetID);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnLateralID = new global::System.Data.DataColumn("LateralID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralID);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnInProject = new global::System.Data.DataColumn("InProject", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInProject);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAssetID}, true));
                this.columnAssetID.AllowDBNull = false;
                this.columnAssetID.Unique = true;
                this.columnAddress.MaxLength = 50;
                this.columnLateralID.AllowDBNull = false;
                this.columnLateralID.MaxLength = 50;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 50;
                this.columnInProject.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSectionNavigatorLateralsRow NewProjectSectionNavigatorLateralsRow() {
                return ((ProjectSectionNavigatorLateralsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectSectionNavigatorLateralsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectSectionNavigatorLateralsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectSectionNavigatorLateralsRowChanged != null)) {
                    this.ProjectSectionNavigatorLateralsRowChanged(this, new ProjectSectionNavigatorLateralsRowChangeEvent(((ProjectSectionNavigatorLateralsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectSectionNavigatorLateralsRowChanging != null)) {
                    this.ProjectSectionNavigatorLateralsRowChanging(this, new ProjectSectionNavigatorLateralsRowChangeEvent(((ProjectSectionNavigatorLateralsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectSectionNavigatorLateralsRowDeleted != null)) {
                    this.ProjectSectionNavigatorLateralsRowDeleted(this, new ProjectSectionNavigatorLateralsRowChangeEvent(((ProjectSectionNavigatorLateralsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectSectionNavigatorLateralsRowDeleting != null)) {
                    this.ProjectSectionNavigatorLateralsRowDeleting(this, new ProjectSectionNavigatorLateralsRowChangeEvent(((ProjectSectionNavigatorLateralsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectSectionNavigatorLateralsRow(ProjectSectionNavigatorLateralsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectSectionsNavigatorTDS ds = new ProjectSectionsNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectSectionNavigatorLateralsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_SECTIONS_NAVIGATORRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_SECTIONS_NAVIGATORDataTable tableLFS_PROJECT_SECTIONS_NAVIGATOR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_SECTIONS_NAVIGATORRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_SECTIONS_NAVIGATOR = ((LFS_PROJECT_SECTIONS_NAVIGATORDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.AssetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SectionID {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.SectionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SectionID\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.SectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USMH {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DSMH {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Laterals {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Laterals\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LiveLaterals {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LiveLateralsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLaterals\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LiveLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralsDescription {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LateralsDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralsDescription\' in table \'LFS_PROJECT_SECTIONS_NAVIGAT" +
                                "OR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LateralsDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.USMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHDescription\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.USMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHDescription {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.DSMHDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHDescription\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.DSMHDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RehabAssessment {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.RehabAssessmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RehabAssessment\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.RehabAssessmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FullLengthLining {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.FullLengthLiningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FullLengthLining\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.FullLengthLiningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool JunctionLining {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.JunctionLiningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JunctionLining\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.JunctionLiningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.WorkIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorksDescription {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.WorksDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorksDescription\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.WorksDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlowOrderID {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.FlowOrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlowOrderID\' in table \'LFS_PROJECT_SECTIONS_NAVIGATOR\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.FlowOrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionIDNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.SectionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionIDNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.SectionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralsNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralsNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLateralsNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LiveLateralsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLateralsNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LiveLateralsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralsDescriptionNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LateralsDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralsDescriptionNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.LateralsDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHDescriptionNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.USMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHDescriptionNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.USMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHDescriptionNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.DSMHDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHDescriptionNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.DSMHDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRehabAssessmentNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.RehabAssessmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRehabAssessmentNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.RehabAssessmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullLengthLiningNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.FullLengthLiningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullLengthLiningNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.FullLengthLiningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJunctionLiningNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.JunctionLiningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJunctionLiningNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.JunctionLiningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorksDescriptionNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.WorksDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorksDescriptionNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.WorksDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlowOrderIDNull() {
                return this.IsNull(this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.FlowOrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlowOrderIDNull() {
                this[this.tableLFS_PROJECT_SECTIONS_NAVIGATOR.FlowOrderIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectSectionNavigatorLateralsRow : global::System.Data.DataRow {
            
            private ProjectSectionNavigatorLateralsDataTable tableProjectSectionNavigatorLaterals;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectSectionNavigatorLateralsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectSectionNavigatorLaterals = ((ProjectSectionNavigatorLateralsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssetID {
                get {
                    return ((int)(this[this.tableProjectSectionNavigatorLaterals.AssetIDColumn]));
                }
                set {
                    this[this.tableProjectSectionNavigatorLaterals.AssetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableProjectSectionNavigatorLaterals.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'ProjectSectionNavigatorLaterals\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableProjectSectionNavigatorLaterals.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralID {
                get {
                    return ((string)(this[this.tableProjectSectionNavigatorLaterals.LateralIDColumn]));
                }
                set {
                    this[this.tableProjectSectionNavigatorLaterals.LateralIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableProjectSectionNavigatorLaterals.StateColumn]));
                }
                set {
                    this[this.tableProjectSectionNavigatorLaterals.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InProject {
                get {
                    return ((bool)(this[this.tableProjectSectionNavigatorLaterals.InProjectColumn]));
                }
                set {
                    this[this.tableProjectSectionNavigatorLaterals.InProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableProjectSectionNavigatorLaterals.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableProjectSectionNavigatorLaterals.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableProjectSectionNavigatorLaterals.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableProjectSectionNavigatorLaterals.AddressColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_SECTIONS_NAVIGATORRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_SECTIONS_NAVIGATORRowChangeEvent(LFS_PROJECT_SECTIONS_NAVIGATORRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_SECTIONS_NAVIGATORRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectSectionNavigatorLateralsRowChangeEvent : global::System.EventArgs {
            
            private ProjectSectionNavigatorLateralsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSectionNavigatorLateralsRowChangeEvent(ProjectSectionNavigatorLateralsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectSectionNavigatorLateralsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591