//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Projects.Projects {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectCostingSheetInformationTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectCostingSheetInformationTDS : global::System.Data.DataSet {
        
        private BasicInformationDataTable tableBasicInformation;
        
        private OtherCostsInformationDataTable tableOtherCostsInformation;
        
        private UnitsInformationDataTable tableUnitsInformation;
        
        private LabourHoursInformationDataTable tableLabourHoursInformation;
        
        private MaterialsInformationDataTable tableMaterialsInformation;
        
        private ReportInformationDataTable tableReportInformation;
        
        private SubcontractorsInformationDataTable tableSubcontractorsInformation;
        
        private RevenueInformationDataTable tableRevenueInformation;
        
        private CombinedBasicInformationDataTable tableCombinedBasicInformation;
        
        private CombinedLabourHoursInformationDataTable tableCombinedLabourHoursInformation;
        
        private CombinedUnitsInformationDataTable tableCombinedUnitsInformation;
        
        private CombinedMaterialsInformationDataTable tableCombinedMaterialsInformation;
        
        private CombinedSubcontractorsInformationDataTable tableCombinedSubcontractorsInformation;
        
        private CombinedRevenueInformationDataTable tableCombinedRevenueInformation;
        
        private CombinedOtherCostsInformationDataTable tableCombinedOtherCostsInformation;
        
        private HotelsInformationDataTable tableHotelsInformation;
        
        private BondingsInformationDataTable tableBondingsInformation;
        
        private InsurancesInformationDataTable tableInsurancesInformation;
        
        private OtherCategoryInformationDataTable tableOtherCategoryInformation;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectCostingSheetInformationTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectCostingSheetInformationTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["OtherCostsInformation"] != null)) {
                    base.Tables.Add(new OtherCostsInformationDataTable(ds.Tables["OtherCostsInformation"]));
                }
                if ((ds.Tables["UnitsInformation"] != null)) {
                    base.Tables.Add(new UnitsInformationDataTable(ds.Tables["UnitsInformation"]));
                }
                if ((ds.Tables["LabourHoursInformation"] != null)) {
                    base.Tables.Add(new LabourHoursInformationDataTable(ds.Tables["LabourHoursInformation"]));
                }
                if ((ds.Tables["MaterialsInformation"] != null)) {
                    base.Tables.Add(new MaterialsInformationDataTable(ds.Tables["MaterialsInformation"]));
                }
                if ((ds.Tables["ReportInformation"] != null)) {
                    base.Tables.Add(new ReportInformationDataTable(ds.Tables["ReportInformation"]));
                }
                if ((ds.Tables["SubcontractorsInformation"] != null)) {
                    base.Tables.Add(new SubcontractorsInformationDataTable(ds.Tables["SubcontractorsInformation"]));
                }
                if ((ds.Tables["RevenueInformation"] != null)) {
                    base.Tables.Add(new RevenueInformationDataTable(ds.Tables["RevenueInformation"]));
                }
                if ((ds.Tables["CombinedBasicInformation"] != null)) {
                    base.Tables.Add(new CombinedBasicInformationDataTable(ds.Tables["CombinedBasicInformation"]));
                }
                if ((ds.Tables["CombinedLabourHoursInformation"] != null)) {
                    base.Tables.Add(new CombinedLabourHoursInformationDataTable(ds.Tables["CombinedLabourHoursInformation"]));
                }
                if ((ds.Tables["CombinedUnitsInformation"] != null)) {
                    base.Tables.Add(new CombinedUnitsInformationDataTable(ds.Tables["CombinedUnitsInformation"]));
                }
                if ((ds.Tables["CombinedMaterialsInformation"] != null)) {
                    base.Tables.Add(new CombinedMaterialsInformationDataTable(ds.Tables["CombinedMaterialsInformation"]));
                }
                if ((ds.Tables["CombinedSubcontractorsInformation"] != null)) {
                    base.Tables.Add(new CombinedSubcontractorsInformationDataTable(ds.Tables["CombinedSubcontractorsInformation"]));
                }
                if ((ds.Tables["CombinedRevenueInformation"] != null)) {
                    base.Tables.Add(new CombinedRevenueInformationDataTable(ds.Tables["CombinedRevenueInformation"]));
                }
                if ((ds.Tables["CombinedOtherCostsInformation"] != null)) {
                    base.Tables.Add(new CombinedOtherCostsInformationDataTable(ds.Tables["CombinedOtherCostsInformation"]));
                }
                if ((ds.Tables["HotelsInformation"] != null)) {
                    base.Tables.Add(new HotelsInformationDataTable(ds.Tables["HotelsInformation"]));
                }
                if ((ds.Tables["BondingsInformation"] != null)) {
                    base.Tables.Add(new BondingsInformationDataTable(ds.Tables["BondingsInformation"]));
                }
                if ((ds.Tables["InsurancesInformation"] != null)) {
                    base.Tables.Add(new InsurancesInformationDataTable(ds.Tables["InsurancesInformation"]));
                }
                if ((ds.Tables["OtherCategoryInformation"] != null)) {
                    base.Tables.Add(new OtherCategoryInformationDataTable(ds.Tables["OtherCategoryInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BasicInformationDataTable BasicInformation {
            get {
                return this.tableBasicInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OtherCostsInformationDataTable OtherCostsInformation {
            get {
                return this.tableOtherCostsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitsInformationDataTable UnitsInformation {
            get {
                return this.tableUnitsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LabourHoursInformationDataTable LabourHoursInformation {
            get {
                return this.tableLabourHoursInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MaterialsInformationDataTable MaterialsInformation {
            get {
                return this.tableMaterialsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReportInformationDataTable ReportInformation {
            get {
                return this.tableReportInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubcontractorsInformationDataTable SubcontractorsInformation {
            get {
                return this.tableSubcontractorsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RevenueInformationDataTable RevenueInformation {
            get {
                return this.tableRevenueInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedBasicInformationDataTable CombinedBasicInformation {
            get {
                return this.tableCombinedBasicInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedLabourHoursInformationDataTable CombinedLabourHoursInformation {
            get {
                return this.tableCombinedLabourHoursInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedUnitsInformationDataTable CombinedUnitsInformation {
            get {
                return this.tableCombinedUnitsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedMaterialsInformationDataTable CombinedMaterialsInformation {
            get {
                return this.tableCombinedMaterialsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedSubcontractorsInformationDataTable CombinedSubcontractorsInformation {
            get {
                return this.tableCombinedSubcontractorsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedRevenueInformationDataTable CombinedRevenueInformation {
            get {
                return this.tableCombinedRevenueInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedOtherCostsInformationDataTable CombinedOtherCostsInformation {
            get {
                return this.tableCombinedOtherCostsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HotelsInformationDataTable HotelsInformation {
            get {
                return this.tableHotelsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BondingsInformationDataTable BondingsInformation {
            get {
                return this.tableBondingsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InsurancesInformationDataTable InsurancesInformation {
            get {
                return this.tableInsurancesInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OtherCategoryInformationDataTable OtherCategoryInformation {
            get {
                return this.tableOtherCategoryInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectCostingSheetInformationTDS cln = ((ProjectCostingSheetInformationTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["OtherCostsInformation"] != null)) {
                    base.Tables.Add(new OtherCostsInformationDataTable(ds.Tables["OtherCostsInformation"]));
                }
                if ((ds.Tables["UnitsInformation"] != null)) {
                    base.Tables.Add(new UnitsInformationDataTable(ds.Tables["UnitsInformation"]));
                }
                if ((ds.Tables["LabourHoursInformation"] != null)) {
                    base.Tables.Add(new LabourHoursInformationDataTable(ds.Tables["LabourHoursInformation"]));
                }
                if ((ds.Tables["MaterialsInformation"] != null)) {
                    base.Tables.Add(new MaterialsInformationDataTable(ds.Tables["MaterialsInformation"]));
                }
                if ((ds.Tables["ReportInformation"] != null)) {
                    base.Tables.Add(new ReportInformationDataTable(ds.Tables["ReportInformation"]));
                }
                if ((ds.Tables["SubcontractorsInformation"] != null)) {
                    base.Tables.Add(new SubcontractorsInformationDataTable(ds.Tables["SubcontractorsInformation"]));
                }
                if ((ds.Tables["RevenueInformation"] != null)) {
                    base.Tables.Add(new RevenueInformationDataTable(ds.Tables["RevenueInformation"]));
                }
                if ((ds.Tables["CombinedBasicInformation"] != null)) {
                    base.Tables.Add(new CombinedBasicInformationDataTable(ds.Tables["CombinedBasicInformation"]));
                }
                if ((ds.Tables["CombinedLabourHoursInformation"] != null)) {
                    base.Tables.Add(new CombinedLabourHoursInformationDataTable(ds.Tables["CombinedLabourHoursInformation"]));
                }
                if ((ds.Tables["CombinedUnitsInformation"] != null)) {
                    base.Tables.Add(new CombinedUnitsInformationDataTable(ds.Tables["CombinedUnitsInformation"]));
                }
                if ((ds.Tables["CombinedMaterialsInformation"] != null)) {
                    base.Tables.Add(new CombinedMaterialsInformationDataTable(ds.Tables["CombinedMaterialsInformation"]));
                }
                if ((ds.Tables["CombinedSubcontractorsInformation"] != null)) {
                    base.Tables.Add(new CombinedSubcontractorsInformationDataTable(ds.Tables["CombinedSubcontractorsInformation"]));
                }
                if ((ds.Tables["CombinedRevenueInformation"] != null)) {
                    base.Tables.Add(new CombinedRevenueInformationDataTable(ds.Tables["CombinedRevenueInformation"]));
                }
                if ((ds.Tables["CombinedOtherCostsInformation"] != null)) {
                    base.Tables.Add(new CombinedOtherCostsInformationDataTable(ds.Tables["CombinedOtherCostsInformation"]));
                }
                if ((ds.Tables["HotelsInformation"] != null)) {
                    base.Tables.Add(new HotelsInformationDataTable(ds.Tables["HotelsInformation"]));
                }
                if ((ds.Tables["BondingsInformation"] != null)) {
                    base.Tables.Add(new BondingsInformationDataTable(ds.Tables["BondingsInformation"]));
                }
                if ((ds.Tables["InsurancesInformation"] != null)) {
                    base.Tables.Add(new InsurancesInformationDataTable(ds.Tables["InsurancesInformation"]));
                }
                if ((ds.Tables["OtherCategoryInformation"] != null)) {
                    base.Tables.Add(new OtherCategoryInformationDataTable(ds.Tables["OtherCategoryInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBasicInformation = ((BasicInformationDataTable)(base.Tables["BasicInformation"]));
            if ((initTable == true)) {
                if ((this.tableBasicInformation != null)) {
                    this.tableBasicInformation.InitVars();
                }
            }
            this.tableOtherCostsInformation = ((OtherCostsInformationDataTable)(base.Tables["OtherCostsInformation"]));
            if ((initTable == true)) {
                if ((this.tableOtherCostsInformation != null)) {
                    this.tableOtherCostsInformation.InitVars();
                }
            }
            this.tableUnitsInformation = ((UnitsInformationDataTable)(base.Tables["UnitsInformation"]));
            if ((initTable == true)) {
                if ((this.tableUnitsInformation != null)) {
                    this.tableUnitsInformation.InitVars();
                }
            }
            this.tableLabourHoursInformation = ((LabourHoursInformationDataTable)(base.Tables["LabourHoursInformation"]));
            if ((initTable == true)) {
                if ((this.tableLabourHoursInformation != null)) {
                    this.tableLabourHoursInformation.InitVars();
                }
            }
            this.tableMaterialsInformation = ((MaterialsInformationDataTable)(base.Tables["MaterialsInformation"]));
            if ((initTable == true)) {
                if ((this.tableMaterialsInformation != null)) {
                    this.tableMaterialsInformation.InitVars();
                }
            }
            this.tableReportInformation = ((ReportInformationDataTable)(base.Tables["ReportInformation"]));
            if ((initTable == true)) {
                if ((this.tableReportInformation != null)) {
                    this.tableReportInformation.InitVars();
                }
            }
            this.tableSubcontractorsInformation = ((SubcontractorsInformationDataTable)(base.Tables["SubcontractorsInformation"]));
            if ((initTable == true)) {
                if ((this.tableSubcontractorsInformation != null)) {
                    this.tableSubcontractorsInformation.InitVars();
                }
            }
            this.tableRevenueInformation = ((RevenueInformationDataTable)(base.Tables["RevenueInformation"]));
            if ((initTable == true)) {
                if ((this.tableRevenueInformation != null)) {
                    this.tableRevenueInformation.InitVars();
                }
            }
            this.tableCombinedBasicInformation = ((CombinedBasicInformationDataTable)(base.Tables["CombinedBasicInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedBasicInformation != null)) {
                    this.tableCombinedBasicInformation.InitVars();
                }
            }
            this.tableCombinedLabourHoursInformation = ((CombinedLabourHoursInformationDataTable)(base.Tables["CombinedLabourHoursInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedLabourHoursInformation != null)) {
                    this.tableCombinedLabourHoursInformation.InitVars();
                }
            }
            this.tableCombinedUnitsInformation = ((CombinedUnitsInformationDataTable)(base.Tables["CombinedUnitsInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedUnitsInformation != null)) {
                    this.tableCombinedUnitsInformation.InitVars();
                }
            }
            this.tableCombinedMaterialsInformation = ((CombinedMaterialsInformationDataTable)(base.Tables["CombinedMaterialsInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedMaterialsInformation != null)) {
                    this.tableCombinedMaterialsInformation.InitVars();
                }
            }
            this.tableCombinedSubcontractorsInformation = ((CombinedSubcontractorsInformationDataTable)(base.Tables["CombinedSubcontractorsInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedSubcontractorsInformation != null)) {
                    this.tableCombinedSubcontractorsInformation.InitVars();
                }
            }
            this.tableCombinedRevenueInformation = ((CombinedRevenueInformationDataTable)(base.Tables["CombinedRevenueInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedRevenueInformation != null)) {
                    this.tableCombinedRevenueInformation.InitVars();
                }
            }
            this.tableCombinedOtherCostsInformation = ((CombinedOtherCostsInformationDataTable)(base.Tables["CombinedOtherCostsInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedOtherCostsInformation != null)) {
                    this.tableCombinedOtherCostsInformation.InitVars();
                }
            }
            this.tableHotelsInformation = ((HotelsInformationDataTable)(base.Tables["HotelsInformation"]));
            if ((initTable == true)) {
                if ((this.tableHotelsInformation != null)) {
                    this.tableHotelsInformation.InitVars();
                }
            }
            this.tableBondingsInformation = ((BondingsInformationDataTable)(base.Tables["BondingsInformation"]));
            if ((initTable == true)) {
                if ((this.tableBondingsInformation != null)) {
                    this.tableBondingsInformation.InitVars();
                }
            }
            this.tableInsurancesInformation = ((InsurancesInformationDataTable)(base.Tables["InsurancesInformation"]));
            if ((initTable == true)) {
                if ((this.tableInsurancesInformation != null)) {
                    this.tableInsurancesInformation.InitVars();
                }
            }
            this.tableOtherCategoryInformation = ((OtherCategoryInformationDataTable)(base.Tables["OtherCategoryInformation"]));
            if ((initTable == true)) {
                if ((this.tableOtherCategoryInformation != null)) {
                    this.tableOtherCategoryInformation.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectCostingSheetInformationTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectCostingSheetInformationTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBasicInformation = new BasicInformationDataTable();
            base.Tables.Add(this.tableBasicInformation);
            this.tableOtherCostsInformation = new OtherCostsInformationDataTable();
            base.Tables.Add(this.tableOtherCostsInformation);
            this.tableUnitsInformation = new UnitsInformationDataTable();
            base.Tables.Add(this.tableUnitsInformation);
            this.tableLabourHoursInformation = new LabourHoursInformationDataTable();
            base.Tables.Add(this.tableLabourHoursInformation);
            this.tableMaterialsInformation = new MaterialsInformationDataTable();
            base.Tables.Add(this.tableMaterialsInformation);
            this.tableReportInformation = new ReportInformationDataTable();
            base.Tables.Add(this.tableReportInformation);
            this.tableSubcontractorsInformation = new SubcontractorsInformationDataTable();
            base.Tables.Add(this.tableSubcontractorsInformation);
            this.tableRevenueInformation = new RevenueInformationDataTable();
            base.Tables.Add(this.tableRevenueInformation);
            this.tableCombinedBasicInformation = new CombinedBasicInformationDataTable();
            base.Tables.Add(this.tableCombinedBasicInformation);
            this.tableCombinedLabourHoursInformation = new CombinedLabourHoursInformationDataTable();
            base.Tables.Add(this.tableCombinedLabourHoursInformation);
            this.tableCombinedUnitsInformation = new CombinedUnitsInformationDataTable();
            base.Tables.Add(this.tableCombinedUnitsInformation);
            this.tableCombinedMaterialsInformation = new CombinedMaterialsInformationDataTable();
            base.Tables.Add(this.tableCombinedMaterialsInformation);
            this.tableCombinedSubcontractorsInformation = new CombinedSubcontractorsInformationDataTable();
            base.Tables.Add(this.tableCombinedSubcontractorsInformation);
            this.tableCombinedRevenueInformation = new CombinedRevenueInformationDataTable();
            base.Tables.Add(this.tableCombinedRevenueInformation);
            this.tableCombinedOtherCostsInformation = new CombinedOtherCostsInformationDataTable();
            base.Tables.Add(this.tableCombinedOtherCostsInformation);
            this.tableHotelsInformation = new HotelsInformationDataTable();
            base.Tables.Add(this.tableHotelsInformation);
            this.tableBondingsInformation = new BondingsInformationDataTable();
            base.Tables.Add(this.tableBondingsInformation);
            this.tableInsurancesInformation = new InsurancesInformationDataTable();
            base.Tables.Add(this.tableInsurancesInformation);
            this.tableOtherCategoryInformation = new OtherCategoryInformationDataTable();
            base.Tables.Add(this.tableOtherCategoryInformation);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBasicInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOtherCostsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLabourHoursInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaterialsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReportInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubcontractorsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRevenueInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedBasicInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedLabourHoursInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedUnitsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedMaterialsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedSubcontractorsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedRevenueInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedOtherCostsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHotelsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBondingsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInsurancesInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOtherCategoryInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BasicInformationRowChangeEventHandler(object sender, BasicInformationRowChangeEvent e);
        
        public delegate void OtherCostsInformationRowChangeEventHandler(object sender, OtherCostsInformationRowChangeEvent e);
        
        public delegate void UnitsInformationRowChangeEventHandler(object sender, UnitsInformationRowChangeEvent e);
        
        public delegate void LabourHoursInformationRowChangeEventHandler(object sender, LabourHoursInformationRowChangeEvent e);
        
        public delegate void MaterialsInformationRowChangeEventHandler(object sender, MaterialsInformationRowChangeEvent e);
        
        public delegate void ReportInformationRowChangeEventHandler(object sender, ReportInformationRowChangeEvent e);
        
        public delegate void SubcontractorsInformationRowChangeEventHandler(object sender, SubcontractorsInformationRowChangeEvent e);
        
        public delegate void RevenueInformationRowChangeEventHandler(object sender, RevenueInformationRowChangeEvent e);
        
        public delegate void CombinedBasicInformationRowChangeEventHandler(object sender, CombinedBasicInformationRowChangeEvent e);
        
        public delegate void CombinedLabourHoursInformationRowChangeEventHandler(object sender, CombinedLabourHoursInformationRowChangeEvent e);
        
        public delegate void CombinedUnitsInformationRowChangeEventHandler(object sender, CombinedUnitsInformationRowChangeEvent e);
        
        public delegate void CombinedMaterialsInformationRowChangeEventHandler(object sender, CombinedMaterialsInformationRowChangeEvent e);
        
        public delegate void CombinedSubcontractorsInformationRowChangeEventHandler(object sender, CombinedSubcontractorsInformationRowChangeEvent e);
        
        public delegate void CombinedRevenueInformationRowChangeEventHandler(object sender, CombinedRevenueInformationRowChangeEvent e);
        
        public delegate void CombinedOtherCostsInformationRowChangeEventHandler(object sender, CombinedOtherCostsInformationRowChangeEvent e);
        
        public delegate void HotelsInformationRowChangeEventHandler(object sender, HotelsInformationRowChangeEvent e);
        
        public delegate void BondingsInformationRowChangeEventHandler(object sender, BondingsInformationRowChangeEvent e);
        
        public delegate void InsurancesInformationRowChangeEventHandler(object sender, InsurancesInformationRowChangeEvent e);
        
        public delegate void OtherCategoryInformationRowChangeEventHandler(object sender, OtherCategoryInformationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BasicInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnTotalLabourHoursCad;
            
            private global::System.Data.DataColumn columnTotalLabourHoursUsd;
            
            private global::System.Data.DataColumn columnTotalMaterialsCad;
            
            private global::System.Data.DataColumn columnTotalMaterialsUsd;
            
            private global::System.Data.DataColumn columnTotalUnitsCad;
            
            private global::System.Data.DataColumn columnTotalUnitsUsd;
            
            private global::System.Data.DataColumn columnTotalOtherCostsCad;
            
            private global::System.Data.DataColumn columnTotalOtherCostsUsd;
            
            private global::System.Data.DataColumn columnGrandTotalCad;
            
            private global::System.Data.DataColumn columnGrandTotalUsd;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnFromTo;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsCad;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsUsd;
            
            private global::System.Data.DataColumn columnGrandRevenue;
            
            private global::System.Data.DataColumn columnGrandProfit;
            
            private global::System.Data.DataColumn columnGrandGrossMargin;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationDataTable() {
                this.TableName = "BasicInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BasicInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursCadColumn {
                get {
                    return this.columnTotalLabourHoursCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursUsdColumn {
                get {
                    return this.columnTotalLabourHoursUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsCadColumn {
                get {
                    return this.columnTotalMaterialsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsUsdColumn {
                get {
                    return this.columnTotalMaterialsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsCadColumn {
                get {
                    return this.columnTotalUnitsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsUsdColumn {
                get {
                    return this.columnTotalUnitsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsCadColumn {
                get {
                    return this.columnTotalOtherCostsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsUsdColumn {
                get {
                    return this.columnTotalOtherCostsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalCadColumn {
                get {
                    return this.columnGrandTotalCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalUsdColumn {
                get {
                    return this.columnGrandTotalUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromToColumn {
                get {
                    return this.columnFromTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsCadColumn {
                get {
                    return this.columnTotalSubcontractorsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsUsdColumn {
                get {
                    return this.columnTotalSubcontractorsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandRevenueColumn {
                get {
                    return this.columnGrandRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandProfitColumn {
                get {
                    return this.columnGrandProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandGrossMarginColumn {
                get {
                    return this.columnGrandGrossMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow this[int index] {
                get {
                    return ((BasicInformationRow)(this.Rows[index]));
                }
            }
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanging;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanged;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleting;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBasicInformationRow(BasicInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow AddBasicInformationRow(
                        int ProjectID, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        decimal TotalLabourHoursCad, 
                        decimal TotalLabourHoursUsd, 
                        decimal TotalMaterialsCad, 
                        decimal TotalMaterialsUsd, 
                        decimal TotalUnitsCad, 
                        decimal TotalUnitsUsd, 
                        decimal TotalOtherCostsCad, 
                        decimal TotalOtherCostsUsd, 
                        decimal GrandTotalCad, 
                        decimal GrandTotalUsd, 
                        string State, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string FromTo, 
                        decimal TotalSubcontractorsCad, 
                        decimal TotalSubcontractorsUsd, 
                        decimal GrandRevenue, 
                        decimal GrandProfit, 
                        decimal GrandGrossMargin) {
                BasicInformationRow rowBasicInformationRow = ((BasicInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectID,
                        Name,
                        StartDate,
                        EndDate,
                        TotalLabourHoursCad,
                        TotalLabourHoursUsd,
                        TotalMaterialsCad,
                        TotalMaterialsUsd,
                        TotalUnitsCad,
                        TotalUnitsUsd,
                        TotalOtherCostsCad,
                        TotalOtherCostsUsd,
                        GrandTotalCad,
                        GrandTotalUsd,
                        State,
                        Deleted,
                        COMPANY_ID,
                        FromTo,
                        TotalSubcontractorsCad,
                        TotalSubcontractorsUsd,
                        GrandRevenue,
                        GrandProfit,
                        GrandGrossMargin};
                rowBasicInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBasicInformationRow);
                return rowBasicInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow FindByCostingSheetID(int CostingSheetID) {
                return ((BasicInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BasicInformationDataTable cln = ((BasicInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BasicInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnTotalLabourHoursCad = base.Columns["TotalLabourHoursCad"];
                this.columnTotalLabourHoursUsd = base.Columns["TotalLabourHoursUsd"];
                this.columnTotalMaterialsCad = base.Columns["TotalMaterialsCad"];
                this.columnTotalMaterialsUsd = base.Columns["TotalMaterialsUsd"];
                this.columnTotalUnitsCad = base.Columns["TotalUnitsCad"];
                this.columnTotalUnitsUsd = base.Columns["TotalUnitsUsd"];
                this.columnTotalOtherCostsCad = base.Columns["TotalOtherCostsCad"];
                this.columnTotalOtherCostsUsd = base.Columns["TotalOtherCostsUsd"];
                this.columnGrandTotalCad = base.Columns["GrandTotalCad"];
                this.columnGrandTotalUsd = base.Columns["GrandTotalUsd"];
                this.columnState = base.Columns["State"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnFromTo = base.Columns["FromTo"];
                this.columnTotalSubcontractorsCad = base.Columns["TotalSubcontractorsCad"];
                this.columnTotalSubcontractorsUsd = base.Columns["TotalSubcontractorsUsd"];
                this.columnGrandRevenue = base.Columns["GrandRevenue"];
                this.columnGrandProfit = base.Columns["GrandProfit"];
                this.columnGrandGrossMargin = base.Columns["GrandGrossMargin"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnTotalLabourHoursCad = new global::System.Data.DataColumn("TotalLabourHoursCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursCad);
                this.columnTotalLabourHoursUsd = new global::System.Data.DataColumn("TotalLabourHoursUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursUsd);
                this.columnTotalMaterialsCad = new global::System.Data.DataColumn("TotalMaterialsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsCad);
                this.columnTotalMaterialsUsd = new global::System.Data.DataColumn("TotalMaterialsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsUsd);
                this.columnTotalUnitsCad = new global::System.Data.DataColumn("TotalUnitsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsCad);
                this.columnTotalUnitsUsd = new global::System.Data.DataColumn("TotalUnitsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsUsd);
                this.columnTotalOtherCostsCad = new global::System.Data.DataColumn("TotalOtherCostsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsCad);
                this.columnTotalOtherCostsUsd = new global::System.Data.DataColumn("TotalOtherCostsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsUsd);
                this.columnGrandTotalCad = new global::System.Data.DataColumn("GrandTotalCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalCad);
                this.columnGrandTotalUsd = new global::System.Data.DataColumn("GrandTotalUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalUsd);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnFromTo = new global::System.Data.DataColumn("FromTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromTo);
                this.columnTotalSubcontractorsCad = new global::System.Data.DataColumn("TotalSubcontractorsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsCad);
                this.columnTotalSubcontractorsUsd = new global::System.Data.DataColumn("TotalSubcontractorsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsUsd);
                this.columnGrandRevenue = new global::System.Data.DataColumn("GrandRevenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandRevenue);
                this.columnGrandProfit = new global::System.Data.DataColumn("GrandProfit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandProfit);
                this.columnGrandGrossMargin = new global::System.Data.DataColumn("GrandGrossMargin", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandGrossMargin);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AutoIncrement = true;
                this.columnCostingSheetID.AutoIncrementSeed = -1;
                this.columnCostingSheetID.AutoIncrementStep = -1;
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.ReadOnly = true;
                this.columnCostingSheetID.Unique = true;
                this.columnProjectID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 150;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnTotalLabourHoursCad.AllowDBNull = false;
                this.columnTotalLabourHoursUsd.AllowDBNull = false;
                this.columnTotalMaterialsCad.AllowDBNull = false;
                this.columnTotalMaterialsUsd.AllowDBNull = false;
                this.columnTotalUnitsCad.AllowDBNull = false;
                this.columnTotalUnitsUsd.AllowDBNull = false;
                this.columnTotalOtherCostsCad.AllowDBNull = false;
                this.columnTotalOtherCostsUsd.AllowDBNull = false;
                this.columnGrandTotalCad.AllowDBNull = false;
                this.columnGrandTotalUsd.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow NewBasicInformationRow() {
                return ((BasicInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BasicInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BasicInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BasicInformationRowChanged != null)) {
                    this.BasicInformationRowChanged(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BasicInformationRowChanging != null)) {
                    this.BasicInformationRowChanging(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BasicInformationRowDeleted != null)) {
                    this.BasicInformationRowDeleted(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BasicInformationRowDeleting != null)) {
                    this.BasicInformationRowDeleting(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBasicInformationRow(BasicInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BasicInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OtherCostsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationDataTable() {
                this.TableName = "OtherCostsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCostsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OtherCostsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow this[int index] {
                get {
                    return ((OtherCostsInformationRow)(this.Rows[index]));
                }
            }
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowChanging;
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowChanged;
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowDeleting;
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOtherCostsInformationRow(OtherCostsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow AddOtherCostsInformationRow(
                        int CostingSheetID, 
                        int RefID, 
                        string Work_, 
                        string Function_, 
                        string Description, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string WorkFunction, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate) {
                OtherCostsInformationRow rowOtherCostsInformationRow = ((OtherCostsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefID,
                        Work_,
                        Function_,
                        Description,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        WorkFunction,
                        StartDate,
                        EndDate};
                rowOtherCostsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOtherCostsInformationRow);
                return rowOtherCostsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow FindByCostingSheetIDRefID(int CostingSheetID, int RefID) {
                return ((OtherCostsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OtherCostsInformationDataTable cln = ((OtherCostsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OtherCostsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 150;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow NewOtherCostsInformationRow() {
                return ((OtherCostsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OtherCostsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OtherCostsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OtherCostsInformationRowChanged != null)) {
                    this.OtherCostsInformationRowChanged(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OtherCostsInformationRowChanging != null)) {
                    this.OtherCostsInformationRowChanging(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OtherCostsInformationRowDeleted != null)) {
                    this.OtherCostsInformationRowDeleted(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OtherCostsInformationRowDeleting != null)) {
                    this.OtherCostsInformationRowDeleting(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOtherCostsInformationRow(OtherCostsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OtherCostsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnUnitDescription;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationDataTable() {
                this.TableName = "UnitsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDescriptionColumn {
                get {
                    return this.columnUnitDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow this[int index] {
                get {
                    return ((UnitsInformationRow)(this.Rows[index]));
                }
            }
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowChanging;
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowChanged;
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowDeleting;
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitsInformationRow(UnitsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow AddUnitsInformationRow(
                        int CostingSheetID, 
                        string Work_, 
                        int UnitID, 
                        int RefID, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string UnitCode, 
                        string UnitDescription, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string WorkFunction, 
                        string Function_, 
                        decimal Budget) {
                UnitsInformationRow rowUnitsInformationRow = ((UnitsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        UnitID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UnitCode,
                        UnitDescription,
                        StartDate,
                        EndDate,
                        WorkFunction,
                        Function_,
                        Budget};
                rowUnitsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitsInformationRow);
                return rowUnitsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow FindByRefIDUnitIDWork_CostingSheetID(int RefID, int UnitID, string Work_, int CostingSheetID) {
                return ((UnitsInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            UnitID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitsInformationDataTable cln = ((UnitsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnUnitDescription = base.Columns["UnitDescription"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnUnitDescription = new global::System.Data.DataColumn("UnitDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitDescription);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnUnitID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnUnitID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow NewUnitsInformationRow() {
                return ((UnitsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitsInformationRowChanged != null)) {
                    this.UnitsInformationRowChanged(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitsInformationRowChanging != null)) {
                    this.UnitsInformationRowChanging(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitsInformationRowDeleted != null)) {
                    this.UnitsInformationRowDeleted(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitsInformationRowDeleting != null)) {
                    this.UnitsInformationRowDeleting(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitsInformationRow(UnitsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LabourHoursInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnLHQuantity;
            
            private global::System.Data.DataColumn columnLHUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsQuantity;
            
            private global::System.Data.DataColumn columnMotelUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMotelQuantity;
            
            private global::System.Data.DataColumn columnLHCostCad;
            
            private global::System.Data.DataColumn columnMealsCostCad;
            
            private global::System.Data.DataColumn columnMotelCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnLHCostUsd;
            
            private global::System.Data.DataColumn columnMealsCostUsd;
            
            private global::System.Data.DataColumn columnMotelCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationDataTable() {
                this.TableName = "LabourHoursInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabourHoursInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LabourHoursInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHQuantityColumn {
                get {
                    return this.columnLHQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHUnitOfMeasurementColumn {
                get {
                    return this.columnLHUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsUnitOfMeasurementColumn {
                get {
                    return this.columnMealsUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsQuantityColumn {
                get {
                    return this.columnMealsQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelUnitOfMeasurementColumn {
                get {
                    return this.columnMotelUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelQuantityColumn {
                get {
                    return this.columnMotelQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostCadColumn {
                get {
                    return this.columnLHCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostCadColumn {
                get {
                    return this.columnMealsCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostCadColumn {
                get {
                    return this.columnMotelCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostUsdColumn {
                get {
                    return this.columnLHCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostUsdColumn {
                get {
                    return this.columnMealsCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostUsdColumn {
                get {
                    return this.columnMotelCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow this[int index] {
                get {
                    return ((LabourHoursInformationRow)(this.Rows[index]));
                }
            }
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowChanging;
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowChanged;
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowDeleting;
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLabourHoursInformationRow(LabourHoursInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow AddLabourHoursInformationRow(
                        int CostingSheetID, 
                        string Work_, 
                        int EmployeeID, 
                        int RefID, 
                        double LHQuantity, 
                        string LHUnitOfMeasurement, 
                        string MealsUnitOfMeasurement, 
                        int MealsQuantity, 
                        string MotelUnitOfMeasurement, 
                        int MotelQuantity, 
                        decimal LHCostCad, 
                        decimal MealsCostCad, 
                        decimal MotelCostCad, 
                        decimal TotalCostCad, 
                        decimal LHCostUsd, 
                        decimal MealsCostUsd, 
                        decimal MotelCostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string WorkFunction, 
                        string Function_, 
                        decimal Budget) {
                LabourHoursInformationRow rowLabourHoursInformationRow = ((LabourHoursInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        EmployeeID,
                        RefID,
                        LHQuantity,
                        LHUnitOfMeasurement,
                        MealsUnitOfMeasurement,
                        MealsQuantity,
                        MotelUnitOfMeasurement,
                        MotelQuantity,
                        LHCostCad,
                        MealsCostCad,
                        MotelCostCad,
                        TotalCostCad,
                        LHCostUsd,
                        MealsCostUsd,
                        MotelCostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Name,
                        StartDate,
                        EndDate,
                        WorkFunction,
                        Function_,
                        Budget};
                rowLabourHoursInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLabourHoursInformationRow);
                return rowLabourHoursInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow FindByRefIDEmployeeIDWork_CostingSheetID(int RefID, int EmployeeID, string Work_, int CostingSheetID) {
                return ((LabourHoursInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            EmployeeID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LabourHoursInformationDataTable cln = ((LabourHoursInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LabourHoursInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnLHQuantity = base.Columns["LHQuantity"];
                this.columnLHUnitOfMeasurement = base.Columns["LHUnitOfMeasurement"];
                this.columnMealsUnitOfMeasurement = base.Columns["MealsUnitOfMeasurement"];
                this.columnMealsQuantity = base.Columns["MealsQuantity"];
                this.columnMotelUnitOfMeasurement = base.Columns["MotelUnitOfMeasurement"];
                this.columnMotelQuantity = base.Columns["MotelQuantity"];
                this.columnLHCostCad = base.Columns["LHCostCad"];
                this.columnMealsCostCad = base.Columns["MealsCostCad"];
                this.columnMotelCostCad = base.Columns["MotelCostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnLHCostUsd = base.Columns["LHCostUsd"];
                this.columnMealsCostUsd = base.Columns["MealsCostUsd"];
                this.columnMotelCostUsd = base.Columns["MotelCostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnLHQuantity = new global::System.Data.DataColumn("LHQuantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHQuantity);
                this.columnLHUnitOfMeasurement = new global::System.Data.DataColumn("LHUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHUnitOfMeasurement);
                this.columnMealsUnitOfMeasurement = new global::System.Data.DataColumn("MealsUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsUnitOfMeasurement);
                this.columnMealsQuantity = new global::System.Data.DataColumn("MealsQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsQuantity);
                this.columnMotelUnitOfMeasurement = new global::System.Data.DataColumn("MotelUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelUnitOfMeasurement);
                this.columnMotelQuantity = new global::System.Data.DataColumn("MotelQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelQuantity);
                this.columnLHCostCad = new global::System.Data.DataColumn("LHCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostCad);
                this.columnMealsCostCad = new global::System.Data.DataColumn("MealsCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostCad);
                this.columnMotelCostCad = new global::System.Data.DataColumn("MotelCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnLHCostUsd = new global::System.Data.DataColumn("LHCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostUsd);
                this.columnMealsCostUsd = new global::System.Data.DataColumn("MealsCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostUsd);
                this.columnMotelCostUsd = new global::System.Data.DataColumn("MotelCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnEmployeeID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnLHQuantity.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.MaxLength = 10;
                this.columnMealsUnitOfMeasurement.MaxLength = 25;
                this.columnMotelUnitOfMeasurement.MaxLength = 25;
                this.columnLHCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnLHCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow NewLabourHoursInformationRow() {
                return ((LabourHoursInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LabourHoursInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LabourHoursInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabourHoursInformationRowChanged != null)) {
                    this.LabourHoursInformationRowChanged(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabourHoursInformationRowChanging != null)) {
                    this.LabourHoursInformationRowChanging(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabourHoursInformationRowDeleted != null)) {
                    this.LabourHoursInformationRowDeleted(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabourHoursInformationRowDeleting != null)) {
                    this.LabourHoursInformationRowDeleting(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLabourHoursInformationRow(LabourHoursInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LabourHoursInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MaterialsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnProcess;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationDataTable() {
                this.TableName = "MaterialsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MaterialsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessColumn {
                get {
                    return this.columnProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow this[int index] {
                get {
                    return ((MaterialsInformationRow)(this.Rows[index]));
                }
            }
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowChanging;
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowChanged;
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowDeleting;
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMaterialsInformationRow(MaterialsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow AddMaterialsInformationRow(
                        int CostingSheetID, 
                        int MaterialID, 
                        int RefID, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Process, 
                        string Description, 
                        string UnitOfMeasurement, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string Function_, 
                        string WorkFunction, 
                        decimal Budget) {
                MaterialsInformationRow rowMaterialsInformationRow = ((MaterialsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        MaterialID,
                        RefID,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Process,
                        Description,
                        UnitOfMeasurement,
                        StartDate,
                        EndDate,
                        Function_,
                        WorkFunction,
                        Budget};
                rowMaterialsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMaterialsInformationRow);
                return rowMaterialsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow FindByCostingSheetIDMaterialIDRefID(int CostingSheetID, int MaterialID, int RefID) {
                return ((MaterialsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            MaterialID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MaterialsInformationDataTable cln = ((MaterialsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MaterialsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnProcess = base.Columns["Process"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnProcess = new global::System.Data.DataColumn("Process", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnMaterialID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnMaterialID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow NewMaterialsInformationRow() {
                return ((MaterialsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MaterialsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MaterialsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MaterialsInformationRowChanged != null)) {
                    this.MaterialsInformationRowChanged(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MaterialsInformationRowChanging != null)) {
                    this.MaterialsInformationRowChanging(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MaterialsInformationRowDeleted != null)) {
                    this.MaterialsInformationRowDeleted(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MaterialsInformationRowDeleting != null)) {
                    this.MaterialsInformationRowDeleting(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMaterialsInformationRow(MaterialsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MaterialsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReportInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnCompaniesID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnTotalLabourHoursCad;
            
            private global::System.Data.DataColumn columnTotalLabourHoursUsd;
            
            private global::System.Data.DataColumn columnTotalMaterialsCad;
            
            private global::System.Data.DataColumn columnTotalMaterialsUsd;
            
            private global::System.Data.DataColumn columnTotalUnitsCad;
            
            private global::System.Data.DataColumn columnTotalUnitsUsd;
            
            private global::System.Data.DataColumn columnTotalOtherCostsCad;
            
            private global::System.Data.DataColumn columnTotalOtherCostsUsd;
            
            private global::System.Data.DataColumn columnGrandTotalCad;
            
            private global::System.Data.DataColumn columnGrandTotalUsd;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnFromTo;
            
            private global::System.Data.DataColumn columnProjectStartDate;
            
            private global::System.Data.DataColumn columnProjectEndDate;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnGrandRevenue;
            
            private global::System.Data.DataColumn columnGrandProfit;
            
            private global::System.Data.DataColumn columnGrandGrossMargin;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportInformationDataTable() {
                this.TableName = "ReportInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReportInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReportInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompaniesIDColumn {
                get {
                    return this.columnCompaniesID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursCadColumn {
                get {
                    return this.columnTotalLabourHoursCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursUsdColumn {
                get {
                    return this.columnTotalLabourHoursUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsCadColumn {
                get {
                    return this.columnTotalMaterialsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsUsdColumn {
                get {
                    return this.columnTotalMaterialsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsCadColumn {
                get {
                    return this.columnTotalUnitsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsUsdColumn {
                get {
                    return this.columnTotalUnitsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsCadColumn {
                get {
                    return this.columnTotalOtherCostsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsUsdColumn {
                get {
                    return this.columnTotalOtherCostsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalCadColumn {
                get {
                    return this.columnGrandTotalCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalUsdColumn {
                get {
                    return this.columnGrandTotalUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromToColumn {
                get {
                    return this.columnFromTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectStartDateColumn {
                get {
                    return this.columnProjectStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectEndDateColumn {
                get {
                    return this.columnProjectEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandRevenueColumn {
                get {
                    return this.columnGrandRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandProfitColumn {
                get {
                    return this.columnGrandProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandGrossMarginColumn {
                get {
                    return this.columnGrandGrossMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportInformationRow this[int index] {
                get {
                    return ((ReportInformationRow)(this.Rows[index]));
                }
            }
            
            public event ReportInformationRowChangeEventHandler ReportInformationRowChanging;
            
            public event ReportInformationRowChangeEventHandler ReportInformationRowChanged;
            
            public event ReportInformationRowChangeEventHandler ReportInformationRowDeleting;
            
            public event ReportInformationRowChangeEventHandler ReportInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReportInformationRow(ReportInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportInformationRow AddReportInformationRow(
                        int ProjectID, 
                        string CompaniesID, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        decimal TotalLabourHoursCad, 
                        decimal TotalLabourHoursUsd, 
                        decimal TotalMaterialsCad, 
                        decimal TotalMaterialsUsd, 
                        decimal TotalUnitsCad, 
                        decimal TotalUnitsUsd, 
                        decimal TotalOtherCostsCad, 
                        decimal TotalOtherCostsUsd, 
                        decimal GrandTotalCad, 
                        decimal GrandTotalUsd, 
                        string State, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string FromTo, 
                        System.DateTime ProjectStartDate, 
                        System.DateTime ProjectEndDate, 
                        string ClientName, 
                        string ProjectName, 
                        decimal GrandRevenue, 
                        decimal GrandProfit, 
                        decimal GrandGrossMargin) {
                ReportInformationRow rowReportInformationRow = ((ReportInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectID,
                        CompaniesID,
                        Name,
                        StartDate,
                        EndDate,
                        TotalLabourHoursCad,
                        TotalLabourHoursUsd,
                        TotalMaterialsCad,
                        TotalMaterialsUsd,
                        TotalUnitsCad,
                        TotalUnitsUsd,
                        TotalOtherCostsCad,
                        TotalOtherCostsUsd,
                        GrandTotalCad,
                        GrandTotalUsd,
                        State,
                        Deleted,
                        COMPANY_ID,
                        FromTo,
                        ProjectStartDate,
                        ProjectEndDate,
                        ClientName,
                        ProjectName,
                        GrandRevenue,
                        GrandProfit,
                        GrandGrossMargin};
                rowReportInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReportInformationRow);
                return rowReportInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportInformationRow FindByCompaniesIDProjectIDCostingSheetID(string CompaniesID, int ProjectID, int CostingSheetID) {
                return ((ReportInformationRow)(this.Rows.Find(new object[] {
                            CompaniesID,
                            ProjectID,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReportInformationDataTable cln = ((ReportInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReportInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnCompaniesID = base.Columns["CompaniesID"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnTotalLabourHoursCad = base.Columns["TotalLabourHoursCad"];
                this.columnTotalLabourHoursUsd = base.Columns["TotalLabourHoursUsd"];
                this.columnTotalMaterialsCad = base.Columns["TotalMaterialsCad"];
                this.columnTotalMaterialsUsd = base.Columns["TotalMaterialsUsd"];
                this.columnTotalUnitsCad = base.Columns["TotalUnitsCad"];
                this.columnTotalUnitsUsd = base.Columns["TotalUnitsUsd"];
                this.columnTotalOtherCostsCad = base.Columns["TotalOtherCostsCad"];
                this.columnTotalOtherCostsUsd = base.Columns["TotalOtherCostsUsd"];
                this.columnGrandTotalCad = base.Columns["GrandTotalCad"];
                this.columnGrandTotalUsd = base.Columns["GrandTotalUsd"];
                this.columnState = base.Columns["State"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnFromTo = base.Columns["FromTo"];
                this.columnProjectStartDate = base.Columns["ProjectStartDate"];
                this.columnProjectEndDate = base.Columns["ProjectEndDate"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnGrandRevenue = base.Columns["GrandRevenue"];
                this.columnGrandProfit = base.Columns["GrandProfit"];
                this.columnGrandGrossMargin = base.Columns["GrandGrossMargin"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnCompaniesID = new global::System.Data.DataColumn("CompaniesID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompaniesID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnTotalLabourHoursCad = new global::System.Data.DataColumn("TotalLabourHoursCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursCad);
                this.columnTotalLabourHoursUsd = new global::System.Data.DataColumn("TotalLabourHoursUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursUsd);
                this.columnTotalMaterialsCad = new global::System.Data.DataColumn("TotalMaterialsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsCad);
                this.columnTotalMaterialsUsd = new global::System.Data.DataColumn("TotalMaterialsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsUsd);
                this.columnTotalUnitsCad = new global::System.Data.DataColumn("TotalUnitsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsCad);
                this.columnTotalUnitsUsd = new global::System.Data.DataColumn("TotalUnitsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsUsd);
                this.columnTotalOtherCostsCad = new global::System.Data.DataColumn("TotalOtherCostsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsCad);
                this.columnTotalOtherCostsUsd = new global::System.Data.DataColumn("TotalOtherCostsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsUsd);
                this.columnGrandTotalCad = new global::System.Data.DataColumn("GrandTotalCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalCad);
                this.columnGrandTotalUsd = new global::System.Data.DataColumn("GrandTotalUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalUsd);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnFromTo = new global::System.Data.DataColumn("FromTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromTo);
                this.columnProjectStartDate = new global::System.Data.DataColumn("ProjectStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectStartDate);
                this.columnProjectEndDate = new global::System.Data.DataColumn("ProjectEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectEndDate);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnGrandRevenue = new global::System.Data.DataColumn("GrandRevenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandRevenue);
                this.columnGrandProfit = new global::System.Data.DataColumn("GrandProfit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandProfit);
                this.columnGrandGrossMargin = new global::System.Data.DataColumn("GrandGrossMargin", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandGrossMargin);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCompaniesID,
                                this.columnProjectID,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AutoIncrement = true;
                this.columnCostingSheetID.AutoIncrementSeed = -1;
                this.columnCostingSheetID.AutoIncrementStep = -1;
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.ReadOnly = true;
                this.columnProjectID.AllowDBNull = false;
                this.columnCompaniesID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 150;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnTotalLabourHoursCad.AllowDBNull = false;
                this.columnTotalLabourHoursUsd.AllowDBNull = false;
                this.columnTotalMaterialsCad.AllowDBNull = false;
                this.columnTotalMaterialsUsd.AllowDBNull = false;
                this.columnTotalUnitsCad.AllowDBNull = false;
                this.columnTotalUnitsUsd.AllowDBNull = false;
                this.columnTotalOtherCostsCad.AllowDBNull = false;
                this.columnTotalOtherCostsUsd.AllowDBNull = false;
                this.columnGrandTotalCad.AllowDBNull = false;
                this.columnGrandTotalUsd.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportInformationRow NewReportInformationRow() {
                return ((ReportInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReportInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReportInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReportInformationRowChanged != null)) {
                    this.ReportInformationRowChanged(this, new ReportInformationRowChangeEvent(((ReportInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReportInformationRowChanging != null)) {
                    this.ReportInformationRowChanging(this, new ReportInformationRowChangeEvent(((ReportInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReportInformationRowDeleted != null)) {
                    this.ReportInformationRowDeleted(this, new ReportInformationRowChangeEvent(((ReportInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReportInformationRowDeleting != null)) {
                    this.ReportInformationRowDeleting(this, new ReportInformationRowChangeEvent(((ReportInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReportInformationRow(ReportInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReportInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubcontractorsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnSubcontractorID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnSubcontractor;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationDataTable() {
                this.TableName = "SubcontractorsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubcontractorsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubcontractorsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorColumn {
                get {
                    return this.columnSubcontractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow this[int index] {
                get {
                    return ((SubcontractorsInformationRow)(this.Rows[index]));
                }
            }
            
            public event SubcontractorsInformationRowChangeEventHandler SubcontractorsInformationRowChanging;
            
            public event SubcontractorsInformationRowChangeEventHandler SubcontractorsInformationRowChanged;
            
            public event SubcontractorsInformationRowChangeEventHandler SubcontractorsInformationRowDeleting;
            
            public event SubcontractorsInformationRowChangeEventHandler SubcontractorsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubcontractorsInformationRow(SubcontractorsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow AddSubcontractorsInformationRow(
                        int CostingSheetID, 
                        int SubcontractorID, 
                        int RefID, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Subcontractor, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string Comment, 
                        int Budget) {
                SubcontractorsInformationRow rowSubcontractorsInformationRow = ((SubcontractorsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        SubcontractorID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Subcontractor,
                        StartDate,
                        EndDate,
                        Comment,
                        Budget};
                rowSubcontractorsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubcontractorsInformationRow);
                return rowSubcontractorsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow FindByRefIDSubcontractorIDCostingSheetID(int RefID, int SubcontractorID, int CostingSheetID) {
                return ((SubcontractorsInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            SubcontractorID,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubcontractorsInformationDataTable cln = ((SubcontractorsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubcontractorsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnSubcontractorID = base.Columns["SubcontractorID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnSubcontractor = base.Columns["Subcontractor"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnComment = base.Columns["Comment"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnSubcontractorID = new global::System.Data.DataColumn("SubcontractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnSubcontractor = new global::System.Data.DataColumn("Subcontractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractor);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnSubcontractorID,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnSubcontractorID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow NewSubcontractorsInformationRow() {
                return ((SubcontractorsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubcontractorsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubcontractorsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubcontractorsInformationRowChanged != null)) {
                    this.SubcontractorsInformationRowChanged(this, new SubcontractorsInformationRowChangeEvent(((SubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubcontractorsInformationRowChanging != null)) {
                    this.SubcontractorsInformationRowChanging(this, new SubcontractorsInformationRowChangeEvent(((SubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubcontractorsInformationRowDeleted != null)) {
                    this.SubcontractorsInformationRowDeleted(this, new SubcontractorsInformationRowChangeEvent(((SubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubcontractorsInformationRowDeleting != null)) {
                    this.SubcontractorsInformationRowDeleting(this, new SubcontractorsInformationRowChangeEvent(((SubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubcontractorsInformationRow(SubcontractorsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubcontractorsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RevenueInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefIDRevenue;
            
            private global::System.Data.DataColumn columnRevenue;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationDataTable() {
                this.TableName = "RevenueInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RevenueInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RevenueInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDRevenueColumn {
                get {
                    return this.columnRefIDRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueColumn {
                get {
                    return this.columnRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow this[int index] {
                get {
                    return ((RevenueInformationRow)(this.Rows[index]));
                }
            }
            
            public event RevenueInformationRowChangeEventHandler RevenueInformationRowChanging;
            
            public event RevenueInformationRowChangeEventHandler RevenueInformationRowChanged;
            
            public event RevenueInformationRowChangeEventHandler RevenueInformationRowDeleting;
            
            public event RevenueInformationRowChangeEventHandler RevenueInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRevenueInformationRow(RevenueInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow AddRevenueInformationRow(int CostingSheetID, int RefIDRevenue, decimal Revenue, string Comment, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, bool Deleted, bool InDatabase) {
                RevenueInformationRow rowRevenueInformationRow = ((RevenueInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefIDRevenue,
                        Revenue,
                        Comment,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Deleted,
                        InDatabase};
                rowRevenueInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRevenueInformationRow);
                return rowRevenueInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow FindByCostingSheetIDRefIDRevenue(int CostingSheetID, int RefIDRevenue) {
                return ((RevenueInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefIDRevenue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RevenueInformationDataTable cln = ((RevenueInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RevenueInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefIDRevenue = base.Columns["RefIDRevenue"];
                this.columnRevenue = base.Columns["Revenue"];
                this.columnComment = base.Columns["Comment"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefIDRevenue = new global::System.Data.DataColumn("RefIDRevenue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefIDRevenue);
                this.columnRevenue = new global::System.Data.DataColumn("Revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenue);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefIDRevenue}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefIDRevenue.AllowDBNull = false;
                this.columnRevenue.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow NewRevenueInformationRow() {
                return ((RevenueInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RevenueInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RevenueInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RevenueInformationRowChanged != null)) {
                    this.RevenueInformationRowChanged(this, new RevenueInformationRowChangeEvent(((RevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RevenueInformationRowChanging != null)) {
                    this.RevenueInformationRowChanging(this, new RevenueInformationRowChangeEvent(((RevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RevenueInformationRowDeleted != null)) {
                    this.RevenueInformationRowDeleted(this, new RevenueInformationRowChangeEvent(((RevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RevenueInformationRowDeleting != null)) {
                    this.RevenueInformationRowDeleting(this, new RevenueInformationRowChangeEvent(((RevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRevenueInformationRow(RevenueInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RevenueInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedBasicInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnTotalLabourHoursCad;
            
            private global::System.Data.DataColumn columnTotalLabourHoursUsd;
            
            private global::System.Data.DataColumn columnTotalMaterialsCad;
            
            private global::System.Data.DataColumn columnTotalMaterialsUsd;
            
            private global::System.Data.DataColumn columnTotalUnitsCad;
            
            private global::System.Data.DataColumn columnTotalUnitsUsd;
            
            private global::System.Data.DataColumn columnTotalOtherCostsCad;
            
            private global::System.Data.DataColumn columnTotalOtherCostsUsd;
            
            private global::System.Data.DataColumn columnGrandTotalCad;
            
            private global::System.Data.DataColumn columnGrandTotalUsd;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnFromTo;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsCad;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsUsd;
            
            private global::System.Data.DataColumn columnGrandRevenue;
            
            private global::System.Data.DataColumn columnGrandProfit;
            
            private global::System.Data.DataColumn columnGrandGrossMargin;
            
            private global::System.Data.DataColumn columnCombinedProjects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationDataTable() {
                this.TableName = "CombinedBasicInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedBasicInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedBasicInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursCadColumn {
                get {
                    return this.columnTotalLabourHoursCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursUsdColumn {
                get {
                    return this.columnTotalLabourHoursUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsCadColumn {
                get {
                    return this.columnTotalMaterialsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsUsdColumn {
                get {
                    return this.columnTotalMaterialsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsCadColumn {
                get {
                    return this.columnTotalUnitsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsUsdColumn {
                get {
                    return this.columnTotalUnitsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsCadColumn {
                get {
                    return this.columnTotalOtherCostsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsUsdColumn {
                get {
                    return this.columnTotalOtherCostsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalCadColumn {
                get {
                    return this.columnGrandTotalCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalUsdColumn {
                get {
                    return this.columnGrandTotalUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromToColumn {
                get {
                    return this.columnFromTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsCadColumn {
                get {
                    return this.columnTotalSubcontractorsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsUsdColumn {
                get {
                    return this.columnTotalSubcontractorsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandRevenueColumn {
                get {
                    return this.columnGrandRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandProfitColumn {
                get {
                    return this.columnGrandProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandGrossMarginColumn {
                get {
                    return this.columnGrandGrossMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CombinedProjectsColumn {
                get {
                    return this.columnCombinedProjects;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow this[int index] {
                get {
                    return ((CombinedBasicInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedBasicInformationRowChangeEventHandler CombinedBasicInformationRowChanging;
            
            public event CombinedBasicInformationRowChangeEventHandler CombinedBasicInformationRowChanged;
            
            public event CombinedBasicInformationRowChangeEventHandler CombinedBasicInformationRowDeleting;
            
            public event CombinedBasicInformationRowChangeEventHandler CombinedBasicInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedBasicInformationRow(CombinedBasicInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow AddCombinedBasicInformationRow(
                        int ClientID, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        decimal TotalLabourHoursCad, 
                        decimal TotalLabourHoursUsd, 
                        decimal TotalMaterialsCad, 
                        decimal TotalMaterialsUsd, 
                        decimal TotalUnitsCad, 
                        decimal TotalUnitsUsd, 
                        decimal TotalOtherCostsCad, 
                        decimal TotalOtherCostsUsd, 
                        decimal GrandTotalCad, 
                        decimal GrandTotalUsd, 
                        string State, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string FromTo, 
                        decimal TotalSubcontractorsCad, 
                        decimal TotalSubcontractorsUsd, 
                        decimal GrandRevenue, 
                        decimal GrandProfit, 
                        decimal GrandGrossMargin, 
                        string CombinedProjects) {
                CombinedBasicInformationRow rowCombinedBasicInformationRow = ((CombinedBasicInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ClientID,
                        Name,
                        StartDate,
                        EndDate,
                        TotalLabourHoursCad,
                        TotalLabourHoursUsd,
                        TotalMaterialsCad,
                        TotalMaterialsUsd,
                        TotalUnitsCad,
                        TotalUnitsUsd,
                        TotalOtherCostsCad,
                        TotalOtherCostsUsd,
                        GrandTotalCad,
                        GrandTotalUsd,
                        State,
                        Deleted,
                        COMPANY_ID,
                        FromTo,
                        TotalSubcontractorsCad,
                        TotalSubcontractorsUsd,
                        GrandRevenue,
                        GrandProfit,
                        GrandGrossMargin,
                        CombinedProjects};
                rowCombinedBasicInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedBasicInformationRow);
                return rowCombinedBasicInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow FindByCostingSheetID(int CostingSheetID) {
                return ((CombinedBasicInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedBasicInformationDataTable cln = ((CombinedBasicInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedBasicInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnTotalLabourHoursCad = base.Columns["TotalLabourHoursCad"];
                this.columnTotalLabourHoursUsd = base.Columns["TotalLabourHoursUsd"];
                this.columnTotalMaterialsCad = base.Columns["TotalMaterialsCad"];
                this.columnTotalMaterialsUsd = base.Columns["TotalMaterialsUsd"];
                this.columnTotalUnitsCad = base.Columns["TotalUnitsCad"];
                this.columnTotalUnitsUsd = base.Columns["TotalUnitsUsd"];
                this.columnTotalOtherCostsCad = base.Columns["TotalOtherCostsCad"];
                this.columnTotalOtherCostsUsd = base.Columns["TotalOtherCostsUsd"];
                this.columnGrandTotalCad = base.Columns["GrandTotalCad"];
                this.columnGrandTotalUsd = base.Columns["GrandTotalUsd"];
                this.columnState = base.Columns["State"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnFromTo = base.Columns["FromTo"];
                this.columnTotalSubcontractorsCad = base.Columns["TotalSubcontractorsCad"];
                this.columnTotalSubcontractorsUsd = base.Columns["TotalSubcontractorsUsd"];
                this.columnGrandRevenue = base.Columns["GrandRevenue"];
                this.columnGrandProfit = base.Columns["GrandProfit"];
                this.columnGrandGrossMargin = base.Columns["GrandGrossMargin"];
                this.columnCombinedProjects = base.Columns["CombinedProjects"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnTotalLabourHoursCad = new global::System.Data.DataColumn("TotalLabourHoursCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursCad);
                this.columnTotalLabourHoursUsd = new global::System.Data.DataColumn("TotalLabourHoursUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursUsd);
                this.columnTotalMaterialsCad = new global::System.Data.DataColumn("TotalMaterialsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsCad);
                this.columnTotalMaterialsUsd = new global::System.Data.DataColumn("TotalMaterialsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsUsd);
                this.columnTotalUnitsCad = new global::System.Data.DataColumn("TotalUnitsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsCad);
                this.columnTotalUnitsUsd = new global::System.Data.DataColumn("TotalUnitsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsUsd);
                this.columnTotalOtherCostsCad = new global::System.Data.DataColumn("TotalOtherCostsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsCad);
                this.columnTotalOtherCostsUsd = new global::System.Data.DataColumn("TotalOtherCostsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsUsd);
                this.columnGrandTotalCad = new global::System.Data.DataColumn("GrandTotalCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalCad);
                this.columnGrandTotalUsd = new global::System.Data.DataColumn("GrandTotalUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalUsd);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnFromTo = new global::System.Data.DataColumn("FromTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromTo);
                this.columnTotalSubcontractorsCad = new global::System.Data.DataColumn("TotalSubcontractorsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsCad);
                this.columnTotalSubcontractorsUsd = new global::System.Data.DataColumn("TotalSubcontractorsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsUsd);
                this.columnGrandRevenue = new global::System.Data.DataColumn("GrandRevenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandRevenue);
                this.columnGrandProfit = new global::System.Data.DataColumn("GrandProfit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandProfit);
                this.columnGrandGrossMargin = new global::System.Data.DataColumn("GrandGrossMargin", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandGrossMargin);
                this.columnCombinedProjects = new global::System.Data.DataColumn("CombinedProjects", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCombinedProjects);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AutoIncrement = true;
                this.columnCostingSheetID.AutoIncrementSeed = -1;
                this.columnCostingSheetID.AutoIncrementStep = -1;
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.ReadOnly = true;
                this.columnCostingSheetID.Unique = true;
                this.columnClientID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 150;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnTotalLabourHoursCad.AllowDBNull = false;
                this.columnTotalLabourHoursUsd.AllowDBNull = false;
                this.columnTotalMaterialsCad.AllowDBNull = false;
                this.columnTotalMaterialsUsd.AllowDBNull = false;
                this.columnTotalUnitsCad.AllowDBNull = false;
                this.columnTotalUnitsUsd.AllowDBNull = false;
                this.columnTotalOtherCostsCad.AllowDBNull = false;
                this.columnTotalOtherCostsUsd.AllowDBNull = false;
                this.columnGrandTotalCad.AllowDBNull = false;
                this.columnGrandTotalUsd.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow NewCombinedBasicInformationRow() {
                return ((CombinedBasicInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedBasicInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedBasicInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedBasicInformationRowChanged != null)) {
                    this.CombinedBasicInformationRowChanged(this, new CombinedBasicInformationRowChangeEvent(((CombinedBasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedBasicInformationRowChanging != null)) {
                    this.CombinedBasicInformationRowChanging(this, new CombinedBasicInformationRowChangeEvent(((CombinedBasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedBasicInformationRowDeleted != null)) {
                    this.CombinedBasicInformationRowDeleted(this, new CombinedBasicInformationRowChangeEvent(((CombinedBasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedBasicInformationRowDeleting != null)) {
                    this.CombinedBasicInformationRowDeleting(this, new CombinedBasicInformationRowChangeEvent(((CombinedBasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedBasicInformationRow(CombinedBasicInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedBasicInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedLabourHoursInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnLHQuantity;
            
            private global::System.Data.DataColumn columnLHUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsQuantity;
            
            private global::System.Data.DataColumn columnMotelUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMotelQuantity;
            
            private global::System.Data.DataColumn columnLHCostCad;
            
            private global::System.Data.DataColumn columnMealsCostCad;
            
            private global::System.Data.DataColumn columnMotelCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnLHCostUsd;
            
            private global::System.Data.DataColumn columnMealsCostUsd;
            
            private global::System.Data.DataColumn columnMotelCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationDataTable() {
                this.TableName = "CombinedLabourHoursInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedLabourHoursInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedLabourHoursInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHQuantityColumn {
                get {
                    return this.columnLHQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHUnitOfMeasurementColumn {
                get {
                    return this.columnLHUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsUnitOfMeasurementColumn {
                get {
                    return this.columnMealsUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsQuantityColumn {
                get {
                    return this.columnMealsQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelUnitOfMeasurementColumn {
                get {
                    return this.columnMotelUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelQuantityColumn {
                get {
                    return this.columnMotelQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostCadColumn {
                get {
                    return this.columnLHCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostCadColumn {
                get {
                    return this.columnMealsCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostCadColumn {
                get {
                    return this.columnMotelCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostUsdColumn {
                get {
                    return this.columnLHCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostUsdColumn {
                get {
                    return this.columnMealsCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostUsdColumn {
                get {
                    return this.columnMotelCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow this[int index] {
                get {
                    return ((CombinedLabourHoursInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedLabourHoursInformationRowChangeEventHandler CombinedLabourHoursInformationRowChanging;
            
            public event CombinedLabourHoursInformationRowChangeEventHandler CombinedLabourHoursInformationRowChanged;
            
            public event CombinedLabourHoursInformationRowChangeEventHandler CombinedLabourHoursInformationRowDeleting;
            
            public event CombinedLabourHoursInformationRowChangeEventHandler CombinedLabourHoursInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedLabourHoursInformationRow(CombinedLabourHoursInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow AddCombinedLabourHoursInformationRow(
                        int CostingSheetID, 
                        string Work_, 
                        int EmployeeID, 
                        int RefID, 
                        double LHQuantity, 
                        string LHUnitOfMeasurement, 
                        string MealsUnitOfMeasurement, 
                        int MealsQuantity, 
                        string MotelUnitOfMeasurement, 
                        int MotelQuantity, 
                        decimal LHCostCad, 
                        decimal MealsCostCad, 
                        decimal MotelCostCad, 
                        decimal TotalCostCad, 
                        decimal LHCostUsd, 
                        decimal MealsCostUsd, 
                        decimal MotelCostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string WorkFunction, 
                        string Function_, 
                        int ProjectID, 
                        string Project) {
                CombinedLabourHoursInformationRow rowCombinedLabourHoursInformationRow = ((CombinedLabourHoursInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        EmployeeID,
                        RefID,
                        LHQuantity,
                        LHUnitOfMeasurement,
                        MealsUnitOfMeasurement,
                        MealsQuantity,
                        MotelUnitOfMeasurement,
                        MotelQuantity,
                        LHCostCad,
                        MealsCostCad,
                        MotelCostCad,
                        TotalCostCad,
                        LHCostUsd,
                        MealsCostUsd,
                        MotelCostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Name,
                        StartDate,
                        EndDate,
                        WorkFunction,
                        Function_,
                        ProjectID,
                        Project};
                rowCombinedLabourHoursInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedLabourHoursInformationRow);
                return rowCombinedLabourHoursInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow FindByRefIDEmployeeIDWork_CostingSheetID(int RefID, int EmployeeID, string Work_, int CostingSheetID) {
                return ((CombinedLabourHoursInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            EmployeeID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedLabourHoursInformationDataTable cln = ((CombinedLabourHoursInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedLabourHoursInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnLHQuantity = base.Columns["LHQuantity"];
                this.columnLHUnitOfMeasurement = base.Columns["LHUnitOfMeasurement"];
                this.columnMealsUnitOfMeasurement = base.Columns["MealsUnitOfMeasurement"];
                this.columnMealsQuantity = base.Columns["MealsQuantity"];
                this.columnMotelUnitOfMeasurement = base.Columns["MotelUnitOfMeasurement"];
                this.columnMotelQuantity = base.Columns["MotelQuantity"];
                this.columnLHCostCad = base.Columns["LHCostCad"];
                this.columnMealsCostCad = base.Columns["MealsCostCad"];
                this.columnMotelCostCad = base.Columns["MotelCostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnLHCostUsd = base.Columns["LHCostUsd"];
                this.columnMealsCostUsd = base.Columns["MealsCostUsd"];
                this.columnMotelCostUsd = base.Columns["MotelCostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnLHQuantity = new global::System.Data.DataColumn("LHQuantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHQuantity);
                this.columnLHUnitOfMeasurement = new global::System.Data.DataColumn("LHUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHUnitOfMeasurement);
                this.columnMealsUnitOfMeasurement = new global::System.Data.DataColumn("MealsUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsUnitOfMeasurement);
                this.columnMealsQuantity = new global::System.Data.DataColumn("MealsQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsQuantity);
                this.columnMotelUnitOfMeasurement = new global::System.Data.DataColumn("MotelUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelUnitOfMeasurement);
                this.columnMotelQuantity = new global::System.Data.DataColumn("MotelQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelQuantity);
                this.columnLHCostCad = new global::System.Data.DataColumn("LHCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostCad);
                this.columnMealsCostCad = new global::System.Data.DataColumn("MealsCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostCad);
                this.columnMotelCostCad = new global::System.Data.DataColumn("MotelCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnLHCostUsd = new global::System.Data.DataColumn("LHCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostUsd);
                this.columnMealsCostUsd = new global::System.Data.DataColumn("MealsCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostUsd);
                this.columnMotelCostUsd = new global::System.Data.DataColumn("MotelCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnEmployeeID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnLHQuantity.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.MaxLength = 10;
                this.columnMealsUnitOfMeasurement.MaxLength = 25;
                this.columnMotelUnitOfMeasurement.MaxLength = 25;
                this.columnLHCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnLHCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow NewCombinedLabourHoursInformationRow() {
                return ((CombinedLabourHoursInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedLabourHoursInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedLabourHoursInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedLabourHoursInformationRowChanged != null)) {
                    this.CombinedLabourHoursInformationRowChanged(this, new CombinedLabourHoursInformationRowChangeEvent(((CombinedLabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedLabourHoursInformationRowChanging != null)) {
                    this.CombinedLabourHoursInformationRowChanging(this, new CombinedLabourHoursInformationRowChangeEvent(((CombinedLabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedLabourHoursInformationRowDeleted != null)) {
                    this.CombinedLabourHoursInformationRowDeleted(this, new CombinedLabourHoursInformationRowChangeEvent(((CombinedLabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedLabourHoursInformationRowDeleting != null)) {
                    this.CombinedLabourHoursInformationRowDeleting(this, new CombinedLabourHoursInformationRowChangeEvent(((CombinedLabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedLabourHoursInformationRow(CombinedLabourHoursInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedLabourHoursInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedUnitsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnUnitDescription;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationDataTable() {
                this.TableName = "CombinedUnitsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedUnitsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedUnitsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDescriptionColumn {
                get {
                    return this.columnUnitDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow this[int index] {
                get {
                    return ((CombinedUnitsInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedUnitsInformationRowChangeEventHandler CombinedUnitsInformationRowChanging;
            
            public event CombinedUnitsInformationRowChangeEventHandler CombinedUnitsInformationRowChanged;
            
            public event CombinedUnitsInformationRowChangeEventHandler CombinedUnitsInformationRowDeleting;
            
            public event CombinedUnitsInformationRowChangeEventHandler CombinedUnitsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedUnitsInformationRow(CombinedUnitsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow AddCombinedUnitsInformationRow(
                        int CostingSheetID, 
                        string Work_, 
                        int UnitID, 
                        int RefID, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string UnitCode, 
                        string UnitDescription, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string WorkFunction, 
                        string Function_, 
                        int ProjectID, 
                        string Project) {
                CombinedUnitsInformationRow rowCombinedUnitsInformationRow = ((CombinedUnitsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        UnitID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UnitCode,
                        UnitDescription,
                        StartDate,
                        EndDate,
                        WorkFunction,
                        Function_,
                        ProjectID,
                        Project};
                rowCombinedUnitsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedUnitsInformationRow);
                return rowCombinedUnitsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow FindByRefIDUnitIDWork_CostingSheetID(int RefID, int UnitID, string Work_, int CostingSheetID) {
                return ((CombinedUnitsInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            UnitID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedUnitsInformationDataTable cln = ((CombinedUnitsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedUnitsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnUnitDescription = base.Columns["UnitDescription"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnUnitDescription = new global::System.Data.DataColumn("UnitDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitDescription);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnUnitID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnUnitID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow NewCombinedUnitsInformationRow() {
                return ((CombinedUnitsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedUnitsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedUnitsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedUnitsInformationRowChanged != null)) {
                    this.CombinedUnitsInformationRowChanged(this, new CombinedUnitsInformationRowChangeEvent(((CombinedUnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedUnitsInformationRowChanging != null)) {
                    this.CombinedUnitsInformationRowChanging(this, new CombinedUnitsInformationRowChangeEvent(((CombinedUnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedUnitsInformationRowDeleted != null)) {
                    this.CombinedUnitsInformationRowDeleted(this, new CombinedUnitsInformationRowChangeEvent(((CombinedUnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedUnitsInformationRowDeleting != null)) {
                    this.CombinedUnitsInformationRowDeleting(this, new CombinedUnitsInformationRowChangeEvent(((CombinedUnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedUnitsInformationRow(CombinedUnitsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedUnitsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedMaterialsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnProcess;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationDataTable() {
                this.TableName = "CombinedMaterialsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedMaterialsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedMaterialsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessColumn {
                get {
                    return this.columnProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow this[int index] {
                get {
                    return ((CombinedMaterialsInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedMaterialsInformationRowChangeEventHandler CombinedMaterialsInformationRowChanging;
            
            public event CombinedMaterialsInformationRowChangeEventHandler CombinedMaterialsInformationRowChanged;
            
            public event CombinedMaterialsInformationRowChangeEventHandler CombinedMaterialsInformationRowDeleting;
            
            public event CombinedMaterialsInformationRowChangeEventHandler CombinedMaterialsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedMaterialsInformationRow(CombinedMaterialsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow AddCombinedMaterialsInformationRow(
                        int CostingSheetID, 
                        int MaterialID, 
                        int RefID, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Process, 
                        string Description, 
                        string UnitOfMeasurement, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string Function_, 
                        string WorkFunction, 
                        int ProjectID, 
                        string Project) {
                CombinedMaterialsInformationRow rowCombinedMaterialsInformationRow = ((CombinedMaterialsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        MaterialID,
                        RefID,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Process,
                        Description,
                        UnitOfMeasurement,
                        StartDate,
                        EndDate,
                        Function_,
                        WorkFunction,
                        ProjectID,
                        Project};
                rowCombinedMaterialsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedMaterialsInformationRow);
                return rowCombinedMaterialsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow FindByCostingSheetIDMaterialIDRefID(int CostingSheetID, int MaterialID, int RefID) {
                return ((CombinedMaterialsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            MaterialID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedMaterialsInformationDataTable cln = ((CombinedMaterialsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedMaterialsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnProcess = base.Columns["Process"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnProcess = new global::System.Data.DataColumn("Process", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnMaterialID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnMaterialID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow NewCombinedMaterialsInformationRow() {
                return ((CombinedMaterialsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedMaterialsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedMaterialsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedMaterialsInformationRowChanged != null)) {
                    this.CombinedMaterialsInformationRowChanged(this, new CombinedMaterialsInformationRowChangeEvent(((CombinedMaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedMaterialsInformationRowChanging != null)) {
                    this.CombinedMaterialsInformationRowChanging(this, new CombinedMaterialsInformationRowChangeEvent(((CombinedMaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedMaterialsInformationRowDeleted != null)) {
                    this.CombinedMaterialsInformationRowDeleted(this, new CombinedMaterialsInformationRowChangeEvent(((CombinedMaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedMaterialsInformationRowDeleting != null)) {
                    this.CombinedMaterialsInformationRowDeleting(this, new CombinedMaterialsInformationRowChangeEvent(((CombinedMaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedMaterialsInformationRow(CombinedMaterialsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedMaterialsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedSubcontractorsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnSubcontractorID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnSubcontractor;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationDataTable() {
                this.TableName = "CombinedSubcontractorsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedSubcontractorsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedSubcontractorsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorColumn {
                get {
                    return this.columnSubcontractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow this[int index] {
                get {
                    return ((CombinedSubcontractorsInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedSubcontractorsInformationRowChangeEventHandler CombinedSubcontractorsInformationRowChanging;
            
            public event CombinedSubcontractorsInformationRowChangeEventHandler CombinedSubcontractorsInformationRowChanged;
            
            public event CombinedSubcontractorsInformationRowChangeEventHandler CombinedSubcontractorsInformationRowDeleting;
            
            public event CombinedSubcontractorsInformationRowChangeEventHandler CombinedSubcontractorsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedSubcontractorsInformationRow(CombinedSubcontractorsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow AddCombinedSubcontractorsInformationRow(
                        int CostingSheetID, 
                        int SubcontractorID, 
                        int RefID, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Subcontractor, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string Comment, 
                        int ProjectID, 
                        string Project) {
                CombinedSubcontractorsInformationRow rowCombinedSubcontractorsInformationRow = ((CombinedSubcontractorsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        SubcontractorID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Subcontractor,
                        StartDate,
                        EndDate,
                        Comment,
                        ProjectID,
                        Project};
                rowCombinedSubcontractorsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedSubcontractorsInformationRow);
                return rowCombinedSubcontractorsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow FindByRefIDSubcontractorIDCostingSheetID(int RefID, int SubcontractorID, int CostingSheetID) {
                return ((CombinedSubcontractorsInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            SubcontractorID,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedSubcontractorsInformationDataTable cln = ((CombinedSubcontractorsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedSubcontractorsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnSubcontractorID = base.Columns["SubcontractorID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnSubcontractor = base.Columns["Subcontractor"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnComment = base.Columns["Comment"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnSubcontractorID = new global::System.Data.DataColumn("SubcontractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnSubcontractor = new global::System.Data.DataColumn("Subcontractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractor);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnSubcontractorID,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnSubcontractorID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow NewCombinedSubcontractorsInformationRow() {
                return ((CombinedSubcontractorsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedSubcontractorsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedSubcontractorsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedSubcontractorsInformationRowChanged != null)) {
                    this.CombinedSubcontractorsInformationRowChanged(this, new CombinedSubcontractorsInformationRowChangeEvent(((CombinedSubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedSubcontractorsInformationRowChanging != null)) {
                    this.CombinedSubcontractorsInformationRowChanging(this, new CombinedSubcontractorsInformationRowChangeEvent(((CombinedSubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedSubcontractorsInformationRowDeleted != null)) {
                    this.CombinedSubcontractorsInformationRowDeleted(this, new CombinedSubcontractorsInformationRowChangeEvent(((CombinedSubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedSubcontractorsInformationRowDeleting != null)) {
                    this.CombinedSubcontractorsInformationRowDeleting(this, new CombinedSubcontractorsInformationRowChangeEvent(((CombinedSubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedSubcontractorsInformationRow(CombinedSubcontractorsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedSubcontractorsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedRevenueInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefIDRevenue;
            
            private global::System.Data.DataColumn columnRevenue;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationDataTable() {
                this.TableName = "CombinedRevenueInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedRevenueInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedRevenueInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDRevenueColumn {
                get {
                    return this.columnRefIDRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueColumn {
                get {
                    return this.columnRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow this[int index] {
                get {
                    return ((CombinedRevenueInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedRevenueInformationRowChangeEventHandler CombinedRevenueInformationRowChanging;
            
            public event CombinedRevenueInformationRowChangeEventHandler CombinedRevenueInformationRowChanged;
            
            public event CombinedRevenueInformationRowChangeEventHandler CombinedRevenueInformationRowDeleting;
            
            public event CombinedRevenueInformationRowChangeEventHandler CombinedRevenueInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedRevenueInformationRow(CombinedRevenueInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow AddCombinedRevenueInformationRow(int CostingSheetID, int RefIDRevenue, decimal Revenue, string Comment, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, bool Deleted, bool InDatabase, int ProjectID, string Project) {
                CombinedRevenueInformationRow rowCombinedRevenueInformationRow = ((CombinedRevenueInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefIDRevenue,
                        Revenue,
                        Comment,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Deleted,
                        InDatabase,
                        ProjectID,
                        Project};
                rowCombinedRevenueInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedRevenueInformationRow);
                return rowCombinedRevenueInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow FindByCostingSheetIDRefIDRevenue(int CostingSheetID, int RefIDRevenue) {
                return ((CombinedRevenueInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefIDRevenue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedRevenueInformationDataTable cln = ((CombinedRevenueInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedRevenueInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefIDRevenue = base.Columns["RefIDRevenue"];
                this.columnRevenue = base.Columns["Revenue"];
                this.columnComment = base.Columns["Comment"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefIDRevenue = new global::System.Data.DataColumn("RefIDRevenue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefIDRevenue);
                this.columnRevenue = new global::System.Data.DataColumn("Revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenue);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefIDRevenue}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefIDRevenue.AllowDBNull = false;
                this.columnRevenue.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow NewCombinedRevenueInformationRow() {
                return ((CombinedRevenueInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedRevenueInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedRevenueInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedRevenueInformationRowChanged != null)) {
                    this.CombinedRevenueInformationRowChanged(this, new CombinedRevenueInformationRowChangeEvent(((CombinedRevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedRevenueInformationRowChanging != null)) {
                    this.CombinedRevenueInformationRowChanging(this, new CombinedRevenueInformationRowChangeEvent(((CombinedRevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedRevenueInformationRowDeleted != null)) {
                    this.CombinedRevenueInformationRowDeleted(this, new CombinedRevenueInformationRowChangeEvent(((CombinedRevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedRevenueInformationRowDeleting != null)) {
                    this.CombinedRevenueInformationRowDeleting(this, new CombinedRevenueInformationRowChangeEvent(((CombinedRevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedRevenueInformationRow(CombinedRevenueInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedRevenueInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedOtherCostsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationDataTable() {
                this.TableName = "CombinedOtherCostsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedOtherCostsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedOtherCostsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow this[int index] {
                get {
                    return ((CombinedOtherCostsInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedOtherCostsInformationRowChangeEventHandler CombinedOtherCostsInformationRowChanging;
            
            public event CombinedOtherCostsInformationRowChangeEventHandler CombinedOtherCostsInformationRowChanged;
            
            public event CombinedOtherCostsInformationRowChangeEventHandler CombinedOtherCostsInformationRowDeleting;
            
            public event CombinedOtherCostsInformationRowChangeEventHandler CombinedOtherCostsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedOtherCostsInformationRow(CombinedOtherCostsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow AddCombinedOtherCostsInformationRow(
                        int CostingSheetID, 
                        int RefID, 
                        string Work_, 
                        string Function_, 
                        string Description, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string WorkFunction, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        int ProjectID, 
                        string Project) {
                CombinedOtherCostsInformationRow rowCombinedOtherCostsInformationRow = ((CombinedOtherCostsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefID,
                        Work_,
                        Function_,
                        Description,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        WorkFunction,
                        StartDate,
                        EndDate,
                        ProjectID,
                        Project};
                rowCombinedOtherCostsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedOtherCostsInformationRow);
                return rowCombinedOtherCostsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow FindByCostingSheetIDRefID(int CostingSheetID, int RefID) {
                return ((CombinedOtherCostsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedOtherCostsInformationDataTable cln = ((CombinedOtherCostsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedOtherCostsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 150;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow NewCombinedOtherCostsInformationRow() {
                return ((CombinedOtherCostsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedOtherCostsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedOtherCostsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedOtherCostsInformationRowChanged != null)) {
                    this.CombinedOtherCostsInformationRowChanged(this, new CombinedOtherCostsInformationRowChangeEvent(((CombinedOtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedOtherCostsInformationRowChanging != null)) {
                    this.CombinedOtherCostsInformationRowChanging(this, new CombinedOtherCostsInformationRowChangeEvent(((CombinedOtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedOtherCostsInformationRowDeleted != null)) {
                    this.CombinedOtherCostsInformationRowDeleted(this, new CombinedOtherCostsInformationRowChangeEvent(((CombinedOtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedOtherCostsInformationRowDeleting != null)) {
                    this.CombinedOtherCostsInformationRowDeleting(this, new CombinedOtherCostsInformationRowChangeEvent(((CombinedOtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedOtherCostsInformationRow(CombinedOtherCostsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedOtherCostsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HotelsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnHotelID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnHotel;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationDataTable() {
                this.TableName = "HotelsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HotelsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HotelsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotelIDColumn {
                get {
                    return this.columnHotelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotelColumn {
                get {
                    return this.columnHotel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow this[int index] {
                get {
                    return ((HotelsInformationRow)(this.Rows[index]));
                }
            }
            
            public event HotelsInformationRowChangeEventHandler HotelsInformationRowChanging;
            
            public event HotelsInformationRowChangeEventHandler HotelsInformationRowChanged;
            
            public event HotelsInformationRowChangeEventHandler HotelsInformationRowDeleting;
            
            public event HotelsInformationRowChangeEventHandler HotelsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHotelsInformationRow(HotelsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow AddHotelsInformationRow(int CostingSheetID, int HotelID, int RefID, decimal Rate, bool Deleted, int COMPANY_ID, bool InDatabase, string Hotel, System.DateTime StartDate, System.DateTime EndDate, decimal Budget, string Comment) {
                HotelsInformationRow rowHotelsInformationRow = ((HotelsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        HotelID,
                        RefID,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Hotel,
                        StartDate,
                        EndDate,
                        Budget,
                        Comment};
                rowHotelsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHotelsInformationRow);
                return rowHotelsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow FindByRefIDHotelIDCostingSheetID(int RefID, int HotelID, int CostingSheetID) {
                return ((HotelsInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            HotelID,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HotelsInformationDataTable cln = ((HotelsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HotelsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnHotelID = base.Columns["HotelID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnHotel = base.Columns["Hotel"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnBudget = base.Columns["Budget"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnHotelID = new global::System.Data.DataColumn("HotelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotelID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnHotel = new global::System.Data.DataColumn("Hotel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotel);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnHotelID,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnHotelID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow NewHotelsInformationRow() {
                return ((HotelsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HotelsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HotelsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HotelsInformationRowChanged != null)) {
                    this.HotelsInformationRowChanged(this, new HotelsInformationRowChangeEvent(((HotelsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HotelsInformationRowChanging != null)) {
                    this.HotelsInformationRowChanging(this, new HotelsInformationRowChangeEvent(((HotelsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HotelsInformationRowDeleted != null)) {
                    this.HotelsInformationRowDeleted(this, new HotelsInformationRowChangeEvent(((HotelsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HotelsInformationRowDeleting != null)) {
                    this.HotelsInformationRowDeleting(this, new HotelsInformationRowChangeEvent(((HotelsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHotelsInformationRow(HotelsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HotelsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BondingsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnBondingCompanyID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnBonding;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationDataTable() {
                this.TableName = "BondingsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BondingsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BondingsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingCompanyIDColumn {
                get {
                    return this.columnBondingCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingColumn {
                get {
                    return this.columnBonding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow this[int index] {
                get {
                    return ((BondingsInformationRow)(this.Rows[index]));
                }
            }
            
            public event BondingsInformationRowChangeEventHandler BondingsInformationRowChanging;
            
            public event BondingsInformationRowChangeEventHandler BondingsInformationRowChanged;
            
            public event BondingsInformationRowChangeEventHandler BondingsInformationRowDeleting;
            
            public event BondingsInformationRowChangeEventHandler BondingsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBondingsInformationRow(BondingsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow AddBondingsInformationRow(int CostingSheetID, int BondingCompanyID, int RefID, decimal Rate, bool Deleted, int COMPANY_ID, bool InDatabase, string Bonding, System.DateTime StartDate, System.DateTime EndDate, decimal Budget, string Comment) {
                BondingsInformationRow rowBondingsInformationRow = ((BondingsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        BondingCompanyID,
                        RefID,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Bonding,
                        StartDate,
                        EndDate,
                        Budget,
                        Comment};
                rowBondingsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBondingsInformationRow);
                return rowBondingsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow FindByRefIDBondingCompanyIDCostingSheetID(int RefID, int BondingCompanyID, int CostingSheetID) {
                return ((BondingsInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            BondingCompanyID,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BondingsInformationDataTable cln = ((BondingsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BondingsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnBondingCompanyID = base.Columns["BondingCompanyID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnBonding = base.Columns["Bonding"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnBudget = base.Columns["Budget"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnBondingCompanyID = new global::System.Data.DataColumn("BondingCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBondingCompanyID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnBonding = new global::System.Data.DataColumn("Bonding", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonding);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnBondingCompanyID,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnBondingCompanyID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow NewBondingsInformationRow() {
                return ((BondingsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BondingsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BondingsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BondingsInformationRowChanged != null)) {
                    this.BondingsInformationRowChanged(this, new BondingsInformationRowChangeEvent(((BondingsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BondingsInformationRowChanging != null)) {
                    this.BondingsInformationRowChanging(this, new BondingsInformationRowChangeEvent(((BondingsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BondingsInformationRowDeleted != null)) {
                    this.BondingsInformationRowDeleted(this, new BondingsInformationRowChangeEvent(((BondingsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BondingsInformationRowDeleting != null)) {
                    this.BondingsInformationRowDeleting(this, new BondingsInformationRowChangeEvent(((BondingsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBondingsInformationRow(BondingsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BondingsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InsurancesInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnInsuranceCompanyID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnInsurance;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationDataTable() {
                this.TableName = "InsurancesInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InsurancesInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InsurancesInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceCompanyIDColumn {
                get {
                    return this.columnInsuranceCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceColumn {
                get {
                    return this.columnInsurance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow this[int index] {
                get {
                    return ((InsurancesInformationRow)(this.Rows[index]));
                }
            }
            
            public event InsurancesInformationRowChangeEventHandler InsurancesInformationRowChanging;
            
            public event InsurancesInformationRowChangeEventHandler InsurancesInformationRowChanged;
            
            public event InsurancesInformationRowChangeEventHandler InsurancesInformationRowDeleting;
            
            public event InsurancesInformationRowChangeEventHandler InsurancesInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInsurancesInformationRow(InsurancesInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow AddInsurancesInformationRow(int CostingSheetID, int InsuranceCompanyID, int RefID, decimal Rate, bool Deleted, int COMPANY_ID, bool InDatabase, string Insurance, System.DateTime StartDate, System.DateTime EndDate, decimal Budget, string Comment) {
                InsurancesInformationRow rowInsurancesInformationRow = ((InsurancesInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        InsuranceCompanyID,
                        RefID,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Insurance,
                        StartDate,
                        EndDate,
                        Budget,
                        Comment};
                rowInsurancesInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInsurancesInformationRow);
                return rowInsurancesInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow FindByRefIDInsuranceCompanyIDCostingSheetID(int RefID, int InsuranceCompanyID, int CostingSheetID) {
                return ((InsurancesInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            InsuranceCompanyID,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InsurancesInformationDataTable cln = ((InsurancesInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InsurancesInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnInsuranceCompanyID = base.Columns["InsuranceCompanyID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnInsurance = base.Columns["Insurance"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnBudget = base.Columns["Budget"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnInsuranceCompanyID = new global::System.Data.DataColumn("InsuranceCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCompanyID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnInsurance = new global::System.Data.DataColumn("Insurance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsurance);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnInsuranceCompanyID,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnInsuranceCompanyID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow NewInsurancesInformationRow() {
                return ((InsurancesInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InsurancesInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InsurancesInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InsurancesInformationRowChanged != null)) {
                    this.InsurancesInformationRowChanged(this, new InsurancesInformationRowChangeEvent(((InsurancesInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InsurancesInformationRowChanging != null)) {
                    this.InsurancesInformationRowChanging(this, new InsurancesInformationRowChangeEvent(((InsurancesInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InsurancesInformationRowDeleted != null)) {
                    this.InsurancesInformationRowDeleted(this, new InsurancesInformationRowChangeEvent(((InsurancesInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InsurancesInformationRowDeleting != null)) {
                    this.InsurancesInformationRowDeleting(this, new InsurancesInformationRowChangeEvent(((InsurancesInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInsurancesInformationRow(InsurancesInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InsurancesInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OtherCategoryInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnBudget;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationDataTable() {
                this.TableName = "OtherCategoryInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCategoryInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OtherCategoryInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow this[int index] {
                get {
                    return ((OtherCategoryInformationRow)(this.Rows[index]));
                }
            }
            
            public event OtherCategoryInformationRowChangeEventHandler OtherCategoryInformationRowChanging;
            
            public event OtherCategoryInformationRowChangeEventHandler OtherCategoryInformationRowChanged;
            
            public event OtherCategoryInformationRowChangeEventHandler OtherCategoryInformationRowDeleting;
            
            public event OtherCategoryInformationRowChangeEventHandler OtherCategoryInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOtherCategoryInformationRow(OtherCategoryInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow AddOtherCategoryInformationRow(int CostingSheetID, string Category, int RefID, decimal Rate, bool Deleted, int COMPANY_ID, bool InDatabase, System.DateTime StartDate, System.DateTime EndDate, decimal Budget, string Comment) {
                OtherCategoryInformationRow rowOtherCategoryInformationRow = ((OtherCategoryInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Category,
                        RefID,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        StartDate,
                        EndDate,
                        Budget,
                        Comment};
                rowOtherCategoryInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOtherCategoryInformationRow);
                return rowOtherCategoryInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow FindByRefIDCategoryCostingSheetID(int RefID, string Category, int CostingSheetID) {
                return ((OtherCategoryInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            Category,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OtherCategoryInformationDataTable cln = ((OtherCategoryInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OtherCategoryInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnCategory = base.Columns["Category"];
                this.columnRefID = base.Columns["RefID"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnBudget = base.Columns["Budget"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnCategory,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCategory.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow NewOtherCategoryInformationRow() {
                return ((OtherCategoryInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OtherCategoryInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OtherCategoryInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OtherCategoryInformationRowChanged != null)) {
                    this.OtherCategoryInformationRowChanged(this, new OtherCategoryInformationRowChangeEvent(((OtherCategoryInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OtherCategoryInformationRowChanging != null)) {
                    this.OtherCategoryInformationRowChanging(this, new OtherCategoryInformationRowChangeEvent(((OtherCategoryInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OtherCategoryInformationRowDeleted != null)) {
                    this.OtherCategoryInformationRowDeleted(this, new OtherCategoryInformationRowChangeEvent(((OtherCategoryInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OtherCategoryInformationRowDeleting != null)) {
                    this.OtherCategoryInformationRowDeleting(this, new OtherCategoryInformationRowChangeEvent(((OtherCategoryInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOtherCategoryInformationRow(OtherCategoryInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetInformationTDS ds = new ProjectCostingSheetInformationTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OtherCategoryInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BasicInformationRow : global::System.Data.DataRow {
            
            private BasicInformationDataTable tableBasicInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBasicInformation = ((BasicInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableBasicInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableBasicInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableBasicInformation.ProjectIDColumn]));
                }
                set {
                    this[this.tableBasicInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableBasicInformation.NameColumn]));
                }
                set {
                    this[this.tableBasicInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableBasicInformation.StartDateColumn]));
                }
                set {
                    this[this.tableBasicInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableBasicInformation.EndDateColumn]));
                }
                set {
                    this[this.tableBasicInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursCad {
                get {
                    return ((decimal)(this[this.tableBasicInformation.TotalLabourHoursCadColumn]));
                }
                set {
                    this[this.tableBasicInformation.TotalLabourHoursCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursUsd {
                get {
                    return ((decimal)(this[this.tableBasicInformation.TotalLabourHoursUsdColumn]));
                }
                set {
                    this[this.tableBasicInformation.TotalLabourHoursUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsCad {
                get {
                    return ((decimal)(this[this.tableBasicInformation.TotalMaterialsCadColumn]));
                }
                set {
                    this[this.tableBasicInformation.TotalMaterialsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsUsd {
                get {
                    return ((decimal)(this[this.tableBasicInformation.TotalMaterialsUsdColumn]));
                }
                set {
                    this[this.tableBasicInformation.TotalMaterialsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsCad {
                get {
                    return ((decimal)(this[this.tableBasicInformation.TotalUnitsCadColumn]));
                }
                set {
                    this[this.tableBasicInformation.TotalUnitsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsUsd {
                get {
                    return ((decimal)(this[this.tableBasicInformation.TotalUnitsUsdColumn]));
                }
                set {
                    this[this.tableBasicInformation.TotalUnitsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsCad {
                get {
                    return ((decimal)(this[this.tableBasicInformation.TotalOtherCostsCadColumn]));
                }
                set {
                    this[this.tableBasicInformation.TotalOtherCostsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsUsd {
                get {
                    return ((decimal)(this[this.tableBasicInformation.TotalOtherCostsUsdColumn]));
                }
                set {
                    this[this.tableBasicInformation.TotalOtherCostsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalCad {
                get {
                    return ((decimal)(this[this.tableBasicInformation.GrandTotalCadColumn]));
                }
                set {
                    this[this.tableBasicInformation.GrandTotalCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalUsd {
                get {
                    return ((decimal)(this[this.tableBasicInformation.GrandTotalUsdColumn]));
                }
                set {
                    this[this.tableBasicInformation.GrandTotalUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableBasicInformation.StateColumn]));
                }
                set {
                    this[this.tableBasicInformation.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableBasicInformation.DeletedColumn]));
                }
                set {
                    this[this.tableBasicInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableBasicInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableBasicInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromTo {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.FromToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromTo\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.FromToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalSubcontractorsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSubcontractorsCad\' in table \'BasicInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalSubcontractorsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalSubcontractorsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSubcontractorsUsd\' in table \'BasicInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalSubcontractorsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandRevenue {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrandRevenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandRevenue\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrandRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandProfit {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrandProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandProfit\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrandProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandGrossMargin {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrandGrossMarginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandGrossMargin\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrandGrossMarginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromToNull() {
                return this.IsNull(this.tableBasicInformation.FromToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromToNull() {
                this[this.tableBasicInformation.FromToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSubcontractorsCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalSubcontractorsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSubcontractorsCadNull() {
                this[this.tableBasicInformation.TotalSubcontractorsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSubcontractorsUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalSubcontractorsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSubcontractorsUsdNull() {
                this[this.tableBasicInformation.TotalSubcontractorsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandRevenueNull() {
                return this.IsNull(this.tableBasicInformation.GrandRevenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandRevenueNull() {
                this[this.tableBasicInformation.GrandRevenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandProfitNull() {
                return this.IsNull(this.tableBasicInformation.GrandProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandProfitNull() {
                this[this.tableBasicInformation.GrandProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandGrossMarginNull() {
                return this.IsNull(this.tableBasicInformation.GrandGrossMarginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandGrossMarginNull() {
                this[this.tableBasicInformation.GrandGrossMarginColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OtherCostsInformationRow : global::System.Data.DataRow {
            
            private OtherCostsInformationDataTable tableOtherCostsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCostsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOtherCostsInformation = ((OtherCostsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableOtherCostsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableOtherCostsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableOtherCostsInformation.DescriptionColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableOtherCostsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableOtherCostsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableOtherCostsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableOtherCostsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableOtherCostsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOtherCostsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOtherCostsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableOtherCostsInformation.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableOtherCostsInformation.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableOtherCostsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableOtherCostsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableOtherCostsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableOtherCostsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableOtherCostsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableOtherCostsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableOtherCostsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableOtherCostsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableOtherCostsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableOtherCostsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitsInformationRow : global::System.Data.DataRow {
            
            private UnitsInformationDataTable tableUnitsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitsInformation = ((UnitsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableUnitsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableUnitsInformation.Work_Column]));
                }
                set {
                    this[this.tableUnitsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableUnitsInformation.UnitIDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableUnitsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableUnitsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableUnitsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableUnitsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableUnitsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableUnitsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableUnitsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableUnitsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableUnitsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableUnitsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableUnitsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableUnitsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitDescription {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.UnitDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitDescription\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.UnitDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitsInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableUnitsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableUnitsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableUnitsInformation.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableUnitsInformation.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitDescriptionNull() {
                return this.IsNull(this.tableUnitsInformation.UnitDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitDescriptionNull() {
                this[this.tableUnitsInformation.UnitDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableUnitsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableUnitsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableUnitsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableUnitsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableUnitsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableUnitsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableUnitsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableUnitsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableUnitsInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableUnitsInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LabourHoursInformationRow : global::System.Data.DataRow {
            
            private LabourHoursInformationDataTable tableLabourHoursInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabourHoursInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabourHoursInformation = ((LabourHoursInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLabourHoursInformation.Work_Column]));
                }
                set {
                    this[this.tableLabourHoursInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.EmployeeIDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.RefIDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LHQuantity {
                get {
                    return ((double)(this[this.tableLabourHoursInformation.LHQuantityColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LHUnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLabourHoursInformation.LHUnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MealsUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsUnitOfMeasurement\' in table \'LabourHoursInformation\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MealsQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLabourHoursInformation.MealsQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsQuantity\' in table \'LabourHoursInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MotelUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelUnitOfMeasurement\' in table \'LabourHoursInformation\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MotelQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLabourHoursInformation.MotelQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelQuantity\' in table \'LabourHoursInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostCad {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.LHCostCadColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MealsCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostCad\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MotelCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostCad\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostUsd {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.LHCostUsdColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MealsCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostUsd\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MotelCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostUsd\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLabourHoursInformation.DeletedColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableLabourHoursInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLabourHoursInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLabourHoursInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsUnitOfMeasurementNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsUnitOfMeasurementNull() {
                this[this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsQuantityNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsQuantityNull() {
                this[this.tableLabourHoursInformation.MealsQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelUnitOfMeasurementNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelUnitOfMeasurementNull() {
                this[this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelQuantityNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelQuantityNull() {
                this[this.tableLabourHoursInformation.MotelQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostCadNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostCadNull() {
                this[this.tableLabourHoursInformation.MealsCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostCadNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostCadNull() {
                this[this.tableLabourHoursInformation.MotelCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostUsdNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostUsdNull() {
                this[this.tableLabourHoursInformation.MealsCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostUsdNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostUsdNull() {
                this[this.tableLabourHoursInformation.MotelCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableLabourHoursInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableLabourHoursInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLabourHoursInformation.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLabourHoursInformation.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLabourHoursInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLabourHoursInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLabourHoursInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLabourHoursInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableLabourHoursInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableLabourHoursInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLabourHoursInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLabourHoursInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableLabourHoursInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableLabourHoursInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MaterialsInformationRow : global::System.Data.DataRow {
            
            private MaterialsInformationDataTable tableMaterialsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaterialsInformation = ((MaterialsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.MaterialIDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableMaterialsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableMaterialsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableMaterialsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Process {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.ProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.ProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'MaterialsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMaterialsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMaterialsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableMaterialsInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableMaterialsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableMaterialsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessNull() {
                return this.IsNull(this.tableMaterialsInformation.ProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessNull() {
                this[this.tableMaterialsInformation.ProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableMaterialsInformation.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableMaterialsInformation.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableMaterialsInformation.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableMaterialsInformation.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableMaterialsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableMaterialsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableMaterialsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableMaterialsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableMaterialsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableMaterialsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableMaterialsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableMaterialsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableMaterialsInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableMaterialsInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReportInformationRow : global::System.Data.DataRow {
            
            private ReportInformationDataTable tableReportInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReportInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReportInformation = ((ReportInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableReportInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableReportInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableReportInformation.ProjectIDColumn]));
                }
                set {
                    this[this.tableReportInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompaniesID {
                get {
                    return ((string)(this[this.tableReportInformation.CompaniesIDColumn]));
                }
                set {
                    this[this.tableReportInformation.CompaniesIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableReportInformation.NameColumn]));
                }
                set {
                    this[this.tableReportInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableReportInformation.StartDateColumn]));
                }
                set {
                    this[this.tableReportInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableReportInformation.EndDateColumn]));
                }
                set {
                    this[this.tableReportInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursCad {
                get {
                    return ((decimal)(this[this.tableReportInformation.TotalLabourHoursCadColumn]));
                }
                set {
                    this[this.tableReportInformation.TotalLabourHoursCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursUsd {
                get {
                    return ((decimal)(this[this.tableReportInformation.TotalLabourHoursUsdColumn]));
                }
                set {
                    this[this.tableReportInformation.TotalLabourHoursUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsCad {
                get {
                    return ((decimal)(this[this.tableReportInformation.TotalMaterialsCadColumn]));
                }
                set {
                    this[this.tableReportInformation.TotalMaterialsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsUsd {
                get {
                    return ((decimal)(this[this.tableReportInformation.TotalMaterialsUsdColumn]));
                }
                set {
                    this[this.tableReportInformation.TotalMaterialsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsCad {
                get {
                    return ((decimal)(this[this.tableReportInformation.TotalUnitsCadColumn]));
                }
                set {
                    this[this.tableReportInformation.TotalUnitsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsUsd {
                get {
                    return ((decimal)(this[this.tableReportInformation.TotalUnitsUsdColumn]));
                }
                set {
                    this[this.tableReportInformation.TotalUnitsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsCad {
                get {
                    return ((decimal)(this[this.tableReportInformation.TotalOtherCostsCadColumn]));
                }
                set {
                    this[this.tableReportInformation.TotalOtherCostsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsUsd {
                get {
                    return ((decimal)(this[this.tableReportInformation.TotalOtherCostsUsdColumn]));
                }
                set {
                    this[this.tableReportInformation.TotalOtherCostsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalCad {
                get {
                    return ((decimal)(this[this.tableReportInformation.GrandTotalCadColumn]));
                }
                set {
                    this[this.tableReportInformation.GrandTotalCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalUsd {
                get {
                    return ((decimal)(this[this.tableReportInformation.GrandTotalUsdColumn]));
                }
                set {
                    this[this.tableReportInformation.GrandTotalUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableReportInformation.StateColumn]));
                }
                set {
                    this[this.tableReportInformation.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableReportInformation.DeletedColumn]));
                }
                set {
                    this[this.tableReportInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableReportInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableReportInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromTo {
                get {
                    try {
                        return ((string)(this[this.tableReportInformation.FromToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromTo\' in table \'ReportInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportInformation.FromToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProjectStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableReportInformation.ProjectStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectStartDate\' in table \'ReportInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportInformation.ProjectStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ProjectEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableReportInformation.ProjectEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectEndDate\' in table \'ReportInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportInformation.ProjectEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableReportInformation.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'ReportInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportInformation.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableReportInformation.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'ReportInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportInformation.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandRevenue {
                get {
                    try {
                        return ((decimal)(this[this.tableReportInformation.GrandRevenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandRevenue\' in table \'ReportInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportInformation.GrandRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandProfit {
                get {
                    try {
                        return ((decimal)(this[this.tableReportInformation.GrandProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandProfit\' in table \'ReportInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportInformation.GrandProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandGrossMargin {
                get {
                    try {
                        return ((decimal)(this[this.tableReportInformation.GrandGrossMarginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandGrossMargin\' in table \'ReportInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReportInformation.GrandGrossMarginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromToNull() {
                return this.IsNull(this.tableReportInformation.FromToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromToNull() {
                this[this.tableReportInformation.FromToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectStartDateNull() {
                return this.IsNull(this.tableReportInformation.ProjectStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectStartDateNull() {
                this[this.tableReportInformation.ProjectStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectEndDateNull() {
                return this.IsNull(this.tableReportInformation.ProjectEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectEndDateNull() {
                this[this.tableReportInformation.ProjectEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableReportInformation.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableReportInformation.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableReportInformation.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableReportInformation.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandRevenueNull() {
                return this.IsNull(this.tableReportInformation.GrandRevenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandRevenueNull() {
                this[this.tableReportInformation.GrandRevenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandProfitNull() {
                return this.IsNull(this.tableReportInformation.GrandProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandProfitNull() {
                this[this.tableReportInformation.GrandProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandGrossMarginNull() {
                return this.IsNull(this.tableReportInformation.GrandGrossMarginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandGrossMarginNull() {
                this[this.tableReportInformation.GrandGrossMarginColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubcontractorsInformationRow : global::System.Data.DataRow {
            
            private SubcontractorsInformationDataTable tableSubcontractorsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubcontractorsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubcontractorsInformation = ((SubcontractorsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableSubcontractorsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubcontractorID {
                get {
                    return ((int)(this[this.tableSubcontractorsInformation.SubcontractorIDColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.SubcontractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableSubcontractorsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableSubcontractorsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableSubcontractorsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableSubcontractorsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableSubcontractorsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableSubcontractorsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableSubcontractorsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableSubcontractorsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableSubcontractorsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableSubcontractorsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'SubcontractorsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subcontractor {
                get {
                    try {
                        return ((string)(this[this.tableSubcontractorsInformation.SubcontractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subcontractor\' in table \'SubcontractorsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.SubcontractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSubcontractorsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSubcontractorsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableSubcontractorsInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Budget {
                get {
                    try {
                        return ((int)(this[this.tableSubcontractorsInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableSubcontractorsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableSubcontractorsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubcontractorNull() {
                return this.IsNull(this.tableSubcontractorsInformation.SubcontractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubcontractorNull() {
                this[this.tableSubcontractorsInformation.SubcontractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableSubcontractorsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableSubcontractorsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableSubcontractorsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableSubcontractorsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableSubcontractorsInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableSubcontractorsInformation.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableSubcontractorsInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableSubcontractorsInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RevenueInformationRow : global::System.Data.DataRow {
            
            private RevenueInformationDataTable tableRevenueInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RevenueInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRevenueInformation = ((RevenueInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableRevenueInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableRevenueInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefIDRevenue {
                get {
                    return ((int)(this[this.tableRevenueInformation.RefIDRevenueColumn]));
                }
                set {
                    this[this.tableRevenueInformation.RefIDRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Revenue {
                get {
                    return ((decimal)(this[this.tableRevenueInformation.RevenueColumn]));
                }
                set {
                    this[this.tableRevenueInformation.RevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableRevenueInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'RevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRevenueInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableRevenueInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableRevenueInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRevenueInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'RevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRevenueInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRevenueInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'RevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRevenueInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableRevenueInformation.DeletedColumn]));
                }
                set {
                    this[this.tableRevenueInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableRevenueInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'RevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRevenueInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableRevenueInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableRevenueInformation.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableRevenueInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableRevenueInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableRevenueInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableRevenueInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableRevenueInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableRevenueInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedBasicInformationRow : global::System.Data.DataRow {
            
            private CombinedBasicInformationDataTable tableCombinedBasicInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedBasicInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedBasicInformation = ((CombinedBasicInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedBasicInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableCombinedBasicInformation.ClientIDColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCombinedBasicInformation.NameColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableCombinedBasicInformation.StartDateColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableCombinedBasicInformation.EndDateColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursCad {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.TotalLabourHoursCadColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalLabourHoursCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursUsd {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.TotalLabourHoursUsdColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalLabourHoursUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsCad {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.TotalMaterialsCadColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalMaterialsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsUsd {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.TotalMaterialsUsdColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalMaterialsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsCad {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.TotalUnitsCadColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalUnitsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsUsd {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.TotalUnitsUsdColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalUnitsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsCad {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.TotalOtherCostsCadColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalOtherCostsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsUsd {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.TotalOtherCostsUsdColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalOtherCostsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalCad {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.GrandTotalCadColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.GrandTotalCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalUsd {
                get {
                    return ((decimal)(this[this.tableCombinedBasicInformation.GrandTotalUsdColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.GrandTotalUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableCombinedBasicInformation.StateColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedBasicInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedBasicInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromTo {
                get {
                    try {
                        return ((string)(this[this.tableCombinedBasicInformation.FromToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromTo\' in table \'CombinedBasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.FromToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalSubcontractorsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSubcontractorsCad\' in table \'CombinedBasicInformation\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalSubcontractorsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalSubcontractorsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSubcontractorsUsd\' in table \'CombinedBasicInformation\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalSubcontractorsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandRevenue {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.GrandRevenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandRevenue\' in table \'CombinedBasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.GrandRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandProfit {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.GrandProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandProfit\' in table \'CombinedBasicInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.GrandProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandGrossMargin {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.GrandGrossMarginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandGrossMargin\' in table \'CombinedBasicInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.GrandGrossMarginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CombinedProjects {
                get {
                    try {
                        return ((string)(this[this.tableCombinedBasicInformation.CombinedProjectsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CombinedProjects\' in table \'CombinedBasicInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.CombinedProjectsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromToNull() {
                return this.IsNull(this.tableCombinedBasicInformation.FromToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromToNull() {
                this[this.tableCombinedBasicInformation.FromToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSubcontractorsCadNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalSubcontractorsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSubcontractorsCadNull() {
                this[this.tableCombinedBasicInformation.TotalSubcontractorsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSubcontractorsUsdNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalSubcontractorsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSubcontractorsUsdNull() {
                this[this.tableCombinedBasicInformation.TotalSubcontractorsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandRevenueNull() {
                return this.IsNull(this.tableCombinedBasicInformation.GrandRevenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandRevenueNull() {
                this[this.tableCombinedBasicInformation.GrandRevenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandProfitNull() {
                return this.IsNull(this.tableCombinedBasicInformation.GrandProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandProfitNull() {
                this[this.tableCombinedBasicInformation.GrandProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandGrossMarginNull() {
                return this.IsNull(this.tableCombinedBasicInformation.GrandGrossMarginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandGrossMarginNull() {
                this[this.tableCombinedBasicInformation.GrandGrossMarginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombinedProjectsNull() {
                return this.IsNull(this.tableCombinedBasicInformation.CombinedProjectsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCombinedProjectsNull() {
                this[this.tableCombinedBasicInformation.CombinedProjectsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedLabourHoursInformationRow : global::System.Data.DataRow {
            
            private CombinedLabourHoursInformationDataTable tableCombinedLabourHoursInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedLabourHoursInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedLabourHoursInformation = ((CombinedLabourHoursInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedLabourHoursInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableCombinedLabourHoursInformation.Work_Column]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableCombinedLabourHoursInformation.EmployeeIDColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedLabourHoursInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LHQuantity {
                get {
                    return ((double)(this[this.tableCombinedLabourHoursInformation.LHQuantityColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.LHQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LHUnitOfMeasurement {
                get {
                    return ((string)(this[this.tableCombinedLabourHoursInformation.LHUnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.LHUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MealsUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.MealsUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsUnitOfMeasurement\' in table \'CombinedLabourHoursInform" +
                                "ation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MealsUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MealsQuantity {
                get {
                    try {
                        return ((int)(this[this.tableCombinedLabourHoursInformation.MealsQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsQuantity\' in table \'CombinedLabourHoursInformation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MealsQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MotelUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.MotelUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelUnitOfMeasurement\' in table \'CombinedLabourHoursInform" +
                                "ation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MotelUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MotelQuantity {
                get {
                    try {
                        return ((int)(this[this.tableCombinedLabourHoursInformation.MotelQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelQuantity\' in table \'CombinedLabourHoursInformation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MotelQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedLabourHoursInformation.LHCostCadColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.LHCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedLabourHoursInformation.MealsCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostCad\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MealsCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedLabourHoursInformation.MotelCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostCad\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MotelCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedLabourHoursInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedLabourHoursInformation.LHCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.LHCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedLabourHoursInformation.MealsCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostUsd\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MealsCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedLabourHoursInformation.MotelCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostUsd\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MotelCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedLabourHoursInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedLabourHoursInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedLabourHoursInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedLabourHoursInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedLabourHoursInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'CombinedLabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedLabourHoursInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedLabourHoursInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedLabourHoursInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedLabourHoursInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'CombinedLabourHoursInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedLabourHoursInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedLabourHoursInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedLabourHoursInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsUnitOfMeasurementNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MealsUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsUnitOfMeasurementNull() {
                this[this.tableCombinedLabourHoursInformation.MealsUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsQuantityNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MealsQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsQuantityNull() {
                this[this.tableCombinedLabourHoursInformation.MealsQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelUnitOfMeasurementNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MotelUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelUnitOfMeasurementNull() {
                this[this.tableCombinedLabourHoursInformation.MotelUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelQuantityNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MotelQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelQuantityNull() {
                this[this.tableCombinedLabourHoursInformation.MotelQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostCadNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MealsCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostCadNull() {
                this[this.tableCombinedLabourHoursInformation.MealsCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostCadNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MotelCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostCadNull() {
                this[this.tableCombinedLabourHoursInformation.MotelCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostUsdNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MealsCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostUsdNull() {
                this[this.tableCombinedLabourHoursInformation.MealsCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostUsdNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MotelCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostUsdNull() {
                this[this.tableCombinedLabourHoursInformation.MotelCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedLabourHoursInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableCombinedLabourHoursInformation.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedLabourHoursInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedLabourHoursInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableCombinedLabourHoursInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableCombinedLabourHoursInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedLabourHoursInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedLabourHoursInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedUnitsInformationRow : global::System.Data.DataRow {
            
            private CombinedUnitsInformationDataTable tableCombinedUnitsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedUnitsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedUnitsInformation = ((CombinedUnitsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedUnitsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableCombinedUnitsInformation.Work_Column]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableCombinedUnitsInformation.UnitIDColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedUnitsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableCombinedUnitsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableCombinedUnitsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCombinedUnitsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedUnitsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedUnitsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedUnitsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedUnitsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedUnitsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedUnitsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitDescription {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.UnitDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitDescription\' in table \'CombinedUnitsInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.UnitDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedUnitsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedUnitsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'CombinedUnitsInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedUnitsInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedUnitsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableCombinedUnitsInformation.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitDescriptionNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.UnitDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitDescriptionNull() {
                this[this.tableCombinedUnitsInformation.UnitDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedUnitsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedUnitsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableCombinedUnitsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableCombinedUnitsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableCombinedUnitsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedUnitsInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedUnitsInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedMaterialsInformationRow : global::System.Data.DataRow {
            
            private CombinedMaterialsInformationDataTable tableCombinedMaterialsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedMaterialsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedMaterialsInformation = ((CombinedMaterialsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedMaterialsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableCombinedMaterialsInformation.MaterialIDColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedMaterialsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableCombinedMaterialsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCombinedMaterialsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedMaterialsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedMaterialsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedMaterialsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedMaterialsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedMaterialsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedMaterialsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedMaterialsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Process {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.ProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process\' in table \'CombinedMaterialsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.ProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'CombinedMaterialsInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'CombinedMaterialsInformation\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedMaterialsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedMaterialsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedMaterialsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedMaterialsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'CombinedMaterialsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'CombinedMaterialsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedMaterialsInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedMaterialsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedMaterialsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedMaterialsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.ProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessNull() {
                this[this.tableCombinedMaterialsInformation.ProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableCombinedMaterialsInformation.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableCombinedMaterialsInformation.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedMaterialsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedMaterialsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableCombinedMaterialsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableCombinedMaterialsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableCombinedMaterialsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedMaterialsInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedMaterialsInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedSubcontractorsInformationRow : global::System.Data.DataRow {
            
            private CombinedSubcontractorsInformationDataTable tableCombinedSubcontractorsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedSubcontractorsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedSubcontractorsInformation = ((CombinedSubcontractorsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedSubcontractorsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubcontractorID {
                get {
                    return ((int)(this[this.tableCombinedSubcontractorsInformation.SubcontractorIDColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.SubcontractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedSubcontractorsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableCombinedSubcontractorsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableCombinedSubcontractorsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCombinedSubcontractorsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedSubcontractorsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedSubcontractorsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedSubcontractorsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedSubcontractorsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedSubcontractorsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedSubcontractorsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedSubcontractorsInformation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subcontractor {
                get {
                    try {
                        return ((string)(this[this.tableCombinedSubcontractorsInformation.SubcontractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subcontractor\' in table \'CombinedSubcontractorsInformation\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.SubcontractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedSubcontractorsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedSubcontractorsInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedSubcontractorsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedSubcontractorsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableCombinedSubcontractorsInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'CombinedSubcontractorsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedSubcontractorsInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedSubcontractorsInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedSubcontractorsInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedSubcontractorsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedSubcontractorsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubcontractorNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.SubcontractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubcontractorNull() {
                this[this.tableCombinedSubcontractorsInformation.SubcontractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedSubcontractorsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedSubcontractorsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableCombinedSubcontractorsInformation.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedSubcontractorsInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedSubcontractorsInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedRevenueInformationRow : global::System.Data.DataRow {
            
            private CombinedRevenueInformationDataTable tableCombinedRevenueInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedRevenueInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedRevenueInformation = ((CombinedRevenueInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedRevenueInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefIDRevenue {
                get {
                    return ((int)(this[this.tableCombinedRevenueInformation.RefIDRevenueColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.RefIDRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Revenue {
                get {
                    return ((decimal)(this[this.tableCombinedRevenueInformation.RevenueColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.RevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableCombinedRevenueInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'CombinedRevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedRevenueInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedRevenueInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedRevenueInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedRevenueInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedRevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedRevenueInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedRevenueInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedRevenueInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedRevenueInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedRevenueInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedRevenueInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedRevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableCombinedRevenueInformation.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedRevenueInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedRevenueInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedRevenueInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedRevenueInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedRevenueInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedOtherCostsInformationRow : global::System.Data.DataRow {
            
            private CombinedOtherCostsInformationDataTable tableCombinedOtherCostsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedOtherCostsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedOtherCostsInformation = ((CombinedOtherCostsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedOtherCostsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedOtherCostsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedOtherCostsInformation.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'CombinedOtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedOtherCostsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'CombinedOtherCostsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableCombinedOtherCostsInformation.DescriptionColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableCombinedOtherCostsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableCombinedOtherCostsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCombinedOtherCostsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedOtherCostsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedOtherCostsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedOtherCostsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedOtherCostsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedOtherCostsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedOtherCostsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedOtherCostsInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableCombinedOtherCostsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'CombinedOtherCostsInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedOtherCostsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedOtherCostsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedOtherCostsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedOtherCostsInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedOtherCostsInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedOtherCostsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedOtherCostsInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedOtherCostsInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableCombinedOtherCostsInformation.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableCombinedOtherCostsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedOtherCostsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableCombinedOtherCostsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedOtherCostsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedOtherCostsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedOtherCostsInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedOtherCostsInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HotelsInformationRow : global::System.Data.DataRow {
            
            private HotelsInformationDataTable tableHotelsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HotelsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHotelsInformation = ((HotelsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableHotelsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableHotelsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HotelID {
                get {
                    return ((int)(this[this.tableHotelsInformation.HotelIDColumn]));
                }
                set {
                    this[this.tableHotelsInformation.HotelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableHotelsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableHotelsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableHotelsInformation.RateColumn]));
                }
                set {
                    this[this.tableHotelsInformation.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableHotelsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableHotelsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableHotelsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableHotelsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableHotelsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hotel {
                get {
                    try {
                        return ((string)(this[this.tableHotelsInformation.HotelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hotel\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.HotelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableHotelsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableHotelsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableHotelsInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableHotelsInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableHotelsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableHotelsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHotelNull() {
                return this.IsNull(this.tableHotelsInformation.HotelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHotelNull() {
                this[this.tableHotelsInformation.HotelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableHotelsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableHotelsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableHotelsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableHotelsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableHotelsInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableHotelsInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableHotelsInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableHotelsInformation.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BondingsInformationRow : global::System.Data.DataRow {
            
            private BondingsInformationDataTable tableBondingsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BondingsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBondingsInformation = ((BondingsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableBondingsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableBondingsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BondingCompanyID {
                get {
                    return ((int)(this[this.tableBondingsInformation.BondingCompanyIDColumn]));
                }
                set {
                    this[this.tableBondingsInformation.BondingCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableBondingsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableBondingsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableBondingsInformation.RateColumn]));
                }
                set {
                    this[this.tableBondingsInformation.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableBondingsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableBondingsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableBondingsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableBondingsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableBondingsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bonding {
                get {
                    try {
                        return ((string)(this[this.tableBondingsInformation.BondingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bonding\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.BondingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBondingsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBondingsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableBondingsInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableBondingsInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableBondingsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableBondingsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBondingNull() {
                return this.IsNull(this.tableBondingsInformation.BondingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBondingNull() {
                this[this.tableBondingsInformation.BondingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableBondingsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableBondingsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableBondingsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableBondingsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableBondingsInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableBondingsInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableBondingsInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableBondingsInformation.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InsurancesInformationRow : global::System.Data.DataRow {
            
            private InsurancesInformationDataTable tableInsurancesInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InsurancesInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInsurancesInformation = ((InsurancesInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableInsurancesInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsuranceCompanyID {
                get {
                    return ((int)(this[this.tableInsurancesInformation.InsuranceCompanyIDColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.InsuranceCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableInsurancesInformation.RefIDColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableInsurancesInformation.RateColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableInsurancesInformation.DeletedColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableInsurancesInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableInsurancesInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Insurance {
                get {
                    try {
                        return ((string)(this[this.tableInsurancesInformation.InsuranceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Insurance\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.InsuranceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInsurancesInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInsurancesInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableInsurancesInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableInsurancesInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableInsurancesInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableInsurancesInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceNull() {
                return this.IsNull(this.tableInsurancesInformation.InsuranceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceNull() {
                this[this.tableInsurancesInformation.InsuranceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableInsurancesInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableInsurancesInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableInsurancesInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableInsurancesInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableInsurancesInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableInsurancesInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableInsurancesInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableInsurancesInformation.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OtherCategoryInformationRow : global::System.Data.DataRow {
            
            private OtherCategoryInformationDataTable tableOtherCategoryInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCategoryInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOtherCategoryInformation = ((OtherCategoryInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableOtherCategoryInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    return ((string)(this[this.tableOtherCategoryInformation.CategoryColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableOtherCategoryInformation.RefIDColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableOtherCategoryInformation.RateColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableOtherCategoryInformation.DeletedColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableOtherCategoryInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableOtherCategoryInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'OtherCategoryInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOtherCategoryInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'OtherCategoryInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOtherCategoryInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'OtherCategoryInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableOtherCategoryInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'OtherCategoryInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableOtherCategoryInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'OtherCategoryInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableOtherCategoryInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableOtherCategoryInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableOtherCategoryInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableOtherCategoryInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableOtherCategoryInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableOtherCategoryInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableOtherCategoryInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableOtherCategoryInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableOtherCategoryInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableOtherCategoryInformation.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BasicInformationRowChangeEvent : global::System.EventArgs {
            
            private BasicInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRowChangeEvent(BasicInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OtherCostsInformationRowChangeEvent : global::System.EventArgs {
            
            private OtherCostsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRowChangeEvent(OtherCostsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitsInformationRowChangeEvent : global::System.EventArgs {
            
            private UnitsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRowChangeEvent(UnitsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LabourHoursInformationRowChangeEvent : global::System.EventArgs {
            
            private LabourHoursInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRowChangeEvent(LabourHoursInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MaterialsInformationRowChangeEvent : global::System.EventArgs {
            
            private MaterialsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRowChangeEvent(MaterialsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReportInformationRowChangeEvent : global::System.EventArgs {
            
            private ReportInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportInformationRowChangeEvent(ReportInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubcontractorsInformationRowChangeEvent : global::System.EventArgs {
            
            private SubcontractorsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRowChangeEvent(SubcontractorsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RevenueInformationRowChangeEvent : global::System.EventArgs {
            
            private RevenueInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRowChangeEvent(RevenueInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedBasicInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedBasicInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRowChangeEvent(CombinedBasicInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedLabourHoursInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedLabourHoursInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRowChangeEvent(CombinedLabourHoursInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedUnitsInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedUnitsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRowChangeEvent(CombinedUnitsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedMaterialsInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedMaterialsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRowChangeEvent(CombinedMaterialsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedSubcontractorsInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedSubcontractorsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRowChangeEvent(CombinedSubcontractorsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedRevenueInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedRevenueInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRowChangeEvent(CombinedRevenueInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedOtherCostsInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedOtherCostsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRowChangeEvent(CombinedOtherCostsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HotelsInformationRowChangeEvent : global::System.EventArgs {
            
            private HotelsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRowChangeEvent(HotelsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BondingsInformationRowChangeEvent : global::System.EventArgs {
            
            private BondingsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRowChangeEvent(BondingsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InsurancesInformationRowChangeEvent : global::System.EventArgs {
            
            private InsurancesInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRowChangeEvent(InsurancesInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OtherCategoryInformationRowChangeEvent : global::System.EventArgs {
            
            private OtherCategoryInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRowChangeEvent(OtherCategoryInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591