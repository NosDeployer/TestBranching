//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Projects.Projects {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectCostingSheetTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectCostingSheetTDS : global::System.Data.DataSet {
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEETDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS;
        
        private LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY;
        
        private LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable tableLFS_PROJECT_COSTING_SHEET_INSURANCE;
        
        private LFS_PROJECT_COSTING_SHEET_BONDINGDataTable tableLFS_PROJECT_COSTING_SHEET_BONDING;
        
        private LFS_PROJECT_COSTING_SHEET_HOTELDataTable tableLFS_PROJECT_COSTING_SHEET_HOTEL;
        
        private LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS;
        
        private LFS_PROJECT_COSTING_SHEET_MATERIALDataTable tableLFS_PROJECT_COSTING_SHEET_MATERIAL;
        
        private LFS_PROJECT_COSTING_SHEET_UNITSDataTable tableLFS_PROJECT_COSTING_SHEET_UNITS;
        
        private LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS;
        
        private LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR;
        
        private LFS_PROJECT_COSTING_SHEET_REVENUEDataTable tableLFS_PROJECT_COSTING_SHEET_REVENUE;
        
        private LFS_PROJECT_COSTING_SHEETDataTable tableLFS_PROJECT_COSTING_SHEET;
        
        private LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable tableLFS_PROJECT_COSTING_SHEET_TEMPLATE;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectCostingSheetTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectCostingSheetTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEETDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_INSURANCE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_INSURANCE"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_BONDING"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_BONDINGDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_BONDING"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_HOTEL"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_HOTELDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_HOTEL"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_COSTS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_COSTS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_MATERIAL"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_MATERIALDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_MATERIAL"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_UNITS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_UNITSDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_UNITS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_REVENUE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_REVENUEDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_REVENUE"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEETDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_TEMPLATE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_TEMPLATE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT {
            get {
                return this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COMBINED_COSTING_SHEETDataTable LFS_PROJECT_COMBINED_COSTING_SHEET {
            get {
                return this.tableLFS_PROJECT_COMBINED_COSTING_SHEET;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS {
            get {
                return this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS {
            get {
                return this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL {
            get {
                return this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR {
            get {
                return this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE {
            get {
                return this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS {
            get {
                return this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable LFS_PROJECT_COSTING_SHEET_INSURANCE {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_BONDINGDataTable LFS_PROJECT_COSTING_SHEET_BONDING {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_BONDING;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_HOTELDataTable LFS_PROJECT_COSTING_SHEET_HOTEL {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_HOTEL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable LFS_PROJECT_COSTING_SHEET_OTHER_COSTS {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_MATERIALDataTable LFS_PROJECT_COSTING_SHEET_MATERIAL {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_UNITSDataTable LFS_PROJECT_COSTING_SHEET_UNITS {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_UNITS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable LFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_REVENUEDataTable LFS_PROJECT_COSTING_SHEET_REVENUE {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_REVENUE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEETDataTable LFS_PROJECT_COSTING_SHEET {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable LFS_PROJECT_COSTING_SHEET_TEMPLATE {
            get {
                return this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectCostingSheetTDS cln = ((ProjectCostingSheetTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEETDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE"]));
                }
                if ((ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable(ds.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_INSURANCE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_INSURANCE"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_BONDING"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_BONDINGDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_BONDING"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_HOTEL"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_HOTELDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_HOTEL"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_COSTS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_COSTS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_MATERIAL"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_MATERIALDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_MATERIAL"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_UNITS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_UNITSDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_UNITS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_REVENUE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_REVENUEDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_REVENUE"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEETDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET"]));
                }
                if ((ds.Tables["LFS_PROJECT_COSTING_SHEET_TEMPLATE"] != null)) {
                    base.Tables.Add(new LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable(ds.Tables["LFS_PROJECT_COSTING_SHEET_TEMPLATE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT = ((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable)(base.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT != null)) {
                    this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.InitVars();
                }
            }
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET = ((LFS_PROJECT_COMBINED_COSTING_SHEETDataTable)(base.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COMBINED_COSTING_SHEET != null)) {
                    this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.InitVars();
                }
            }
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS = ((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable)(base.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS != null)) {
                    this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.InitVars();
                }
            }
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS = ((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable)(base.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS != null)) {
                    this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.InitVars();
                }
            }
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL = ((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable)(base.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL != null)) {
                    this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.InitVars();
                }
            }
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR = ((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable)(base.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR != null)) {
                    this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.InitVars();
                }
            }
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE = ((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable)(base.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE != null)) {
                    this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.InitVars();
                }
            }
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS = ((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable)(base.Tables["LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS != null)) {
                    this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY = ((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE = ((LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_INSURANCE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_BONDING = ((LFS_PROJECT_COSTING_SHEET_BONDINGDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_BONDING"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_BONDING != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_BONDING.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_HOTEL = ((LFS_PROJECT_COSTING_SHEET_HOTELDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_HOTEL"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_HOTEL != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS = ((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_OTHER_COSTS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL = ((LFS_PROJECT_COSTING_SHEET_MATERIALDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_MATERIAL"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_UNITS = ((LFS_PROJECT_COSTING_SHEET_UNITSDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_UNITS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_UNITS != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_UNITS.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS = ((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR = ((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_REVENUE = ((LFS_PROJECT_COSTING_SHEET_REVENUEDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_REVENUE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_REVENUE != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET = ((LFS_PROJECT_COSTING_SHEETDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET.InitVars();
                }
            }
            this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE = ((LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable)(base.Tables["LFS_PROJECT_COSTING_SHEET_TEMPLATE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE != null)) {
                    this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectCostingSheetTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectCostingSheetTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT = new LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT);
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET = new LFS_PROJECT_COMBINED_COSTING_SHEETDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET);
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS = new LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS);
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS = new LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS);
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL = new LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL);
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR = new LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR);
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE = new LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE);
            this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS = new LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS);
            this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY = new LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY);
            this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE = new LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE);
            this.tableLFS_PROJECT_COSTING_SHEET_BONDING = new LFS_PROJECT_COSTING_SHEET_BONDINGDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_BONDING);
            this.tableLFS_PROJECT_COSTING_SHEET_HOTEL = new LFS_PROJECT_COSTING_SHEET_HOTELDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_HOTEL);
            this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS = new LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS);
            this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL = new LFS_PROJECT_COSTING_SHEET_MATERIALDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL);
            this.tableLFS_PROJECT_COSTING_SHEET_UNITS = new LFS_PROJECT_COSTING_SHEET_UNITSDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_UNITS);
            this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS = new LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS);
            this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR = new LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR);
            this.tableLFS_PROJECT_COSTING_SHEET_REVENUE = new LFS_PROJECT_COSTING_SHEET_REVENUEDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_REVENUE);
            this.tableLFS_PROJECT_COSTING_SHEET = new LFS_PROJECT_COSTING_SHEETDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET);
            this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE = new LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable();
            base.Tables.Add(this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COMBINED_COSTING_SHEET() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_INSURANCE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_BONDING() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_HOTEL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_OTHER_COSTS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_MATERIAL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_UNITS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_REVENUE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_PROJECT_COSTING_SHEET_TEMPLATE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEventHandler(object sender, LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEventHandler(object sender, LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler(object sender, LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEventHandler(object sender, LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEventHandler(object sender, LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler(object sender, LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEventHandler(object sender, LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEvent e);
        
        public delegate void LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler(object sender, LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEETRowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEETRowChangeEvent e);
        
        public delegate void LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEventHandler(object sender, LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable() {
                this.TableName = "LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow this[int index] {
                get {
                    return ((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChanging;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChanged;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowDeleting;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow(LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow AddLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow(int CostingSheetID, int ProjectID, bool Deleted, int COMPANY_ID) {
                LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow rowLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow = ((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        ProjectID,
                        Deleted,
                        COMPANY_ID};
                rowLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow);
                return rowLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow FindByCostingSheetIDProjectID(int CostingSheetID, int ProjectID) {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            ProjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable cln = ((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnProjectID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow NewLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow() {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChanged != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChanged(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChanging != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChanging(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowDeleted != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowDeleted(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowDeleting != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowDeleting(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow(LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEETDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnTotalLabourHoursCad;
            
            private global::System.Data.DataColumn columnTotalLabourHoursUsd;
            
            private global::System.Data.DataColumn columnTotalMaterialsCad;
            
            private global::System.Data.DataColumn columnTotalMaterialsUsd;
            
            private global::System.Data.DataColumn columnTotalUnitsCad;
            
            private global::System.Data.DataColumn columnTotalUnitsUsd;
            
            private global::System.Data.DataColumn columnTotalOtherCostsCad;
            
            private global::System.Data.DataColumn columnTotalOtherCostsUsd;
            
            private global::System.Data.DataColumn columnGrandTotalCad;
            
            private global::System.Data.DataColumn columnGrandTotalUsd;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsCad;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsUsd;
            
            private global::System.Data.DataColumn columnGrandRevenue;
            
            private global::System.Data.DataColumn columnGrandProfit;
            
            private global::System.Data.DataColumn columnGrandGrossMargin;
            
            private global::System.Data.DataColumn columnCombinedProjects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEETDataTable() {
                this.TableName = "LFS_PROJECT_COMBINED_COSTING_SHEET";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEETDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COMBINED_COSTING_SHEETDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursCadColumn {
                get {
                    return this.columnTotalLabourHoursCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursUsdColumn {
                get {
                    return this.columnTotalLabourHoursUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsCadColumn {
                get {
                    return this.columnTotalMaterialsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsUsdColumn {
                get {
                    return this.columnTotalMaterialsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsCadColumn {
                get {
                    return this.columnTotalUnitsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsUsdColumn {
                get {
                    return this.columnTotalUnitsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsCadColumn {
                get {
                    return this.columnTotalOtherCostsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsUsdColumn {
                get {
                    return this.columnTotalOtherCostsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalCadColumn {
                get {
                    return this.columnGrandTotalCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalUsdColumn {
                get {
                    return this.columnGrandTotalUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsCadColumn {
                get {
                    return this.columnTotalSubcontractorsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsUsdColumn {
                get {
                    return this.columnTotalSubcontractorsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandRevenueColumn {
                get {
                    return this.columnGrandRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandProfitColumn {
                get {
                    return this.columnGrandProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandGrossMarginColumn {
                get {
                    return this.columnGrandGrossMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CombinedProjectsColumn {
                get {
                    return this.columnCombinedProjects;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEETRow this[int index] {
                get {
                    return ((LFS_PROJECT_COMBINED_COSTING_SHEETRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEETRowChanging;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEETRowChanged;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEETRowDeleting;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEETRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COMBINED_COSTING_SHEETRow(LFS_PROJECT_COMBINED_COSTING_SHEETRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEETRow AddLFS_PROJECT_COMBINED_COSTING_SHEETRow(
                        int ClientID, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        decimal TotalLabourHoursCad, 
                        decimal TotalLabourHoursUsd, 
                        decimal TotalMaterialsCad, 
                        decimal TotalMaterialsUsd, 
                        decimal TotalUnitsCad, 
                        decimal TotalUnitsUsd, 
                        decimal TotalOtherCostsCad, 
                        decimal TotalOtherCostsUsd, 
                        decimal GrandTotalCad, 
                        decimal GrandTotalUsd, 
                        string State, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        decimal TotalSubcontractorsCad, 
                        decimal TotalSubcontractorsUsd, 
                        decimal GrandRevenue, 
                        decimal GrandProfit, 
                        decimal GrandGrossMargin, 
                        string CombinedProjects) {
                LFS_PROJECT_COMBINED_COSTING_SHEETRow rowLFS_PROJECT_COMBINED_COSTING_SHEETRow = ((LFS_PROJECT_COMBINED_COSTING_SHEETRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ClientID,
                        Name,
                        StartDate,
                        EndDate,
                        TotalLabourHoursCad,
                        TotalLabourHoursUsd,
                        TotalMaterialsCad,
                        TotalMaterialsUsd,
                        TotalUnitsCad,
                        TotalUnitsUsd,
                        TotalOtherCostsCad,
                        TotalOtherCostsUsd,
                        GrandTotalCad,
                        GrandTotalUsd,
                        State,
                        Deleted,
                        COMPANY_ID,
                        TotalSubcontractorsCad,
                        TotalSubcontractorsUsd,
                        GrandRevenue,
                        GrandProfit,
                        GrandGrossMargin,
                        CombinedProjects};
                rowLFS_PROJECT_COMBINED_COSTING_SHEETRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COMBINED_COSTING_SHEETRow);
                return rowLFS_PROJECT_COMBINED_COSTING_SHEETRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEETRow FindByCostingSheetID(int CostingSheetID) {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEETRow)(this.Rows.Find(new object[] {
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COMBINED_COSTING_SHEETDataTable cln = ((LFS_PROJECT_COMBINED_COSTING_SHEETDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COMBINED_COSTING_SHEETDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnTotalLabourHoursCad = base.Columns["TotalLabourHoursCad"];
                this.columnTotalLabourHoursUsd = base.Columns["TotalLabourHoursUsd"];
                this.columnTotalMaterialsCad = base.Columns["TotalMaterialsCad"];
                this.columnTotalMaterialsUsd = base.Columns["TotalMaterialsUsd"];
                this.columnTotalUnitsCad = base.Columns["TotalUnitsCad"];
                this.columnTotalUnitsUsd = base.Columns["TotalUnitsUsd"];
                this.columnTotalOtherCostsCad = base.Columns["TotalOtherCostsCad"];
                this.columnTotalOtherCostsUsd = base.Columns["TotalOtherCostsUsd"];
                this.columnGrandTotalCad = base.Columns["GrandTotalCad"];
                this.columnGrandTotalUsd = base.Columns["GrandTotalUsd"];
                this.columnState = base.Columns["State"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnTotalSubcontractorsCad = base.Columns["TotalSubcontractorsCad"];
                this.columnTotalSubcontractorsUsd = base.Columns["TotalSubcontractorsUsd"];
                this.columnGrandRevenue = base.Columns["GrandRevenue"];
                this.columnGrandProfit = base.Columns["GrandProfit"];
                this.columnGrandGrossMargin = base.Columns["GrandGrossMargin"];
                this.columnCombinedProjects = base.Columns["CombinedProjects"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnTotalLabourHoursCad = new global::System.Data.DataColumn("TotalLabourHoursCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursCad);
                this.columnTotalLabourHoursUsd = new global::System.Data.DataColumn("TotalLabourHoursUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursUsd);
                this.columnTotalMaterialsCad = new global::System.Data.DataColumn("TotalMaterialsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsCad);
                this.columnTotalMaterialsUsd = new global::System.Data.DataColumn("TotalMaterialsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsUsd);
                this.columnTotalUnitsCad = new global::System.Data.DataColumn("TotalUnitsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsCad);
                this.columnTotalUnitsUsd = new global::System.Data.DataColumn("TotalUnitsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsUsd);
                this.columnTotalOtherCostsCad = new global::System.Data.DataColumn("TotalOtherCostsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsCad);
                this.columnTotalOtherCostsUsd = new global::System.Data.DataColumn("TotalOtherCostsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsUsd);
                this.columnGrandTotalCad = new global::System.Data.DataColumn("GrandTotalCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalCad);
                this.columnGrandTotalUsd = new global::System.Data.DataColumn("GrandTotalUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalUsd);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnTotalSubcontractorsCad = new global::System.Data.DataColumn("TotalSubcontractorsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsCad);
                this.columnTotalSubcontractorsUsd = new global::System.Data.DataColumn("TotalSubcontractorsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsUsd);
                this.columnGrandRevenue = new global::System.Data.DataColumn("GrandRevenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandRevenue);
                this.columnGrandProfit = new global::System.Data.DataColumn("GrandProfit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandProfit);
                this.columnGrandGrossMargin = new global::System.Data.DataColumn("GrandGrossMargin", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandGrossMargin);
                this.columnCombinedProjects = new global::System.Data.DataColumn("CombinedProjects", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCombinedProjects);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AutoIncrement = true;
                this.columnCostingSheetID.AutoIncrementSeed = -1;
                this.columnCostingSheetID.AutoIncrementStep = -1;
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.ReadOnly = true;
                this.columnCostingSheetID.Unique = true;
                this.columnClientID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 150;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnTotalLabourHoursCad.AllowDBNull = false;
                this.columnTotalLabourHoursUsd.AllowDBNull = false;
                this.columnTotalMaterialsCad.AllowDBNull = false;
                this.columnTotalMaterialsUsd.AllowDBNull = false;
                this.columnTotalUnitsCad.AllowDBNull = false;
                this.columnTotalUnitsUsd.AllowDBNull = false;
                this.columnTotalOtherCostsCad.AllowDBNull = false;
                this.columnTotalOtherCostsUsd.AllowDBNull = false;
                this.columnGrandTotalCad.AllowDBNull = false;
                this.columnGrandTotalUsd.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnTotalSubcontractorsCad.AllowDBNull = false;
                this.columnTotalSubcontractorsUsd.AllowDBNull = false;
                this.columnGrandRevenue.AllowDBNull = false;
                this.columnGrandProfit.AllowDBNull = false;
                this.columnGrandGrossMargin.AllowDBNull = false;
                this.columnCombinedProjects.AllowDBNull = false;
                this.columnCombinedProjects.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEETRow NewLFS_PROJECT_COMBINED_COSTING_SHEETRow() {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEETRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COMBINED_COSTING_SHEETRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COMBINED_COSTING_SHEETRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEETRowChanged != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEETRowChanged(this, new LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEETRowChanging != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEETRowChanging(this, new LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEETRowDeleted != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEETRowDeleted(this, new LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEETRowDeleting != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEETRowDeleting(this, new LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COMBINED_COSTING_SHEETRow(LFS_PROJECT_COMBINED_COSTING_SHEETRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COMBINED_COSTING_SHEETDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnLHQuantity;
            
            private global::System.Data.DataColumn columnLHUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsQuantity;
            
            private global::System.Data.DataColumn columnMotelUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMotelQuantity;
            
            private global::System.Data.DataColumn columnLHCostCad;
            
            private global::System.Data.DataColumn columnMealsCostCad;
            
            private global::System.Data.DataColumn columnMotelCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnLHCostUsd;
            
            private global::System.Data.DataColumn columnMealsCostUsd;
            
            private global::System.Data.DataColumn columnMotelCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnProjectID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable() {
                this.TableName = "LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHQuantityColumn {
                get {
                    return this.columnLHQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHUnitOfMeasurementColumn {
                get {
                    return this.columnLHUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsUnitOfMeasurementColumn {
                get {
                    return this.columnMealsUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsQuantityColumn {
                get {
                    return this.columnMealsQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelUnitOfMeasurementColumn {
                get {
                    return this.columnMotelUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelQuantityColumn {
                get {
                    return this.columnMotelQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostCadColumn {
                get {
                    return this.columnLHCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostCadColumn {
                get {
                    return this.columnMealsCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostCadColumn {
                get {
                    return this.columnMotelCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostUsdColumn {
                get {
                    return this.columnLHCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostUsdColumn {
                get {
                    return this.columnMealsCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostUsdColumn {
                get {
                    return this.columnMotelCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow this[int index] {
                get {
                    return ((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChanging;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChanged;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowDeleting;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow(LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow AddLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow(
                        int CostingSheetID, 
                        string Work_, 
                        int EmployeeID, 
                        int RefID, 
                        double LHQuantity, 
                        string LHUnitOfMeasurement, 
                        string MealsUnitOfMeasurement, 
                        int MealsQuantity, 
                        string MotelUnitOfMeasurement, 
                        int MotelQuantity, 
                        decimal LHCostCad, 
                        decimal MealsCostCad, 
                        decimal MotelCostCad, 
                        decimal TotalCostCad, 
                        decimal LHCostUsd, 
                        decimal MealsCostUsd, 
                        decimal MotelCostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string Function_, 
                        int ProjectID) {
                LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow rowLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow = ((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        EmployeeID,
                        RefID,
                        LHQuantity,
                        LHUnitOfMeasurement,
                        MealsUnitOfMeasurement,
                        MealsQuantity,
                        MotelUnitOfMeasurement,
                        MotelQuantity,
                        LHCostCad,
                        MealsCostCad,
                        MotelCostCad,
                        TotalCostCad,
                        LHCostUsd,
                        MealsCostUsd,
                        MotelCostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Function_,
                        ProjectID};
                rowLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow);
                return rowLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow FindByCostingSheetIDWork_EmployeeIDRefID(int CostingSheetID, string Work_, int EmployeeID, int RefID) {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            Work_,
                            EmployeeID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable cln = ((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnLHQuantity = base.Columns["LHQuantity"];
                this.columnLHUnitOfMeasurement = base.Columns["LHUnitOfMeasurement"];
                this.columnMealsUnitOfMeasurement = base.Columns["MealsUnitOfMeasurement"];
                this.columnMealsQuantity = base.Columns["MealsQuantity"];
                this.columnMotelUnitOfMeasurement = base.Columns["MotelUnitOfMeasurement"];
                this.columnMotelQuantity = base.Columns["MotelQuantity"];
                this.columnLHCostCad = base.Columns["LHCostCad"];
                this.columnMealsCostCad = base.Columns["MealsCostCad"];
                this.columnMotelCostCad = base.Columns["MotelCostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnLHCostUsd = base.Columns["LHCostUsd"];
                this.columnMealsCostUsd = base.Columns["MealsCostUsd"];
                this.columnMotelCostUsd = base.Columns["MotelCostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnLHQuantity = new global::System.Data.DataColumn("LHQuantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHQuantity);
                this.columnLHUnitOfMeasurement = new global::System.Data.DataColumn("LHUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHUnitOfMeasurement);
                this.columnMealsUnitOfMeasurement = new global::System.Data.DataColumn("MealsUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsUnitOfMeasurement);
                this.columnMealsQuantity = new global::System.Data.DataColumn("MealsQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsQuantity);
                this.columnMotelUnitOfMeasurement = new global::System.Data.DataColumn("MotelUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelUnitOfMeasurement);
                this.columnMotelQuantity = new global::System.Data.DataColumn("MotelQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelQuantity);
                this.columnLHCostCad = new global::System.Data.DataColumn("LHCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostCad);
                this.columnMealsCostCad = new global::System.Data.DataColumn("MealsCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostCad);
                this.columnMotelCostCad = new global::System.Data.DataColumn("MotelCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnLHCostUsd = new global::System.Data.DataColumn("LHCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostUsd);
                this.columnMealsCostUsd = new global::System.Data.DataColumn("MealsCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostUsd);
                this.columnMotelCostUsd = new global::System.Data.DataColumn("MotelCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnWork_,
                                this.columnEmployeeID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnLHQuantity.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.MaxLength = 10;
                this.columnMealsUnitOfMeasurement.MaxLength = 25;
                this.columnMotelUnitOfMeasurement.MaxLength = 25;
                this.columnLHCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnLHCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnFunction_.MaxLength = 50;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow NewLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow() {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChanged != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChanged(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChanging != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChanging(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowDeleted != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowDeleted(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowDeleting != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowDeleting(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow(LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnProjectID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable() {
                this.TableName = "LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow this[int index] {
                get {
                    return ((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChanging;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChanged;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowDeleting;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow(LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow AddLFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow(
                        int CostingSheetID, 
                        string Work_, 
                        int UnitID, 
                        int RefID, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string Function_, 
                        int ProjectID) {
                LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow rowLFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow = ((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        UnitID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Function_,
                        ProjectID};
                rowLFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow);
                return rowLFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow FindByCostingSheetIDWork_UnitIDRefID(int CostingSheetID, string Work_, int UnitID, int RefID) {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            Work_,
                            UnitID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable cln = ((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnWork_,
                                this.columnUnitID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnUnitID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 50;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnFunction_.MaxLength = 50;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow NewLFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow() {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChanged != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChanged(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChanging != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChanging(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowDeleted != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowDeleted(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowDeleting != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowDeleting(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow(LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnProjectID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable() {
                this.TableName = "LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow this[int index] {
                get {
                    return ((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChanging;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChanged;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowDeleting;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow(LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow AddLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow(int CostingSheetID, int MaterialID, int RefID, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, string Function_, int ProjectID) {
                LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow rowLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow = ((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        MaterialID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Function_,
                        ProjectID};
                rowLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow);
                return rowLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow FindByCostingSheetIDMaterialIDRefID(int CostingSheetID, int MaterialID, int RefID) {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            MaterialID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable cln = ((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnMaterialID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnMaterialID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 50;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnFunction_.MaxLength = 50;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow NewLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow() {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChanged != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChanged(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChanging != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChanging(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowDeleted != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowDeleted(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowDeleting != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowDeleting(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow(LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnSubcontractorID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnProjectID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable() {
                this.TableName = "LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow this[int index] {
                get {
                    return ((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChanging;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChanged;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowDeleting;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow(LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow AddLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow(int CostingSheetID, int SubcontractorID, int RefID, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, string Comment, int ProjectID) {
                LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow rowLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow = ((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        SubcontractorID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Comment,
                        ProjectID};
                rowLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow);
                return rowLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow FindByCostingSheetIDSubcontractorIDRefID(int CostingSheetID, int SubcontractorID, int RefID) {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            SubcontractorID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable cln = ((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnSubcontractorID = base.Columns["SubcontractorID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnComment = base.Columns["Comment"];
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnSubcontractorID = new global::System.Data.DataColumn("SubcontractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnSubcontractorID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnSubcontractorID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 50;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow NewLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow() {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChanged != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChanged(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChanging != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChanging(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowDeleted != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowDeleted(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowDeleting != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowDeleting(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow(LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefIDRevenue;
            
            private global::System.Data.DataColumn columnRevenue;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnProjectID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable() {
                this.TableName = "LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDRevenueColumn {
                get {
                    return this.columnRefIDRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueColumn {
                get {
                    return this.columnRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow this[int index] {
                get {
                    return ((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChanging;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChanged;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowDeleting;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow(LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow AddLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow(int CostingSheetID, int RefIDRevenue, decimal Revenue, string Comment, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, bool Deleted, int ProjectID) {
                LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow rowLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow = ((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefIDRevenue,
                        Revenue,
                        Comment,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Deleted,
                        ProjectID};
                rowLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow);
                return rowLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow FindByCostingSheetIDRefIDRevenue(int CostingSheetID, int RefIDRevenue) {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefIDRevenue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable cln = ((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefIDRevenue = base.Columns["RefIDRevenue"];
                this.columnRevenue = base.Columns["Revenue"];
                this.columnComment = base.Columns["Comment"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefIDRevenue = new global::System.Data.DataColumn("RefIDRevenue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefIDRevenue);
                this.columnRevenue = new global::System.Data.DataColumn("Revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenue);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefIDRevenue}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefIDRevenue.AllowDBNull = false;
                this.columnRevenue.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow NewLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow() {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChanged != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChanged(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChanging != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChanging(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowDeleted != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowDeleted(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowDeleting != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowDeleting(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow(LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnProjectID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable() {
                this.TableName = "LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow this[int index] {
                get {
                    return ((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChanging;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChanged;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowDeleting;
            
            public event LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow(LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow AddLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow(
                        int CostingSheetID, 
                        int RefID, 
                        string Work_, 
                        string Function_, 
                        string Description, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        int ProjectID) {
                LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow rowLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow = ((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefID,
                        Work_,
                        Function_,
                        Description,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        ProjectID};
                rowLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow);
                return rowLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow FindByCostingSheetIDRefID(int CostingSheetID, int RefID) {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable cln = ((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 150;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow NewLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow() {
                return ((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChanged != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChanged(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChanging != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChanging(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowDeleted != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowDeleted(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowDeleting != null)) {
                    this.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowDeleting(this, new LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEvent(((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow(LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow(LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow AddLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow(int CostingSheetID, string Category, int RefID, System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, int COMPANY_ID, string Comment) {
                LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow rowLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow = ((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Category,
                        RefID,
                        StartDate,
                        EndDate,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        Comment};
                rowLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow);
                return rowLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow FindByCostingSheetIDCategoryRefID(int CostingSheetID, string Category, int RefID) {
                return ((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            Category,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable cln = ((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnCategory = base.Columns["Category"];
                this.columnRefID = base.Columns["RefID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnCategory,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCategory.AllowDBNull = false;
                this.columnCategory.MaxLength = 50;
                this.columnRefID.AllowDBNull = false;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow NewLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow() {
                return ((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChanged(this, new LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChanging(this, new LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowDeleted(this, new LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowDeleting(this, new LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow(LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnInsuranceCompanyID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_INSURANCE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceCompanyIDColumn {
                get {
                    return this.columnInsuranceCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_INSURANCERow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_INSURANCERow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_INSURANCERowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_INSURANCERowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_INSURANCERowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_INSURANCERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_INSURANCERow(LFS_PROJECT_COSTING_SHEET_INSURANCERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_INSURANCERow AddLFS_PROJECT_COSTING_SHEET_INSURANCERow(int CostingSheetID, int InsuranceCompanyID, int RefID, System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, int COMPANY_ID, string Comment) {
                LFS_PROJECT_COSTING_SHEET_INSURANCERow rowLFS_PROJECT_COSTING_SHEET_INSURANCERow = ((LFS_PROJECT_COSTING_SHEET_INSURANCERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        InsuranceCompanyID,
                        RefID,
                        StartDate,
                        EndDate,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        Comment};
                rowLFS_PROJECT_COSTING_SHEET_INSURANCERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_INSURANCERow);
                return rowLFS_PROJECT_COSTING_SHEET_INSURANCERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_INSURANCERow FindByCostingSheetIDInsuranceCompanyIDRefID(int CostingSheetID, int InsuranceCompanyID, int RefID) {
                return ((LFS_PROJECT_COSTING_SHEET_INSURANCERow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            InsuranceCompanyID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable cln = ((LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnInsuranceCompanyID = base.Columns["InsuranceCompanyID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnInsuranceCompanyID = new global::System.Data.DataColumn("InsuranceCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCompanyID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnInsuranceCompanyID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnInsuranceCompanyID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_INSURANCERow NewLFS_PROJECT_COSTING_SHEET_INSURANCERow() {
                return ((LFS_PROJECT_COSTING_SHEET_INSURANCERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_INSURANCERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_INSURANCERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_INSURANCERowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_INSURANCERowChanged(this, new LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_INSURANCERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_INSURANCERowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_INSURANCERowChanging(this, new LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_INSURANCERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_INSURANCERowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_INSURANCERowDeleted(this, new LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_INSURANCERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_INSURANCERowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_INSURANCERowDeleting(this, new LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_INSURANCERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_INSURANCERow(LFS_PROJECT_COSTING_SHEET_INSURANCERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_BONDINGDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnBondingCompanyID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_BONDINGDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_BONDING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_BONDINGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_BONDINGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingCompanyIDColumn {
                get {
                    return this.columnBondingCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_BONDINGRow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_BONDINGRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_BONDINGRowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_BONDINGRowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_BONDINGRowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_BONDINGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_BONDINGRow(LFS_PROJECT_COSTING_SHEET_BONDINGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_BONDINGRow AddLFS_PROJECT_COSTING_SHEET_BONDINGRow(int CostingSheetID, int BondingCompanyID, int RefID, System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, string COMPANY_ID, string Comment) {
                LFS_PROJECT_COSTING_SHEET_BONDINGRow rowLFS_PROJECT_COSTING_SHEET_BONDINGRow = ((LFS_PROJECT_COSTING_SHEET_BONDINGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        BondingCompanyID,
                        RefID,
                        StartDate,
                        EndDate,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        Comment};
                rowLFS_PROJECT_COSTING_SHEET_BONDINGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_BONDINGRow);
                return rowLFS_PROJECT_COSTING_SHEET_BONDINGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_BONDINGRow FindByCostingSheetIDBondingCompanyIDRefID(int CostingSheetID, int BondingCompanyID, int RefID) {
                return ((LFS_PROJECT_COSTING_SHEET_BONDINGRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            BondingCompanyID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_BONDINGDataTable cln = ((LFS_PROJECT_COSTING_SHEET_BONDINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_BONDINGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnBondingCompanyID = base.Columns["BondingCompanyID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnBondingCompanyID = new global::System.Data.DataColumn("BondingCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBondingCompanyID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnBondingCompanyID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnBondingCompanyID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnCOMPANY_ID.MaxLength = 10;
                this.columnComment.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_BONDINGRow NewLFS_PROJECT_COSTING_SHEET_BONDINGRow() {
                return ((LFS_PROJECT_COSTING_SHEET_BONDINGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_BONDINGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_BONDINGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_BONDINGRowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_BONDINGRowChanged(this, new LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_BONDINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_BONDINGRowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_BONDINGRowChanging(this, new LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_BONDINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_BONDINGRowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_BONDINGRowDeleted(this, new LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_BONDINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_BONDINGRowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_BONDINGRowDeleting(this, new LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_BONDINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_BONDINGRow(LFS_PROJECT_COSTING_SHEET_BONDINGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_BONDINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_HOTELDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnHotelID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_HOTELDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_HOTEL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_HOTELDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_HOTELDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotelIDColumn {
                get {
                    return this.columnHotelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_HOTELRow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_HOTELRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_HOTELRowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_HOTELRowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_HOTELRowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_HOTELRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_HOTELRow(LFS_PROJECT_COSTING_SHEET_HOTELRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_HOTELRow AddLFS_PROJECT_COSTING_SHEET_HOTELRow(int CostingSheetID, int HotelID, int RefID, System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, int COMPANY_ID, string Comment) {
                LFS_PROJECT_COSTING_SHEET_HOTELRow rowLFS_PROJECT_COSTING_SHEET_HOTELRow = ((LFS_PROJECT_COSTING_SHEET_HOTELRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        HotelID,
                        RefID,
                        StartDate,
                        EndDate,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        Comment};
                rowLFS_PROJECT_COSTING_SHEET_HOTELRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_HOTELRow);
                return rowLFS_PROJECT_COSTING_SHEET_HOTELRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_HOTELRow FindByCostingSheetIDHotelIDRefID(int CostingSheetID, int HotelID, int RefID) {
                return ((LFS_PROJECT_COSTING_SHEET_HOTELRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            HotelID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_HOTELDataTable cln = ((LFS_PROJECT_COSTING_SHEET_HOTELDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_HOTELDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnHotelID = base.Columns["HotelID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnHotelID = new global::System.Data.DataColumn("HotelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotelID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnHotelID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnHotelID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_HOTELRow NewLFS_PROJECT_COSTING_SHEET_HOTELRow() {
                return ((LFS_PROJECT_COSTING_SHEET_HOTELRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_HOTELRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_HOTELRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_HOTELRowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_HOTELRowChanged(this, new LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_HOTELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_HOTELRowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_HOTELRowChanging(this, new LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_HOTELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_HOTELRowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_HOTELRowDeleted(this, new LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_HOTELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_HOTELRowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_HOTELRowDeleting(this, new LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_HOTELRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_HOTELRow(LFS_PROJECT_COSTING_SHEET_HOTELRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_HOTELDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_OTHER_COSTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow(LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow AddLFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow(int CostingSheetID, int RefID, string Work_, string Function_, string Description, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate) {
                LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow rowLFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow = ((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefID,
                        Work_,
                        Function_,
                        Description,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate};
                rowLFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow);
                return rowLFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow FindByCostingSheetIDRefID(int CostingSheetID, int RefID) {
                return ((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable cln = ((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 150;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow NewLFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow() {
                return ((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChanged(this, new LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChanging(this, new LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowDeleted(this, new LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowDeleting(this, new LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow(LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_MATERIALDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFunction_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_MATERIALDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_MATERIAL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_MATERIALDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_MATERIALDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_MATERIALRow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_MATERIALRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_MATERIALRowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_MATERIALRowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_MATERIALRowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_MATERIALRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_MATERIALRow(LFS_PROJECT_COSTING_SHEET_MATERIALRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_MATERIALRow AddLFS_PROJECT_COSTING_SHEET_MATERIALRow(int CostingSheetID, int MaterialID, int RefID, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, string Function_) {
                LFS_PROJECT_COSTING_SHEET_MATERIALRow rowLFS_PROJECT_COSTING_SHEET_MATERIALRow = ((LFS_PROJECT_COSTING_SHEET_MATERIALRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        MaterialID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Function_};
                rowLFS_PROJECT_COSTING_SHEET_MATERIALRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_MATERIALRow);
                return rowLFS_PROJECT_COSTING_SHEET_MATERIALRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_MATERIALRow FindByCostingSheetIDMaterialIDRefID(int CostingSheetID, int MaterialID, int RefID) {
                return ((LFS_PROJECT_COSTING_SHEET_MATERIALRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            MaterialID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_MATERIALDataTable cln = ((LFS_PROJECT_COSTING_SHEET_MATERIALDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_MATERIALDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFunction_ = base.Columns["Function_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnMaterialID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnMaterialID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 50;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnFunction_.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_MATERIALRow NewLFS_PROJECT_COSTING_SHEET_MATERIALRow() {
                return ((LFS_PROJECT_COSTING_SHEET_MATERIALRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_MATERIALRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_MATERIALRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_MATERIALRowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_MATERIALRowChanged(this, new LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_MATERIALRowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_MATERIALRowChanging(this, new LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_MATERIALRowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_MATERIALRowDeleted(this, new LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_MATERIALRowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_MATERIALRowDeleting(this, new LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_MATERIALRow(LFS_PROJECT_COSTING_SHEET_MATERIALRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_MATERIALDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_UNITSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFunction_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_UNITSDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_UNITS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_UNITSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_UNITSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_UNITSRow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_UNITSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_UNITSRowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_UNITSRowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_UNITSRowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_UNITSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_UNITSRow(LFS_PROJECT_COSTING_SHEET_UNITSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_UNITSRow AddLFS_PROJECT_COSTING_SHEET_UNITSRow(int CostingSheetID, string Work_, int UnitID, int RefID, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, string Function_) {
                LFS_PROJECT_COSTING_SHEET_UNITSRow rowLFS_PROJECT_COSTING_SHEET_UNITSRow = ((LFS_PROJECT_COSTING_SHEET_UNITSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        UnitID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Function_};
                rowLFS_PROJECT_COSTING_SHEET_UNITSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_UNITSRow);
                return rowLFS_PROJECT_COSTING_SHEET_UNITSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_UNITSRow FindByCostingSheetIDWork_UnitIDRefID(int CostingSheetID, string Work_, int UnitID, int RefID) {
                return ((LFS_PROJECT_COSTING_SHEET_UNITSRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            Work_,
                            UnitID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_UNITSDataTable cln = ((LFS_PROJECT_COSTING_SHEET_UNITSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_UNITSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFunction_ = base.Columns["Function_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnWork_,
                                this.columnUnitID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnUnitID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 50;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnFunction_.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_UNITSRow NewLFS_PROJECT_COSTING_SHEET_UNITSRow() {
                return ((LFS_PROJECT_COSTING_SHEET_UNITSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_UNITSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_UNITSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_UNITSRowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_UNITSRowChanged(this, new LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_UNITSRowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_UNITSRowChanging(this, new LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_UNITSRowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_UNITSRowDeleted(this, new LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_UNITSRowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_UNITSRowDeleting(this, new LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_UNITSRow(LFS_PROJECT_COSTING_SHEET_UNITSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_UNITSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnLHQuantity;
            
            private global::System.Data.DataColumn columnLHUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsQuantity;
            
            private global::System.Data.DataColumn columnMotelUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMotelQuantity;
            
            private global::System.Data.DataColumn columnLHCostCad;
            
            private global::System.Data.DataColumn columnMealsCostCad;
            
            private global::System.Data.DataColumn columnMotelCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnLHCostUsd;
            
            private global::System.Data.DataColumn columnMealsCostUsd;
            
            private global::System.Data.DataColumn columnMotelCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFunction_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHQuantityColumn {
                get {
                    return this.columnLHQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHUnitOfMeasurementColumn {
                get {
                    return this.columnLHUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsUnitOfMeasurementColumn {
                get {
                    return this.columnMealsUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsQuantityColumn {
                get {
                    return this.columnMealsQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelUnitOfMeasurementColumn {
                get {
                    return this.columnMotelUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelQuantityColumn {
                get {
                    return this.columnMotelQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostCadColumn {
                get {
                    return this.columnLHCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostCadColumn {
                get {
                    return this.columnMealsCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostCadColumn {
                get {
                    return this.columnMotelCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostUsdColumn {
                get {
                    return this.columnLHCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostUsdColumn {
                get {
                    return this.columnMealsCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostUsdColumn {
                get {
                    return this.columnMotelCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow(LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow AddLFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow(
                        int CostingSheetID, 
                        string Work_, 
                        int EmployeeID, 
                        int RefID, 
                        double LHQuantity, 
                        string LHUnitOfMeasurement, 
                        string MealsUnitOfMeasurement, 
                        int MealsQuantity, 
                        string MotelUnitOfMeasurement, 
                        int MotelQuantity, 
                        decimal LHCostCad, 
                        decimal MealsCostCad, 
                        decimal MotelCostCad, 
                        decimal TotalCostCad, 
                        decimal LHCostUsd, 
                        decimal MealsCostUsd, 
                        decimal MotelCostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string Function_) {
                LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow rowLFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow = ((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        EmployeeID,
                        RefID,
                        LHQuantity,
                        LHUnitOfMeasurement,
                        MealsUnitOfMeasurement,
                        MealsQuantity,
                        MotelUnitOfMeasurement,
                        MotelQuantity,
                        LHCostCad,
                        MealsCostCad,
                        MotelCostCad,
                        TotalCostCad,
                        LHCostUsd,
                        MealsCostUsd,
                        MotelCostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Function_};
                rowLFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow);
                return rowLFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow FindByCostingSheetIDWork_EmployeeIDRefID(int CostingSheetID, string Work_, int EmployeeID, int RefID) {
                return ((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            Work_,
                            EmployeeID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable cln = ((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnLHQuantity = base.Columns["LHQuantity"];
                this.columnLHUnitOfMeasurement = base.Columns["LHUnitOfMeasurement"];
                this.columnMealsUnitOfMeasurement = base.Columns["MealsUnitOfMeasurement"];
                this.columnMealsQuantity = base.Columns["MealsQuantity"];
                this.columnMotelUnitOfMeasurement = base.Columns["MotelUnitOfMeasurement"];
                this.columnMotelQuantity = base.Columns["MotelQuantity"];
                this.columnLHCostCad = base.Columns["LHCostCad"];
                this.columnMealsCostCad = base.Columns["MealsCostCad"];
                this.columnMotelCostCad = base.Columns["MotelCostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnLHCostUsd = base.Columns["LHCostUsd"];
                this.columnMealsCostUsd = base.Columns["MealsCostUsd"];
                this.columnMotelCostUsd = base.Columns["MotelCostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFunction_ = base.Columns["Function_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnLHQuantity = new global::System.Data.DataColumn("LHQuantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHQuantity);
                this.columnLHUnitOfMeasurement = new global::System.Data.DataColumn("LHUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHUnitOfMeasurement);
                this.columnMealsUnitOfMeasurement = new global::System.Data.DataColumn("MealsUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsUnitOfMeasurement);
                this.columnMealsQuantity = new global::System.Data.DataColumn("MealsQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsQuantity);
                this.columnMotelUnitOfMeasurement = new global::System.Data.DataColumn("MotelUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelUnitOfMeasurement);
                this.columnMotelQuantity = new global::System.Data.DataColumn("MotelQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelQuantity);
                this.columnLHCostCad = new global::System.Data.DataColumn("LHCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostCad);
                this.columnMealsCostCad = new global::System.Data.DataColumn("MealsCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostCad);
                this.columnMotelCostCad = new global::System.Data.DataColumn("MotelCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnLHCostUsd = new global::System.Data.DataColumn("LHCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostUsd);
                this.columnMealsCostUsd = new global::System.Data.DataColumn("MealsCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostUsd);
                this.columnMotelCostUsd = new global::System.Data.DataColumn("MotelCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnWork_,
                                this.columnEmployeeID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnLHQuantity.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.MaxLength = 10;
                this.columnMealsUnitOfMeasurement.MaxLength = 25;
                this.columnMotelUnitOfMeasurement.MaxLength = 25;
                this.columnLHCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnLHCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnFunction_.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow NewLFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow() {
                return ((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChanged(this, new LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChanging(this, new LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowDeleted(this, new LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowDeleting(this, new LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow(LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnSubcontractorID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEventHandler LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow(LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow AddLFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow(int CostingSheetID, int SubcontractorID, int RefID, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, string Comment) {
                LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow rowLFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow = ((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        SubcontractorID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Comment};
                rowLFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow);
                return rowLFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow FindByCostingSheetIDSubcontractorIDRefID(int CostingSheetID, int SubcontractorID, int RefID) {
                return ((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            SubcontractorID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable cln = ((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnSubcontractorID = base.Columns["SubcontractorID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnSubcontractorID = new global::System.Data.DataColumn("SubcontractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnSubcontractorID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnSubcontractorID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 50;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow NewLFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow() {
                return ((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChanged(this, new LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChanging(this, new LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowDeleted(this, new LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowDeleting(this, new LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow(LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_REVENUEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefIDRevenue;
            
            private global::System.Data.DataColumn columnRevenue;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_REVENUEDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_REVENUE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_REVENUEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_REVENUEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDRevenueColumn {
                get {
                    return this.columnRefIDRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueColumn {
                get {
                    return this.columnRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_REVENUERow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_REVENUERow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_REVENUERowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_REVENUERowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_REVENUERowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_REVENUERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_REVENUERow(LFS_PROJECT_COSTING_SHEET_REVENUERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_REVENUERow AddLFS_PROJECT_COSTING_SHEET_REVENUERow(int CostingSheetID, int RefIDRevenue, decimal Revenue, string Comment, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, bool Deleted) {
                LFS_PROJECT_COSTING_SHEET_REVENUERow rowLFS_PROJECT_COSTING_SHEET_REVENUERow = ((LFS_PROJECT_COSTING_SHEET_REVENUERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefIDRevenue,
                        Revenue,
                        Comment,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Deleted};
                rowLFS_PROJECT_COSTING_SHEET_REVENUERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_REVENUERow);
                return rowLFS_PROJECT_COSTING_SHEET_REVENUERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_REVENUERow FindByCostingSheetIDRefIDRevenue(int CostingSheetID, int RefIDRevenue) {
                return ((LFS_PROJECT_COSTING_SHEET_REVENUERow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefIDRevenue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_REVENUEDataTable cln = ((LFS_PROJECT_COSTING_SHEET_REVENUEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_REVENUEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefIDRevenue = base.Columns["RefIDRevenue"];
                this.columnRevenue = base.Columns["Revenue"];
                this.columnComment = base.Columns["Comment"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDeleted = base.Columns["Deleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefIDRevenue = new global::System.Data.DataColumn("RefIDRevenue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefIDRevenue);
                this.columnRevenue = new global::System.Data.DataColumn("Revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenue);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefIDRevenue}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefIDRevenue.AllowDBNull = false;
                this.columnRevenue.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_REVENUERow NewLFS_PROJECT_COSTING_SHEET_REVENUERow() {
                return ((LFS_PROJECT_COSTING_SHEET_REVENUERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_REVENUERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_REVENUERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_REVENUERowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_REVENUERowChanged(this, new LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_REVENUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_REVENUERowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_REVENUERowChanging(this, new LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_REVENUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_REVENUERowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_REVENUERowDeleted(this, new LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_REVENUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_REVENUERowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_REVENUERowDeleting(this, new LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_REVENUERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_REVENUERow(LFS_PROJECT_COSTING_SHEET_REVENUERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_REVENUEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEETDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnTotalLabourHoursCad;
            
            private global::System.Data.DataColumn columnTotalLabourHoursUsd;
            
            private global::System.Data.DataColumn columnTotalMaterialsCad;
            
            private global::System.Data.DataColumn columnTotalMaterialsUsd;
            
            private global::System.Data.DataColumn columnTotalUnitsCad;
            
            private global::System.Data.DataColumn columnTotalUnitsUsd;
            
            private global::System.Data.DataColumn columnTotalOtherCostsCad;
            
            private global::System.Data.DataColumn columnTotalOtherCostsUsd;
            
            private global::System.Data.DataColumn columnGrandTotalCad;
            
            private global::System.Data.DataColumn columnGrandTotalUsd;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsCad;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsUsd;
            
            private global::System.Data.DataColumn columnGrandRevenue;
            
            private global::System.Data.DataColumn columnGrandProfit;
            
            private global::System.Data.DataColumn columnGrandGrossMargin;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEETDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEETDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEETDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursCadColumn {
                get {
                    return this.columnTotalLabourHoursCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursUsdColumn {
                get {
                    return this.columnTotalLabourHoursUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsCadColumn {
                get {
                    return this.columnTotalMaterialsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsUsdColumn {
                get {
                    return this.columnTotalMaterialsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsCadColumn {
                get {
                    return this.columnTotalUnitsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsUsdColumn {
                get {
                    return this.columnTotalUnitsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsCadColumn {
                get {
                    return this.columnTotalOtherCostsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsUsdColumn {
                get {
                    return this.columnTotalOtherCostsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalCadColumn {
                get {
                    return this.columnGrandTotalCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandTotalUsdColumn {
                get {
                    return this.columnGrandTotalUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsCadColumn {
                get {
                    return this.columnTotalSubcontractorsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsUsdColumn {
                get {
                    return this.columnTotalSubcontractorsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandRevenueColumn {
                get {
                    return this.columnGrandRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandProfitColumn {
                get {
                    return this.columnGrandProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandGrossMarginColumn {
                get {
                    return this.columnGrandGrossMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEETRow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEETRow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEETRowChangeEventHandler LFS_PROJECT_COSTING_SHEETRowChanging;
            
            public event LFS_PROJECT_COSTING_SHEETRowChangeEventHandler LFS_PROJECT_COSTING_SHEETRowChanged;
            
            public event LFS_PROJECT_COSTING_SHEETRowChangeEventHandler LFS_PROJECT_COSTING_SHEETRowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEETRowChangeEventHandler LFS_PROJECT_COSTING_SHEETRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEETRow(LFS_PROJECT_COSTING_SHEETRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEETRow AddLFS_PROJECT_COSTING_SHEETRow(
                        int ProjectID, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        decimal TotalLabourHoursCad, 
                        decimal TotalLabourHoursUsd, 
                        decimal TotalMaterialsCad, 
                        decimal TotalMaterialsUsd, 
                        decimal TotalUnitsCad, 
                        decimal TotalUnitsUsd, 
                        decimal TotalOtherCostsCad, 
                        decimal TotalOtherCostsUsd, 
                        decimal GrandTotalCad, 
                        decimal GrandTotalUsd, 
                        string State, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        decimal TotalSubcontractorsCad, 
                        decimal TotalSubcontractorsUsd, 
                        decimal GrandRevenue, 
                        decimal GrandProfit, 
                        decimal GrandGrossMargin) {
                LFS_PROJECT_COSTING_SHEETRow rowLFS_PROJECT_COSTING_SHEETRow = ((LFS_PROJECT_COSTING_SHEETRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectID,
                        Name,
                        StartDate,
                        EndDate,
                        TotalLabourHoursCad,
                        TotalLabourHoursUsd,
                        TotalMaterialsCad,
                        TotalMaterialsUsd,
                        TotalUnitsCad,
                        TotalUnitsUsd,
                        TotalOtherCostsCad,
                        TotalOtherCostsUsd,
                        GrandTotalCad,
                        GrandTotalUsd,
                        State,
                        Deleted,
                        COMPANY_ID,
                        TotalSubcontractorsCad,
                        TotalSubcontractorsUsd,
                        GrandRevenue,
                        GrandProfit,
                        GrandGrossMargin};
                rowLFS_PROJECT_COSTING_SHEETRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEETRow);
                return rowLFS_PROJECT_COSTING_SHEETRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEETRow FindByCostingSheetID(int CostingSheetID) {
                return ((LFS_PROJECT_COSTING_SHEETRow)(this.Rows.Find(new object[] {
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEETDataTable cln = ((LFS_PROJECT_COSTING_SHEETDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEETDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnTotalLabourHoursCad = base.Columns["TotalLabourHoursCad"];
                this.columnTotalLabourHoursUsd = base.Columns["TotalLabourHoursUsd"];
                this.columnTotalMaterialsCad = base.Columns["TotalMaterialsCad"];
                this.columnTotalMaterialsUsd = base.Columns["TotalMaterialsUsd"];
                this.columnTotalUnitsCad = base.Columns["TotalUnitsCad"];
                this.columnTotalUnitsUsd = base.Columns["TotalUnitsUsd"];
                this.columnTotalOtherCostsCad = base.Columns["TotalOtherCostsCad"];
                this.columnTotalOtherCostsUsd = base.Columns["TotalOtherCostsUsd"];
                this.columnGrandTotalCad = base.Columns["GrandTotalCad"];
                this.columnGrandTotalUsd = base.Columns["GrandTotalUsd"];
                this.columnState = base.Columns["State"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnTotalSubcontractorsCad = base.Columns["TotalSubcontractorsCad"];
                this.columnTotalSubcontractorsUsd = base.Columns["TotalSubcontractorsUsd"];
                this.columnGrandRevenue = base.Columns["GrandRevenue"];
                this.columnGrandProfit = base.Columns["GrandProfit"];
                this.columnGrandGrossMargin = base.Columns["GrandGrossMargin"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnTotalLabourHoursCad = new global::System.Data.DataColumn("TotalLabourHoursCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursCad);
                this.columnTotalLabourHoursUsd = new global::System.Data.DataColumn("TotalLabourHoursUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursUsd);
                this.columnTotalMaterialsCad = new global::System.Data.DataColumn("TotalMaterialsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsCad);
                this.columnTotalMaterialsUsd = new global::System.Data.DataColumn("TotalMaterialsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsUsd);
                this.columnTotalUnitsCad = new global::System.Data.DataColumn("TotalUnitsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsCad);
                this.columnTotalUnitsUsd = new global::System.Data.DataColumn("TotalUnitsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsUsd);
                this.columnTotalOtherCostsCad = new global::System.Data.DataColumn("TotalOtherCostsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsCad);
                this.columnTotalOtherCostsUsd = new global::System.Data.DataColumn("TotalOtherCostsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsUsd);
                this.columnGrandTotalCad = new global::System.Data.DataColumn("GrandTotalCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalCad);
                this.columnGrandTotalUsd = new global::System.Data.DataColumn("GrandTotalUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandTotalUsd);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnTotalSubcontractorsCad = new global::System.Data.DataColumn("TotalSubcontractorsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsCad);
                this.columnTotalSubcontractorsUsd = new global::System.Data.DataColumn("TotalSubcontractorsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsUsd);
                this.columnGrandRevenue = new global::System.Data.DataColumn("GrandRevenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandRevenue);
                this.columnGrandProfit = new global::System.Data.DataColumn("GrandProfit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandProfit);
                this.columnGrandGrossMargin = new global::System.Data.DataColumn("GrandGrossMargin", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandGrossMargin);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AutoIncrement = true;
                this.columnCostingSheetID.AutoIncrementSeed = -1;
                this.columnCostingSheetID.AutoIncrementStep = -1;
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.ReadOnly = true;
                this.columnCostingSheetID.Unique = true;
                this.columnProjectID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 150;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnTotalLabourHoursCad.AllowDBNull = false;
                this.columnTotalLabourHoursUsd.AllowDBNull = false;
                this.columnTotalMaterialsCad.AllowDBNull = false;
                this.columnTotalMaterialsUsd.AllowDBNull = false;
                this.columnTotalUnitsCad.AllowDBNull = false;
                this.columnTotalUnitsUsd.AllowDBNull = false;
                this.columnTotalOtherCostsCad.AllowDBNull = false;
                this.columnTotalOtherCostsUsd.AllowDBNull = false;
                this.columnGrandTotalCad.AllowDBNull = false;
                this.columnGrandTotalUsd.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnTotalSubcontractorsCad.AllowDBNull = false;
                this.columnTotalSubcontractorsUsd.AllowDBNull = false;
                this.columnGrandRevenue.AllowDBNull = false;
                this.columnGrandProfit.AllowDBNull = false;
                this.columnGrandGrossMargin.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEETRow NewLFS_PROJECT_COSTING_SHEETRow() {
                return ((LFS_PROJECT_COSTING_SHEETRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEETRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEETRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEETRowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEETRowChanged(this, new LFS_PROJECT_COSTING_SHEETRowChangeEvent(((LFS_PROJECT_COSTING_SHEETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEETRowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEETRowChanging(this, new LFS_PROJECT_COSTING_SHEETRowChangeEvent(((LFS_PROJECT_COSTING_SHEETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEETRowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEETRowDeleted(this, new LFS_PROJECT_COSTING_SHEETRowChangeEvent(((LFS_PROJECT_COSTING_SHEETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEETRowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEETRowDeleting(this, new LFS_PROJECT_COSTING_SHEETRowChangeEvent(((LFS_PROJECT_COSTING_SHEETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEETRow(LFS_PROJECT_COSTING_SHEETRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEETDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetTemplateID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRAData;
            
            private global::System.Data.DataColumn columnFLLData;
            
            private global::System.Data.DataColumn columnPRData;
            
            private global::System.Data.DataColumn columnJLData;
            
            private global::System.Data.DataColumn columnMRData;
            
            private global::System.Data.DataColumn columnMOBData;
            
            private global::System.Data.DataColumn columnOtherData;
            
            private global::System.Data.DataColumn columnLabourHourData;
            
            private global::System.Data.DataColumn columnUnitData;
            
            private global::System.Data.DataColumn columnMaterialData;
            
            private global::System.Data.DataColumn columnSubcontractorData;
            
            private global::System.Data.DataColumn columnMiscData;
            
            private global::System.Data.DataColumn columnRevenueIncluded;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnDay;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnMonth2;
            
            private global::System.Data.DataColumn columnDay2;
            
            private global::System.Data.DataColumn columnYear2;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable() {
                this.TableName = "LFS_PROJECT_COSTING_SHEET_TEMPLATE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetTemplateIDColumn {
                get {
                    return this.columnCostingSheetTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RADataColumn {
                get {
                    return this.columnRAData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLLDataColumn {
                get {
                    return this.columnFLLData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRDataColumn {
                get {
                    return this.columnPRData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JLDataColumn {
                get {
                    return this.columnJLData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MRDataColumn {
                get {
                    return this.columnMRData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOBDataColumn {
                get {
                    return this.columnMOBData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherDataColumn {
                get {
                    return this.columnOtherData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabourHourDataColumn {
                get {
                    return this.columnLabourHourData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDataColumn {
                get {
                    return this.columnUnitData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialDataColumn {
                get {
                    return this.columnMaterialData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorDataColumn {
                get {
                    return this.columnSubcontractorData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiscDataColumn {
                get {
                    return this.columnMiscData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueIncludedColumn {
                get {
                    return this.columnRevenueIncluded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayColumn {
                get {
                    return this.columnDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Month2Column {
                get {
                    return this.columnMonth2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Day2Column {
                get {
                    return this.columnDay2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Year2Column {
                get {
                    return this.columnYear2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_TEMPLATERow this[int index] {
                get {
                    return ((LFS_PROJECT_COSTING_SHEET_TEMPLATERow)(this.Rows[index]));
                }
            }
            
            public event LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_TEMPLATERowChanging;
            
            public event LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_TEMPLATERowChanged;
            
            public event LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_TEMPLATERowDeleting;
            
            public event LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEventHandler LFS_PROJECT_COSTING_SHEET_TEMPLATERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_PROJECT_COSTING_SHEET_TEMPLATERow(LFS_PROJECT_COSTING_SHEET_TEMPLATERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_TEMPLATERow AddLFS_PROJECT_COSTING_SHEET_TEMPLATERow(
                        string Name, 
                        bool RAData, 
                        bool FLLData, 
                        bool PRData, 
                        bool JLData, 
                        bool MRData, 
                        bool MOBData, 
                        bool OtherData, 
                        bool LabourHourData, 
                        bool UnitData, 
                        bool MaterialData, 
                        bool SubcontractorData, 
                        bool MiscData, 
                        bool RevenueIncluded, 
                        int Month, 
                        int Day, 
                        int Year, 
                        int Month2, 
                        int Day2, 
                        int Year2, 
                        bool Deleted, 
                        int COMPANY_ID) {
                LFS_PROJECT_COSTING_SHEET_TEMPLATERow rowLFS_PROJECT_COSTING_SHEET_TEMPLATERow = ((LFS_PROJECT_COSTING_SHEET_TEMPLATERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        RAData,
                        FLLData,
                        PRData,
                        JLData,
                        MRData,
                        MOBData,
                        OtherData,
                        LabourHourData,
                        UnitData,
                        MaterialData,
                        SubcontractorData,
                        MiscData,
                        RevenueIncluded,
                        Month,
                        Day,
                        Year,
                        Month2,
                        Day2,
                        Year2,
                        Deleted,
                        COMPANY_ID};
                rowLFS_PROJECT_COSTING_SHEET_TEMPLATERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_PROJECT_COSTING_SHEET_TEMPLATERow);
                return rowLFS_PROJECT_COSTING_SHEET_TEMPLATERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_TEMPLATERow FindByCostingSheetTemplateID(int CostingSheetTemplateID) {
                return ((LFS_PROJECT_COSTING_SHEET_TEMPLATERow)(this.Rows.Find(new object[] {
                            CostingSheetTemplateID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable cln = ((LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetTemplateID = base.Columns["CostingSheetTemplateID"];
                this.columnName = base.Columns["Name"];
                this.columnRAData = base.Columns["RAData"];
                this.columnFLLData = base.Columns["FLLData"];
                this.columnPRData = base.Columns["PRData"];
                this.columnJLData = base.Columns["JLData"];
                this.columnMRData = base.Columns["MRData"];
                this.columnMOBData = base.Columns["MOBData"];
                this.columnOtherData = base.Columns["OtherData"];
                this.columnLabourHourData = base.Columns["LabourHourData"];
                this.columnUnitData = base.Columns["UnitData"];
                this.columnMaterialData = base.Columns["MaterialData"];
                this.columnSubcontractorData = base.Columns["SubcontractorData"];
                this.columnMiscData = base.Columns["MiscData"];
                this.columnRevenueIncluded = base.Columns["RevenueIncluded"];
                this.columnMonth = base.Columns["Month"];
                this.columnDay = base.Columns["Day"];
                this.columnYear = base.Columns["Year"];
                this.columnMonth2 = base.Columns["Month2"];
                this.columnDay2 = base.Columns["Day2"];
                this.columnYear2 = base.Columns["Year2"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetTemplateID = new global::System.Data.DataColumn("CostingSheetTemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetTemplateID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRAData = new global::System.Data.DataColumn("RAData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAData);
                this.columnFLLData = new global::System.Data.DataColumn("FLLData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLLData);
                this.columnPRData = new global::System.Data.DataColumn("PRData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRData);
                this.columnJLData = new global::System.Data.DataColumn("JLData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJLData);
                this.columnMRData = new global::System.Data.DataColumn("MRData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRData);
                this.columnMOBData = new global::System.Data.DataColumn("MOBData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOBData);
                this.columnOtherData = new global::System.Data.DataColumn("OtherData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherData);
                this.columnLabourHourData = new global::System.Data.DataColumn("LabourHourData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabourHourData);
                this.columnUnitData = new global::System.Data.DataColumn("UnitData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitData);
                this.columnMaterialData = new global::System.Data.DataColumn("MaterialData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialData);
                this.columnSubcontractorData = new global::System.Data.DataColumn("SubcontractorData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorData);
                this.columnMiscData = new global::System.Data.DataColumn("MiscData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiscData);
                this.columnRevenueIncluded = new global::System.Data.DataColumn("RevenueIncluded", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenueIncluded);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnDay = new global::System.Data.DataColumn("Day", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnMonth2 = new global::System.Data.DataColumn("Month2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth2);
                this.columnDay2 = new global::System.Data.DataColumn("Day2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay2);
                this.columnYear2 = new global::System.Data.DataColumn("Year2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear2);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetTemplateID}, true));
                this.columnCostingSheetTemplateID.AutoIncrement = true;
                this.columnCostingSheetTemplateID.AutoIncrementSeed = -1;
                this.columnCostingSheetTemplateID.AutoIncrementStep = -1;
                this.columnCostingSheetTemplateID.AllowDBNull = false;
                this.columnCostingSheetTemplateID.ReadOnly = true;
                this.columnCostingSheetTemplateID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnRAData.AllowDBNull = false;
                this.columnFLLData.AllowDBNull = false;
                this.columnPRData.AllowDBNull = false;
                this.columnJLData.AllowDBNull = false;
                this.columnMRData.AllowDBNull = false;
                this.columnMOBData.AllowDBNull = false;
                this.columnOtherData.AllowDBNull = false;
                this.columnLabourHourData.AllowDBNull = false;
                this.columnUnitData.AllowDBNull = false;
                this.columnMaterialData.AllowDBNull = false;
                this.columnSubcontractorData.AllowDBNull = false;
                this.columnMiscData.AllowDBNull = false;
                this.columnRevenueIncluded.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_TEMPLATERow NewLFS_PROJECT_COSTING_SHEET_TEMPLATERow() {
                return ((LFS_PROJECT_COSTING_SHEET_TEMPLATERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_PROJECT_COSTING_SHEET_TEMPLATERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_PROJECT_COSTING_SHEET_TEMPLATERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_TEMPLATERowChanged != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_TEMPLATERowChanged(this, new LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_TEMPLATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_TEMPLATERowChanging != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_TEMPLATERowChanging(this, new LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_TEMPLATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_TEMPLATERowDeleted != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_TEMPLATERowDeleted(this, new LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_TEMPLATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_PROJECT_COSTING_SHEET_TEMPLATERowDeleting != null)) {
                    this.LFS_PROJECT_COSTING_SHEET_TEMPLATERowDeleting(this, new LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEvent(((LFS_PROJECT_COSTING_SHEET_TEMPLATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_PROJECT_COSTING_SHEET_TEMPLATERow(LFS_PROJECT_COSTING_SHEET_TEMPLATERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetTDS ds = new ProjectCostingSheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT = ((LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.COMPANY_IDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEETRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEETDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEETRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COMBINED_COSTING_SHEET = ((LFS_PROJECT_COMBINED_COSTING_SHEETDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.ClientIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.NameColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.StartDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.EndDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalLabourHoursCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalLabourHoursCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalLabourHoursUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalLabourHoursUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalMaterialsCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalMaterialsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalMaterialsUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalMaterialsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalUnitsCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalUnitsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalUnitsUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalUnitsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalOtherCostsCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalOtherCostsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalOtherCostsUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalOtherCostsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandTotalCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandTotalCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandTotalUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandTotalUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.StateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalSubcontractorsCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalSubcontractorsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalSubcontractorsUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.TotalSubcontractorsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandRevenue {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandRevenueColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandProfit {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandProfitColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandGrossMargin {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandGrossMarginColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.GrandGrossMarginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CombinedProjects {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.CombinedProjectsColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET.CombinedProjectsColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS = ((LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.Work_Column]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.EmployeeIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LHQuantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.LHQuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.LHQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LHUnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.LHUnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.LHUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MealsUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsUnitOfMeasurement\' in table \'LFS_PROJECT_COMBINED_COST" +
                                "ING_SHEET_LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MealsQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsQuantity\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET" +
                                "_LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MotelUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelUnitOfMeasurement\' in table \'LFS_PROJECT_COMBINED_COST" +
                                "ING_SHEET_LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MotelQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelQuantity\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET" +
                                "_LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.LHCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.LHCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostCad\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_" +
                                "LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostCad\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_" +
                                "LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.LHCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.LHCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostUsd\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_" +
                                "LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostUsd\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_" +
                                "LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_LAB" +
                                "OUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_LABOU" +
                                "R_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_LAB" +
                                "OUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsUnitOfMeasurementNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsUnitOfMeasurementNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsQuantityNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsQuantityNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelUnitOfMeasurementNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelUnitOfMeasurementNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelQuantityNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelQuantityNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostCadNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostCadNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostCadNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostCadNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostUsdNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostUsdNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MealsCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostUsdNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostUsdNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.MotelCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS = ((LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.Work_Column]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.QuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_UNI" +
                                "TS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_UNI" +
                                "TS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL = ((LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.MaterialIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.QuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_MAT" +
                                "ERIAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_MATER" +
                                "IAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_MAT" +
                                "ERIAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR = ((LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubcontractorID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.SubcontractorIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.SubcontractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.QuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_SUB" +
                                "CONTRACTOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCO" +
                                "NTRACTOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCO" +
                                "NTRACTOR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE = ((LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefIDRevenue {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.RefIDRevenueColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.RefIDRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Revenue {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.RevenueColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.RevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_REVEN" +
                                "UE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_REV" +
                                "ENUE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_REVEN" +
                                "UE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS = ((LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_C" +
                                "OSTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_OTH" +
                                "ER_COSTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.DescriptionColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.QuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_OTH" +
                                "ER_COSTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER" +
                                "_COSTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY = ((LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.CategoryColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.StartDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.EndDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.RateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_INSURANCERow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable tableLFS_PROJECT_COSTING_SHEET_INSURANCE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_INSURANCERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE = ((LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsuranceCompanyID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.InsuranceCompanyIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.InsuranceCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.StartDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.EndDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.RateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'LFS_PROJECT_COSTING_SHEET_INSURANCE\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_INSURANCE.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_BONDINGRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_BONDINGDataTable tableLFS_PROJECT_COSTING_SHEET_BONDING;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_BONDINGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_BONDING = ((LFS_PROJECT_COSTING_SHEET_BONDINGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BondingCompanyID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.BondingCompanyIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.BondingCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.StartDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.EndDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.RateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMPANY_ID {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'LFS_PROJECT_COSTING_SHEET_BONDING\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_BONDING.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_BONDING.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_HOTELRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_HOTELDataTable tableLFS_PROJECT_COSTING_SHEET_HOTEL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_HOTELRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_HOTEL = ((LFS_PROJECT_COSTING_SHEET_HOTELDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HotelID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.HotelIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.HotelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.StartDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.EndDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.RateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'LFS_PROJECT_COSTING_SHEET_HOTEL\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_HOTEL.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS = ((LFS_PROJECT_COSTING_SHEET_OTHER_COSTSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'LFS_PROJECT_COSTING_SHEET_OTHER_COSTS\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LFS_PROJECT_COSTING_SHEET_OTHER_COSTS\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.DescriptionColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.QuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COSTING_SHEET_OTHER_COSTS\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COSTING_SHEET_OTHER_COSTS\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_OTHER_COSTS.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_MATERIALRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_MATERIALDataTable tableLFS_PROJECT_COSTING_SHEET_MATERIAL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_MATERIALRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL = ((LFS_PROJECT_COSTING_SHEET_MATERIALDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.MaterialIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.QuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COSTING_SHEET_MATERIAL\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COSTING_SHEET_MATERIAL\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LFS_PROJECT_COSTING_SHEET_MATERIAL\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_MATERIAL.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_UNITSRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_UNITSDataTable tableLFS_PROJECT_COSTING_SHEET_UNITS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_UNITSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_UNITS = ((LFS_PROJECT_COSTING_SHEET_UNITSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.Work_Column]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.UnitIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.QuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COSTING_SHEET_UNITS\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COSTING_SHEET_UNITS\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LFS_PROJECT_COSTING_SHEET_UNITS\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_UNITS.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_UNITS.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_UNITS.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_UNITS.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS = ((LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.Work_Column]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.EmployeeIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LHQuantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.LHQuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.LHQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LHUnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.LHUnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.LHUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MealsUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsUnitOfMeasurement\' in table \'LFS_PROJECT_COSTING_SHEET" +
                                "_LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MealsQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsQuantity\' in table \'LFS_PROJECT_COSTING_SHEET_LABOUR_H" +
                                "OURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MotelUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelUnitOfMeasurement\' in table \'LFS_PROJECT_COSTING_SHEET" +
                                "_LABOUR_HOURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MotelQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelQuantity\' in table \'LFS_PROJECT_COSTING_SHEET_LABOUR_H" +
                                "OURS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.LHCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.LHCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostCad\' in table \'LFS_PROJECT_COSTING_SHEET_LABOUR_HO" +
                                "URS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostCad\' in table \'LFS_PROJECT_COSTING_SHEET_LABOUR_HO" +
                                "URS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.LHCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.LHCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostUsd\' in table \'LFS_PROJECT_COSTING_SHEET_LABOUR_HO" +
                                "URS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostUsd\' in table \'LFS_PROJECT_COSTING_SHEET_LABOUR_HO" +
                                "URS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LFS_PROJECT_COSTING_SHEET_LABOUR_HOURS" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsUnitOfMeasurementNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsUnitOfMeasurementNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsQuantityNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsQuantityNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelUnitOfMeasurementNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelUnitOfMeasurementNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelQuantityNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelQuantityNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostCadNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostCadNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostCadNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostCadNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostUsdNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostUsdNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MealsCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostUsdNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostUsdNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.MotelCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_LABOUR_HOURS.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR = ((LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubcontractorID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.SubcontractorIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.SubcontractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.QuantityColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COSTING_SHEET_SUBCONTRACTO" +
                                "R\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'LFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_SUBCONTRACTOR.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_REVENUERow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_REVENUEDataTable tableLFS_PROJECT_COSTING_SHEET_REVENUE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_REVENUERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_REVENUE = ((LFS_PROJECT_COSTING_SHEET_REVENUEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefIDRevenue {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.RefIDRevenueColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.RefIDRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Revenue {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.RevenueColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.RevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'LFS_PROJECT_COSTING_SHEET_REVENUE\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LFS_PROJECT_COSTING_SHEET_REVENUE\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LFS_PROJECT_COSTING_SHEET_REVENUE\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_REVENUE.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEETRow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEETDataTable tableLFS_PROJECT_COSTING_SHEET;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEETRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET = ((LFS_PROJECT_COSTING_SHEETDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET.ProjectIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET.NameColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET.StartDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_PROJECT_COSTING_SHEET.EndDateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalLabourHoursCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalLabourHoursCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalLabourHoursUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalLabourHoursUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalMaterialsCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalMaterialsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalMaterialsUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalMaterialsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalUnitsCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalUnitsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalUnitsUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalUnitsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalOtherCostsCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalOtherCostsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalOtherCostsUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalOtherCostsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.GrandTotalCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.GrandTotalCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandTotalUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.GrandTotalUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.GrandTotalUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET.StateColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsCad {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalSubcontractorsCadColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalSubcontractorsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsUsd {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.TotalSubcontractorsUsdColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.TotalSubcontractorsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandRevenue {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.GrandRevenueColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.GrandRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandProfit {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.GrandProfitColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.GrandProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandGrossMargin {
                get {
                    return ((decimal)(this[this.tableLFS_PROJECT_COSTING_SHEET.GrandGrossMarginColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET.GrandGrossMarginColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_PROJECT_COSTING_SHEET_TEMPLATERow : global::System.Data.DataRow {
            
            private LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable tableLFS_PROJECT_COSTING_SHEET_TEMPLATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_PROJECT_COSTING_SHEET_TEMPLATERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE = ((LFS_PROJECT_COSTING_SHEET_TEMPLATEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetTemplateID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.CostingSheetTemplateIDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.CostingSheetTemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.NameColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RAData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.RADataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.RADataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FLLData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.FLLDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.FLLDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PRData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.PRDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.PRDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool JLData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.JLDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.JLDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MRData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MRDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MRDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MOBData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MOBDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MOBDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OtherData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.OtherDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.OtherDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LabourHourData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.LabourHourDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.LabourHourDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UnitData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.UnitDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.UnitDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MaterialData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MaterialDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MaterialDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SubcontractorData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.SubcontractorDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.SubcontractorDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MiscData {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MiscDataColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MiscDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RevenueIncluded {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.RevenueIncludedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.RevenueIncludedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Month {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'LFS_PROJECT_COSTING_SHEET_TEMPLATE\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Day {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.DayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Day\' in table \'LFS_PROJECT_COSTING_SHEET_TEMPLATE\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'LFS_PROJECT_COSTING_SHEET_TEMPLATE\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Month2 {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Month2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month2\' in table \'LFS_PROJECT_COSTING_SHEET_TEMPLATE\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Month2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Day2 {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Day2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Day2\' in table \'LFS_PROJECT_COSTING_SHEET_TEMPLATE\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Day2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year2 {
                get {
                    try {
                        return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Year2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year2\' in table \'LFS_PROJECT_COSTING_SHEET_TEMPLATE\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Year2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.DayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.DayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonth2Null() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Month2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonth2Null() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Month2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDay2Null() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Day2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDay2Null() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Day2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYear2Null() {
                return this.IsNull(this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Year2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYear2Null() {
                this[this.tableLFS_PROJECT_COSTING_SHEET_TEMPLATE.Year2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRowChangeEvent(LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEETRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEETRowChangeEvent(LFS_PROJECT_COMBINED_COSTING_SHEETRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEETRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRowChangeEvent(LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRowChangeEvent(LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERowChangeEvent(LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRowChangeEvent(LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRowChangeEvent(LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_INSURANCERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_INSURANCERowChangeEvent(LFS_PROJECT_COSTING_SHEET_INSURANCERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_INSURANCERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_BONDINGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_BONDINGRowChangeEvent(LFS_PROJECT_COSTING_SHEET_BONDINGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_BONDINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_HOTELRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_HOTELRowChangeEvent(LFS_PROJECT_COSTING_SHEET_HOTELRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_HOTELRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRowChangeEvent(LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_OTHER_COSTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_MATERIALRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_MATERIALRowChangeEvent(LFS_PROJECT_COSTING_SHEET_MATERIALRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_MATERIALRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_UNITSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_UNITSRowChangeEvent(LFS_PROJECT_COSTING_SHEET_UNITSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_UNITSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRowChangeEvent(LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_LABOUR_HOURSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRowChangeEvent(LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_SUBCONTRACTORRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_REVENUERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_REVENUERowChangeEvent(LFS_PROJECT_COSTING_SHEET_REVENUERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_REVENUERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEETRowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEETRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEETRowChangeEvent(LFS_PROJECT_COSTING_SHEETRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEETRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEvent : global::System.EventArgs {
            
            private LFS_PROJECT_COSTING_SHEET_TEMPLATERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_TEMPLATERowChangeEvent(LFS_PROJECT_COSTING_SHEET_TEMPLATERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_PROJECT_COSTING_SHEET_TEMPLATERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace LiquiForce.LFSLive.DA.Projects.Projects.ProjectCostingSheetTDSTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT] WHERE (([CostingSh" +
                "eetID] = @Original_CostingSheetID) AND ([ProjectID] = @Original_ProjectID) AND (" +
                "[Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT] ([CostingSheetID], [ProjectID], [Deleted], [COMPANY_ID]) VALUES (@CostingSheetID, @ProjectID, @Deleted, @COMPANY_ID);
SELECT CostingSheetID, ProjectID, Deleted, COMPANY_ID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT WHERE (CostingSheetID = @CostingSheetID) AND (ProjectID = @ProjectID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT] SET [CostingSheetID] = @CostingSheetID, [ProjectID] = @ProjectID, [Deleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([ProjectID] = @Original_ProjectID) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID));
SELECT CostingSheetID, ProjectID, Deleted, COMPANY_ID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT WHERE (CostingSheetID = @CostingSheetID) AND (ProjectID = @ProjectID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, ProjectID, Deleted, COMPANY_ID FROM dbo.LFS_PROJECT_COMBIN" +
                "ED_COSTING_SHEET_PROJECT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CostingSheetID, int Original_ProjectID, bool Original_Deleted, int Original_COMPANY_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ProjectID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_COMPANY_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CostingSheetID, int ProjectID, bool Deleted, int COMPANY_ID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ProjectID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(COMPANY_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int CostingSheetID, int ProjectID, bool Deleted, int COMPANY_ID, int Original_CostingSheetID, int Original_ProjectID, bool Original_Deleted, int Original_COMPANY_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ProjectID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(COMPANY_ID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ProjectID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_COMPANY_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(bool Deleted, int COMPANY_ID, int Original_CostingSheetID, int Original_ProjectID, bool Original_Deleted, int Original_COMPANY_ID) {
            return this.Update(Original_CostingSheetID, Original_ProjectID, Deleted, COMPANY_ID, Original_CostingSheetID, Original_ProjectID, Original_Deleted, Original_COMPANY_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COMBINED_COSTING_SHEET";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("ClientID", "ClientID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("TotalLabourHoursCad", "TotalLabourHoursCad");
            tableMapping.ColumnMappings.Add("TotalLabourHoursUsd", "TotalLabourHoursUsd");
            tableMapping.ColumnMappings.Add("TotalMaterialsCad", "TotalMaterialsCad");
            tableMapping.ColumnMappings.Add("TotalMaterialsUsd", "TotalMaterialsUsd");
            tableMapping.ColumnMappings.Add("TotalUnitsCad", "TotalUnitsCad");
            tableMapping.ColumnMappings.Add("TotalUnitsUsd", "TotalUnitsUsd");
            tableMapping.ColumnMappings.Add("TotalOtherCostsCad", "TotalOtherCostsCad");
            tableMapping.ColumnMappings.Add("TotalOtherCostsUsd", "TotalOtherCostsUsd");
            tableMapping.ColumnMappings.Add("GrandTotalCad", "GrandTotalCad");
            tableMapping.ColumnMappings.Add("GrandTotalUsd", "GrandTotalUsd");
            tableMapping.ColumnMappings.Add("State", "State");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("TotalSubcontractorsCad", "TotalSubcontractorsCad");
            tableMapping.ColumnMappings.Add("TotalSubcontractorsUsd", "TotalSubcontractorsUsd");
            tableMapping.ColumnMappings.Add("GrandRevenue", "GrandRevenue");
            tableMapping.ColumnMappings.Add("GrandProfit", "GrandProfit");
            tableMapping.ColumnMappings.Add("GrandGrossMargin", "GrandGrossMargin");
            tableMapping.ColumnMappings.Add("CombinedProjects", "CombinedProjects");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([ClientID] = @Original_ClientID) AND ([Name] = @Original_Name) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Original_EndDate) AND ([TotalLabourHoursCad] = @Original_TotalLabourHoursCad) AND ([TotalLabourHoursUsd] = @Original_TotalLabourHoursUsd) AND ([TotalMaterialsCad] = @Original_TotalMaterialsCad) AND ([TotalMaterialsUsd] = @Original_TotalMaterialsUsd) AND ([TotalUnitsCad] = @Original_TotalUnitsCad) AND ([TotalUnitsUsd] = @Original_TotalUnitsUsd) AND ([TotalOtherCostsCad] = @Original_TotalOtherCostsCad) AND ([TotalOtherCostsUsd] = @Original_TotalOtherCostsUsd) AND ([GrandTotalCad] = @Original_GrandTotalCad) AND ([GrandTotalUsd] = @Original_GrandTotalUsd) AND ([State] = @Original_State) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ([TotalSubcontractorsCad] = @Original_TotalSubcontractorsCad) AND ([TotalSubcontractorsUsd] = @Original_TotalSubcontractorsUsd) AND ([GrandRevenue] = @Original_GrandRevenue) AND ([GrandProfit] = @Original_GrandProfit) AND ([GrandGrossMargin] = @Original_GrandGrossMargin) AND ([CombinedProjects] = @Original_CombinedProjects))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClientID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalLabourHoursCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalLabourHoursCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalLabourHoursUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalLabourHoursUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalMaterialsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalMaterialsCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalMaterialsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalMaterialsUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalUnitsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalUnitsCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalUnitsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalUnitsUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalOtherCostsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalOtherCostsCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalOtherCostsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalOtherCostsUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandTotalCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandTotalCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandTotalUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandTotalUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalSubcontractorsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSubcontractorsCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalSubcontractorsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSubcontractorsUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandRevenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandRevenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandProfit", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandProfit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandGrossMargin", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandGrossMargin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CombinedProjects", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CombinedProjects", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET] ([ClientID], [Name], [StartDate], [EndDate], [TotalLabourHoursCad], [TotalLabourHoursUsd], [TotalMaterialsCad], [TotalMaterialsUsd], [TotalUnitsCad], [TotalUnitsUsd], [TotalOtherCostsCad], [TotalOtherCostsUsd], [GrandTotalCad], [GrandTotalUsd], [State], [Deleted], [COMPANY_ID], [TotalSubcontractorsCad], [TotalSubcontractorsUsd], [GrandRevenue], [GrandProfit], [GrandGrossMargin], [CombinedProjects]) VALUES (@ClientID, @Name, @StartDate, @EndDate, @TotalLabourHoursCad, @TotalLabourHoursUsd, @TotalMaterialsCad, @TotalMaterialsUsd, @TotalUnitsCad, @TotalUnitsUsd, @TotalOtherCostsCad, @TotalOtherCostsUsd, @GrandTotalCad, @GrandTotalUsd, @State, @Deleted, @COMPANY_ID, @TotalSubcontractorsCad, @TotalSubcontractorsUsd, @GrandRevenue, @GrandProfit, @GrandGrossMargin, @CombinedProjects);
SELECT CostingSheetID, ClientID, Name, StartDate, EndDate, TotalLabourHoursCad, TotalLabourHoursUsd, TotalMaterialsCad, TotalMaterialsUsd, TotalUnitsCad, TotalUnitsUsd, TotalOtherCostsCad, TotalOtherCostsUsd, GrandTotalCad, GrandTotalUsd, State, Deleted, COMPANY_ID, TotalSubcontractorsCad, TotalSubcontractorsUsd, GrandRevenue, GrandProfit, GrandGrossMargin, CombinedProjects FROM LFS_PROJECT_COMBINED_COSTING_SHEET WHERE (CostingSheetID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalLabourHoursCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalLabourHoursCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalLabourHoursUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalLabourHoursUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalMaterialsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalMaterialsCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalMaterialsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalMaterialsUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalUnitsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalUnitsCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalUnitsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalUnitsUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalOtherCostsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalOtherCostsCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalOtherCostsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalOtherCostsUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandTotalCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandTotalCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandTotalUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandTotalUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalSubcontractorsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSubcontractorsCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalSubcontractorsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSubcontractorsUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandRevenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandRevenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandProfit", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandProfit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandGrossMargin", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandGrossMargin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CombinedProjects", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CombinedProjects", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET] SET [ClientID] = @ClientID, [Na" +
                "me] = @Name, [StartDate] = @StartDate, [EndDate] = @EndDate, [TotalLabourHoursCa" +
                "d] = @TotalLabourHoursCad, [TotalLabourHoursUsd] = @TotalLabourHoursUsd, [TotalM" +
                "aterialsCad] = @TotalMaterialsCad, [TotalMaterialsUsd] = @TotalMaterialsUsd, [To" +
                "talUnitsCad] = @TotalUnitsCad, [TotalUnitsUsd] = @TotalUnitsUsd, [TotalOtherCost" +
                "sCad] = @TotalOtherCostsCad, [TotalOtherCostsUsd] = @TotalOtherCostsUsd, [GrandT" +
                "otalCad] = @GrandTotalCad, [GrandTotalUsd] = @GrandTotalUsd, [State] = @State, [" +
                "Deleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID, [TotalSubcontractorsCad] = @Tot" +
                "alSubcontractorsCad, [TotalSubcontractorsUsd] = @TotalSubcontractorsUsd, [GrandR" +
                "evenue] = @GrandRevenue, [GrandProfit] = @GrandProfit, [GrandGrossMargin] = @Gra" +
                "ndGrossMargin, [CombinedProjects] = @CombinedProjects WHERE (([CostingSheetID] =" +
                " @Original_CostingSheetID) AND ([ClientID] = @Original_ClientID) AND ([Name] = @" +
                "Original_Name) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Origina" +
                "l_EndDate) AND ([TotalLabourHoursCad] = @Original_TotalLabourHoursCad) AND ([Tot" +
                "alLabourHoursUsd] = @Original_TotalLabourHoursUsd) AND ([TotalMaterialsCad] = @O" +
                "riginal_TotalMaterialsCad) AND ([TotalMaterialsUsd] = @Original_TotalMaterialsUs" +
                "d) AND ([TotalUnitsCad] = @Original_TotalUnitsCad) AND ([TotalUnitsUsd] = @Origi" +
                "nal_TotalUnitsUsd) AND ([TotalOtherCostsCad] = @Original_TotalOtherCostsCad) AND" +
                " ([TotalOtherCostsUsd] = @Original_TotalOtherCostsUsd) AND ([GrandTotalCad] = @O" +
                "riginal_GrandTotalCad) AND ([GrandTotalUsd] = @Original_GrandTotalUsd) AND ([Sta" +
                "te] = @Original_State) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @" +
                "Original_COMPANY_ID) AND ([TotalSubcontractorsCad] = @Original_TotalSubcontracto" +
                "rsCad) AND ([TotalSubcontractorsUsd] = @Original_TotalSubcontractorsUsd) AND ([G" +
                "randRevenue] = @Original_GrandRevenue) AND ([GrandProfit] = @Original_GrandProfi" +
                "t) AND ([GrandGrossMargin] = @Original_GrandGrossMargin) AND ([CombinedProjects]" +
                " = @Original_CombinedProjects));\r\nSELECT CostingSheetID, ClientID, Name, StartDa" +
                "te, EndDate, TotalLabourHoursCad, TotalLabourHoursUsd, TotalMaterialsCad, TotalM" +
                "aterialsUsd, TotalUnitsCad, TotalUnitsUsd, TotalOtherCostsCad, TotalOtherCostsUs" +
                "d, GrandTotalCad, GrandTotalUsd, State, Deleted, COMPANY_ID, TotalSubcontractors" +
                "Cad, TotalSubcontractorsUsd, GrandRevenue, GrandProfit, GrandGrossMargin, Combin" +
                "edProjects FROM LFS_PROJECT_COMBINED_COSTING_SHEET WHERE (CostingSheetID = @Cost" +
                "ingSheetID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClientID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalLabourHoursCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalLabourHoursCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalLabourHoursUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalLabourHoursUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalMaterialsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalMaterialsCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalMaterialsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalMaterialsUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalUnitsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalUnitsCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalUnitsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalUnitsUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalOtherCostsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalOtherCostsCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalOtherCostsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalOtherCostsUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandTotalCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandTotalCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandTotalUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandTotalUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@State", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalSubcontractorsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSubcontractorsCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalSubcontractorsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSubcontractorsUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandRevenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandRevenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandProfit", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandProfit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrandGrossMargin", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandGrossMargin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CombinedProjects", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CombinedProjects", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClientID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClientID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalLabourHoursCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalLabourHoursCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalLabourHoursUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalLabourHoursUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalMaterialsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalMaterialsCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalMaterialsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalMaterialsUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalUnitsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalUnitsCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalUnitsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalUnitsUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalOtherCostsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalOtherCostsCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalOtherCostsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalOtherCostsUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandTotalCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandTotalCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandTotalUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandTotalUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_State", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "State", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalSubcontractorsCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSubcontractorsCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalSubcontractorsUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalSubcontractorsUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandRevenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandRevenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandProfit", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandProfit", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrandGrossMargin", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GrandGrossMargin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CombinedProjects", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CombinedProjects", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT CostingSheetID, ClientID, Name, StartDate, EndDate, TotalLabourHoursCad, TotalLabourHoursUsd, TotalMaterialsCad, TotalMaterialsUsd, TotalUnitsCad, TotalUnitsUsd, TotalOtherCostsCad, TotalOtherCostsUsd, GrandTotalCad, GrandTotalUsd, State, Deleted, COMPANY_ID, TotalSubcontractorsCad, TotalSubcontractorsUsd, GrandRevenue, GrandProfit, GrandGrossMargin, CombinedProjects FROM dbo.LFS_PROJECT_COMBINED_COSTING_SHEET";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEETDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEETDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEETDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEETDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEETDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COMBINED_COSTING_SHEET");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_CostingSheetID, 
                    int Original_ClientID, 
                    string Original_Name, 
                    System.DateTime Original_StartDate, 
                    System.DateTime Original_EndDate, 
                    decimal Original_TotalLabourHoursCad, 
                    decimal Original_TotalLabourHoursUsd, 
                    decimal Original_TotalMaterialsCad, 
                    decimal Original_TotalMaterialsUsd, 
                    decimal Original_TotalUnitsCad, 
                    decimal Original_TotalUnitsUsd, 
                    decimal Original_TotalOtherCostsCad, 
                    decimal Original_TotalOtherCostsUsd, 
                    decimal Original_GrandTotalCad, 
                    decimal Original_GrandTotalUsd, 
                    string Original_State, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    decimal Original_TotalSubcontractorsCad, 
                    decimal Original_TotalSubcontractorsUsd, 
                    decimal Original_GrandRevenue, 
                    decimal Original_GrandProfit, 
                    decimal Original_GrandGrossMargin, 
                    string Original_CombinedProjects) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_ClientID));
            if ((Original_Name == null)) {
                throw new global::System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_TotalLabourHoursCad));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_TotalLabourHoursUsd));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_TotalMaterialsCad));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_TotalMaterialsUsd));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_TotalUnitsCad));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_TotalUnitsUsd));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_TotalOtherCostsCad));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_TotalOtherCostsUsd));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((decimal)(Original_GrandTotalCad));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_GrandTotalUsd));
            if ((Original_State == null)) {
                throw new global::System.ArgumentNullException("Original_State");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_State));
            }
            this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((int)(Original_COMPANY_ID));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((decimal)(Original_TotalSubcontractorsCad));
            this.Adapter.DeleteCommand.Parameters[19].Value = ((decimal)(Original_TotalSubcontractorsUsd));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((decimal)(Original_GrandRevenue));
            this.Adapter.DeleteCommand.Parameters[21].Value = ((decimal)(Original_GrandProfit));
            this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_GrandGrossMargin));
            if ((Original_CombinedProjects == null)) {
                throw new global::System.ArgumentNullException("Original_CombinedProjects");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((string)(Original_CombinedProjects));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int ClientID, 
                    string Name, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    decimal TotalLabourHoursCad, 
                    decimal TotalLabourHoursUsd, 
                    decimal TotalMaterialsCad, 
                    decimal TotalMaterialsUsd, 
                    decimal TotalUnitsCad, 
                    decimal TotalUnitsUsd, 
                    decimal TotalOtherCostsCad, 
                    decimal TotalOtherCostsUsd, 
                    decimal GrandTotalCad, 
                    decimal GrandTotalUsd, 
                    string State, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    decimal TotalSubcontractorsCad, 
                    decimal TotalSubcontractorsUsd, 
                    decimal GrandRevenue, 
                    decimal GrandProfit, 
                    decimal GrandGrossMargin, 
                    string CombinedProjects) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ClientID));
            if ((Name == null)) {
                throw new global::System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(StartDate));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(EndDate));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(TotalLabourHoursCad));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(TotalLabourHoursUsd));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(TotalMaterialsCad));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(TotalMaterialsUsd));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(TotalUnitsCad));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(TotalUnitsUsd));
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(TotalOtherCostsCad));
            this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(TotalOtherCostsUsd));
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(GrandTotalCad));
            this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(GrandTotalUsd));
            if ((State == null)) {
                throw new global::System.ArgumentNullException("State");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(State));
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[16].Value = ((int)(COMPANY_ID));
            this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(TotalSubcontractorsCad));
            this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(TotalSubcontractorsUsd));
            this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(GrandRevenue));
            this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(GrandProfit));
            this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(GrandGrossMargin));
            if ((CombinedProjects == null)) {
                throw new global::System.ArgumentNullException("CombinedProjects");
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(CombinedProjects));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ClientID, 
                    string Name, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    decimal TotalLabourHoursCad, 
                    decimal TotalLabourHoursUsd, 
                    decimal TotalMaterialsCad, 
                    decimal TotalMaterialsUsd, 
                    decimal TotalUnitsCad, 
                    decimal TotalUnitsUsd, 
                    decimal TotalOtherCostsCad, 
                    decimal TotalOtherCostsUsd, 
                    decimal GrandTotalCad, 
                    decimal GrandTotalUsd, 
                    string State, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    decimal TotalSubcontractorsCad, 
                    decimal TotalSubcontractorsUsd, 
                    decimal GrandRevenue, 
                    decimal GrandProfit, 
                    decimal GrandGrossMargin, 
                    string CombinedProjects, 
                    int Original_CostingSheetID, 
                    int Original_ClientID, 
                    string Original_Name, 
                    System.DateTime Original_StartDate, 
                    System.DateTime Original_EndDate, 
                    decimal Original_TotalLabourHoursCad, 
                    decimal Original_TotalLabourHoursUsd, 
                    decimal Original_TotalMaterialsCad, 
                    decimal Original_TotalMaterialsUsd, 
                    decimal Original_TotalUnitsCad, 
                    decimal Original_TotalUnitsUsd, 
                    decimal Original_TotalOtherCostsCad, 
                    decimal Original_TotalOtherCostsUsd, 
                    decimal Original_GrandTotalCad, 
                    decimal Original_GrandTotalUsd, 
                    string Original_State, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    decimal Original_TotalSubcontractorsCad, 
                    decimal Original_TotalSubcontractorsUsd, 
                    decimal Original_GrandRevenue, 
                    decimal Original_GrandProfit, 
                    decimal Original_GrandGrossMargin, 
                    string Original_CombinedProjects, 
                    int CostingSheetID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ClientID));
            if ((Name == null)) {
                throw new global::System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(StartDate));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(EndDate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(TotalLabourHoursCad));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(TotalLabourHoursUsd));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(TotalMaterialsCad));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(TotalMaterialsUsd));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(TotalUnitsCad));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(TotalUnitsUsd));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(TotalOtherCostsCad));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(TotalOtherCostsUsd));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(GrandTotalCad));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(GrandTotalUsd));
            if ((State == null)) {
                throw new global::System.ArgumentNullException("State");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(State));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(COMPANY_ID));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(TotalSubcontractorsCad));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(TotalSubcontractorsUsd));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(GrandRevenue));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(GrandProfit));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(GrandGrossMargin));
            if ((CombinedProjects == null)) {
                throw new global::System.ArgumentNullException("CombinedProjects");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(CombinedProjects));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_ClientID));
            if ((Original_Name == null)) {
                throw new global::System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(Original_TotalLabourHoursCad));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(Original_TotalLabourHoursUsd));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(Original_TotalMaterialsCad));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(Original_TotalMaterialsUsd));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((decimal)(Original_TotalUnitsCad));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((decimal)(Original_TotalUnitsUsd));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(Original_TotalOtherCostsCad));
            this.Adapter.UpdateCommand.Parameters[35].Value = ((decimal)(Original_TotalOtherCostsUsd));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(Original_GrandTotalCad));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((decimal)(Original_GrandTotalUsd));
            if ((Original_State == null)) {
                throw new global::System.ArgumentNullException("Original_State");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_State));
            }
            this.Adapter.UpdateCommand.Parameters[39].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(Original_COMPANY_ID));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((decimal)(Original_TotalSubcontractorsCad));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((decimal)(Original_TotalSubcontractorsUsd));
            this.Adapter.UpdateCommand.Parameters[43].Value = ((decimal)(Original_GrandRevenue));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((decimal)(Original_GrandProfit));
            this.Adapter.UpdateCommand.Parameters[45].Value = ((decimal)(Original_GrandGrossMargin));
            if ((Original_CombinedProjects == null)) {
                throw new global::System.ArgumentNullException("Original_CombinedProjects");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((string)(Original_CombinedProjects));
            }
            this.Adapter.UpdateCommand.Parameters[47].Value = ((int)(CostingSheetID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ClientID, 
                    string Name, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    decimal TotalLabourHoursCad, 
                    decimal TotalLabourHoursUsd, 
                    decimal TotalMaterialsCad, 
                    decimal TotalMaterialsUsd, 
                    decimal TotalUnitsCad, 
                    decimal TotalUnitsUsd, 
                    decimal TotalOtherCostsCad, 
                    decimal TotalOtherCostsUsd, 
                    decimal GrandTotalCad, 
                    decimal GrandTotalUsd, 
                    string State, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    decimal TotalSubcontractorsCad, 
                    decimal TotalSubcontractorsUsd, 
                    decimal GrandRevenue, 
                    decimal GrandProfit, 
                    decimal GrandGrossMargin, 
                    string CombinedProjects, 
                    int Original_CostingSheetID, 
                    int Original_ClientID, 
                    string Original_Name, 
                    System.DateTime Original_StartDate, 
                    System.DateTime Original_EndDate, 
                    decimal Original_TotalLabourHoursCad, 
                    decimal Original_TotalLabourHoursUsd, 
                    decimal Original_TotalMaterialsCad, 
                    decimal Original_TotalMaterialsUsd, 
                    decimal Original_TotalUnitsCad, 
                    decimal Original_TotalUnitsUsd, 
                    decimal Original_TotalOtherCostsCad, 
                    decimal Original_TotalOtherCostsUsd, 
                    decimal Original_GrandTotalCad, 
                    decimal Original_GrandTotalUsd, 
                    string Original_State, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    decimal Original_TotalSubcontractorsCad, 
                    decimal Original_TotalSubcontractorsUsd, 
                    decimal Original_GrandRevenue, 
                    decimal Original_GrandProfit, 
                    decimal Original_GrandGrossMargin, 
                    string Original_CombinedProjects) {
            return this.Update(ClientID, Name, StartDate, EndDate, TotalLabourHoursCad, TotalLabourHoursUsd, TotalMaterialsCad, TotalMaterialsUsd, TotalUnitsCad, TotalUnitsUsd, TotalOtherCostsCad, TotalOtherCostsUsd, GrandTotalCad, GrandTotalUsd, State, Deleted, COMPANY_ID, TotalSubcontractorsCad, TotalSubcontractorsUsd, GrandRevenue, GrandProfit, GrandGrossMargin, CombinedProjects, Original_CostingSheetID, Original_ClientID, Original_Name, Original_StartDate, Original_EndDate, Original_TotalLabourHoursCad, Original_TotalLabourHoursUsd, Original_TotalMaterialsCad, Original_TotalMaterialsUsd, Original_TotalUnitsCad, Original_TotalUnitsUsd, Original_TotalOtherCostsCad, Original_TotalOtherCostsUsd, Original_GrandTotalCad, Original_GrandTotalUsd, Original_State, Original_Deleted, Original_COMPANY_ID, Original_TotalSubcontractorsCad, Original_TotalSubcontractorsUsd, Original_GrandRevenue, Original_GrandProfit, Original_GrandGrossMargin, Original_CombinedProjects, Original_CostingSheetID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("Work_", "Work_");
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
            tableMapping.ColumnMappings.Add("RefID", "RefID");
            tableMapping.ColumnMappings.Add("LHQuantity", "LHQuantity");
            tableMapping.ColumnMappings.Add("LHUnitOfMeasurement", "LHUnitOfMeasurement");
            tableMapping.ColumnMappings.Add("MealsUnitOfMeasurement", "MealsUnitOfMeasurement");
            tableMapping.ColumnMappings.Add("MealsQuantity", "MealsQuantity");
            tableMapping.ColumnMappings.Add("MotelUnitOfMeasurement", "MotelUnitOfMeasurement");
            tableMapping.ColumnMappings.Add("MotelQuantity", "MotelQuantity");
            tableMapping.ColumnMappings.Add("LHCostCad", "LHCostCad");
            tableMapping.ColumnMappings.Add("MealsCostCad", "MealsCostCad");
            tableMapping.ColumnMappings.Add("MotelCostCad", "MotelCostCad");
            tableMapping.ColumnMappings.Add("TotalCostCad", "TotalCostCad");
            tableMapping.ColumnMappings.Add("LHCostUsd", "LHCostUsd");
            tableMapping.ColumnMappings.Add("MealsCostUsd", "MealsCostUsd");
            tableMapping.ColumnMappings.Add("MotelCostUsd", "MotelCostUsd");
            tableMapping.ColumnMappings.Add("TotalCostUsd", "TotalCostUsd");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("Function_", "Function_");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS] WHERE (([Cost" +
                "ingSheetID] = @Original_CostingSheetID) AND ([Work_] = @Original_Work_) AND ([Em" +
                "ployeeID] = @Original_EmployeeID) AND ([RefID] = @Original_RefID) AND ([LHQuanti" +
                "ty] = @Original_LHQuantity) AND ([LHUnitOfMeasurement] = @Original_LHUnitOfMeasu" +
                "rement) AND ((@IsNull_MealsUnitOfMeasurement = 1 AND [MealsUnitOfMeasurement] IS" +
                " NULL) OR ([MealsUnitOfMeasurement] = @Original_MealsUnitOfMeasurement)) AND ((@" +
                "IsNull_MealsQuantity = 1 AND [MealsQuantity] IS NULL) OR ([MealsQuantity] = @Ori" +
                "ginal_MealsQuantity)) AND ((@IsNull_MotelUnitOfMeasurement = 1 AND [MotelUnitOfM" +
                "easurement] IS NULL) OR ([MotelUnitOfMeasurement] = @Original_MotelUnitOfMeasure" +
                "ment)) AND ((@IsNull_MotelQuantity = 1 AND [MotelQuantity] IS NULL) OR ([MotelQu" +
                "antity] = @Original_MotelQuantity)) AND ([LHCostCad] = @Original_LHCostCad) AND " +
                "((@IsNull_MealsCostCad = 1 AND [MealsCostCad] IS NULL) OR ([MealsCostCad] = @Ori" +
                "ginal_MealsCostCad)) AND ((@IsNull_MotelCostCad = 1 AND [MotelCostCad] IS NULL) " +
                "OR ([MotelCostCad] = @Original_MotelCostCad)) AND ([TotalCostCad] = @Original_To" +
                "talCostCad) AND ([LHCostUsd] = @Original_LHCostUsd) AND ((@IsNull_MealsCostUsd =" +
                " 1 AND [MealsCostUsd] IS NULL) OR ([MealsCostUsd] = @Original_MealsCostUsd)) AND" +
                " ((@IsNull_MotelCostUsd = 1 AND [MotelCostUsd] IS NULL) OR ([MotelCostUsd] = @Or" +
                "iginal_MotelCostUsd)) AND ([TotalCostUsd] = @Original_TotalCostUsd) AND ([Delete" +
                "d] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ((@IsNull_" +
                "StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) A" +
                "ND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDat" +
                "e)) AND ((@IsNull_Function_ = 1 AND [Function_] IS NULL) OR ([Function_] = @Orig" +
                "inal_Function_)) AND ([ProjectID] = @Original_ProjectID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LHQuantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LHUnitOfMeasurement", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHUnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MealsUnitOfMeasurement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsUnitOfMeasurement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MealsUnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsUnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MealsQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MealsQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MotelUnitOfMeasurement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelUnitOfMeasurement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MotelUnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelUnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MotelQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MotelQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LHCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MealsCostCad", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostCad", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MealsCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MotelCostCad", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostCad", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MotelCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LHCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MealsCostUsd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostUsd", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MealsCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MotelCostUsd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostUsd", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MotelCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Function_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS] ([CostingSheetID], [Work_], [EmployeeID], [RefID], [LHQuantity], [LHUnitOfMeasurement], [MealsUnitOfMeasurement], [MealsQuantity], [MotelUnitOfMeasurement], [MotelQuantity], [LHCostCad], [MealsCostCad], [MotelCostCad], [TotalCostCad], [LHCostUsd], [MealsCostUsd], [MotelCostUsd], [TotalCostUsd], [Deleted], [COMPANY_ID], [StartDate], [EndDate], [Function_], [ProjectID]) VALUES (@CostingSheetID, @Work_, @EmployeeID, @RefID, @LHQuantity, @LHUnitOfMeasurement, @MealsUnitOfMeasurement, @MealsQuantity, @MotelUnitOfMeasurement, @MotelQuantity, @LHCostCad, @MealsCostCad, @MotelCostCad, @TotalCostCad, @LHCostUsd, @MealsCostUsd, @MotelCostUsd, @TotalCostUsd, @Deleted, @COMPANY_ID, @StartDate, @EndDate, @Function_, @ProjectID);
SELECT CostingSheetID, Work_, EmployeeID, RefID, LHQuantity, LHUnitOfMeasurement, MealsUnitOfMeasurement, MealsQuantity, MotelUnitOfMeasurement, MotelQuantity, LHCostCad, MealsCostCad, MotelCostCad, TotalCostCad, LHCostUsd, MealsCostUsd, MotelCostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Function_, ProjectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS WHERE (CostingSheetID = @CostingSheetID) AND (EmployeeID = @EmployeeID) AND (RefID = @RefID) AND (Work_ = @Work_)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LHQuantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LHUnitOfMeasurement", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHUnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MealsUnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsUnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MealsQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MotelUnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelUnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MotelQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LHCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MealsCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MotelCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LHCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MealsCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MotelCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS] SET [CostingSheetI" +
                "D] = @CostingSheetID, [Work_] = @Work_, [EmployeeID] = @EmployeeID, [RefID] = @R" +
                "efID, [LHQuantity] = @LHQuantity, [LHUnitOfMeasurement] = @LHUnitOfMeasurement, " +
                "[MealsUnitOfMeasurement] = @MealsUnitOfMeasurement, [MealsQuantity] = @MealsQuan" +
                "tity, [MotelUnitOfMeasurement] = @MotelUnitOfMeasurement, [MotelQuantity] = @Mot" +
                "elQuantity, [LHCostCad] = @LHCostCad, [MealsCostCad] = @MealsCostCad, [MotelCost" +
                "Cad] = @MotelCostCad, [TotalCostCad] = @TotalCostCad, [LHCostUsd] = @LHCostUsd, " +
                "[MealsCostUsd] = @MealsCostUsd, [MotelCostUsd] = @MotelCostUsd, [TotalCostUsd] =" +
                " @TotalCostUsd, [Deleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID, [StartDate] = " +
                "@StartDate, [EndDate] = @EndDate, [Function_] = @Function_, [ProjectID] = @Proje" +
                "ctID WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([Work_] = @Origin" +
                "al_Work_) AND ([EmployeeID] = @Original_EmployeeID) AND ([RefID] = @Original_Ref" +
                "ID) AND ([LHQuantity] = @Original_LHQuantity) AND ([LHUnitOfMeasurement] = @Orig" +
                "inal_LHUnitOfMeasurement) AND ((@IsNull_MealsUnitOfMeasurement = 1 AND [MealsUni" +
                "tOfMeasurement] IS NULL) OR ([MealsUnitOfMeasurement] = @Original_MealsUnitOfMea" +
                "surement)) AND ((@IsNull_MealsQuantity = 1 AND [MealsQuantity] IS NULL) OR ([Mea" +
                "lsQuantity] = @Original_MealsQuantity)) AND ((@IsNull_MotelUnitOfMeasurement = 1" +
                " AND [MotelUnitOfMeasurement] IS NULL) OR ([MotelUnitOfMeasurement] = @Original_" +
                "MotelUnitOfMeasurement)) AND ((@IsNull_MotelQuantity = 1 AND [MotelQuantity] IS " +
                "NULL) OR ([MotelQuantity] = @Original_MotelQuantity)) AND ([LHCostCad] = @Origin" +
                "al_LHCostCad) AND ((@IsNull_MealsCostCad = 1 AND [MealsCostCad] IS NULL) OR ([Me" +
                "alsCostCad] = @Original_MealsCostCad)) AND ((@IsNull_MotelCostCad = 1 AND [Motel" +
                "CostCad] IS NULL) OR ([MotelCostCad] = @Original_MotelCostCad)) AND ([TotalCostC" +
                "ad] = @Original_TotalCostCad) AND ([LHCostUsd] = @Original_LHCostUsd) AND ((@IsN" +
                "ull_MealsCostUsd = 1 AND [MealsCostUsd] IS NULL) OR ([MealsCostUsd] = @Original_" +
                "MealsCostUsd)) AND ((@IsNull_MotelCostUsd = 1 AND [MotelCostUsd] IS NULL) OR ([M" +
                "otelCostUsd] = @Original_MotelCostUsd)) AND ([TotalCostUsd] = @Original_TotalCos" +
                "tUsd) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_" +
                "ID) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Orig" +
                "inal_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] " +
                "= @Original_EndDate)) AND ((@IsNull_Function_ = 1 AND [Function_] IS NULL) OR ([" +
                "Function_] = @Original_Function_)) AND ([ProjectID] = @Original_ProjectID));\r\nSE" +
                "LECT CostingSheetID, Work_, EmployeeID, RefID, LHQuantity, LHUnitOfMeasurement, " +
                "MealsUnitOfMeasurement, MealsQuantity, MotelUnitOfMeasurement, MotelQuantity, LH" +
                "CostCad, MealsCostCad, MotelCostCad, TotalCostCad, LHCostUsd, MealsCostUsd, Mote" +
                "lCostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Function_, Proj" +
                "ectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS WHERE (CostingSheetID" +
                " = @CostingSheetID) AND (EmployeeID = @EmployeeID) AND (RefID = @RefID) AND (Wor" +
                "k_ = @Work_)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LHQuantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LHUnitOfMeasurement", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHUnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MealsUnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsUnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MealsQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MotelUnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelUnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MotelQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelQuantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LHCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MealsCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MotelCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LHCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MealsCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MotelCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LHQuantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LHUnitOfMeasurement", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHUnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MealsUnitOfMeasurement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsUnitOfMeasurement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MealsUnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsUnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MealsQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MealsQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MotelUnitOfMeasurement", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelUnitOfMeasurement", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MotelUnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelUnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MotelQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelQuantity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MotelQuantity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelQuantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LHCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MealsCostCad", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostCad", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MealsCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MotelCostCad", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostCad", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MotelCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LHCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LHCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MealsCostUsd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostUsd", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MealsCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MealsCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MotelCostUsd", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostUsd", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MotelCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MotelCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Function_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT CostingSheetID, Work_, EmployeeID, RefID, LHQuantity, LHUnitOfMeasurement, MealsUnitOfMeasurement, MealsQuantity, MotelUnitOfMeasurement, MotelQuantity, LHCostCad, MealsCostCad, MotelCostCad, TotalCostCad, LHCostUsd, MealsCostUsd, MotelCostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Function_, ProjectID FROM dbo.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_CostingSheetID, 
                    string Original_Work_, 
                    int Original_EmployeeID, 
                    int Original_RefID, 
                    double Original_LHQuantity, 
                    string Original_LHUnitOfMeasurement, 
                    string Original_MealsUnitOfMeasurement, 
                    global::System.Nullable<int> Original_MealsQuantity, 
                    string Original_MotelUnitOfMeasurement, 
                    global::System.Nullable<int> Original_MotelQuantity, 
                    decimal Original_LHCostCad, 
                    global::System.Nullable<decimal> Original_MealsCostCad, 
                    global::System.Nullable<decimal> Original_MotelCostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_LHCostUsd, 
                    global::System.Nullable<decimal> Original_MealsCostUsd, 
                    global::System.Nullable<decimal> Original_MotelCostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    string Original_Function_, 
                    int Original_ProjectID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            if ((Original_Work_ == null)) {
                throw new global::System.ArgumentNullException("Original_Work_");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Work_));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_EmployeeID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_RefID));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_LHQuantity));
            if ((Original_LHUnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_LHUnitOfMeasurement");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_LHUnitOfMeasurement));
            }
            if ((Original_MealsUnitOfMeasurement == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_MealsUnitOfMeasurement));
            }
            if ((Original_MealsQuantity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_MealsQuantity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_MotelUnitOfMeasurement == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_MotelUnitOfMeasurement));
            }
            if ((Original_MotelQuantity.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_MotelQuantity.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_LHCostCad));
            if ((Original_MealsCostCad.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_MealsCostCad.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_MotelCostCad.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((decimal)(Original_MotelCostCad.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((decimal)(Original_LHCostUsd));
            if ((Original_MealsCostUsd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_MealsCostUsd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_MotelCostUsd.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((decimal)(Original_MotelCostUsd.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[25].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.DeleteCommand.Parameters[26].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[27].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[29].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[31].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_Function_ == null)) {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[33].Value = ((string)(Original_Function_));
            }
            this.Adapter.DeleteCommand.Parameters[34].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int CostingSheetID, 
                    string Work_, 
                    int EmployeeID, 
                    int RefID, 
                    double LHQuantity, 
                    string LHUnitOfMeasurement, 
                    string MealsUnitOfMeasurement, 
                    global::System.Nullable<int> MealsQuantity, 
                    string MotelUnitOfMeasurement, 
                    global::System.Nullable<int> MotelQuantity, 
                    decimal LHCostCad, 
                    global::System.Nullable<decimal> MealsCostCad, 
                    global::System.Nullable<decimal> MotelCostCad, 
                    decimal TotalCostCad, 
                    decimal LHCostUsd, 
                    global::System.Nullable<decimal> MealsCostUsd, 
                    global::System.Nullable<decimal> MotelCostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Function_, 
                    int ProjectID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            if ((Work_ == null)) {
                throw new global::System.ArgumentNullException("Work_");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Work_));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(EmployeeID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(RefID));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(LHQuantity));
            if ((LHUnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("LHUnitOfMeasurement");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(LHUnitOfMeasurement));
            }
            if ((MealsUnitOfMeasurement == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(MealsUnitOfMeasurement));
            }
            if ((MealsQuantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(MealsQuantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((MotelUnitOfMeasurement == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(MotelUnitOfMeasurement));
            }
            if ((MotelQuantity.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(MotelQuantity.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(LHCostCad));
            if ((MealsCostCad.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(MealsCostCad.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((MotelCostCad.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(MotelCostCad.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(TotalCostCad));
            this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(LHCostUsd));
            if ((MealsCostUsd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(MealsCostUsd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((MotelCostUsd.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(MotelCostUsd.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(TotalCostUsd));
            this.Adapter.InsertCommand.Parameters[18].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[19].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Function_ == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(Function_));
            }
            this.Adapter.InsertCommand.Parameters[23].Value = ((int)(ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    string Work_, 
                    int EmployeeID, 
                    int RefID, 
                    double LHQuantity, 
                    string LHUnitOfMeasurement, 
                    string MealsUnitOfMeasurement, 
                    global::System.Nullable<int> MealsQuantity, 
                    string MotelUnitOfMeasurement, 
                    global::System.Nullable<int> MotelQuantity, 
                    decimal LHCostCad, 
                    global::System.Nullable<decimal> MealsCostCad, 
                    global::System.Nullable<decimal> MotelCostCad, 
                    decimal TotalCostCad, 
                    decimal LHCostUsd, 
                    global::System.Nullable<decimal> MealsCostUsd, 
                    global::System.Nullable<decimal> MotelCostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Function_, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    string Original_Work_, 
                    int Original_EmployeeID, 
                    int Original_RefID, 
                    double Original_LHQuantity, 
                    string Original_LHUnitOfMeasurement, 
                    string Original_MealsUnitOfMeasurement, 
                    global::System.Nullable<int> Original_MealsQuantity, 
                    string Original_MotelUnitOfMeasurement, 
                    global::System.Nullable<int> Original_MotelQuantity, 
                    decimal Original_LHCostCad, 
                    global::System.Nullable<decimal> Original_MealsCostCad, 
                    global::System.Nullable<decimal> Original_MotelCostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_LHCostUsd, 
                    global::System.Nullable<decimal> Original_MealsCostUsd, 
                    global::System.Nullable<decimal> Original_MotelCostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    string Original_Function_, 
                    int Original_ProjectID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            if ((Work_ == null)) {
                throw new global::System.ArgumentNullException("Work_");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Work_));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(EmployeeID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(RefID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(LHQuantity));
            if ((LHUnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("LHUnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(LHUnitOfMeasurement));
            }
            if ((MealsUnitOfMeasurement == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(MealsUnitOfMeasurement));
            }
            if ((MealsQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(MealsQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((MotelUnitOfMeasurement == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(MotelUnitOfMeasurement));
            }
            if ((MotelQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(MotelQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(LHCostCad));
            if ((MealsCostCad.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(MealsCostCad.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((MotelCostCad.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(MotelCostCad.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(LHCostUsd));
            if ((MealsCostUsd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(MealsCostUsd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((MotelCostUsd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(MotelCostUsd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Function_ == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Function_));
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(ProjectID));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_CostingSheetID));
            if ((Original_Work_ == null)) {
                throw new global::System.ArgumentNullException("Original_Work_");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_Work_));
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_EmployeeID));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_RefID));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((double)(Original_LHQuantity));
            if ((Original_LHUnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_LHUnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_LHUnitOfMeasurement));
            }
            if ((Original_MealsUnitOfMeasurement == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_MealsUnitOfMeasurement));
            }
            if ((Original_MealsQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(Original_MealsQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_MotelUnitOfMeasurement == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_MotelUnitOfMeasurement));
            }
            if ((Original_MotelQuantity.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[37].Value = ((int)(Original_MotelQuantity.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(Original_LHCostCad));
            if ((Original_MealsCostCad.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((decimal)(Original_MealsCostCad.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_MotelCostCad.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((decimal)(Original_MotelCostCad.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[43].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((decimal)(Original_LHCostUsd));
            if ((Original_MealsCostUsd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((decimal)(Original_MealsCostUsd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_MotelCostUsd.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((decimal)(Original_MotelCostUsd.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[49].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[50].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[53].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[55].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((Original_Function_ == null)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[57].Value = ((string)(Original_Function_));
            }
            this.Adapter.UpdateCommand.Parameters[58].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    double LHQuantity, 
                    string LHUnitOfMeasurement, 
                    string MealsUnitOfMeasurement, 
                    global::System.Nullable<int> MealsQuantity, 
                    string MotelUnitOfMeasurement, 
                    global::System.Nullable<int> MotelQuantity, 
                    decimal LHCostCad, 
                    global::System.Nullable<decimal> MealsCostCad, 
                    global::System.Nullable<decimal> MotelCostCad, 
                    decimal TotalCostCad, 
                    decimal LHCostUsd, 
                    global::System.Nullable<decimal> MealsCostUsd, 
                    global::System.Nullable<decimal> MotelCostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Function_, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    string Original_Work_, 
                    int Original_EmployeeID, 
                    int Original_RefID, 
                    double Original_LHQuantity, 
                    string Original_LHUnitOfMeasurement, 
                    string Original_MealsUnitOfMeasurement, 
                    global::System.Nullable<int> Original_MealsQuantity, 
                    string Original_MotelUnitOfMeasurement, 
                    global::System.Nullable<int> Original_MotelQuantity, 
                    decimal Original_LHCostCad, 
                    global::System.Nullable<decimal> Original_MealsCostCad, 
                    global::System.Nullable<decimal> Original_MotelCostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_LHCostUsd, 
                    global::System.Nullable<decimal> Original_MealsCostUsd, 
                    global::System.Nullable<decimal> Original_MotelCostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    string Original_Function_, 
                    int Original_ProjectID) {
            return this.Update(Original_CostingSheetID, Original_Work_, Original_EmployeeID, Original_RefID, LHQuantity, LHUnitOfMeasurement, MealsUnitOfMeasurement, MealsQuantity, MotelUnitOfMeasurement, MotelQuantity, LHCostCad, MealsCostCad, MotelCostCad, TotalCostCad, LHCostUsd, MealsCostUsd, MotelCostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Function_, ProjectID, Original_CostingSheetID, Original_Work_, Original_EmployeeID, Original_RefID, Original_LHQuantity, Original_LHUnitOfMeasurement, Original_MealsUnitOfMeasurement, Original_MealsQuantity, Original_MotelUnitOfMeasurement, Original_MotelQuantity, Original_LHCostCad, Original_MealsCostCad, Original_MotelCostCad, Original_TotalCostCad, Original_LHCostUsd, Original_MealsCostUsd, Original_MotelCostUsd, Original_TotalCostUsd, Original_Deleted, Original_COMPANY_ID, Original_StartDate, Original_EndDate, Original_Function_, Original_ProjectID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("Work_", "Work_");
            tableMapping.ColumnMappings.Add("UnitID", "UnitID");
            tableMapping.ColumnMappings.Add("RefID", "RefID");
            tableMapping.ColumnMappings.Add("UnitOfMeasurement", "UnitOfMeasurement");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("CostCad", "CostCad");
            tableMapping.ColumnMappings.Add("TotalCostCad", "TotalCostCad");
            tableMapping.ColumnMappings.Add("CostUsd", "CostUsd");
            tableMapping.ColumnMappings.Add("TotalCostUsd", "TotalCostUsd");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("Function_", "Function_");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([Work_] = @Original_Work_) AND ([UnitID] = @Original_UnitID) AND ([RefID] = @Original_RefID) AND ([UnitOfMeasurement] = @Original_UnitOfMeasurement) AND ([Quantity] = @Original_Quantity) AND ([CostCad] = @Original_CostCad) AND ([TotalCostCad] = @Original_TotalCostCad) AND ([CostUsd] = @Original_CostUsd) AND ([TotalCostUsd] = @Original_TotalCostUsd) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ((@IsNull_Function_ = 1 AND [Function_] IS NULL) OR ([Function_] = @Original_Function_)) AND ([ProjectID] = @Original_ProjectID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Function_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS] ([CostingSheetID], [Work_], [UnitID], [RefID], [UnitOfMeasurement], [Quantity], [CostCad], [TotalCostCad], [CostUsd], [TotalCostUsd], [Deleted], [COMPANY_ID], [StartDate], [EndDate], [Function_], [ProjectID]) VALUES (@CostingSheetID, @Work_, @UnitID, @RefID, @UnitOfMeasurement, @Quantity, @CostCad, @TotalCostCad, @CostUsd, @TotalCostUsd, @Deleted, @COMPANY_ID, @StartDate, @EndDate, @Function_, @ProjectID);
SELECT CostingSheetID, Work_, UnitID, RefID, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Function_, ProjectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS WHERE (CostingSheetID = @CostingSheetID) AND (RefID = @RefID) AND (UnitID = @UnitID) AND (Work_ = @Work_)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS] SET [CostingSheetID] = @C" +
                "ostingSheetID, [Work_] = @Work_, [UnitID] = @UnitID, [RefID] = @RefID, [UnitOfMe" +
                "asurement] = @UnitOfMeasurement, [Quantity] = @Quantity, [CostCad] = @CostCad, [" +
                "TotalCostCad] = @TotalCostCad, [CostUsd] = @CostUsd, [TotalCostUsd] = @TotalCost" +
                "Usd, [Deleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID, [StartDate] = @StartDate," +
                " [EndDate] = @EndDate, [Function_] = @Function_, [ProjectID] = @ProjectID WHERE " +
                "(([CostingSheetID] = @Original_CostingSheetID) AND ([Work_] = @Original_Work_) A" +
                "ND ([UnitID] = @Original_UnitID) AND ([RefID] = @Original_RefID) AND ([UnitOfMea" +
                "surement] = @Original_UnitOfMeasurement) AND ([Quantity] = @Original_Quantity) A" +
                "ND ([CostCad] = @Original_CostCad) AND ([TotalCostCad] = @Original_TotalCostCad)" +
                " AND ([CostUsd] = @Original_CostUsd) AND ([TotalCostUsd] = @Original_TotalCostUs" +
                "d) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID)" +
                " AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Origina" +
                "l_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @" +
                "Original_EndDate)) AND ((@IsNull_Function_ = 1 AND [Function_] IS NULL) OR ([Fun" +
                "ction_] = @Original_Function_)) AND ([ProjectID] = @Original_ProjectID));\r\nSELEC" +
                "T CostingSheetID, Work_, UnitID, RefID, UnitOfMeasurement, Quantity, CostCad, To" +
                "talCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Func" +
                "tion_, ProjectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS WHERE (CostingShe" +
                "etID = @CostingSheetID) AND (RefID = @RefID) AND (UnitID = @UnitID) AND (Work_ =" +
                " @Work_)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Function_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, Work_, UnitID, RefID, UnitOfMeasurement, Quantity, CostCad" +
                ", TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, " +
                "Function_, ProjectID FROM dbo.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_CostingSheetID, 
                    string Original_Work_, 
                    int Original_UnitID, 
                    int Original_RefID, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    string Original_Function_, 
                    int Original_ProjectID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            if ((Original_Work_ == null)) {
                throw new global::System.ArgumentNullException("Original_Work_");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Work_));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_UnitID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_RefID));
            if ((Original_UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_UnitOfMeasurement");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_UnitOfMeasurement));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_Quantity));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_CostCad));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_CostUsd));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_Function_ == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_Function_));
            }
            this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int CostingSheetID, 
                    string Work_, 
                    int UnitID, 
                    int RefID, 
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Function_, 
                    int ProjectID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            if ((Work_ == null)) {
                throw new global::System.ArgumentNullException("Work_");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Work_));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(UnitID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(RefID));
            if ((UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("UnitOfMeasurement");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(UnitOfMeasurement));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(Quantity));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(CostCad));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(TotalCostCad));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(CostUsd));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(TotalCostUsd));
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Function_ == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Function_));
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((int)(ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    string Work_, 
                    int UnitID, 
                    int RefID, 
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Function_, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    string Original_Work_, 
                    int Original_UnitID, 
                    int Original_RefID, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    string Original_Function_, 
                    int Original_ProjectID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            if ((Work_ == null)) {
                throw new global::System.ArgumentNullException("Work_");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Work_));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(UnitID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(RefID));
            if ((UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("UnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(UnitOfMeasurement));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(Quantity));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(CostCad));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(CostUsd));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Function_ == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Function_));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(ProjectID));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_CostingSheetID));
            if ((Original_Work_ == null)) {
                throw new global::System.ArgumentNullException("Original_Work_");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_Work_));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_UnitID));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_RefID));
            if ((Original_UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_UnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_UnitOfMeasurement));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(Original_Quantity));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_CostCad));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(Original_CostUsd));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_Function_ == null)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_Function_));
            }
            this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Function_, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    string Original_Work_, 
                    int Original_UnitID, 
                    int Original_RefID, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    string Original_Function_, 
                    int Original_ProjectID) {
            return this.Update(Original_CostingSheetID, Original_Work_, Original_UnitID, Original_RefID, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Function_, ProjectID, Original_CostingSheetID, Original_Work_, Original_UnitID, Original_RefID, Original_UnitOfMeasurement, Original_Quantity, Original_CostCad, Original_TotalCostCad, Original_CostUsd, Original_TotalCostUsd, Original_Deleted, Original_COMPANY_ID, Original_StartDate, Original_EndDate, Original_Function_, Original_ProjectID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("MaterialID", "MaterialID");
            tableMapping.ColumnMappings.Add("RefID", "RefID");
            tableMapping.ColumnMappings.Add("UnitOfMeasurement", "UnitOfMeasurement");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("CostCad", "CostCad");
            tableMapping.ColumnMappings.Add("TotalCostCad", "TotalCostCad");
            tableMapping.ColumnMappings.Add("CostUsd", "CostUsd");
            tableMapping.ColumnMappings.Add("TotalCostUsd", "TotalCostUsd");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("Function_", "Function_");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([MaterialID] = @Original_MaterialID) AND ([RefID] = @Original_RefID) AND ([UnitOfMeasurement] = @Original_UnitOfMeasurement) AND ([Quantity] = @Original_Quantity) AND ([CostCad] = @Original_CostCad) AND ([TotalCostCad] = @Original_TotalCostCad) AND ([CostUsd] = @Original_CostUsd) AND ([TotalCostUsd] = @Original_TotalCostUsd) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ((@IsNull_Function_ = 1 AND [Function_] IS NULL) OR ([Function_] = @Original_Function_)) AND ([ProjectID] = @Original_ProjectID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MaterialID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Function_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL] ([CostingSheetID], [MaterialID], [RefID], [UnitOfMeasurement], [Quantity], [CostCad], [TotalCostCad], [CostUsd], [TotalCostUsd], [Deleted], [COMPANY_ID], [StartDate], [EndDate], [Function_], [ProjectID]) VALUES (@CostingSheetID, @MaterialID, @RefID, @UnitOfMeasurement, @Quantity, @CostCad, @TotalCostCad, @CostUsd, @TotalCostUsd, @Deleted, @COMPANY_ID, @StartDate, @EndDate, @Function_, @ProjectID);
SELECT CostingSheetID, MaterialID, RefID, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Function_, ProjectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL WHERE (CostingSheetID = @CostingSheetID) AND (MaterialID = @MaterialID) AND (RefID = @RefID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL] SET [CostingSheetID] =" +
                " @CostingSheetID, [MaterialID] = @MaterialID, [RefID] = @RefID, [UnitOfMeasureme" +
                "nt] = @UnitOfMeasurement, [Quantity] = @Quantity, [CostCad] = @CostCad, [TotalCo" +
                "stCad] = @TotalCostCad, [CostUsd] = @CostUsd, [TotalCostUsd] = @TotalCostUsd, [D" +
                "eleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID, [StartDate] = @StartDate, [EndDa" +
                "te] = @EndDate, [Function_] = @Function_, [ProjectID] = @ProjectID WHERE (([Cost" +
                "ingSheetID] = @Original_CostingSheetID) AND ([MaterialID] = @Original_MaterialID" +
                ") AND ([RefID] = @Original_RefID) AND ([UnitOfMeasurement] = @Original_UnitOfMea" +
                "surement) AND ([Quantity] = @Original_Quantity) AND ([CostCad] = @Original_CostC" +
                "ad) AND ([TotalCostCad] = @Original_TotalCostCad) AND ([CostUsd] = @Original_Cos" +
                "tUsd) AND ([TotalCostUsd] = @Original_TotalCostUsd) AND ([Deleted] = @Original_D" +
                "eleted) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ((@IsNull_StartDate = 1 AN" +
                "D [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_End" +
                "Date = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ((@IsNul" +
                "l_Function_ = 1 AND [Function_] IS NULL) OR ([Function_] = @Original_Function_))" +
                " AND ([ProjectID] = @Original_ProjectID));\r\nSELECT CostingSheetID, MaterialID, R" +
                "efID, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd," +
                " Deleted, COMPANY_ID, StartDate, EndDate, Function_, ProjectID FROM LFS_PROJECT_" +
                "COMBINED_COSTING_SHEET_MATERIAL WHERE (CostingSheetID = @CostingSheetID) AND (Ma" +
                "terialID = @MaterialID) AND (RefID = @RefID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MaterialID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MaterialID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MaterialID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Function_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, MaterialID, RefID, UnitOfMeasurement, Quantity, CostCad, T" +
                "otalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Fun" +
                "ction_, ProjectID FROM dbo.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CostingSheetID, int Original_MaterialID, int Original_RefID, string Original_UnitOfMeasurement, double Original_Quantity, decimal Original_CostCad, decimal Original_TotalCostCad, decimal Original_CostUsd, decimal Original_TotalCostUsd, bool Original_Deleted, int Original_COMPANY_ID, global::System.Nullable<global::System.DateTime> Original_StartDate, global::System.Nullable<global::System.DateTime> Original_EndDate, string Original_Function_, int Original_ProjectID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_MaterialID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_RefID));
            if ((Original_UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_UnitOfMeasurement");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_UnitOfMeasurement));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_Quantity));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_CostCad));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_CostUsd));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_Function_ == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_Function_));
            }
            this.Adapter.DeleteCommand.Parameters[17].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CostingSheetID, int MaterialID, int RefID, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, global::System.Nullable<global::System.DateTime> StartDate, global::System.Nullable<global::System.DateTime> EndDate, string Function_, int ProjectID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(MaterialID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(RefID));
            if ((UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("UnitOfMeasurement");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(UnitOfMeasurement));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Quantity));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(CostCad));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(TotalCostCad));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(CostUsd));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(TotalCostUsd));
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Function_ == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Function_));
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((int)(ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    int MaterialID, 
                    int RefID, 
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Function_, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    int Original_MaterialID, 
                    int Original_RefID, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    string Original_Function_, 
                    int Original_ProjectID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(MaterialID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(RefID));
            if ((UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("UnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(UnitOfMeasurement));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(Quantity));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(CostCad));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(CostUsd));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Function_ == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Function_));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(ProjectID));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_MaterialID));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_RefID));
            if ((Original_UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_UnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_UnitOfMeasurement));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(Original_Quantity));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_CostCad));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_CostUsd));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_Function_ == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_Function_));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Function_, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    int Original_MaterialID, 
                    int Original_RefID, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    string Original_Function_, 
                    int Original_ProjectID) {
            return this.Update(Original_CostingSheetID, Original_MaterialID, Original_RefID, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Function_, ProjectID, Original_CostingSheetID, Original_MaterialID, Original_RefID, Original_UnitOfMeasurement, Original_Quantity, Original_CostCad, Original_TotalCostCad, Original_CostUsd, Original_TotalCostUsd, Original_Deleted, Original_COMPANY_ID, Original_StartDate, Original_EndDate, Original_Function_, Original_ProjectID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("SubcontractorID", "SubcontractorID");
            tableMapping.ColumnMappings.Add("RefID", "RefID");
            tableMapping.ColumnMappings.Add("UnitOfMeasurement", "UnitOfMeasurement");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("CostCad", "CostCad");
            tableMapping.ColumnMappings.Add("TotalCostCad", "TotalCostCad");
            tableMapping.ColumnMappings.Add("CostUsd", "CostUsd");
            tableMapping.ColumnMappings.Add("TotalCostUsd", "TotalCostUsd");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([SubcontractorID] = @Original_SubcontractorID) AND ([RefID] = @Original_RefID) AND ([UnitOfMeasurement] = @Original_UnitOfMeasurement) AND ([Quantity] = @Original_Quantity) AND ([CostCad] = @Original_CostCad) AND ([TotalCostCad] = @Original_TotalCostCad) AND ([CostUsd] = @Original_CostUsd) AND ([TotalCostUsd] = @Original_TotalCostUsd) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ([ProjectID] = @Original_ProjectID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubcontractorID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubcontractorID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR] ([CostingSheetID], [SubcontractorID], [RefID], [UnitOfMeasurement], [Quantity], [CostCad], [TotalCostCad], [CostUsd], [TotalCostUsd], [Deleted], [COMPANY_ID], [StartDate], [EndDate], [Comment], [ProjectID]) VALUES (@CostingSheetID, @SubcontractorID, @RefID, @UnitOfMeasurement, @Quantity, @CostCad, @TotalCostCad, @CostUsd, @TotalCostUsd, @Deleted, @COMPANY_ID, @StartDate, @EndDate, @Comment, @ProjectID);
SELECT CostingSheetID, SubcontractorID, RefID, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Comment, ProjectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR WHERE (CostingSheetID = @CostingSheetID) AND (RefID = @RefID) AND (SubcontractorID = @SubcontractorID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubcontractorID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubcontractorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR] SET [CostingSheet" +
                "ID] = @CostingSheetID, [SubcontractorID] = @SubcontractorID, [RefID] = @RefID, [" +
                "UnitOfMeasurement] = @UnitOfMeasurement, [Quantity] = @Quantity, [CostCad] = @Co" +
                "stCad, [TotalCostCad] = @TotalCostCad, [CostUsd] = @CostUsd, [TotalCostUsd] = @T" +
                "otalCostUsd, [Deleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID, [StartDate] = @St" +
                "artDate, [EndDate] = @EndDate, [Comment] = @Comment, [ProjectID] = @ProjectID WH" +
                "ERE (([CostingSheetID] = @Original_CostingSheetID) AND ([SubcontractorID] = @Ori" +
                "ginal_SubcontractorID) AND ([RefID] = @Original_RefID) AND ([UnitOfMeasurement] " +
                "= @Original_UnitOfMeasurement) AND ([Quantity] = @Original_Quantity) AND ([CostC" +
                "ad] = @Original_CostCad) AND ([TotalCostCad] = @Original_TotalCostCad) AND ([Cos" +
                "tUsd] = @Original_CostUsd) AND ([TotalCostUsd] = @Original_TotalCostUsd) AND ([D" +
                "eleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ((@Is" +
                "Null_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDat" +
                "e)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_E" +
                "ndDate)) AND ([ProjectID] = @Original_ProjectID));\r\nSELECT CostingSheetID, Subco" +
                "ntractorID, RefID, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, " +
                "TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Comment, ProjectID FROM L" +
                "FS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR WHERE (CostingSheetID = @Costing" +
                "SheetID) AND (RefID = @RefID) AND (SubcontractorID = @SubcontractorID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubcontractorID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubcontractorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubcontractorID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubcontractorID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, SubcontractorID, RefID, UnitOfMeasurement, Quantity, CostC" +
                "ad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate" +
                ", Comment, ProjectID FROM dbo.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CostingSheetID, int Original_SubcontractorID, int Original_RefID, string Original_UnitOfMeasurement, double Original_Quantity, decimal Original_CostCad, decimal Original_TotalCostCad, decimal Original_CostUsd, decimal Original_TotalCostUsd, bool Original_Deleted, int Original_COMPANY_ID, global::System.Nullable<global::System.DateTime> Original_StartDate, global::System.Nullable<global::System.DateTime> Original_EndDate, int Original_ProjectID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_SubcontractorID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_RefID));
            if ((Original_UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_UnitOfMeasurement");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_UnitOfMeasurement));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_Quantity));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_CostCad));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_CostUsd));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CostingSheetID, int SubcontractorID, int RefID, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, global::System.Nullable<global::System.DateTime> StartDate, global::System.Nullable<global::System.DateTime> EndDate, string Comment, int ProjectID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(SubcontractorID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(RefID));
            if ((UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("UnitOfMeasurement");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(UnitOfMeasurement));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Quantity));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(CostCad));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(TotalCostCad));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(CostUsd));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(TotalCostUsd));
            this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Comment));
            }
            this.Adapter.InsertCommand.Parameters[14].Value = ((int)(ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    int SubcontractorID, 
                    int RefID, 
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Comment, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    int Original_SubcontractorID, 
                    int Original_RefID, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    int Original_ProjectID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(SubcontractorID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(RefID));
            if ((UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("UnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(UnitOfMeasurement));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(Quantity));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(CostCad));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(CostUsd));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Comment));
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(ProjectID));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_SubcontractorID));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_RefID));
            if ((Original_UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_UnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_UnitOfMeasurement));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(Original_Quantity));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_CostCad));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_CostUsd));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    string Comment, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    int Original_SubcontractorID, 
                    int Original_RefID, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    int Original_ProjectID) {
            return this.Update(Original_CostingSheetID, Original_SubcontractorID, Original_RefID, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, Comment, ProjectID, Original_CostingSheetID, Original_SubcontractorID, Original_RefID, Original_UnitOfMeasurement, Original_Quantity, Original_CostCad, Original_TotalCostCad, Original_CostUsd, Original_TotalCostUsd, Original_Deleted, Original_COMPANY_ID, Original_StartDate, Original_EndDate, Original_ProjectID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("RefIDRevenue", "RefIDRevenue");
            tableMapping.ColumnMappings.Add("Revenue", "Revenue");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([RefIDRevenue] = @Original_RefIDRevenue) AND ([Revenue] = @Original_Revenue) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ([Deleted] = @Original_Deleted) AND ([ProjectID] = @Original_ProjectID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefIDRevenue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefIDRevenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Revenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE] ([CostingSheetID], [RefIDRevenue], [Revenue], [Comment], [COMPANY_ID], [StartDate], [EndDate], [Deleted], [ProjectID]) VALUES (@CostingSheetID, @RefIDRevenue, @Revenue, @Comment, @COMPANY_ID, @StartDate, @EndDate, @Deleted, @ProjectID);
SELECT CostingSheetID, RefIDRevenue, Revenue, Comment, COMPANY_ID, StartDate, EndDate, Deleted, ProjectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE WHERE (CostingSheetID = @CostingSheetID) AND (RefIDRevenue = @RefIDRevenue)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefIDRevenue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefIDRevenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Revenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE] SET [CostingSheetID] = @CostingSheetID, [RefIDRevenue] = @RefIDRevenue, [Revenue] = @Revenue, [Comment] = @Comment, [COMPANY_ID] = @COMPANY_ID, [StartDate] = @StartDate, [EndDate] = @EndDate, [Deleted] = @Deleted, [ProjectID] = @ProjectID WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([RefIDRevenue] = @Original_RefIDRevenue) AND ([Revenue] = @Original_Revenue) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ([Deleted] = @Original_Deleted) AND ([ProjectID] = @Original_ProjectID));
SELECT CostingSheetID, RefIDRevenue, Revenue, Comment, COMPANY_ID, StartDate, EndDate, Deleted, ProjectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE WHERE (CostingSheetID = @CostingSheetID) AND (RefIDRevenue = @RefIDRevenue)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefIDRevenue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefIDRevenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Revenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefIDRevenue", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefIDRevenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Revenue", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Revenue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, RefIDRevenue, Revenue, Comment, COMPANY_ID, StartDate, End" +
                "Date, Deleted, ProjectID FROM dbo.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CostingSheetID, int Original_RefIDRevenue, decimal Original_Revenue, int Original_COMPANY_ID, global::System.Nullable<global::System.DateTime> Original_StartDate, global::System.Nullable<global::System.DateTime> Original_EndDate, bool Original_Deleted, int Original_ProjectID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_RefIDRevenue));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_Revenue));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CostingSheetID, int RefIDRevenue, decimal Revenue, string Comment, int COMPANY_ID, global::System.Nullable<global::System.DateTime> StartDate, global::System.Nullable<global::System.DateTime> EndDate, bool Deleted, int ProjectID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(RefIDRevenue));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Revenue));
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Comment));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    int RefIDRevenue, 
                    decimal Revenue, 
                    string Comment, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    bool Deleted, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    int Original_RefIDRevenue, 
                    decimal Original_Revenue, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    bool Original_Deleted, 
                    int Original_ProjectID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(RefIDRevenue));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Revenue));
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Comment));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ProjectID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_RefIDRevenue));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(Original_Revenue));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal Revenue, string Comment, int COMPANY_ID, global::System.Nullable<global::System.DateTime> StartDate, global::System.Nullable<global::System.DateTime> EndDate, bool Deleted, int ProjectID, int Original_CostingSheetID, int Original_RefIDRevenue, decimal Original_Revenue, int Original_COMPANY_ID, global::System.Nullable<global::System.DateTime> Original_StartDate, global::System.Nullable<global::System.DateTime> Original_EndDate, bool Original_Deleted, int Original_ProjectID) {
            return this.Update(Original_CostingSheetID, Original_RefIDRevenue, Revenue, Comment, COMPANY_ID, StartDate, EndDate, Deleted, ProjectID, Original_CostingSheetID, Original_RefIDRevenue, Original_Revenue, Original_COMPANY_ID, Original_StartDate, Original_EndDate, Original_Deleted, Original_ProjectID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("RefID", "RefID");
            tableMapping.ColumnMappings.Add("Work_", "Work_");
            tableMapping.ColumnMappings.Add("Function_", "Function_");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("UnitOfMeasurement", "UnitOfMeasurement");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("CostCad", "CostCad");
            tableMapping.ColumnMappings.Add("TotalCostCad", "TotalCostCad");
            tableMapping.ColumnMappings.Add("CostUsd", "CostUsd");
            tableMapping.ColumnMappings.Add("TotalCostUsd", "TotalCostUsd");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([RefID] = @Original_RefID) AND ((@IsNull_Work_ = 1 AND [Work_] IS NULL) OR ([Work_] = @Original_Work_)) AND ((@IsNull_Function_ = 1 AND [Function_] IS NULL) OR ([Function_] = @Original_Function_)) AND ([Description] = @Original_Description) AND ([UnitOfMeasurement] = @Original_UnitOfMeasurement) AND ([Quantity] = @Original_Quantity) AND ([CostCad] = @Original_CostCad) AND ([TotalCostCad] = @Original_TotalCostCad) AND ([CostUsd] = @Original_CostUsd) AND ([TotalCostUsd] = @Original_TotalCostUsd) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate] = @Original_EndDate)) AND ([ProjectID] = @Original_ProjectID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Work_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Function_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS] ([CostingSheetID], [RefID], [Work_], [Function_], [Description], [UnitOfMeasurement], [Quantity], [CostCad], [TotalCostCad], [CostUsd], [TotalCostUsd], [Deleted], [COMPANY_ID], [StartDate], [EndDate], [ProjectID]) VALUES (@CostingSheetID, @RefID, @Work_, @Function_, @Description, @UnitOfMeasurement, @Quantity, @CostCad, @TotalCostCad, @CostUsd, @TotalCostUsd, @Deleted, @COMPANY_ID, @StartDate, @EndDate, @ProjectID);
SELECT CostingSheetID, RefID, Work_, Function_, Description, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, ProjectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS WHERE (CostingSheetID = @CostingSheetID) AND (RefID = @RefID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS] SET [CostingSheetID" +
                "] = @CostingSheetID, [RefID] = @RefID, [Work_] = @Work_, [Function_] = @Function" +
                "_, [Description] = @Description, [UnitOfMeasurement] = @UnitOfMeasurement, [Quan" +
                "tity] = @Quantity, [CostCad] = @CostCad, [TotalCostCad] = @TotalCostCad, [CostUs" +
                "d] = @CostUsd, [TotalCostUsd] = @TotalCostUsd, [Deleted] = @Deleted, [COMPANY_ID" +
                "] = @COMPANY_ID, [StartDate] = @StartDate, [EndDate] = @EndDate, [ProjectID] = @" +
                "ProjectID WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([RefID] = @O" +
                "riginal_RefID) AND ((@IsNull_Work_ = 1 AND [Work_] IS NULL) OR ([Work_] = @Origi" +
                "nal_Work_)) AND ((@IsNull_Function_ = 1 AND [Function_] IS NULL) OR ([Function_]" +
                " = @Original_Function_)) AND ([Description] = @Original_Description) AND ([UnitO" +
                "fMeasurement] = @Original_UnitOfMeasurement) AND ([Quantity] = @Original_Quantit" +
                "y) AND ([CostCad] = @Original_CostCad) AND ([TotalCostCad] = @Original_TotalCost" +
                "Cad) AND ([CostUsd] = @Original_CostUsd) AND ([TotalCostUsd] = @Original_TotalCo" +
                "stUsd) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY" +
                "_ID) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Ori" +
                "ginal_StartDate)) AND ((@IsNull_EndDate = 1 AND [EndDate] IS NULL) OR ([EndDate]" +
                " = @Original_EndDate)) AND ([ProjectID] = @Original_ProjectID));\r\nSELECT Costing" +
                "SheetID, RefID, Work_, Function_, Description, UnitOfMeasurement, Quantity, Cost" +
                "Cad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDat" +
                "e, ProjectID FROM LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS WHERE (CostingS" +
                "heetID = @CostingSheetID) AND (RefID = @RefID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Work_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Work_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Work_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Function_", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Function_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Function_", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Description", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnitOfMeasurement", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UnitOfMeasurement", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Quantity", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Quantity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostCad", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostCad", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalCostUsd", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalCostUsd", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_EndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ProjectID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ProjectID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, RefID, Work_, Function_, Description, UnitOfMeasurement, Q" +
                "uantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, Star" +
                "tDate, EndDate, ProjectID FROM dbo.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COST" +
                "S";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_CostingSheetID, 
                    int Original_RefID, 
                    string Original_Work_, 
                    string Original_Function_, 
                    string Original_Description, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    int Original_ProjectID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_RefID));
            if ((Original_Work_ == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Work_));
            }
            if ((Original_Function_ == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Function_));
            }
            if ((Original_Description == null)) {
                throw new global::System.ArgumentNullException("Original_Description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_Description));
            }
            if ((Original_UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_UnitOfMeasurement");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_UnitOfMeasurement));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_Quantity));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_CostCad));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_CostUsd));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int CostingSheetID, 
                    int RefID, 
                    string Work_, 
                    string Function_, 
                    string Description, 
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    int ProjectID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(RefID));
            if ((Work_ == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Work_));
            }
            if ((Function_ == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Function_));
            }
            if ((Description == null)) {
                throw new global::System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Description));
            }
            if ((UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("UnitOfMeasurement");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(UnitOfMeasurement));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(Quantity));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(CostCad));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(TotalCostCad));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(CostUsd));
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(TotalCostUsd));
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((int)(ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    int RefID, 
                    string Work_, 
                    string Function_, 
                    string Description, 
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    int Original_RefID, 
                    string Original_Work_, 
                    string Original_Function_, 
                    string Original_Description, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    int Original_ProjectID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(RefID));
            if ((Work_ == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Work_));
            }
            if ((Function_ == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Function_));
            }
            if ((Description == null)) {
                throw new global::System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Description));
            }
            if ((UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("UnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(UnitOfMeasurement));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(Quantity));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(CostCad));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(CostUsd));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(COMPANY_ID));
            if ((StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(ProjectID));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_RefID));
            if ((Original_Work_ == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_Work_));
            }
            if ((Original_Function_ == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_Function_));
            }
            if ((Original_Description == null)) {
                throw new global::System.ArgumentNullException("Original_Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_Description));
            }
            if ((Original_UnitOfMeasurement == null)) {
                throw new global::System.ArgumentNullException("Original_UnitOfMeasurement");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_UnitOfMeasurement));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(Original_Quantity));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(Original_CostCad));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((decimal)(Original_TotalCostCad));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((decimal)(Original_CostUsd));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(Original_TotalCostUsd));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(Original_COMPANY_ID));
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_EndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((System.DateTime)(Original_EndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(Original_ProjectID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string Work_, 
                    string Function_, 
                    string Description, 
                    string UnitOfMeasurement, 
                    double Quantity, 
                    decimal CostCad, 
                    decimal TotalCostCad, 
                    decimal CostUsd, 
                    decimal TotalCostUsd, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> StartDate, 
                    global::System.Nullable<global::System.DateTime> EndDate, 
                    int ProjectID, 
                    int Original_CostingSheetID, 
                    int Original_RefID, 
                    string Original_Work_, 
                    string Original_Function_, 
                    string Original_Description, 
                    string Original_UnitOfMeasurement, 
                    double Original_Quantity, 
                    decimal Original_CostCad, 
                    decimal Original_TotalCostCad, 
                    decimal Original_CostUsd, 
                    decimal Original_TotalCostUsd, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID, 
                    global::System.Nullable<global::System.DateTime> Original_StartDate, 
                    global::System.Nullable<global::System.DateTime> Original_EndDate, 
                    int Original_ProjectID) {
            return this.Update(Original_CostingSheetID, Original_RefID, Work_, Function_, Description, UnitOfMeasurement, Quantity, CostCad, TotalCostCad, CostUsd, TotalCostUsd, Deleted, COMPANY_ID, StartDate, EndDate, ProjectID, Original_CostingSheetID, Original_RefID, Original_Work_, Original_Function_, Original_Description, Original_UnitOfMeasurement, Original_Quantity, Original_CostCad, Original_TotalCostCad, Original_CostUsd, Original_TotalCostUsd, Original_Deleted, Original_COMPANY_ID, Original_StartDate, Original_EndDate, Original_ProjectID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("Category", "Category");
            tableMapping.ColumnMappings.Add("RefID", "RefID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("Rate", "Rate");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([Category] = @Original_Category) AND ([RefID] = @Original_RefID) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Original_EndDate) AND ([Rate] = @Original_Rate) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Category", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY] ([CostingSheetID], [Category], [RefID], [StartDate], [EndDate], [Rate], [Deleted], [COMPANY_ID], [Comment]) VALUES (@CostingSheetID, @Category, @RefID, @StartDate, @EndDate, @Rate, @Deleted, @COMPANY_ID, @Comment);
SELECT CostingSheetID, Category, RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment FROM LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY WHERE (Category = @Category) AND (CostingSheetID = @CostingSheetID) AND (RefID = @RefID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Category", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY] SET [CostingSheetID] = @CostingSheetID, [Category] = @Category, [RefID] = @RefID, [StartDate] = @StartDate, [EndDate] = @EndDate, [Rate] = @Rate, [Deleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID, [Comment] = @Comment WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([Category] = @Original_Category) AND ([RefID] = @Original_RefID) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Original_EndDate) AND ([Rate] = @Original_Rate) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID));
SELECT CostingSheetID, Category, RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment FROM LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY WHERE (Category = @Category) AND (CostingSheetID = @CostingSheetID) AND (RefID = @RefID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Category", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Category", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Category", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, Category, RefID, StartDate, EndDate, Rate, Deleted, COMPAN" +
                "Y_ID, Comment FROM dbo.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CostingSheetID, string Original_Category, int Original_RefID, System.DateTime Original_StartDate, System.DateTime Original_EndDate, decimal Original_Rate, bool Original_Deleted, int Original_COMPANY_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            if ((Original_Category == null)) {
                throw new global::System.ArgumentNullException("Original_Category");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Category));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_RefID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_Rate));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_COMPANY_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CostingSheetID, string Category, int RefID, System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, int COMPANY_ID, string Comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            if ((Category == null)) {
                throw new global::System.ArgumentNullException("Category");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Category));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(RefID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Rate));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(COMPANY_ID));
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    string Category, 
                    int RefID, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    decimal Rate, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    string Comment, 
                    int Original_CostingSheetID, 
                    string Original_Category, 
                    int Original_RefID, 
                    System.DateTime Original_StartDate, 
                    System.DateTime Original_EndDate, 
                    decimal Original_Rate, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            if ((Category == null)) {
                throw new global::System.ArgumentNullException("Category");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Category));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(RefID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Rate));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(COMPANY_ID));
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Comment));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_CostingSheetID));
            if ((Original_Category == null)) {
                throw new global::System.ArgumentNullException("Original_Category");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Category));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_RefID));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Rate));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_COMPANY_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, int COMPANY_ID, string Comment, int Original_CostingSheetID, string Original_Category, int Original_RefID, System.DateTime Original_StartDate, System.DateTime Original_EndDate, decimal Original_Rate, bool Original_Deleted, int Original_COMPANY_ID) {
            return this.Update(Original_CostingSheetID, Original_Category, Original_RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment, Original_CostingSheetID, Original_Category, Original_RefID, Original_StartDate, Original_EndDate, Original_Rate, Original_Deleted, Original_COMPANY_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COSTING_SHEET_INSURANCE";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("InsuranceCompanyID", "InsuranceCompanyID");
            tableMapping.ColumnMappings.Add("RefID", "RefID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("Rate", "Rate");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COSTING_SHEET_INSURANCE] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([InsuranceCompanyID] = @Original_InsuranceCompanyID) AND ([RefID] = @Original_RefID) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Original_EndDate) AND ([Rate] = @Original_Rate) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InsuranceCompanyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsuranceCompanyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COSTING_SHEET_INSURANCE] ([CostingSheetID], [InsuranceCompanyID], [RefID], [StartDate], [EndDate], [Rate], [Deleted], [COMPANY_ID], [Comment]) VALUES (@CostingSheetID, @InsuranceCompanyID, @RefID, @StartDate, @EndDate, @Rate, @Deleted, @COMPANY_ID, @Comment);
SELECT CostingSheetID, InsuranceCompanyID, RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment FROM LFS_PROJECT_COSTING_SHEET_INSURANCE WHERE (CostingSheetID = @CostingSheetID) AND (InsuranceCompanyID = @InsuranceCompanyID) AND (RefID = @RefID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InsuranceCompanyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsuranceCompanyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LFS_PROJECT_COSTING_SHEET_INSURANCE] SET [CostingSheetID] = @CostingSheetID, [InsuranceCompanyID] = @InsuranceCompanyID, [RefID] = @RefID, [StartDate] = @StartDate, [EndDate] = @EndDate, [Rate] = @Rate, [Deleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID, [Comment] = @Comment WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([InsuranceCompanyID] = @Original_InsuranceCompanyID) AND ([RefID] = @Original_RefID) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Original_EndDate) AND ([Rate] = @Original_Rate) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID));
SELECT CostingSheetID, InsuranceCompanyID, RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment FROM LFS_PROJECT_COSTING_SHEET_INSURANCE WHERE (CostingSheetID = @CostingSheetID) AND (InsuranceCompanyID = @InsuranceCompanyID) AND (RefID = @RefID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InsuranceCompanyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsuranceCompanyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_InsuranceCompanyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InsuranceCompanyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, InsuranceCompanyID, RefID, StartDate, EndDate, Rate, Delet" +
                "ed, COMPANY_ID, Comment FROM dbo.LFS_PROJECT_COSTING_SHEET_INSURANCE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_INSURANCEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COSTING_SHEET_INSURANCE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CostingSheetID, int Original_InsuranceCompanyID, int Original_RefID, System.DateTime Original_StartDate, System.DateTime Original_EndDate, decimal Original_Rate, bool Original_Deleted, int Original_COMPANY_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_InsuranceCompanyID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_RefID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_Rate));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_COMPANY_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CostingSheetID, int InsuranceCompanyID, int RefID, System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, int COMPANY_ID, string Comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(InsuranceCompanyID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(RefID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Rate));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(COMPANY_ID));
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    int InsuranceCompanyID, 
                    int RefID, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    decimal Rate, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    string Comment, 
                    int Original_CostingSheetID, 
                    int Original_InsuranceCompanyID, 
                    int Original_RefID, 
                    System.DateTime Original_StartDate, 
                    System.DateTime Original_EndDate, 
                    decimal Original_Rate, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(InsuranceCompanyID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(RefID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Rate));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(COMPANY_ID));
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Comment));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_InsuranceCompanyID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_RefID));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Rate));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_COMPANY_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, int COMPANY_ID, string Comment, int Original_CostingSheetID, int Original_InsuranceCompanyID, int Original_RefID, System.DateTime Original_StartDate, System.DateTime Original_EndDate, decimal Original_Rate, bool Original_Deleted, int Original_COMPANY_ID) {
            return this.Update(Original_CostingSheetID, Original_InsuranceCompanyID, Original_RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment, Original_CostingSheetID, Original_InsuranceCompanyID, Original_RefID, Original_StartDate, Original_EndDate, Original_Rate, Original_Deleted, Original_COMPANY_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COSTING_SHEET_BONDING";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("BondingCompanyID", "BondingCompanyID");
            tableMapping.ColumnMappings.Add("RefID", "RefID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("Rate", "Rate");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COSTING_SHEET_BONDING] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([BondingCompanyID] = @Original_BondingCompanyID) AND ([RefID] = @Original_RefID) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Original_EndDate) AND ([Rate] = @Original_Rate) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BondingCompanyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BondingCompanyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COSTING_SHEET_BONDING] ([CostingSheetID], [BondingCompanyID], [RefID], [StartDate], [EndDate], [Rate], [Deleted], [COMPANY_ID], [Comment]) VALUES (@CostingSheetID, @BondingCompanyID, @RefID, @StartDate, @EndDate, @Rate, @Deleted, @COMPANY_ID, @Comment);
SELECT CostingSheetID, BondingCompanyID, RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment FROM LFS_PROJECT_COSTING_SHEET_BONDING WHERE (BondingCompanyID = @BondingCompanyID) AND (CostingSheetID = @CostingSheetID) AND (RefID = @RefID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BondingCompanyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BondingCompanyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LFS_PROJECT_COSTING_SHEET_BONDING] SET [CostingSheetID] = @CostingSheetID, [BondingCompanyID] = @BondingCompanyID, [RefID] = @RefID, [StartDate] = @StartDate, [EndDate] = @EndDate, [Rate] = @Rate, [Deleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID, [Comment] = @Comment WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([BondingCompanyID] = @Original_BondingCompanyID) AND ([RefID] = @Original_RefID) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Original_EndDate) AND ([Rate] = @Original_Rate) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID));
SELECT CostingSheetID, BondingCompanyID, RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment FROM LFS_PROJECT_COSTING_SHEET_BONDING WHERE (BondingCompanyID = @BondingCompanyID) AND (CostingSheetID = @CostingSheetID) AND (RefID = @RefID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BondingCompanyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BondingCompanyID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BondingCompanyID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BondingCompanyID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, BondingCompanyID, RefID, StartDate, EndDate, Rate, Deleted" +
                ", COMPANY_ID, Comment FROM dbo.LFS_PROJECT_COSTING_SHEET_BONDING";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_BONDINGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_BONDINGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_BONDINGDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_BONDINGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_BONDINGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COSTING_SHEET_BONDING");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CostingSheetID, int Original_BondingCompanyID, int Original_RefID, System.DateTime Original_StartDate, System.DateTime Original_EndDate, decimal Original_Rate, bool Original_Deleted, string Original_COMPANY_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_BondingCompanyID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_RefID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_Rate));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_Deleted));
            if ((Original_COMPANY_ID == null)) {
                throw new global::System.ArgumentNullException("Original_COMPANY_ID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_COMPANY_ID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CostingSheetID, int BondingCompanyID, int RefID, System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, string COMPANY_ID, string Comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(BondingCompanyID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(RefID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Rate));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(Deleted));
            if ((COMPANY_ID == null)) {
                throw new global::System.ArgumentNullException("COMPANY_ID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(COMPANY_ID));
            }
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    int BondingCompanyID, 
                    int RefID, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    decimal Rate, 
                    bool Deleted, 
                    string COMPANY_ID, 
                    string Comment, 
                    int Original_CostingSheetID, 
                    int Original_BondingCompanyID, 
                    int Original_RefID, 
                    System.DateTime Original_StartDate, 
                    System.DateTime Original_EndDate, 
                    decimal Original_Rate, 
                    bool Original_Deleted, 
                    string Original_COMPANY_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(BondingCompanyID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(RefID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Rate));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Deleted));
            if ((COMPANY_ID == null)) {
                throw new global::System.ArgumentNullException("COMPANY_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(COMPANY_ID));
            }
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Comment));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_BondingCompanyID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_RefID));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Rate));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_Deleted));
            if ((Original_COMPANY_ID == null)) {
                throw new global::System.ArgumentNullException("Original_COMPANY_ID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_COMPANY_ID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, string COMPANY_ID, string Comment, int Original_CostingSheetID, int Original_BondingCompanyID, int Original_RefID, System.DateTime Original_StartDate, System.DateTime Original_EndDate, decimal Original_Rate, bool Original_Deleted, string Original_COMPANY_ID) {
            return this.Update(Original_CostingSheetID, Original_BondingCompanyID, Original_RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment, Original_CostingSheetID, Original_BondingCompanyID, Original_RefID, Original_StartDate, Original_EndDate, Original_Rate, Original_Deleted, Original_COMPANY_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_PROJECT_COSTING_SHEET_HOTELTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_PROJECT_COSTING_SHEET_HOTELTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_PROJECT_COSTING_SHEET_HOTEL";
            tableMapping.ColumnMappings.Add("CostingSheetID", "CostingSheetID");
            tableMapping.ColumnMappings.Add("HotelID", "HotelID");
            tableMapping.ColumnMappings.Add("RefID", "RefID");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("EndDate", "EndDate");
            tableMapping.ColumnMappings.Add("Rate", "Rate");
            tableMapping.ColumnMappings.Add("Deleted", "Deleted");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[LFS_PROJECT_COSTING_SHEET_HOTEL] WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([HotelID] = @Original_HotelID) AND ([RefID] = @Original_RefID) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Original_EndDate) AND ([Rate] = @Original_Rate) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HotelID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HotelID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[LFS_PROJECT_COSTING_SHEET_HOTEL] ([CostingSheetID], [HotelID], [RefID], [StartDate], [EndDate], [Rate], [Deleted], [COMPANY_ID], [Comment]) VALUES (@CostingSheetID, @HotelID, @RefID, @StartDate, @EndDate, @Rate, @Deleted, @COMPANY_ID, @Comment);
SELECT CostingSheetID, HotelID, RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment FROM LFS_PROJECT_COSTING_SHEET_HOTEL WHERE (CostingSheetID = @CostingSheetID) AND (HotelID = @HotelID) AND (RefID = @RefID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HotelID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HotelID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[LFS_PROJECT_COSTING_SHEET_HOTEL] SET [CostingSheetID] = @CostingSheetID, [HotelID] = @HotelID, [RefID] = @RefID, [StartDate] = @StartDate, [EndDate] = @EndDate, [Rate] = @Rate, [Deleted] = @Deleted, [COMPANY_ID] = @COMPANY_ID, [Comment] = @Comment WHERE (([CostingSheetID] = @Original_CostingSheetID) AND ([HotelID] = @Original_HotelID) AND ([RefID] = @Original_RefID) AND ([StartDate] = @Original_StartDate) AND ([EndDate] = @Original_EndDate) AND ([Rate] = @Original_Rate) AND ([Deleted] = @Original_Deleted) AND ([COMPANY_ID] = @Original_COMPANY_ID));
SELECT CostingSheetID, HotelID, RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment FROM LFS_PROJECT_COSTING_SHEET_HOTEL WHERE (CostingSheetID = @CostingSheetID) AND (HotelID = @HotelID) AND (RefID = @RefID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HotelID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HotelID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CostingSheetID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CostingSheetID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HotelID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HotelID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RefID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RefID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Rate", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Rate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Deleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Deleted", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = "Data Source=DEVENV;Initial Catalog=Live1;Integrated Security=True";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CostingSheetID, HotelID, RefID, StartDate, EndDate, Rate, Deleted, COMPANY" +
                "_ID, Comment FROM dbo.LFS_PROJECT_COSTING_SHEET_HOTEL";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_HOTELDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_HOTELDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_HOTELDataTable dataTable = new ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_HOTELDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS.LFS_PROJECT_COSTING_SHEET_HOTELDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectCostingSheetTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_PROJECT_COSTING_SHEET_HOTEL");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CostingSheetID, int Original_HotelID, int Original_RefID, System.DateTime Original_StartDate, System.DateTime Original_EndDate, decimal Original_Rate, bool Original_Deleted, int Original_COMPANY_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CostingSheetID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_HotelID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_RefID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_Rate));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_Deleted));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_COMPANY_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CostingSheetID, int HotelID, int RefID, System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, int COMPANY_ID, string Comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HotelID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(RefID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(Rate));
            this.Adapter.InsertCommand.Parameters[6].Value = ((bool)(Deleted));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(COMPANY_ID));
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int CostingSheetID, 
                    int HotelID, 
                    int RefID, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    decimal Rate, 
                    bool Deleted, 
                    int COMPANY_ID, 
                    string Comment, 
                    int Original_CostingSheetID, 
                    int Original_HotelID, 
                    int Original_RefID, 
                    System.DateTime Original_StartDate, 
                    System.DateTime Original_EndDate, 
                    decimal Original_Rate, 
                    bool Original_Deleted, 
                    int Original_COMPANY_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HotelID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(RefID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(StartDate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(EndDate));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Rate));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((bool)(Deleted));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(COMPANY_ID));
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Comment));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_CostingSheetID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_HotelID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_RefID));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_StartDate));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_EndDate));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Rate));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_Deleted));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_COMPANY_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime StartDate, System.DateTime EndDate, decimal Rate, bool Deleted, int COMPANY_ID, string Comment, int Original_CostingSheetID, int Original_HotelID, int Original_RefID, System.DateTime Original_StartDate, System.DateTime Original_EndDate, decimal Original_Rate, bool Original_Deleted, int Original_COMPANY_ID) {
            return this.Update(Original_CostingSheetID, Original_HotelID, Original_RefID, StartDate, EndDate, Rate, Deleted, COMPANY_ID, Comment, Original_CostingSheetID, Original_HotelID, Original_RefID, Original_StartDate, Original_EndDate, Original_Rate, Original_Deleted, Original_COMPANY_ID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter _lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter _lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter _lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter _lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter _lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter _lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter _lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter;
        
        private LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter _lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter;
        
        private LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter _lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter;
        
        private LFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter _lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter;
        
        private LFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter _lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter;
        
        private LFS_PROJECT_COSTING_SHEET_HOTELTableAdapter _lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter {
            get {
                return this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter;
            }
            set {
                this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter LFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter {
            get {
                return this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter;
            }
            set {
                this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter {
            get {
                return this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter;
            }
            set {
                this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter LFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter {
            get {
                return this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter;
            }
            set {
                this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter {
            get {
                return this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter;
            }
            set {
                this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter {
            get {
                return this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter;
            }
            set {
                this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter {
            get {
                return this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter;
            }
            set {
                this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter {
            get {
                return this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter;
            }
            set {
                this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter {
            get {
                return this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter;
            }
            set {
                this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter LFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter {
            get {
                return this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter;
            }
            set {
                this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter LFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter {
            get {
                return this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter;
            }
            set {
                this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_PROJECT_COSTING_SHEET_HOTELTableAdapter LFS_PROJECT_COSTING_SHEET_HOTELTableAdapter {
            get {
                return this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter;
            }
            set {
                this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter != null) 
                            && (this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter != null) 
                            && (this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter != null) 
                            && (this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter != null) 
                            && (this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter != null) 
                            && (this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter != null) 
                            && (this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter != null) 
                            && (this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter != null) 
                            && (this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter != null) 
                            && (this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter != null) 
                            && (this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter != null) 
                            && (this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Connection;
                }
                if (((this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter != null) 
                            && (this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Connection != null))) {
                    return this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ProjectCostingSheetTDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COSTING_SHEET_BONDING.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COSTING_SHEET_HOTEL.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COSTING_SHEET_INSURANCE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ProjectCostingSheetTDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COSTING_SHEET_BONDING.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COSTING_SHEET_HOTEL.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COSTING_SHEET_INSURANCE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ProjectCostingSheetTDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_PROJECT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COSTING_SHEET_OTHER_CATEGORY.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COSTING_SHEET_INSURANCE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COSTING_SHEET_HOTEL.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COSTING_SHEET_BONDING.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_UNITS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_MATERIAL.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_REVENUE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTOR.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ProjectCostingSheetTDS dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter, this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Connection);
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter, this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Connection);
                    this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter, this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Connection);
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter, this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Connection);
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter, this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Connection);
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter, this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Connection);
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter, this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Connection);
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter, this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Connection);
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter, this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Connection);
                    this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter, this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Connection);
                    this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter, this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Connection);
                    this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Adapter);
                    }
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter != null)) {
                    revertConnections.Add(this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter, this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Connection);
                    this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter != null)) {
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter]));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_PROJECTTableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter != null)) {
                    this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter]));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEETTableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter != null)) {
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter]));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_LABOUR_HOURSTableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter != null)) {
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter]));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_UNITSTableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter != null)) {
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter]));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_MATERIALTableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter != null)) {
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter]));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_SUBCONTRACTORTableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter != null)) {
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter]));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_REVENUETableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter != null)) {
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter]));
                    this._lFS_PROJECT_COMBINED_COSTING_SHEET_OTHER_COSTSTableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter != null)) {
                    this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter]));
                    this._lFS_PROJECT_COSTING_SHEET_OTHER_CATEGORYTableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter != null)) {
                    this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter]));
                    this._lFS_PROJECT_COSTING_SHEET_INSURANCETableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter != null)) {
                    this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter]));
                    this._lFS_PROJECT_COSTING_SHEET_BONDINGTableAdapter.Transaction = null;
                }
                if ((this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter != null)) {
                    this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter]));
                    this._lFS_PROJECT_COSTING_SHEET_HOTELTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591