//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Projects.Projects {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectCostingSheetAddTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectCostingSheetAddTDS : global::System.Data.DataSet {
        
        private BasicInformationDataTable tableBasicInformation;
        
        private UnitsInformationDataTable tableUnitsInformation;
        
        private LabourHoursInformationDataTable tableLabourHoursInformation;
        
        private MaterialsInformationDataTable tableMaterialsInformation;
        
        private EmployeeListDataTable tableEmployeeList;
        
        private OriginalLabourHourDataTable tableOriginalLabourHour;
        
        private OtherCostsInformationDataTable tableOtherCostsInformation;
        
        private UnitListDataTable tableUnitList;
        
        private OriginalUnitDataTable tableOriginalUnit;
        
        private MaterialListDataTable tableMaterialList;
        
        private OriginalMaterialDataTable tableOriginalMaterial;
        
        private EmployeePayPeriodDataTable tableEmployeePayPeriod;
        
        private UnitPayPeriodDataTable tableUnitPayPeriod;
        
        private MaterialPayPeriodDataTable tableMaterialPayPeriod;
        
        private FunctionListDataTable tableFunctionList;
        
        private SubcontractorsInformationDataTable tableSubcontractorsInformation;
        
        private SubcontractorListDataTable tableSubcontractorList;
        
        private OriginalSubcontractorDataTable tableOriginalSubcontractor;
        
        private RevenueInformationDataTable tableRevenueInformation;
        
        private OriginalRevenueDataTable tableOriginalRevenue;
        
        private TemplateInformationDataTable tableTemplateInformation;
        
        private CombinedBasicInformationDataTable tableCombinedBasicInformation;
        
        private CombinedLabourHoursInformationDataTable tableCombinedLabourHoursInformation;
        
        private CombinedUnitsInformationDataTable tableCombinedUnitsInformation;
        
        private CombinedMaterialsInformationDataTable tableCombinedMaterialsInformation;
        
        private CombinedSubcontractorsInformationDataTable tableCombinedSubcontractorsInformation;
        
        private CombinedRevenueInformationDataTable tableCombinedRevenueInformation;
        
        private CombinedOtherCostsInformationDataTable tableCombinedOtherCostsInformation;
        
        private HotelsInformationDataTable tableHotelsInformation;
        
        private BondingsInformationDataTable tableBondingsInformation;
        
        private InsurancesInformationDataTable tableInsurancesInformation;
        
        private OtherCategoryInformationDataTable tableOtherCategoryInformation;
        
        private HotelListDataTable tableHotelList;
        
        private BondingListDataTable tableBondingList;
        
        private InsuranceListDataTable tableInsuranceList;
        
        private OtherCategoryListDataTable tableOtherCategoryList;
        
        private OriginalHotelDataTable tableOriginalHotel;
        
        private OriginalBondingDataTable tableOriginalBonding;
        
        private OriginalInsuranceDataTable tableOriginalInsurance;
        
        private OriginalOtherCategoryDataTable tableOriginalOtherCategory;
        
        private ProjectListDataTable tableProjectList;
        
        private DummyInformationDataTable tableDummyInformation;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectCostingSheetAddTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectCostingSheetAddTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["UnitsInformation"] != null)) {
                    base.Tables.Add(new UnitsInformationDataTable(ds.Tables["UnitsInformation"]));
                }
                if ((ds.Tables["LabourHoursInformation"] != null)) {
                    base.Tables.Add(new LabourHoursInformationDataTable(ds.Tables["LabourHoursInformation"]));
                }
                if ((ds.Tables["MaterialsInformation"] != null)) {
                    base.Tables.Add(new MaterialsInformationDataTable(ds.Tables["MaterialsInformation"]));
                }
                if ((ds.Tables["EmployeeList"] != null)) {
                    base.Tables.Add(new EmployeeListDataTable(ds.Tables["EmployeeList"]));
                }
                if ((ds.Tables["OriginalLabourHour"] != null)) {
                    base.Tables.Add(new OriginalLabourHourDataTable(ds.Tables["OriginalLabourHour"]));
                }
                if ((ds.Tables["OtherCostsInformation"] != null)) {
                    base.Tables.Add(new OtherCostsInformationDataTable(ds.Tables["OtherCostsInformation"]));
                }
                if ((ds.Tables["UnitList"] != null)) {
                    base.Tables.Add(new UnitListDataTable(ds.Tables["UnitList"]));
                }
                if ((ds.Tables["OriginalUnit"] != null)) {
                    base.Tables.Add(new OriginalUnitDataTable(ds.Tables["OriginalUnit"]));
                }
                if ((ds.Tables["MaterialList"] != null)) {
                    base.Tables.Add(new MaterialListDataTable(ds.Tables["MaterialList"]));
                }
                if ((ds.Tables["OriginalMaterial"] != null)) {
                    base.Tables.Add(new OriginalMaterialDataTable(ds.Tables["OriginalMaterial"]));
                }
                if ((ds.Tables["EmployeePayPeriod"] != null)) {
                    base.Tables.Add(new EmployeePayPeriodDataTable(ds.Tables["EmployeePayPeriod"]));
                }
                if ((ds.Tables["UnitPayPeriod"] != null)) {
                    base.Tables.Add(new UnitPayPeriodDataTable(ds.Tables["UnitPayPeriod"]));
                }
                if ((ds.Tables["MaterialPayPeriod"] != null)) {
                    base.Tables.Add(new MaterialPayPeriodDataTable(ds.Tables["MaterialPayPeriod"]));
                }
                if ((ds.Tables["FunctionList"] != null)) {
                    base.Tables.Add(new FunctionListDataTable(ds.Tables["FunctionList"]));
                }
                if ((ds.Tables["SubcontractorsInformation"] != null)) {
                    base.Tables.Add(new SubcontractorsInformationDataTable(ds.Tables["SubcontractorsInformation"]));
                }
                if ((ds.Tables["SubcontractorList"] != null)) {
                    base.Tables.Add(new SubcontractorListDataTable(ds.Tables["SubcontractorList"]));
                }
                if ((ds.Tables["OriginalSubcontractor"] != null)) {
                    base.Tables.Add(new OriginalSubcontractorDataTable(ds.Tables["OriginalSubcontractor"]));
                }
                if ((ds.Tables["RevenueInformation"] != null)) {
                    base.Tables.Add(new RevenueInformationDataTable(ds.Tables["RevenueInformation"]));
                }
                if ((ds.Tables["OriginalRevenue"] != null)) {
                    base.Tables.Add(new OriginalRevenueDataTable(ds.Tables["OriginalRevenue"]));
                }
                if ((ds.Tables["TemplateInformation"] != null)) {
                    base.Tables.Add(new TemplateInformationDataTable(ds.Tables["TemplateInformation"]));
                }
                if ((ds.Tables["CombinedBasicInformation"] != null)) {
                    base.Tables.Add(new CombinedBasicInformationDataTable(ds.Tables["CombinedBasicInformation"]));
                }
                if ((ds.Tables["CombinedLabourHoursInformation"] != null)) {
                    base.Tables.Add(new CombinedLabourHoursInformationDataTable(ds.Tables["CombinedLabourHoursInformation"]));
                }
                if ((ds.Tables["CombinedUnitsInformation"] != null)) {
                    base.Tables.Add(new CombinedUnitsInformationDataTable(ds.Tables["CombinedUnitsInformation"]));
                }
                if ((ds.Tables["CombinedMaterialsInformation"] != null)) {
                    base.Tables.Add(new CombinedMaterialsInformationDataTable(ds.Tables["CombinedMaterialsInformation"]));
                }
                if ((ds.Tables["CombinedSubcontractorsInformation"] != null)) {
                    base.Tables.Add(new CombinedSubcontractorsInformationDataTable(ds.Tables["CombinedSubcontractorsInformation"]));
                }
                if ((ds.Tables["CombinedRevenueInformation"] != null)) {
                    base.Tables.Add(new CombinedRevenueInformationDataTable(ds.Tables["CombinedRevenueInformation"]));
                }
                if ((ds.Tables["CombinedOtherCostsInformation"] != null)) {
                    base.Tables.Add(new CombinedOtherCostsInformationDataTable(ds.Tables["CombinedOtherCostsInformation"]));
                }
                if ((ds.Tables["HotelsInformation"] != null)) {
                    base.Tables.Add(new HotelsInformationDataTable(ds.Tables["HotelsInformation"]));
                }
                if ((ds.Tables["BondingsInformation"] != null)) {
                    base.Tables.Add(new BondingsInformationDataTable(ds.Tables["BondingsInformation"]));
                }
                if ((ds.Tables["InsurancesInformation"] != null)) {
                    base.Tables.Add(new InsurancesInformationDataTable(ds.Tables["InsurancesInformation"]));
                }
                if ((ds.Tables["OtherCategoryInformation"] != null)) {
                    base.Tables.Add(new OtherCategoryInformationDataTable(ds.Tables["OtherCategoryInformation"]));
                }
                if ((ds.Tables["HotelList"] != null)) {
                    base.Tables.Add(new HotelListDataTable(ds.Tables["HotelList"]));
                }
                if ((ds.Tables["BondingList"] != null)) {
                    base.Tables.Add(new BondingListDataTable(ds.Tables["BondingList"]));
                }
                if ((ds.Tables["InsuranceList"] != null)) {
                    base.Tables.Add(new InsuranceListDataTable(ds.Tables["InsuranceList"]));
                }
                if ((ds.Tables["OtherCategoryList"] != null)) {
                    base.Tables.Add(new OtherCategoryListDataTable(ds.Tables["OtherCategoryList"]));
                }
                if ((ds.Tables["OriginalHotel"] != null)) {
                    base.Tables.Add(new OriginalHotelDataTable(ds.Tables["OriginalHotel"]));
                }
                if ((ds.Tables["OriginalBonding"] != null)) {
                    base.Tables.Add(new OriginalBondingDataTable(ds.Tables["OriginalBonding"]));
                }
                if ((ds.Tables["OriginalInsurance"] != null)) {
                    base.Tables.Add(new OriginalInsuranceDataTable(ds.Tables["OriginalInsurance"]));
                }
                if ((ds.Tables["OriginalOtherCategory"] != null)) {
                    base.Tables.Add(new OriginalOtherCategoryDataTable(ds.Tables["OriginalOtherCategory"]));
                }
                if ((ds.Tables["ProjectList"] != null)) {
                    base.Tables.Add(new ProjectListDataTable(ds.Tables["ProjectList"]));
                }
                if ((ds.Tables["DummyInformation"] != null)) {
                    base.Tables.Add(new DummyInformationDataTable(ds.Tables["DummyInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BasicInformationDataTable BasicInformation {
            get {
                return this.tableBasicInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitsInformationDataTable UnitsInformation {
            get {
                return this.tableUnitsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LabourHoursInformationDataTable LabourHoursInformation {
            get {
                return this.tableLabourHoursInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MaterialsInformationDataTable MaterialsInformation {
            get {
                return this.tableMaterialsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeListDataTable EmployeeList {
            get {
                return this.tableEmployeeList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalLabourHourDataTable OriginalLabourHour {
            get {
                return this.tableOriginalLabourHour;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OtherCostsInformationDataTable OtherCostsInformation {
            get {
                return this.tableOtherCostsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitListDataTable UnitList {
            get {
                return this.tableUnitList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalUnitDataTable OriginalUnit {
            get {
                return this.tableOriginalUnit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MaterialListDataTable MaterialList {
            get {
                return this.tableMaterialList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalMaterialDataTable OriginalMaterial {
            get {
                return this.tableOriginalMaterial;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeePayPeriodDataTable EmployeePayPeriod {
            get {
                return this.tableEmployeePayPeriod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitPayPeriodDataTable UnitPayPeriod {
            get {
                return this.tableUnitPayPeriod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MaterialPayPeriodDataTable MaterialPayPeriod {
            get {
                return this.tableMaterialPayPeriod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FunctionListDataTable FunctionList {
            get {
                return this.tableFunctionList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubcontractorsInformationDataTable SubcontractorsInformation {
            get {
                return this.tableSubcontractorsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubcontractorListDataTable SubcontractorList {
            get {
                return this.tableSubcontractorList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalSubcontractorDataTable OriginalSubcontractor {
            get {
                return this.tableOriginalSubcontractor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RevenueInformationDataTable RevenueInformation {
            get {
                return this.tableRevenueInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalRevenueDataTable OriginalRevenue {
            get {
                return this.tableOriginalRevenue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateInformationDataTable TemplateInformation {
            get {
                return this.tableTemplateInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedBasicInformationDataTable CombinedBasicInformation {
            get {
                return this.tableCombinedBasicInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedLabourHoursInformationDataTable CombinedLabourHoursInformation {
            get {
                return this.tableCombinedLabourHoursInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedUnitsInformationDataTable CombinedUnitsInformation {
            get {
                return this.tableCombinedUnitsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedMaterialsInformationDataTable CombinedMaterialsInformation {
            get {
                return this.tableCombinedMaterialsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedSubcontractorsInformationDataTable CombinedSubcontractorsInformation {
            get {
                return this.tableCombinedSubcontractorsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedRevenueInformationDataTable CombinedRevenueInformation {
            get {
                return this.tableCombinedRevenueInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CombinedOtherCostsInformationDataTable CombinedOtherCostsInformation {
            get {
                return this.tableCombinedOtherCostsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HotelsInformationDataTable HotelsInformation {
            get {
                return this.tableHotelsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BondingsInformationDataTable BondingsInformation {
            get {
                return this.tableBondingsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InsurancesInformationDataTable InsurancesInformation {
            get {
                return this.tableInsurancesInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OtherCategoryInformationDataTable OtherCategoryInformation {
            get {
                return this.tableOtherCategoryInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HotelListDataTable HotelList {
            get {
                return this.tableHotelList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BondingListDataTable BondingList {
            get {
                return this.tableBondingList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InsuranceListDataTable InsuranceList {
            get {
                return this.tableInsuranceList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OtherCategoryListDataTable OtherCategoryList {
            get {
                return this.tableOtherCategoryList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalHotelDataTable OriginalHotel {
            get {
                return this.tableOriginalHotel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalBondingDataTable OriginalBonding {
            get {
                return this.tableOriginalBonding;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalInsuranceDataTable OriginalInsurance {
            get {
                return this.tableOriginalInsurance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalOtherCategoryDataTable OriginalOtherCategory {
            get {
                return this.tableOriginalOtherCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectListDataTable ProjectList {
            get {
                return this.tableProjectList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DummyInformationDataTable DummyInformation {
            get {
                return this.tableDummyInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectCostingSheetAddTDS cln = ((ProjectCostingSheetAddTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["UnitsInformation"] != null)) {
                    base.Tables.Add(new UnitsInformationDataTable(ds.Tables["UnitsInformation"]));
                }
                if ((ds.Tables["LabourHoursInformation"] != null)) {
                    base.Tables.Add(new LabourHoursInformationDataTable(ds.Tables["LabourHoursInformation"]));
                }
                if ((ds.Tables["MaterialsInformation"] != null)) {
                    base.Tables.Add(new MaterialsInformationDataTable(ds.Tables["MaterialsInformation"]));
                }
                if ((ds.Tables["EmployeeList"] != null)) {
                    base.Tables.Add(new EmployeeListDataTable(ds.Tables["EmployeeList"]));
                }
                if ((ds.Tables["OriginalLabourHour"] != null)) {
                    base.Tables.Add(new OriginalLabourHourDataTable(ds.Tables["OriginalLabourHour"]));
                }
                if ((ds.Tables["OtherCostsInformation"] != null)) {
                    base.Tables.Add(new OtherCostsInformationDataTable(ds.Tables["OtherCostsInformation"]));
                }
                if ((ds.Tables["UnitList"] != null)) {
                    base.Tables.Add(new UnitListDataTable(ds.Tables["UnitList"]));
                }
                if ((ds.Tables["OriginalUnit"] != null)) {
                    base.Tables.Add(new OriginalUnitDataTable(ds.Tables["OriginalUnit"]));
                }
                if ((ds.Tables["MaterialList"] != null)) {
                    base.Tables.Add(new MaterialListDataTable(ds.Tables["MaterialList"]));
                }
                if ((ds.Tables["OriginalMaterial"] != null)) {
                    base.Tables.Add(new OriginalMaterialDataTable(ds.Tables["OriginalMaterial"]));
                }
                if ((ds.Tables["EmployeePayPeriod"] != null)) {
                    base.Tables.Add(new EmployeePayPeriodDataTable(ds.Tables["EmployeePayPeriod"]));
                }
                if ((ds.Tables["UnitPayPeriod"] != null)) {
                    base.Tables.Add(new UnitPayPeriodDataTable(ds.Tables["UnitPayPeriod"]));
                }
                if ((ds.Tables["MaterialPayPeriod"] != null)) {
                    base.Tables.Add(new MaterialPayPeriodDataTable(ds.Tables["MaterialPayPeriod"]));
                }
                if ((ds.Tables["FunctionList"] != null)) {
                    base.Tables.Add(new FunctionListDataTable(ds.Tables["FunctionList"]));
                }
                if ((ds.Tables["SubcontractorsInformation"] != null)) {
                    base.Tables.Add(new SubcontractorsInformationDataTable(ds.Tables["SubcontractorsInformation"]));
                }
                if ((ds.Tables["SubcontractorList"] != null)) {
                    base.Tables.Add(new SubcontractorListDataTable(ds.Tables["SubcontractorList"]));
                }
                if ((ds.Tables["OriginalSubcontractor"] != null)) {
                    base.Tables.Add(new OriginalSubcontractorDataTable(ds.Tables["OriginalSubcontractor"]));
                }
                if ((ds.Tables["RevenueInformation"] != null)) {
                    base.Tables.Add(new RevenueInformationDataTable(ds.Tables["RevenueInformation"]));
                }
                if ((ds.Tables["OriginalRevenue"] != null)) {
                    base.Tables.Add(new OriginalRevenueDataTable(ds.Tables["OriginalRevenue"]));
                }
                if ((ds.Tables["TemplateInformation"] != null)) {
                    base.Tables.Add(new TemplateInformationDataTable(ds.Tables["TemplateInformation"]));
                }
                if ((ds.Tables["CombinedBasicInformation"] != null)) {
                    base.Tables.Add(new CombinedBasicInformationDataTable(ds.Tables["CombinedBasicInformation"]));
                }
                if ((ds.Tables["CombinedLabourHoursInformation"] != null)) {
                    base.Tables.Add(new CombinedLabourHoursInformationDataTable(ds.Tables["CombinedLabourHoursInformation"]));
                }
                if ((ds.Tables["CombinedUnitsInformation"] != null)) {
                    base.Tables.Add(new CombinedUnitsInformationDataTable(ds.Tables["CombinedUnitsInformation"]));
                }
                if ((ds.Tables["CombinedMaterialsInformation"] != null)) {
                    base.Tables.Add(new CombinedMaterialsInformationDataTable(ds.Tables["CombinedMaterialsInformation"]));
                }
                if ((ds.Tables["CombinedSubcontractorsInformation"] != null)) {
                    base.Tables.Add(new CombinedSubcontractorsInformationDataTable(ds.Tables["CombinedSubcontractorsInformation"]));
                }
                if ((ds.Tables["CombinedRevenueInformation"] != null)) {
                    base.Tables.Add(new CombinedRevenueInformationDataTable(ds.Tables["CombinedRevenueInformation"]));
                }
                if ((ds.Tables["CombinedOtherCostsInformation"] != null)) {
                    base.Tables.Add(new CombinedOtherCostsInformationDataTable(ds.Tables["CombinedOtherCostsInformation"]));
                }
                if ((ds.Tables["HotelsInformation"] != null)) {
                    base.Tables.Add(new HotelsInformationDataTable(ds.Tables["HotelsInformation"]));
                }
                if ((ds.Tables["BondingsInformation"] != null)) {
                    base.Tables.Add(new BondingsInformationDataTable(ds.Tables["BondingsInformation"]));
                }
                if ((ds.Tables["InsurancesInformation"] != null)) {
                    base.Tables.Add(new InsurancesInformationDataTable(ds.Tables["InsurancesInformation"]));
                }
                if ((ds.Tables["OtherCategoryInformation"] != null)) {
                    base.Tables.Add(new OtherCategoryInformationDataTable(ds.Tables["OtherCategoryInformation"]));
                }
                if ((ds.Tables["HotelList"] != null)) {
                    base.Tables.Add(new HotelListDataTable(ds.Tables["HotelList"]));
                }
                if ((ds.Tables["BondingList"] != null)) {
                    base.Tables.Add(new BondingListDataTable(ds.Tables["BondingList"]));
                }
                if ((ds.Tables["InsuranceList"] != null)) {
                    base.Tables.Add(new InsuranceListDataTable(ds.Tables["InsuranceList"]));
                }
                if ((ds.Tables["OtherCategoryList"] != null)) {
                    base.Tables.Add(new OtherCategoryListDataTable(ds.Tables["OtherCategoryList"]));
                }
                if ((ds.Tables["OriginalHotel"] != null)) {
                    base.Tables.Add(new OriginalHotelDataTable(ds.Tables["OriginalHotel"]));
                }
                if ((ds.Tables["OriginalBonding"] != null)) {
                    base.Tables.Add(new OriginalBondingDataTable(ds.Tables["OriginalBonding"]));
                }
                if ((ds.Tables["OriginalInsurance"] != null)) {
                    base.Tables.Add(new OriginalInsuranceDataTable(ds.Tables["OriginalInsurance"]));
                }
                if ((ds.Tables["OriginalOtherCategory"] != null)) {
                    base.Tables.Add(new OriginalOtherCategoryDataTable(ds.Tables["OriginalOtherCategory"]));
                }
                if ((ds.Tables["ProjectList"] != null)) {
                    base.Tables.Add(new ProjectListDataTable(ds.Tables["ProjectList"]));
                }
                if ((ds.Tables["DummyInformation"] != null)) {
                    base.Tables.Add(new DummyInformationDataTable(ds.Tables["DummyInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBasicInformation = ((BasicInformationDataTable)(base.Tables["BasicInformation"]));
            if ((initTable == true)) {
                if ((this.tableBasicInformation != null)) {
                    this.tableBasicInformation.InitVars();
                }
            }
            this.tableUnitsInformation = ((UnitsInformationDataTable)(base.Tables["UnitsInformation"]));
            if ((initTable == true)) {
                if ((this.tableUnitsInformation != null)) {
                    this.tableUnitsInformation.InitVars();
                }
            }
            this.tableLabourHoursInformation = ((LabourHoursInformationDataTable)(base.Tables["LabourHoursInformation"]));
            if ((initTable == true)) {
                if ((this.tableLabourHoursInformation != null)) {
                    this.tableLabourHoursInformation.InitVars();
                }
            }
            this.tableMaterialsInformation = ((MaterialsInformationDataTable)(base.Tables["MaterialsInformation"]));
            if ((initTable == true)) {
                if ((this.tableMaterialsInformation != null)) {
                    this.tableMaterialsInformation.InitVars();
                }
            }
            this.tableEmployeeList = ((EmployeeListDataTable)(base.Tables["EmployeeList"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeList != null)) {
                    this.tableEmployeeList.InitVars();
                }
            }
            this.tableOriginalLabourHour = ((OriginalLabourHourDataTable)(base.Tables["OriginalLabourHour"]));
            if ((initTable == true)) {
                if ((this.tableOriginalLabourHour != null)) {
                    this.tableOriginalLabourHour.InitVars();
                }
            }
            this.tableOtherCostsInformation = ((OtherCostsInformationDataTable)(base.Tables["OtherCostsInformation"]));
            if ((initTable == true)) {
                if ((this.tableOtherCostsInformation != null)) {
                    this.tableOtherCostsInformation.InitVars();
                }
            }
            this.tableUnitList = ((UnitListDataTable)(base.Tables["UnitList"]));
            if ((initTable == true)) {
                if ((this.tableUnitList != null)) {
                    this.tableUnitList.InitVars();
                }
            }
            this.tableOriginalUnit = ((OriginalUnitDataTable)(base.Tables["OriginalUnit"]));
            if ((initTable == true)) {
                if ((this.tableOriginalUnit != null)) {
                    this.tableOriginalUnit.InitVars();
                }
            }
            this.tableMaterialList = ((MaterialListDataTable)(base.Tables["MaterialList"]));
            if ((initTable == true)) {
                if ((this.tableMaterialList != null)) {
                    this.tableMaterialList.InitVars();
                }
            }
            this.tableOriginalMaterial = ((OriginalMaterialDataTable)(base.Tables["OriginalMaterial"]));
            if ((initTable == true)) {
                if ((this.tableOriginalMaterial != null)) {
                    this.tableOriginalMaterial.InitVars();
                }
            }
            this.tableEmployeePayPeriod = ((EmployeePayPeriodDataTable)(base.Tables["EmployeePayPeriod"]));
            if ((initTable == true)) {
                if ((this.tableEmployeePayPeriod != null)) {
                    this.tableEmployeePayPeriod.InitVars();
                }
            }
            this.tableUnitPayPeriod = ((UnitPayPeriodDataTable)(base.Tables["UnitPayPeriod"]));
            if ((initTable == true)) {
                if ((this.tableUnitPayPeriod != null)) {
                    this.tableUnitPayPeriod.InitVars();
                }
            }
            this.tableMaterialPayPeriod = ((MaterialPayPeriodDataTable)(base.Tables["MaterialPayPeriod"]));
            if ((initTable == true)) {
                if ((this.tableMaterialPayPeriod != null)) {
                    this.tableMaterialPayPeriod.InitVars();
                }
            }
            this.tableFunctionList = ((FunctionListDataTable)(base.Tables["FunctionList"]));
            if ((initTable == true)) {
                if ((this.tableFunctionList != null)) {
                    this.tableFunctionList.InitVars();
                }
            }
            this.tableSubcontractorsInformation = ((SubcontractorsInformationDataTable)(base.Tables["SubcontractorsInformation"]));
            if ((initTable == true)) {
                if ((this.tableSubcontractorsInformation != null)) {
                    this.tableSubcontractorsInformation.InitVars();
                }
            }
            this.tableSubcontractorList = ((SubcontractorListDataTable)(base.Tables["SubcontractorList"]));
            if ((initTable == true)) {
                if ((this.tableSubcontractorList != null)) {
                    this.tableSubcontractorList.InitVars();
                }
            }
            this.tableOriginalSubcontractor = ((OriginalSubcontractorDataTable)(base.Tables["OriginalSubcontractor"]));
            if ((initTable == true)) {
                if ((this.tableOriginalSubcontractor != null)) {
                    this.tableOriginalSubcontractor.InitVars();
                }
            }
            this.tableRevenueInformation = ((RevenueInformationDataTable)(base.Tables["RevenueInformation"]));
            if ((initTable == true)) {
                if ((this.tableRevenueInformation != null)) {
                    this.tableRevenueInformation.InitVars();
                }
            }
            this.tableOriginalRevenue = ((OriginalRevenueDataTable)(base.Tables["OriginalRevenue"]));
            if ((initTable == true)) {
                if ((this.tableOriginalRevenue != null)) {
                    this.tableOriginalRevenue.InitVars();
                }
            }
            this.tableTemplateInformation = ((TemplateInformationDataTable)(base.Tables["TemplateInformation"]));
            if ((initTable == true)) {
                if ((this.tableTemplateInformation != null)) {
                    this.tableTemplateInformation.InitVars();
                }
            }
            this.tableCombinedBasicInformation = ((CombinedBasicInformationDataTable)(base.Tables["CombinedBasicInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedBasicInformation != null)) {
                    this.tableCombinedBasicInformation.InitVars();
                }
            }
            this.tableCombinedLabourHoursInformation = ((CombinedLabourHoursInformationDataTable)(base.Tables["CombinedLabourHoursInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedLabourHoursInformation != null)) {
                    this.tableCombinedLabourHoursInformation.InitVars();
                }
            }
            this.tableCombinedUnitsInformation = ((CombinedUnitsInformationDataTable)(base.Tables["CombinedUnitsInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedUnitsInformation != null)) {
                    this.tableCombinedUnitsInformation.InitVars();
                }
            }
            this.tableCombinedMaterialsInformation = ((CombinedMaterialsInformationDataTable)(base.Tables["CombinedMaterialsInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedMaterialsInformation != null)) {
                    this.tableCombinedMaterialsInformation.InitVars();
                }
            }
            this.tableCombinedSubcontractorsInformation = ((CombinedSubcontractorsInformationDataTable)(base.Tables["CombinedSubcontractorsInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedSubcontractorsInformation != null)) {
                    this.tableCombinedSubcontractorsInformation.InitVars();
                }
            }
            this.tableCombinedRevenueInformation = ((CombinedRevenueInformationDataTable)(base.Tables["CombinedRevenueInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedRevenueInformation != null)) {
                    this.tableCombinedRevenueInformation.InitVars();
                }
            }
            this.tableCombinedOtherCostsInformation = ((CombinedOtherCostsInformationDataTable)(base.Tables["CombinedOtherCostsInformation"]));
            if ((initTable == true)) {
                if ((this.tableCombinedOtherCostsInformation != null)) {
                    this.tableCombinedOtherCostsInformation.InitVars();
                }
            }
            this.tableHotelsInformation = ((HotelsInformationDataTable)(base.Tables["HotelsInformation"]));
            if ((initTable == true)) {
                if ((this.tableHotelsInformation != null)) {
                    this.tableHotelsInformation.InitVars();
                }
            }
            this.tableBondingsInformation = ((BondingsInformationDataTable)(base.Tables["BondingsInformation"]));
            if ((initTable == true)) {
                if ((this.tableBondingsInformation != null)) {
                    this.tableBondingsInformation.InitVars();
                }
            }
            this.tableInsurancesInformation = ((InsurancesInformationDataTable)(base.Tables["InsurancesInformation"]));
            if ((initTable == true)) {
                if ((this.tableInsurancesInformation != null)) {
                    this.tableInsurancesInformation.InitVars();
                }
            }
            this.tableOtherCategoryInformation = ((OtherCategoryInformationDataTable)(base.Tables["OtherCategoryInformation"]));
            if ((initTable == true)) {
                if ((this.tableOtherCategoryInformation != null)) {
                    this.tableOtherCategoryInformation.InitVars();
                }
            }
            this.tableHotelList = ((HotelListDataTable)(base.Tables["HotelList"]));
            if ((initTable == true)) {
                if ((this.tableHotelList != null)) {
                    this.tableHotelList.InitVars();
                }
            }
            this.tableBondingList = ((BondingListDataTable)(base.Tables["BondingList"]));
            if ((initTable == true)) {
                if ((this.tableBondingList != null)) {
                    this.tableBondingList.InitVars();
                }
            }
            this.tableInsuranceList = ((InsuranceListDataTable)(base.Tables["InsuranceList"]));
            if ((initTable == true)) {
                if ((this.tableInsuranceList != null)) {
                    this.tableInsuranceList.InitVars();
                }
            }
            this.tableOtherCategoryList = ((OtherCategoryListDataTable)(base.Tables["OtherCategoryList"]));
            if ((initTable == true)) {
                if ((this.tableOtherCategoryList != null)) {
                    this.tableOtherCategoryList.InitVars();
                }
            }
            this.tableOriginalHotel = ((OriginalHotelDataTable)(base.Tables["OriginalHotel"]));
            if ((initTable == true)) {
                if ((this.tableOriginalHotel != null)) {
                    this.tableOriginalHotel.InitVars();
                }
            }
            this.tableOriginalBonding = ((OriginalBondingDataTable)(base.Tables["OriginalBonding"]));
            if ((initTable == true)) {
                if ((this.tableOriginalBonding != null)) {
                    this.tableOriginalBonding.InitVars();
                }
            }
            this.tableOriginalInsurance = ((OriginalInsuranceDataTable)(base.Tables["OriginalInsurance"]));
            if ((initTable == true)) {
                if ((this.tableOriginalInsurance != null)) {
                    this.tableOriginalInsurance.InitVars();
                }
            }
            this.tableOriginalOtherCategory = ((OriginalOtherCategoryDataTable)(base.Tables["OriginalOtherCategory"]));
            if ((initTable == true)) {
                if ((this.tableOriginalOtherCategory != null)) {
                    this.tableOriginalOtherCategory.InitVars();
                }
            }
            this.tableProjectList = ((ProjectListDataTable)(base.Tables["ProjectList"]));
            if ((initTable == true)) {
                if ((this.tableProjectList != null)) {
                    this.tableProjectList.InitVars();
                }
            }
            this.tableDummyInformation = ((DummyInformationDataTable)(base.Tables["DummyInformation"]));
            if ((initTable == true)) {
                if ((this.tableDummyInformation != null)) {
                    this.tableDummyInformation.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectCostingSheetAddTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectCostingSheetAddTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBasicInformation = new BasicInformationDataTable();
            base.Tables.Add(this.tableBasicInformation);
            this.tableUnitsInformation = new UnitsInformationDataTable();
            base.Tables.Add(this.tableUnitsInformation);
            this.tableLabourHoursInformation = new LabourHoursInformationDataTable();
            base.Tables.Add(this.tableLabourHoursInformation);
            this.tableMaterialsInformation = new MaterialsInformationDataTable();
            base.Tables.Add(this.tableMaterialsInformation);
            this.tableEmployeeList = new EmployeeListDataTable();
            base.Tables.Add(this.tableEmployeeList);
            this.tableOriginalLabourHour = new OriginalLabourHourDataTable();
            base.Tables.Add(this.tableOriginalLabourHour);
            this.tableOtherCostsInformation = new OtherCostsInformationDataTable();
            base.Tables.Add(this.tableOtherCostsInformation);
            this.tableUnitList = new UnitListDataTable();
            base.Tables.Add(this.tableUnitList);
            this.tableOriginalUnit = new OriginalUnitDataTable();
            base.Tables.Add(this.tableOriginalUnit);
            this.tableMaterialList = new MaterialListDataTable();
            base.Tables.Add(this.tableMaterialList);
            this.tableOriginalMaterial = new OriginalMaterialDataTable();
            base.Tables.Add(this.tableOriginalMaterial);
            this.tableEmployeePayPeriod = new EmployeePayPeriodDataTable();
            base.Tables.Add(this.tableEmployeePayPeriod);
            this.tableUnitPayPeriod = new UnitPayPeriodDataTable();
            base.Tables.Add(this.tableUnitPayPeriod);
            this.tableMaterialPayPeriod = new MaterialPayPeriodDataTable();
            base.Tables.Add(this.tableMaterialPayPeriod);
            this.tableFunctionList = new FunctionListDataTable();
            base.Tables.Add(this.tableFunctionList);
            this.tableSubcontractorsInformation = new SubcontractorsInformationDataTable();
            base.Tables.Add(this.tableSubcontractorsInformation);
            this.tableSubcontractorList = new SubcontractorListDataTable();
            base.Tables.Add(this.tableSubcontractorList);
            this.tableOriginalSubcontractor = new OriginalSubcontractorDataTable();
            base.Tables.Add(this.tableOriginalSubcontractor);
            this.tableRevenueInformation = new RevenueInformationDataTable();
            base.Tables.Add(this.tableRevenueInformation);
            this.tableOriginalRevenue = new OriginalRevenueDataTable();
            base.Tables.Add(this.tableOriginalRevenue);
            this.tableTemplateInformation = new TemplateInformationDataTable();
            base.Tables.Add(this.tableTemplateInformation);
            this.tableCombinedBasicInformation = new CombinedBasicInformationDataTable();
            base.Tables.Add(this.tableCombinedBasicInformation);
            this.tableCombinedLabourHoursInformation = new CombinedLabourHoursInformationDataTable();
            base.Tables.Add(this.tableCombinedLabourHoursInformation);
            this.tableCombinedUnitsInformation = new CombinedUnitsInformationDataTable();
            base.Tables.Add(this.tableCombinedUnitsInformation);
            this.tableCombinedMaterialsInformation = new CombinedMaterialsInformationDataTable();
            base.Tables.Add(this.tableCombinedMaterialsInformation);
            this.tableCombinedSubcontractorsInformation = new CombinedSubcontractorsInformationDataTable();
            base.Tables.Add(this.tableCombinedSubcontractorsInformation);
            this.tableCombinedRevenueInformation = new CombinedRevenueInformationDataTable();
            base.Tables.Add(this.tableCombinedRevenueInformation);
            this.tableCombinedOtherCostsInformation = new CombinedOtherCostsInformationDataTable();
            base.Tables.Add(this.tableCombinedOtherCostsInformation);
            this.tableHotelsInformation = new HotelsInformationDataTable();
            base.Tables.Add(this.tableHotelsInformation);
            this.tableBondingsInformation = new BondingsInformationDataTable();
            base.Tables.Add(this.tableBondingsInformation);
            this.tableInsurancesInformation = new InsurancesInformationDataTable();
            base.Tables.Add(this.tableInsurancesInformation);
            this.tableOtherCategoryInformation = new OtherCategoryInformationDataTable();
            base.Tables.Add(this.tableOtherCategoryInformation);
            this.tableHotelList = new HotelListDataTable();
            base.Tables.Add(this.tableHotelList);
            this.tableBondingList = new BondingListDataTable();
            base.Tables.Add(this.tableBondingList);
            this.tableInsuranceList = new InsuranceListDataTable();
            base.Tables.Add(this.tableInsuranceList);
            this.tableOtherCategoryList = new OtherCategoryListDataTable();
            base.Tables.Add(this.tableOtherCategoryList);
            this.tableOriginalHotel = new OriginalHotelDataTable();
            base.Tables.Add(this.tableOriginalHotel);
            this.tableOriginalBonding = new OriginalBondingDataTable();
            base.Tables.Add(this.tableOriginalBonding);
            this.tableOriginalInsurance = new OriginalInsuranceDataTable();
            base.Tables.Add(this.tableOriginalInsurance);
            this.tableOriginalOtherCategory = new OriginalOtherCategoryDataTable();
            base.Tables.Add(this.tableOriginalOtherCategory);
            this.tableProjectList = new ProjectListDataTable();
            base.Tables.Add(this.tableProjectList);
            this.tableDummyInformation = new DummyInformationDataTable();
            base.Tables.Add(this.tableDummyInformation);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBasicInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLabourHoursInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaterialsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalLabourHour() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOtherCostsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalUnit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaterialList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalMaterial() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeePayPeriod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitPayPeriod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaterialPayPeriod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFunctionList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubcontractorsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubcontractorList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalSubcontractor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRevenueInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalRevenue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemplateInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedBasicInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedLabourHoursInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedUnitsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedMaterialsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedSubcontractorsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedRevenueInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCombinedOtherCostsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHotelsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBondingsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInsurancesInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOtherCategoryInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHotelList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBondingList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInsuranceList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOtherCategoryList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalHotel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalBonding() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalInsurance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalOtherCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDummyInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BasicInformationRowChangeEventHandler(object sender, BasicInformationRowChangeEvent e);
        
        public delegate void UnitsInformationRowChangeEventHandler(object sender, UnitsInformationRowChangeEvent e);
        
        public delegate void LabourHoursInformationRowChangeEventHandler(object sender, LabourHoursInformationRowChangeEvent e);
        
        public delegate void MaterialsInformationRowChangeEventHandler(object sender, MaterialsInformationRowChangeEvent e);
        
        public delegate void EmployeeListRowChangeEventHandler(object sender, EmployeeListRowChangeEvent e);
        
        public delegate void OriginalLabourHourRowChangeEventHandler(object sender, OriginalLabourHourRowChangeEvent e);
        
        public delegate void OtherCostsInformationRowChangeEventHandler(object sender, OtherCostsInformationRowChangeEvent e);
        
        public delegate void UnitListRowChangeEventHandler(object sender, UnitListRowChangeEvent e);
        
        public delegate void OriginalUnitRowChangeEventHandler(object sender, OriginalUnitRowChangeEvent e);
        
        public delegate void MaterialListRowChangeEventHandler(object sender, MaterialListRowChangeEvent e);
        
        public delegate void OriginalMaterialRowChangeEventHandler(object sender, OriginalMaterialRowChangeEvent e);
        
        public delegate void EmployeePayPeriodRowChangeEventHandler(object sender, EmployeePayPeriodRowChangeEvent e);
        
        public delegate void UnitPayPeriodRowChangeEventHandler(object sender, UnitPayPeriodRowChangeEvent e);
        
        public delegate void MaterialPayPeriodRowChangeEventHandler(object sender, MaterialPayPeriodRowChangeEvent e);
        
        public delegate void FunctionListRowChangeEventHandler(object sender, FunctionListRowChangeEvent e);
        
        public delegate void SubcontractorsInformationRowChangeEventHandler(object sender, SubcontractorsInformationRowChangeEvent e);
        
        public delegate void SubcontractorListRowChangeEventHandler(object sender, SubcontractorListRowChangeEvent e);
        
        public delegate void OriginalSubcontractorRowChangeEventHandler(object sender, OriginalSubcontractorRowChangeEvent e);
        
        public delegate void RevenueInformationRowChangeEventHandler(object sender, RevenueInformationRowChangeEvent e);
        
        public delegate void OriginalRevenueRowChangeEventHandler(object sender, OriginalRevenueRowChangeEvent e);
        
        public delegate void TemplateInformationRowChangeEventHandler(object sender, TemplateInformationRowChangeEvent e);
        
        public delegate void CombinedBasicInformationRowChangeEventHandler(object sender, CombinedBasicInformationRowChangeEvent e);
        
        public delegate void CombinedLabourHoursInformationRowChangeEventHandler(object sender, CombinedLabourHoursInformationRowChangeEvent e);
        
        public delegate void CombinedUnitsInformationRowChangeEventHandler(object sender, CombinedUnitsInformationRowChangeEvent e);
        
        public delegate void CombinedMaterialsInformationRowChangeEventHandler(object sender, CombinedMaterialsInformationRowChangeEvent e);
        
        public delegate void CombinedSubcontractorsInformationRowChangeEventHandler(object sender, CombinedSubcontractorsInformationRowChangeEvent e);
        
        public delegate void CombinedRevenueInformationRowChangeEventHandler(object sender, CombinedRevenueInformationRowChangeEvent e);
        
        public delegate void CombinedOtherCostsInformationRowChangeEventHandler(object sender, CombinedOtherCostsInformationRowChangeEvent e);
        
        public delegate void HotelsInformationRowChangeEventHandler(object sender, HotelsInformationRowChangeEvent e);
        
        public delegate void BondingsInformationRowChangeEventHandler(object sender, BondingsInformationRowChangeEvent e);
        
        public delegate void InsurancesInformationRowChangeEventHandler(object sender, InsurancesInformationRowChangeEvent e);
        
        public delegate void OtherCategoryInformationRowChangeEventHandler(object sender, OtherCategoryInformationRowChangeEvent e);
        
        public delegate void HotelListRowChangeEventHandler(object sender, HotelListRowChangeEvent e);
        
        public delegate void BondingListRowChangeEventHandler(object sender, BondingListRowChangeEvent e);
        
        public delegate void InsuranceListRowChangeEventHandler(object sender, InsuranceListRowChangeEvent e);
        
        public delegate void OtherCategoryListRowChangeEventHandler(object sender, OtherCategoryListRowChangeEvent e);
        
        public delegate void OriginalHotelRowChangeEventHandler(object sender, OriginalHotelRowChangeEvent e);
        
        public delegate void OriginalBondingRowChangeEventHandler(object sender, OriginalBondingRowChangeEvent e);
        
        public delegate void OriginalInsuranceRowChangeEventHandler(object sender, OriginalInsuranceRowChangeEvent e);
        
        public delegate void OriginalOtherCategoryRowChangeEventHandler(object sender, OriginalOtherCategoryRowChangeEvent e);
        
        public delegate void ProjectListRowChangeEventHandler(object sender, ProjectListRowChangeEvent e);
        
        public delegate void DummyInformationRowChangeEventHandler(object sender, DummyInformationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BasicInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnTotalLabourHoursCad;
            
            private global::System.Data.DataColumn columnTotalLabourHoursUsd;
            
            private global::System.Data.DataColumn columnTotalMaterialsCad;
            
            private global::System.Data.DataColumn columnTotalMaterialsUsd;
            
            private global::System.Data.DataColumn columnTotalUnitsCad;
            
            private global::System.Data.DataColumn columnTotalUnitsUsd;
            
            private global::System.Data.DataColumn columnTotalOtherCostsCad;
            
            private global::System.Data.DataColumn columnTotalOtherCostsUsd;
            
            private global::System.Data.DataColumn columnGrantTotalCostCad;
            
            private global::System.Data.DataColumn columnGrantTotalCostUsd;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsCad;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsUsd;
            
            private global::System.Data.DataColumn columnGrandRevenue;
            
            private global::System.Data.DataColumn columnGrandProfit;
            
            private global::System.Data.DataColumn columnGrandGrossMargin;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnTotalHotelCosts;
            
            private global::System.Data.DataColumn columnTotalBondingCosts;
            
            private global::System.Data.DataColumn columnTotalInsuranceCosts;
            
            private global::System.Data.DataColumn columnTotalOtherCategoryCosts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationDataTable() {
                this.TableName = "BasicInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BasicInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursCadColumn {
                get {
                    return this.columnTotalLabourHoursCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursUsdColumn {
                get {
                    return this.columnTotalLabourHoursUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsCadColumn {
                get {
                    return this.columnTotalMaterialsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsUsdColumn {
                get {
                    return this.columnTotalMaterialsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsCadColumn {
                get {
                    return this.columnTotalUnitsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsUsdColumn {
                get {
                    return this.columnTotalUnitsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsCadColumn {
                get {
                    return this.columnTotalOtherCostsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsUsdColumn {
                get {
                    return this.columnTotalOtherCostsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantTotalCostCadColumn {
                get {
                    return this.columnGrantTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantTotalCostUsdColumn {
                get {
                    return this.columnGrantTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsCadColumn {
                get {
                    return this.columnTotalSubcontractorsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsUsdColumn {
                get {
                    return this.columnTotalSubcontractorsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandRevenueColumn {
                get {
                    return this.columnGrandRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandProfitColumn {
                get {
                    return this.columnGrandProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandGrossMarginColumn {
                get {
                    return this.columnGrandGrossMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalHotelCostsColumn {
                get {
                    return this.columnTotalHotelCosts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalBondingCostsColumn {
                get {
                    return this.columnTotalBondingCosts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalInsuranceCostsColumn {
                get {
                    return this.columnTotalInsuranceCosts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCategoryCostsColumn {
                get {
                    return this.columnTotalOtherCategoryCosts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow this[int index] {
                get {
                    return ((BasicInformationRow)(this.Rows[index]));
                }
            }
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanging;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanged;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleting;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBasicInformationRow(BasicInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow AddBasicInformationRow(
                        int CostingSheetID, 
                        int ProjectID, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        decimal TotalLabourHoursCad, 
                        decimal TotalLabourHoursUsd, 
                        decimal TotalMaterialsCad, 
                        decimal TotalMaterialsUsd, 
                        decimal TotalUnitsCad, 
                        decimal TotalUnitsUsd, 
                        decimal TotalOtherCostsCad, 
                        decimal TotalOtherCostsUsd, 
                        decimal GrantTotalCostCad, 
                        decimal GrantTotalCostUsd, 
                        string State, 
                        decimal TotalSubcontractorsCad, 
                        decimal TotalSubcontractorsUsd, 
                        decimal GrandRevenue, 
                        decimal GrandProfit, 
                        decimal GrandGrossMargin, 
                        string ClientName, 
                        string ProjectName, 
                        string Month, 
                        int Year, 
                        decimal TotalHotelCosts, 
                        decimal TotalBondingCosts, 
                        decimal TotalInsuranceCosts, 
                        decimal TotalOtherCategoryCosts) {
                BasicInformationRow rowBasicInformationRow = ((BasicInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        ProjectID,
                        Name,
                        StartDate,
                        EndDate,
                        Deleted,
                        COMPANY_ID,
                        TotalLabourHoursCad,
                        TotalLabourHoursUsd,
                        TotalMaterialsCad,
                        TotalMaterialsUsd,
                        TotalUnitsCad,
                        TotalUnitsUsd,
                        TotalOtherCostsCad,
                        TotalOtherCostsUsd,
                        GrantTotalCostCad,
                        GrantTotalCostUsd,
                        State,
                        TotalSubcontractorsCad,
                        TotalSubcontractorsUsd,
                        GrandRevenue,
                        GrandProfit,
                        GrandGrossMargin,
                        ClientName,
                        ProjectName,
                        Month,
                        Year,
                        TotalHotelCosts,
                        TotalBondingCosts,
                        TotalInsuranceCosts,
                        TotalOtherCategoryCosts};
                rowBasicInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBasicInformationRow);
                return rowBasicInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow FindByCostingSheetID(int CostingSheetID) {
                return ((BasicInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BasicInformationDataTable cln = ((BasicInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BasicInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnTotalLabourHoursCad = base.Columns["TotalLabourHoursCad"];
                this.columnTotalLabourHoursUsd = base.Columns["TotalLabourHoursUsd"];
                this.columnTotalMaterialsCad = base.Columns["TotalMaterialsCad"];
                this.columnTotalMaterialsUsd = base.Columns["TotalMaterialsUsd"];
                this.columnTotalUnitsCad = base.Columns["TotalUnitsCad"];
                this.columnTotalUnitsUsd = base.Columns["TotalUnitsUsd"];
                this.columnTotalOtherCostsCad = base.Columns["TotalOtherCostsCad"];
                this.columnTotalOtherCostsUsd = base.Columns["TotalOtherCostsUsd"];
                this.columnGrantTotalCostCad = base.Columns["GrantTotalCostCad"];
                this.columnGrantTotalCostUsd = base.Columns["GrantTotalCostUsd"];
                this.columnState = base.Columns["State"];
                this.columnTotalSubcontractorsCad = base.Columns["TotalSubcontractorsCad"];
                this.columnTotalSubcontractorsUsd = base.Columns["TotalSubcontractorsUsd"];
                this.columnGrandRevenue = base.Columns["GrandRevenue"];
                this.columnGrandProfit = base.Columns["GrandProfit"];
                this.columnGrandGrossMargin = base.Columns["GrandGrossMargin"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnMonth = base.Columns["Month"];
                this.columnYear = base.Columns["Year"];
                this.columnTotalHotelCosts = base.Columns["TotalHotelCosts"];
                this.columnTotalBondingCosts = base.Columns["TotalBondingCosts"];
                this.columnTotalInsuranceCosts = base.Columns["TotalInsuranceCosts"];
                this.columnTotalOtherCategoryCosts = base.Columns["TotalOtherCategoryCosts"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnTotalLabourHoursCad = new global::System.Data.DataColumn("TotalLabourHoursCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursCad);
                this.columnTotalLabourHoursUsd = new global::System.Data.DataColumn("TotalLabourHoursUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursUsd);
                this.columnTotalMaterialsCad = new global::System.Data.DataColumn("TotalMaterialsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsCad);
                this.columnTotalMaterialsUsd = new global::System.Data.DataColumn("TotalMaterialsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsUsd);
                this.columnTotalUnitsCad = new global::System.Data.DataColumn("TotalUnitsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsCad);
                this.columnTotalUnitsUsd = new global::System.Data.DataColumn("TotalUnitsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsUsd);
                this.columnTotalOtherCostsCad = new global::System.Data.DataColumn("TotalOtherCostsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsCad);
                this.columnTotalOtherCostsUsd = new global::System.Data.DataColumn("TotalOtherCostsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsUsd);
                this.columnGrantTotalCostCad = new global::System.Data.DataColumn("GrantTotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantTotalCostCad);
                this.columnGrantTotalCostUsd = new global::System.Data.DataColumn("GrantTotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantTotalCostUsd);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnTotalSubcontractorsCad = new global::System.Data.DataColumn("TotalSubcontractorsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsCad);
                this.columnTotalSubcontractorsUsd = new global::System.Data.DataColumn("TotalSubcontractorsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsUsd);
                this.columnGrandRevenue = new global::System.Data.DataColumn("GrandRevenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandRevenue);
                this.columnGrandProfit = new global::System.Data.DataColumn("GrandProfit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandProfit);
                this.columnGrandGrossMargin = new global::System.Data.DataColumn("GrandGrossMargin", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandGrossMargin);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnTotalHotelCosts = new global::System.Data.DataColumn("TotalHotelCosts", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalHotelCosts);
                this.columnTotalBondingCosts = new global::System.Data.DataColumn("TotalBondingCosts", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalBondingCosts);
                this.columnTotalInsuranceCosts = new global::System.Data.DataColumn("TotalInsuranceCosts", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalInsuranceCosts);
                this.columnTotalOtherCategoryCosts = new global::System.Data.DataColumn("TotalOtherCategoryCosts", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCategoryCosts);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.Unique = true;
                this.columnProjectID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 150;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow NewBasicInformationRow() {
                return ((BasicInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BasicInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BasicInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BasicInformationRowChanged != null)) {
                    this.BasicInformationRowChanged(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BasicInformationRowChanging != null)) {
                    this.BasicInformationRowChanging(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BasicInformationRowDeleted != null)) {
                    this.BasicInformationRowDeleted(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BasicInformationRowDeleting != null)) {
                    this.BasicInformationRowDeleting(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBasicInformationRow(BasicInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BasicInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnUnitDescription;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationDataTable() {
                this.TableName = "UnitsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDescriptionColumn {
                get {
                    return this.columnUnitDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow this[int index] {
                get {
                    return ((UnitsInformationRow)(this.Rows[index]));
                }
            }
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowChanging;
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowChanged;
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowDeleting;
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitsInformationRow(UnitsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow AddUnitsInformationRow(
                        int CostingSheetID, 
                        string Work_, 
                        int UnitID, 
                        int RefID, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string UnitCode, 
                        string UnitDescription, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool FromDatabase, 
                        string WorkFunction, 
                        string Function_, 
                        string ClientName, 
                        string ProjectName, 
                        string Month, 
                        int Year, 
                        decimal Budget) {
                UnitsInformationRow rowUnitsInformationRow = ((UnitsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        UnitID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UnitCode,
                        UnitDescription,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        WorkFunction,
                        Function_,
                        ClientName,
                        ProjectName,
                        Month,
                        Year,
                        Budget};
                rowUnitsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitsInformationRow);
                return rowUnitsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow FindByRefIDUnitIDWork_CostingSheetID(int RefID, int UnitID, string Work_, int CostingSheetID) {
                return ((UnitsInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            UnitID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitsInformationDataTable cln = ((UnitsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnUnitDescription = base.Columns["UnitDescription"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnMonth = base.Columns["Month"];
                this.columnYear = base.Columns["Year"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnUnitDescription = new global::System.Data.DataColumn("UnitDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitDescription);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnUnitID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnUnitID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow NewUnitsInformationRow() {
                return ((UnitsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitsInformationRowChanged != null)) {
                    this.UnitsInformationRowChanged(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitsInformationRowChanging != null)) {
                    this.UnitsInformationRowChanging(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitsInformationRowDeleted != null)) {
                    this.UnitsInformationRowDeleted(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitsInformationRowDeleting != null)) {
                    this.UnitsInformationRowDeleting(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitsInformationRow(UnitsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LabourHoursInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnLHQuantity;
            
            private global::System.Data.DataColumn columnLHUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsQuantity;
            
            private global::System.Data.DataColumn columnMotelUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMotelQuantity;
            
            private global::System.Data.DataColumn columnLHCostCad;
            
            private global::System.Data.DataColumn columnMealsCostCad;
            
            private global::System.Data.DataColumn columnMotelCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnLHCostUsd;
            
            private global::System.Data.DataColumn columnMealsCostUsd;
            
            private global::System.Data.DataColumn columnMotelCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationDataTable() {
                this.TableName = "LabourHoursInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabourHoursInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LabourHoursInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHQuantityColumn {
                get {
                    return this.columnLHQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHUnitOfMeasurementColumn {
                get {
                    return this.columnLHUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsUnitOfMeasurementColumn {
                get {
                    return this.columnMealsUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsQuantityColumn {
                get {
                    return this.columnMealsQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelUnitOfMeasurementColumn {
                get {
                    return this.columnMotelUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelQuantityColumn {
                get {
                    return this.columnMotelQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostCadColumn {
                get {
                    return this.columnLHCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostCadColumn {
                get {
                    return this.columnMealsCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostCadColumn {
                get {
                    return this.columnMotelCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostUsdColumn {
                get {
                    return this.columnLHCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostUsdColumn {
                get {
                    return this.columnMealsCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostUsdColumn {
                get {
                    return this.columnMotelCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow this[int index] {
                get {
                    return ((LabourHoursInformationRow)(this.Rows[index]));
                }
            }
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowChanging;
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowChanged;
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowDeleting;
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLabourHoursInformationRow(LabourHoursInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow AddLabourHoursInformationRow(
                        int CostingSheetID, 
                        string Work_, 
                        int EmployeeID, 
                        int RefID, 
                        double LHQuantity, 
                        string LHUnitOfMeasurement, 
                        string MealsUnitOfMeasurement, 
                        int MealsQuantity, 
                        string MotelUnitOfMeasurement, 
                        int MotelQuantity, 
                        decimal LHCostCad, 
                        decimal MealsCostCad, 
                        decimal MotelCostCad, 
                        decimal TotalCostCad, 
                        decimal LHCostUsd, 
                        decimal MealsCostUsd, 
                        decimal MotelCostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool FromDatabase, 
                        string WorkFunction, 
                        string Function_, 
                        string ClientName, 
                        string ProjectName, 
                        string Month, 
                        int Year, 
                        decimal Budget) {
                LabourHoursInformationRow rowLabourHoursInformationRow = ((LabourHoursInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        EmployeeID,
                        RefID,
                        LHQuantity,
                        LHUnitOfMeasurement,
                        MealsUnitOfMeasurement,
                        MealsQuantity,
                        MotelUnitOfMeasurement,
                        MotelQuantity,
                        LHCostCad,
                        MealsCostCad,
                        MotelCostCad,
                        TotalCostCad,
                        LHCostUsd,
                        MealsCostUsd,
                        MotelCostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Name,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        WorkFunction,
                        Function_,
                        ClientName,
                        ProjectName,
                        Month,
                        Year,
                        Budget};
                rowLabourHoursInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLabourHoursInformationRow);
                return rowLabourHoursInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow FindByRefIDEmployeeIDWork_CostingSheetID(int RefID, int EmployeeID, string Work_, int CostingSheetID) {
                return ((LabourHoursInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            EmployeeID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LabourHoursInformationDataTable cln = ((LabourHoursInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LabourHoursInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnLHQuantity = base.Columns["LHQuantity"];
                this.columnLHUnitOfMeasurement = base.Columns["LHUnitOfMeasurement"];
                this.columnMealsUnitOfMeasurement = base.Columns["MealsUnitOfMeasurement"];
                this.columnMealsQuantity = base.Columns["MealsQuantity"];
                this.columnMotelUnitOfMeasurement = base.Columns["MotelUnitOfMeasurement"];
                this.columnMotelQuantity = base.Columns["MotelQuantity"];
                this.columnLHCostCad = base.Columns["LHCostCad"];
                this.columnMealsCostCad = base.Columns["MealsCostCad"];
                this.columnMotelCostCad = base.Columns["MotelCostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnLHCostUsd = base.Columns["LHCostUsd"];
                this.columnMealsCostUsd = base.Columns["MealsCostUsd"];
                this.columnMotelCostUsd = base.Columns["MotelCostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnMonth = base.Columns["Month"];
                this.columnYear = base.Columns["Year"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnLHQuantity = new global::System.Data.DataColumn("LHQuantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHQuantity);
                this.columnLHUnitOfMeasurement = new global::System.Data.DataColumn("LHUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHUnitOfMeasurement);
                this.columnMealsUnitOfMeasurement = new global::System.Data.DataColumn("MealsUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsUnitOfMeasurement);
                this.columnMealsQuantity = new global::System.Data.DataColumn("MealsQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsQuantity);
                this.columnMotelUnitOfMeasurement = new global::System.Data.DataColumn("MotelUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelUnitOfMeasurement);
                this.columnMotelQuantity = new global::System.Data.DataColumn("MotelQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelQuantity);
                this.columnLHCostCad = new global::System.Data.DataColumn("LHCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostCad);
                this.columnMealsCostCad = new global::System.Data.DataColumn("MealsCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostCad);
                this.columnMotelCostCad = new global::System.Data.DataColumn("MotelCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnLHCostUsd = new global::System.Data.DataColumn("LHCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostUsd);
                this.columnMealsCostUsd = new global::System.Data.DataColumn("MealsCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostUsd);
                this.columnMotelCostUsd = new global::System.Data.DataColumn("MotelCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnEmployeeID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnLHQuantity.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.MaxLength = 10;
                this.columnMealsUnitOfMeasurement.MaxLength = 25;
                this.columnMotelUnitOfMeasurement.MaxLength = 25;
                this.columnLHCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnLHCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow NewLabourHoursInformationRow() {
                return ((LabourHoursInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LabourHoursInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LabourHoursInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabourHoursInformationRowChanged != null)) {
                    this.LabourHoursInformationRowChanged(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabourHoursInformationRowChanging != null)) {
                    this.LabourHoursInformationRowChanging(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabourHoursInformationRowDeleted != null)) {
                    this.LabourHoursInformationRowDeleted(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabourHoursInformationRowDeleting != null)) {
                    this.LabourHoursInformationRowDeleting(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLabourHoursInformationRow(LabourHoursInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LabourHoursInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MaterialsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnProcess;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationDataTable() {
                this.TableName = "MaterialsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MaterialsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessColumn {
                get {
                    return this.columnProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow this[int index] {
                get {
                    return ((MaterialsInformationRow)(this.Rows[index]));
                }
            }
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowChanging;
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowChanged;
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowDeleting;
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMaterialsInformationRow(MaterialsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow AddMaterialsInformationRow(
                        int CostingSheetID, 
                        int MaterialID, 
                        int RefID, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Process, 
                        string Description, 
                        string UnitOfMeasurement, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool FromDatabase, 
                        string Function_, 
                        string WorkFunction, 
                        string ClientName, 
                        string ProjectName, 
                        string Month, 
                        int Year, 
                        decimal Budget) {
                MaterialsInformationRow rowMaterialsInformationRow = ((MaterialsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        MaterialID,
                        RefID,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Process,
                        Description,
                        UnitOfMeasurement,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        Function_,
                        WorkFunction,
                        ClientName,
                        ProjectName,
                        Month,
                        Year,
                        Budget};
                rowMaterialsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMaterialsInformationRow);
                return rowMaterialsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow FindByCostingSheetIDMaterialIDRefID(int CostingSheetID, int MaterialID, int RefID) {
                return ((MaterialsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            MaterialID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MaterialsInformationDataTable cln = ((MaterialsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MaterialsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnProcess = base.Columns["Process"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnMonth = base.Columns["Month"];
                this.columnYear = base.Columns["Year"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnProcess = new global::System.Data.DataColumn("Process", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnMaterialID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnMaterialID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow NewMaterialsInformationRow() {
                return ((MaterialsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MaterialsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MaterialsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MaterialsInformationRowChanged != null)) {
                    this.MaterialsInformationRowChanged(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MaterialsInformationRowChanging != null)) {
                    this.MaterialsInformationRowChanging(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MaterialsInformationRowDeleted != null)) {
                    this.MaterialsInformationRowDeleted(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MaterialsInformationRowDeleting != null)) {
                    this.MaterialsInformationRowDeleting(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMaterialsInformationRow(MaterialsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MaterialsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnPayRateCad;
            
            private global::System.Data.DataColumn columnPayRateUsd;
            
            private global::System.Data.DataColumn columnBurdenRateCad;
            
            private global::System.Data.DataColumn columnBurdenRateUsd;
            
            private global::System.Data.DataColumn columnBenefitFactorCad;
            
            private global::System.Data.DataColumn columnBenefitFactorUsd;
            
            private global::System.Data.DataColumn columnHealthBenefitUsd;
            
            private global::System.Data.DataColumn columnBourdenFactor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListDataTable() {
                this.TableName = "EmployeeList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayRateCadColumn {
                get {
                    return this.columnPayRateCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PayRateUsdColumn {
                get {
                    return this.columnPayRateUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BurdenRateCadColumn {
                get {
                    return this.columnBurdenRateCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BurdenRateUsdColumn {
                get {
                    return this.columnBurdenRateUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BenefitFactorCadColumn {
                get {
                    return this.columnBenefitFactorCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BenefitFactorUsdColumn {
                get {
                    return this.columnBenefitFactorUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HealthBenefitUsdColumn {
                get {
                    return this.columnHealthBenefitUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BourdenFactorColumn {
                get {
                    return this.columnBourdenFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRow this[int index] {
                get {
                    return ((EmployeeListRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeListRowChangeEventHandler EmployeeListRowChanging;
            
            public event EmployeeListRowChangeEventHandler EmployeeListRowChanged;
            
            public event EmployeeListRowChangeEventHandler EmployeeListRowDeleting;
            
            public event EmployeeListRowChangeEventHandler EmployeeListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeListRow(EmployeeListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRow AddEmployeeListRow(int EmployeeID, decimal CostCad, decimal CostUsd, string UnitOfMeasurement, decimal PayRateCad, decimal PayRateUsd, decimal BurdenRateCad, decimal BurdenRateUsd, decimal BenefitFactorCad, decimal BenefitFactorUsd, decimal HealthBenefitUsd, decimal BourdenFactor) {
                EmployeeListRow rowEmployeeListRow = ((EmployeeListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeID,
                        CostCad,
                        CostUsd,
                        UnitOfMeasurement,
                        PayRateCad,
                        PayRateUsd,
                        BurdenRateCad,
                        BurdenRateUsd,
                        BenefitFactorCad,
                        BenefitFactorUsd,
                        HealthBenefitUsd,
                        BourdenFactor};
                rowEmployeeListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeListRow);
                return rowEmployeeListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeListDataTable cln = ((EmployeeListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnPayRateCad = base.Columns["PayRateCad"];
                this.columnPayRateUsd = base.Columns["PayRateUsd"];
                this.columnBurdenRateCad = base.Columns["BurdenRateCad"];
                this.columnBurdenRateUsd = base.Columns["BurdenRateUsd"];
                this.columnBenefitFactorCad = base.Columns["BenefitFactorCad"];
                this.columnBenefitFactorUsd = base.Columns["BenefitFactorUsd"];
                this.columnHealthBenefitUsd = base.Columns["HealthBenefitUsd"];
                this.columnBourdenFactor = base.Columns["BourdenFactor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnPayRateCad = new global::System.Data.DataColumn("PayRateCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayRateCad);
                this.columnPayRateUsd = new global::System.Data.DataColumn("PayRateUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPayRateUsd);
                this.columnBurdenRateCad = new global::System.Data.DataColumn("BurdenRateCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBurdenRateCad);
                this.columnBurdenRateUsd = new global::System.Data.DataColumn("BurdenRateUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBurdenRateUsd);
                this.columnBenefitFactorCad = new global::System.Data.DataColumn("BenefitFactorCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBenefitFactorCad);
                this.columnBenefitFactorUsd = new global::System.Data.DataColumn("BenefitFactorUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBenefitFactorUsd);
                this.columnHealthBenefitUsd = new global::System.Data.DataColumn("HealthBenefitUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHealthBenefitUsd);
                this.columnBourdenFactor = new global::System.Data.DataColumn("BourdenFactor", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBourdenFactor);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRow NewEmployeeListRow() {
                return ((EmployeeListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeListRowChanged != null)) {
                    this.EmployeeListRowChanged(this, new EmployeeListRowChangeEvent(((EmployeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeListRowChanging != null)) {
                    this.EmployeeListRowChanging(this, new EmployeeListRowChangeEvent(((EmployeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeListRowDeleted != null)) {
                    this.EmployeeListRowDeleted(this, new EmployeeListRowChangeEvent(((EmployeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeListRowDeleting != null)) {
                    this.EmployeeListRowDeleting(this, new EmployeeListRowChangeEvent(((EmployeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeListRow(EmployeeListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalLabourHourDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnProjectTime;
            
            private global::System.Data.DataColumn columnWorkingDetails;
            
            private global::System.Data.DataColumn columnMealsCountry;
            
            private global::System.Data.DataColumn columnMealsAllowance;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnJobClassType;
            
            private global::System.Data.DataColumn columnStartTime;
            
            private global::System.Data.DataColumn columnEndTime;
            
            private global::System.Data.DataColumn columnProjectTimeID;
            
            private global::System.Data.DataColumn columnCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourDataTable() {
                this.TableName = "OriginalLabourHour";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalLabourHourDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalLabourHourDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTimeColumn {
                get {
                    return this.columnProjectTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkingDetailsColumn {
                get {
                    return this.columnWorkingDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCountryColumn {
                get {
                    return this.columnMealsCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsAllowanceColumn {
                get {
                    return this.columnMealsAllowance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobClassTypeColumn {
                get {
                    return this.columnJobClassType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTimeIDColumn {
                get {
                    return this.columnProjectTimeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRow this[int index] {
                get {
                    return ((OriginalLabourHourRow)(this.Rows[index]));
                }
            }
            
            public event OriginalLabourHourRowChangeEventHandler OriginalLabourHourRowChanging;
            
            public event OriginalLabourHourRowChangeEventHandler OriginalLabourHourRowChanged;
            
            public event OriginalLabourHourRowChangeEventHandler OriginalLabourHourRowDeleting;
            
            public event OriginalLabourHourRowChangeEventHandler OriginalLabourHourRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalLabourHourRow(OriginalLabourHourRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRow AddOriginalLabourHourRow(string EmployeeName, System.DateTime Date_, double ProjectTime, string WorkingDetails, long MealsCountry, decimal MealsAllowance, string Work_, string Function_, string JobClassType, System.DateTime StartTime, System.DateTime EndTime, int ProjectTimeID, string Category) {
                OriginalLabourHourRow rowOriginalLabourHourRow = ((OriginalLabourHourRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmployeeName,
                        Date_,
                        ProjectTime,
                        WorkingDetails,
                        MealsCountry,
                        MealsAllowance,
                        Work_,
                        Function_,
                        JobClassType,
                        StartTime,
                        EndTime,
                        ProjectTimeID,
                        Category};
                rowOriginalLabourHourRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalLabourHourRow);
                return rowOriginalLabourHourRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalLabourHourDataTable cln = ((OriginalLabourHourDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalLabourHourDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnProjectTime = base.Columns["ProjectTime"];
                this.columnWorkingDetails = base.Columns["WorkingDetails"];
                this.columnMealsCountry = base.Columns["MealsCountry"];
                this.columnMealsAllowance = base.Columns["MealsAllowance"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnJobClassType = base.Columns["JobClassType"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnProjectTimeID = base.Columns["ProjectTimeID"];
                this.columnCategory = base.Columns["Category"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnProjectTime = new global::System.Data.DataColumn("ProjectTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTime);
                this.columnWorkingDetails = new global::System.Data.DataColumn("WorkingDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkingDetails);
                this.columnMealsCountry = new global::System.Data.DataColumn("MealsCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCountry);
                this.columnMealsAllowance = new global::System.Data.DataColumn("MealsAllowance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsAllowance);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnJobClassType = new global::System.Data.DataColumn("JobClassType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobClassType);
                this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnEndTime = new global::System.Data.DataColumn("EndTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnProjectTimeID = new global::System.Data.DataColumn("ProjectTimeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTimeID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnEmployeeID.AutoIncrement = true;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnEmployeeID.ReadOnly = true;
                this.columnEmployeeName.ReadOnly = true;
                this.columnEmployeeName.MaxLength = 101;
                this.columnDate_.AllowDBNull = false;
                this.columnProjectTime.AllowDBNull = false;
                this.columnWorkingDetails.MaxLength = 25;
                this.columnMealsAllowance.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRow NewOriginalLabourHourRow() {
                return ((OriginalLabourHourRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalLabourHourRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalLabourHourRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalLabourHourRowChanged != null)) {
                    this.OriginalLabourHourRowChanged(this, new OriginalLabourHourRowChangeEvent(((OriginalLabourHourRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalLabourHourRowChanging != null)) {
                    this.OriginalLabourHourRowChanging(this, new OriginalLabourHourRowChangeEvent(((OriginalLabourHourRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalLabourHourRowDeleted != null)) {
                    this.OriginalLabourHourRowDeleted(this, new OriginalLabourHourRowChangeEvent(((OriginalLabourHourRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalLabourHourRowDeleting != null)) {
                    this.OriginalLabourHourRowDeleting(this, new OriginalLabourHourRowChangeEvent(((OriginalLabourHourRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalLabourHourRow(OriginalLabourHourRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalLabourHourDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OtherCostsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationDataTable() {
                this.TableName = "OtherCostsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCostsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OtherCostsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow this[int index] {
                get {
                    return ((OtherCostsInformationRow)(this.Rows[index]));
                }
            }
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowChanging;
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowChanged;
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowDeleting;
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOtherCostsInformationRow(OtherCostsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow AddOtherCostsInformationRow(
                        int CostingSheetID, 
                        int RefID, 
                        string Work_, 
                        string Function_, 
                        string Description, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string WorkFunction, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string ClientName, 
                        string ProjectName, 
                        string Month, 
                        int Year, 
                        decimal Budget) {
                OtherCostsInformationRow rowOtherCostsInformationRow = ((OtherCostsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefID,
                        Work_,
                        Function_,
                        Description,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        WorkFunction,
                        StartDate,
                        EndDate,
                        ClientName,
                        ProjectName,
                        Month,
                        Year,
                        Budget};
                rowOtherCostsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOtherCostsInformationRow);
                return rowOtherCostsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow FindByCostingSheetIDRefID(int CostingSheetID, int RefID) {
                return ((OtherCostsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OtherCostsInformationDataTable cln = ((OtherCostsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OtherCostsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnMonth = base.Columns["Month"];
                this.columnYear = base.Columns["Year"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 150;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow NewOtherCostsInformationRow() {
                return ((OtherCostsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OtherCostsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OtherCostsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OtherCostsInformationRowChanged != null)) {
                    this.OtherCostsInformationRowChanged(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OtherCostsInformationRowChanging != null)) {
                    this.OtherCostsInformationRowChanging(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OtherCostsInformationRowDeleted != null)) {
                    this.OtherCostsInformationRowDeleted(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OtherCostsInformationRowDeleting != null)) {
                    this.OtherCostsInformationRowDeleting(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOtherCostsInformationRow(OtherCostsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OtherCostsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListDataTable() {
                this.TableName = "UnitList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRow this[int index] {
                get {
                    return ((UnitListRow)(this.Rows[index]));
                }
            }
            
            public event UnitListRowChangeEventHandler UnitListRowChanging;
            
            public event UnitListRowChangeEventHandler UnitListRowChanged;
            
            public event UnitListRowChangeEventHandler UnitListRowDeleting;
            
            public event UnitListRowChangeEventHandler UnitListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitListRow(UnitListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRow AddUnitListRow(int UnitID, decimal CostCad, decimal CostUsd, string UnitOfMeasurement, string UnitCode, string Description) {
                UnitListRow rowUnitListRow = ((UnitListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitID,
                        CostCad,
                        CostUsd,
                        UnitOfMeasurement,
                        UnitCode,
                        Description};
                rowUnitListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitListRow);
                return rowUnitListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitListDataTable cln = ((UnitListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitID.Caption = "EmployeeID";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRow NewUnitListRow() {
                return ((UnitListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitListRowChanged != null)) {
                    this.UnitListRowChanged(this, new UnitListRowChangeEvent(((UnitListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitListRowChanging != null)) {
                    this.UnitListRowChanging(this, new UnitListRowChangeEvent(((UnitListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitListRowDeleted != null)) {
                    this.UnitListRowDeleted(this, new UnitListRowChangeEvent(((UnitListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitListRowDeleting != null)) {
                    this.UnitListRowDeleting(this, new UnitListRowChangeEvent(((UnitListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitListRow(UnitListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalUnitDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnProjectId;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnTowedUnitID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitDataTable() {
                this.TableName = "OriginalUnit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalUnitDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalUnitDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIdColumn {
                get {
                    return this.columnProjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TowedUnitIDColumn {
                get {
                    return this.columnTowedUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRow this[int index] {
                get {
                    return ((OriginalUnitRow)(this.Rows[index]));
                }
            }
            
            public event OriginalUnitRowChangeEventHandler OriginalUnitRowChanging;
            
            public event OriginalUnitRowChangeEventHandler OriginalUnitRowChanged;
            
            public event OriginalUnitRowChangeEventHandler OriginalUnitRowDeleting;
            
            public event OriginalUnitRowChangeEventHandler OriginalUnitRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalUnitRow(OriginalUnitRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRow AddOriginalUnitRow(string ProjectId, System.DateTime Date_, double TowedUnitID, string Work_, string Function_) {
                OriginalUnitRow rowOriginalUnitRow = ((OriginalUnitRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectId,
                        Date_,
                        TowedUnitID,
                        Work_,
                        Function_};
                rowOriginalUnitRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalUnitRow);
                return rowOriginalUnitRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalUnitDataTable cln = ((OriginalUnitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalUnitDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnProjectId = base.Columns["ProjectId"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnTowedUnitID = base.Columns["TowedUnitID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnProjectId = new global::System.Data.DataColumn("ProjectId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectId);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnTowedUnitID = new global::System.Data.DataColumn("TowedUnitID", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTowedUnitID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnUnitID.AutoIncrement = true;
                this.columnUnitID.ReadOnly = true;
                this.columnUnitID.Caption = "EmployeeID";
                this.columnProjectId.ReadOnly = true;
                this.columnProjectId.Caption = "EmployeeName";
                this.columnProjectId.MaxLength = 101;
                this.columnDate_.AllowDBNull = false;
                this.columnTowedUnitID.Caption = "ProjectTime";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRow NewOriginalUnitRow() {
                return ((OriginalUnitRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalUnitRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalUnitRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalUnitRowChanged != null)) {
                    this.OriginalUnitRowChanged(this, new OriginalUnitRowChangeEvent(((OriginalUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalUnitRowChanging != null)) {
                    this.OriginalUnitRowChanging(this, new OriginalUnitRowChangeEvent(((OriginalUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalUnitRowDeleted != null)) {
                    this.OriginalUnitRowDeleted(this, new OriginalUnitRowChangeEvent(((OriginalUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalUnitRowDeleting != null)) {
                    this.OriginalUnitRowDeleting(this, new OriginalUnitRowChangeEvent(((OriginalUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalUnitRow(OriginalUnitRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalUnitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MaterialListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnThickness;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListDataTable() {
                this.TableName = "MaterialList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MaterialListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThicknessColumn {
                get {
                    return this.columnThickness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRow this[int index] {
                get {
                    return ((MaterialListRow)(this.Rows[index]));
                }
            }
            
            public event MaterialListRowChangeEventHandler MaterialListRowChanging;
            
            public event MaterialListRowChangeEventHandler MaterialListRowChanged;
            
            public event MaterialListRowChangeEventHandler MaterialListRowDeleting;
            
            public event MaterialListRowChangeEventHandler MaterialListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMaterialListRow(MaterialListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRow AddMaterialListRow(int MaterialID, string Description, string Size, string Length, string Thickness, string Type, decimal CostCad, decimal CostUsd, string UnitOfMeasurement) {
                MaterialListRow rowMaterialListRow = ((MaterialListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaterialID,
                        Description,
                        Size,
                        Length,
                        Thickness,
                        Type,
                        CostCad,
                        CostUsd,
                        UnitOfMeasurement};
                rowMaterialListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMaterialListRow);
                return rowMaterialListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MaterialListDataTable cln = ((MaterialListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MaterialListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnDescription = base.Columns["Description"];
                this.columnSize = base.Columns["Size"];
                this.columnLength = base.Columns["Length"];
                this.columnThickness = base.Columns["Thickness"];
                this.columnType = base.Columns["Type"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnThickness = new global::System.Data.DataColumn("Thickness", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThickness);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRow NewMaterialListRow() {
                return ((MaterialListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MaterialListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MaterialListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MaterialListRowChanged != null)) {
                    this.MaterialListRowChanged(this, new MaterialListRowChangeEvent(((MaterialListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MaterialListRowChanging != null)) {
                    this.MaterialListRowChanging(this, new MaterialListRowChangeEvent(((MaterialListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MaterialListRowDeleted != null)) {
                    this.MaterialListRowDeleted(this, new MaterialListRowChangeEvent(((MaterialListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MaterialListRowDeleting != null)) {
                    this.MaterialListRowDeleting(this, new MaterialListRowChangeEvent(((MaterialListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMaterialListRow(MaterialListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MaterialListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalMaterialDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConfirmedSize;
            
            private global::System.Data.DataColumn columnSteelTapeLength;
            
            private global::System.Data.DataColumn columnLinerSize;
            
            private global::System.Data.DataColumn columnLinerInstalled;
            
            private global::System.Data.DataColumn columnCOInstalled;
            
            private global::System.Data.DataColumn columnBackfilledSoil;
            
            private global::System.Data.DataColumn columnBackfilledConcrete;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnTickness;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialDataTable() {
                this.TableName = "OriginalMaterial";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalMaterialDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalMaterialDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedSizeColumn {
                get {
                    return this.columnConfirmedSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SteelTapeLengthColumn {
                get {
                    return this.columnSteelTapeLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerSizeColumn {
                get {
                    return this.columnLinerSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInstalledColumn {
                get {
                    return this.columnLinerInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COInstalledColumn {
                get {
                    return this.columnCOInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledSoilColumn {
                get {
                    return this.columnBackfilledSoil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledConcreteColumn {
                get {
                    return this.columnBackfilledConcrete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TicknessColumn {
                get {
                    return this.columnTickness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRow this[int index] {
                get {
                    return ((OriginalMaterialRow)(this.Rows[index]));
                }
            }
            
            public event OriginalMaterialRowChangeEventHandler OriginalMaterialRowChanging;
            
            public event OriginalMaterialRowChangeEventHandler OriginalMaterialRowChanged;
            
            public event OriginalMaterialRowChangeEventHandler OriginalMaterialRowDeleting;
            
            public event OriginalMaterialRowChangeEventHandler OriginalMaterialRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalMaterialRow(OriginalMaterialRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRow AddOriginalMaterialRow(string ConfirmedSize, string SteelTapeLength, string LinerSize, System.DateTime LinerInstalled, System.DateTime COInstalled, System.DateTime BackfilledSoil, System.DateTime BackfilledConcrete, string Size, string Length, string Tickness) {
                OriginalMaterialRow rowOriginalMaterialRow = ((OriginalMaterialRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConfirmedSize,
                        SteelTapeLength,
                        LinerSize,
                        LinerInstalled,
                        COInstalled,
                        BackfilledSoil,
                        BackfilledConcrete,
                        Size,
                        Length,
                        Tickness};
                rowOriginalMaterialRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalMaterialRow);
                return rowOriginalMaterialRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalMaterialDataTable cln = ((OriginalMaterialDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalMaterialDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConfirmedSize = base.Columns["ConfirmedSize"];
                this.columnSteelTapeLength = base.Columns["SteelTapeLength"];
                this.columnLinerSize = base.Columns["LinerSize"];
                this.columnLinerInstalled = base.Columns["LinerInstalled"];
                this.columnCOInstalled = base.Columns["COInstalled"];
                this.columnBackfilledSoil = base.Columns["BackfilledSoil"];
                this.columnBackfilledConcrete = base.Columns["BackfilledConcrete"];
                this.columnSize = base.Columns["Size"];
                this.columnLength = base.Columns["Length"];
                this.columnTickness = base.Columns["Tickness"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConfirmedSize = new global::System.Data.DataColumn("ConfirmedSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmedSize);
                this.columnSteelTapeLength = new global::System.Data.DataColumn("SteelTapeLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSteelTapeLength);
                this.columnLinerSize = new global::System.Data.DataColumn("LinerSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerSize);
                this.columnLinerInstalled = new global::System.Data.DataColumn("LinerInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInstalled);
                this.columnCOInstalled = new global::System.Data.DataColumn("COInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOInstalled);
                this.columnBackfilledSoil = new global::System.Data.DataColumn("BackfilledSoil", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledSoil);
                this.columnBackfilledConcrete = new global::System.Data.DataColumn("BackfilledConcrete", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledConcrete);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnTickness = new global::System.Data.DataColumn("Tickness", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTickness);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRow NewOriginalMaterialRow() {
                return ((OriginalMaterialRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalMaterialRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalMaterialRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalMaterialRowChanged != null)) {
                    this.OriginalMaterialRowChanged(this, new OriginalMaterialRowChangeEvent(((OriginalMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalMaterialRowChanging != null)) {
                    this.OriginalMaterialRowChanging(this, new OriginalMaterialRowChangeEvent(((OriginalMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalMaterialRowDeleted != null)) {
                    this.OriginalMaterialRowDeleted(this, new OriginalMaterialRowChangeEvent(((OriginalMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalMaterialRowDeleting != null)) {
                    this.OriginalMaterialRowDeleting(this, new OriginalMaterialRowChangeEvent(((OriginalMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalMaterialRow(OriginalMaterialRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalMaterialDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeePayPeriodDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnDate_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodDataTable() {
                this.TableName = "EmployeePayPeriod";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeePayPeriodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeePayPeriodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRow this[int index] {
                get {
                    return ((EmployeePayPeriodRow)(this.Rows[index]));
                }
            }
            
            public event EmployeePayPeriodRowChangeEventHandler EmployeePayPeriodRowChanging;
            
            public event EmployeePayPeriodRowChangeEventHandler EmployeePayPeriodRowChanged;
            
            public event EmployeePayPeriodRowChangeEventHandler EmployeePayPeriodRowDeleting;
            
            public event EmployeePayPeriodRowChangeEventHandler EmployeePayPeriodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeePayPeriodRow(EmployeePayPeriodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRow AddEmployeePayPeriodRow(int EmployeeID, System.DateTime Date_) {
                EmployeePayPeriodRow rowEmployeePayPeriodRow = ((EmployeePayPeriodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeID,
                        Date_};
                rowEmployeePayPeriodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeePayPeriodRow);
                return rowEmployeePayPeriodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeePayPeriodDataTable cln = ((EmployeePayPeriodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeePayPeriodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnDate_ = base.Columns["Date_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRow NewEmployeePayPeriodRow() {
                return ((EmployeePayPeriodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeePayPeriodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeePayPeriodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeePayPeriodRowChanged != null)) {
                    this.EmployeePayPeriodRowChanged(this, new EmployeePayPeriodRowChangeEvent(((EmployeePayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeePayPeriodRowChanging != null)) {
                    this.EmployeePayPeriodRowChanging(this, new EmployeePayPeriodRowChangeEvent(((EmployeePayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeePayPeriodRowDeleted != null)) {
                    this.EmployeePayPeriodRowDeleted(this, new EmployeePayPeriodRowChangeEvent(((EmployeePayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeePayPeriodRowDeleting != null)) {
                    this.EmployeePayPeriodRowDeleting(this, new EmployeePayPeriodRowChangeEvent(((EmployeePayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeePayPeriodRow(EmployeePayPeriodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeePayPeriodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitPayPeriodDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnDate_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodDataTable() {
                this.TableName = "UnitPayPeriod";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitPayPeriodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitPayPeriodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRow this[int index] {
                get {
                    return ((UnitPayPeriodRow)(this.Rows[index]));
                }
            }
            
            public event UnitPayPeriodRowChangeEventHandler UnitPayPeriodRowChanging;
            
            public event UnitPayPeriodRowChangeEventHandler UnitPayPeriodRowChanged;
            
            public event UnitPayPeriodRowChangeEventHandler UnitPayPeriodRowDeleting;
            
            public event UnitPayPeriodRowChangeEventHandler UnitPayPeriodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitPayPeriodRow(UnitPayPeriodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRow AddUnitPayPeriodRow(int UnitID, System.DateTime Date_) {
                UnitPayPeriodRow rowUnitPayPeriodRow = ((UnitPayPeriodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitID,
                        Date_};
                rowUnitPayPeriodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitPayPeriodRow);
                return rowUnitPayPeriodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitPayPeriodDataTable cln = ((UnitPayPeriodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitPayPeriodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnDate_ = base.Columns["Date_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRow NewUnitPayPeriodRow() {
                return ((UnitPayPeriodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitPayPeriodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitPayPeriodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitPayPeriodRowChanged != null)) {
                    this.UnitPayPeriodRowChanged(this, new UnitPayPeriodRowChangeEvent(((UnitPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitPayPeriodRowChanging != null)) {
                    this.UnitPayPeriodRowChanging(this, new UnitPayPeriodRowChangeEvent(((UnitPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitPayPeriodRowDeleted != null)) {
                    this.UnitPayPeriodRowDeleted(this, new UnitPayPeriodRowChangeEvent(((UnitPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitPayPeriodRowDeleting != null)) {
                    this.UnitPayPeriodRowDeleting(this, new UnitPayPeriodRowChangeEvent(((UnitPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitPayPeriodRow(UnitPayPeriodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitPayPeriodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MaterialPayPeriodDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnDate_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodDataTable() {
                this.TableName = "MaterialPayPeriod";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialPayPeriodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MaterialPayPeriodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRow this[int index] {
                get {
                    return ((MaterialPayPeriodRow)(this.Rows[index]));
                }
            }
            
            public event MaterialPayPeriodRowChangeEventHandler MaterialPayPeriodRowChanging;
            
            public event MaterialPayPeriodRowChangeEventHandler MaterialPayPeriodRowChanged;
            
            public event MaterialPayPeriodRowChangeEventHandler MaterialPayPeriodRowDeleting;
            
            public event MaterialPayPeriodRowChangeEventHandler MaterialPayPeriodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMaterialPayPeriodRow(MaterialPayPeriodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRow AddMaterialPayPeriodRow(int MaterialID, System.DateTime Date_) {
                MaterialPayPeriodRow rowMaterialPayPeriodRow = ((MaterialPayPeriodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaterialID,
                        Date_};
                rowMaterialPayPeriodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMaterialPayPeriodRow);
                return rowMaterialPayPeriodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MaterialPayPeriodDataTable cln = ((MaterialPayPeriodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MaterialPayPeriodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnDate_ = base.Columns["Date_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRow NewMaterialPayPeriodRow() {
                return ((MaterialPayPeriodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MaterialPayPeriodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MaterialPayPeriodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MaterialPayPeriodRowChanged != null)) {
                    this.MaterialPayPeriodRowChanged(this, new MaterialPayPeriodRowChangeEvent(((MaterialPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MaterialPayPeriodRowChanging != null)) {
                    this.MaterialPayPeriodRowChanging(this, new MaterialPayPeriodRowChangeEvent(((MaterialPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MaterialPayPeriodRowDeleted != null)) {
                    this.MaterialPayPeriodRowDeleted(this, new MaterialPayPeriodRowChangeEvent(((MaterialPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MaterialPayPeriodRowDeleting != null)) {
                    this.MaterialPayPeriodRowDeleting(this, new MaterialPayPeriodRowChangeEvent(((MaterialPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMaterialPayPeriodRow(MaterialPayPeriodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MaterialPayPeriodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FunctionListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFunction_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionListDataTable() {
                this.TableName = "FunctionList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FunctionListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FunctionListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionListRow this[int index] {
                get {
                    return ((FunctionListRow)(this.Rows[index]));
                }
            }
            
            public event FunctionListRowChangeEventHandler FunctionListRowChanging;
            
            public event FunctionListRowChangeEventHandler FunctionListRowChanged;
            
            public event FunctionListRowChangeEventHandler FunctionListRowDeleting;
            
            public event FunctionListRowChangeEventHandler FunctionListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFunctionListRow(FunctionListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionListRow AddFunctionListRow(string Function_) {
                FunctionListRow rowFunctionListRow = ((FunctionListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Function_};
                rowFunctionListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFunctionListRow);
                return rowFunctionListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FunctionListDataTable cln = ((FunctionListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FunctionListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFunction_ = base.Columns["Function_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionListRow NewFunctionListRow() {
                return ((FunctionListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FunctionListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FunctionListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FunctionListRowChanged != null)) {
                    this.FunctionListRowChanged(this, new FunctionListRowChangeEvent(((FunctionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FunctionListRowChanging != null)) {
                    this.FunctionListRowChanging(this, new FunctionListRowChangeEvent(((FunctionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FunctionListRowDeleted != null)) {
                    this.FunctionListRowDeleted(this, new FunctionListRowChangeEvent(((FunctionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FunctionListRowDeleting != null)) {
                    this.FunctionListRowDeleting(this, new FunctionListRowChangeEvent(((FunctionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFunctionListRow(FunctionListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FunctionListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubcontractorsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnSubcontractorID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnSubcontractor;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnBudget;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationDataTable() {
                this.TableName = "SubcontractorsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubcontractorsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubcontractorsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorColumn {
                get {
                    return this.columnSubcontractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BudgetColumn {
                get {
                    return this.columnBudget;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow this[int index] {
                get {
                    return ((SubcontractorsInformationRow)(this.Rows[index]));
                }
            }
            
            public event SubcontractorsInformationRowChangeEventHandler SubcontractorsInformationRowChanging;
            
            public event SubcontractorsInformationRowChangeEventHandler SubcontractorsInformationRowChanged;
            
            public event SubcontractorsInformationRowChangeEventHandler SubcontractorsInformationRowDeleting;
            
            public event SubcontractorsInformationRowChangeEventHandler SubcontractorsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubcontractorsInformationRow(SubcontractorsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow AddSubcontractorsInformationRow(
                        int CostingSheetID, 
                        int SubcontractorID, 
                        int RefID, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal CostUsd, 
                        decimal TotalCostCad, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Comment, 
                        string UnitOfMeasurement, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool FromDatabase, 
                        string Subcontractor, 
                        string ClientName, 
                        string ProjectName, 
                        string Month, 
                        int Year, 
                        decimal Budget) {
                SubcontractorsInformationRow rowSubcontractorsInformationRow = ((SubcontractorsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        SubcontractorID,
                        RefID,
                        Quantity,
                        CostCad,
                        CostUsd,
                        TotalCostCad,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Comment,
                        UnitOfMeasurement,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        Subcontractor,
                        ClientName,
                        ProjectName,
                        Month,
                        Year,
                        Budget};
                rowSubcontractorsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubcontractorsInformationRow);
                return rowSubcontractorsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow FindByCostingSheetIDSubcontractorIDRefID(int CostingSheetID, int SubcontractorID, int RefID) {
                return ((SubcontractorsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            SubcontractorID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubcontractorsInformationDataTable cln = ((SubcontractorsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubcontractorsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnSubcontractorID = base.Columns["SubcontractorID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnComment = base.Columns["Comment"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnSubcontractor = base.Columns["Subcontractor"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnMonth = base.Columns["Month"];
                this.columnYear = base.Columns["Year"];
                this.columnBudget = base.Columns["Budget"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnSubcontractorID = new global::System.Data.DataColumn("SubcontractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnSubcontractor = new global::System.Data.DataColumn("Subcontractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractor);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnBudget = new global::System.Data.DataColumn("Budget", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBudget);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnSubcontractorID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnSubcontractorID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow NewSubcontractorsInformationRow() {
                return ((SubcontractorsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubcontractorsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubcontractorsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubcontractorsInformationRowChanged != null)) {
                    this.SubcontractorsInformationRowChanged(this, new SubcontractorsInformationRowChangeEvent(((SubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubcontractorsInformationRowChanging != null)) {
                    this.SubcontractorsInformationRowChanging(this, new SubcontractorsInformationRowChangeEvent(((SubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubcontractorsInformationRowDeleted != null)) {
                    this.SubcontractorsInformationRowDeleted(this, new SubcontractorsInformationRowChangeEvent(((SubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubcontractorsInformationRowDeleting != null)) {
                    this.SubcontractorsInformationRowDeleting(this, new SubcontractorsInformationRowChangeEvent(((SubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubcontractorsInformationRow(SubcontractorsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubcontractorsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubcontractorListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubcontractorID;
            
            private global::System.Data.DataColumn columnUdf;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorListDataTable() {
                this.TableName = "SubcontractorList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubcontractorListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubcontractorListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UdfColumn {
                get {
                    return this.columnUdf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorListRow this[int index] {
                get {
                    return ((SubcontractorListRow)(this.Rows[index]));
                }
            }
            
            public event SubcontractorListRowChangeEventHandler SubcontractorListRowChanging;
            
            public event SubcontractorListRowChangeEventHandler SubcontractorListRowChanged;
            
            public event SubcontractorListRowChangeEventHandler SubcontractorListRowDeleting;
            
            public event SubcontractorListRowChangeEventHandler SubcontractorListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubcontractorListRow(SubcontractorListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorListRow AddSubcontractorListRow(int SubcontractorID, bool Udf, string UnitOfMeasurement) {
                SubcontractorListRow rowSubcontractorListRow = ((SubcontractorListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubcontractorID,
                        Udf,
                        UnitOfMeasurement};
                rowSubcontractorListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubcontractorListRow);
                return rowSubcontractorListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubcontractorListDataTable cln = ((SubcontractorListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubcontractorListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubcontractorID = base.Columns["SubcontractorID"];
                this.columnUdf = base.Columns["Udf"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubcontractorID = new global::System.Data.DataColumn("SubcontractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorID);
                this.columnUdf = new global::System.Data.DataColumn("Udf", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUdf);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorListRow NewSubcontractorListRow() {
                return ((SubcontractorListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubcontractorListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubcontractorListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubcontractorListRowChanged != null)) {
                    this.SubcontractorListRowChanged(this, new SubcontractorListRowChangeEvent(((SubcontractorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubcontractorListRowChanging != null)) {
                    this.SubcontractorListRowChanging(this, new SubcontractorListRowChangeEvent(((SubcontractorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubcontractorListRowDeleted != null)) {
                    this.SubcontractorListRowDeleted(this, new SubcontractorListRowChangeEvent(((SubcontractorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubcontractorListRowDeleting != null)) {
                    this.SubcontractorListRowDeleting(this, new SubcontractorListRowChangeEvent(((SubcontractorListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubcontractorListRow(SubcontractorListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubcontractorListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalSubcontractorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSubcontractorID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnRateCad;
            
            private global::System.Data.DataColumn columnTotalCad;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnSubcontractor;
            
            private global::System.Data.DataColumn columnRateUsd;
            
            private global::System.Data.DataColumn columnTotalUsd;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalSubcontractorDataTable() {
                this.TableName = "OriginalSubcontractor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalSubcontractorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalSubcontractorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateCadColumn {
                get {
                    return this.columnRateCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCadColumn {
                get {
                    return this.columnTotalCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorColumn {
                get {
                    return this.columnSubcontractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateUsdColumn {
                get {
                    return this.columnRateUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUsdColumn {
                get {
                    return this.columnTotalUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalSubcontractorRow this[int index] {
                get {
                    return ((OriginalSubcontractorRow)(this.Rows[index]));
                }
            }
            
            public event OriginalSubcontractorRowChangeEventHandler OriginalSubcontractorRowChanging;
            
            public event OriginalSubcontractorRowChangeEventHandler OriginalSubcontractorRowChanged;
            
            public event OriginalSubcontractorRowChangeEventHandler OriginalSubcontractorRowDeleting;
            
            public event OriginalSubcontractorRowChangeEventHandler OriginalSubcontractorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalSubcontractorRow(OriginalSubcontractorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalSubcontractorRow AddOriginalSubcontractorRow(int ProjectID, System.DateTime Date_, double Quantity, decimal RateCad, double TotalCad, string Comment, string Subcontractor, decimal RateUsd, double TotalUsd) {
                OriginalSubcontractorRow rowOriginalSubcontractorRow = ((OriginalSubcontractorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectID,
                        Date_,
                        Quantity,
                        RateCad,
                        TotalCad,
                        Comment,
                        Subcontractor,
                        RateUsd,
                        TotalUsd};
                rowOriginalSubcontractorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalSubcontractorRow);
                return rowOriginalSubcontractorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalSubcontractorDataTable cln = ((OriginalSubcontractorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalSubcontractorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubcontractorID = base.Columns["SubcontractorID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnRateCad = base.Columns["RateCad"];
                this.columnTotalCad = base.Columns["TotalCad"];
                this.columnComment = base.Columns["Comment"];
                this.columnSubcontractor = base.Columns["Subcontractor"];
                this.columnRateUsd = base.Columns["RateUsd"];
                this.columnTotalUsd = base.Columns["TotalUsd"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubcontractorID = new global::System.Data.DataColumn("SubcontractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnRateCad = new global::System.Data.DataColumn("RateCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateCad);
                this.columnTotalCad = new global::System.Data.DataColumn("TotalCad", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCad);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnSubcontractor = new global::System.Data.DataColumn("Subcontractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractor);
                this.columnRateUsd = new global::System.Data.DataColumn("RateUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRateUsd);
                this.columnTotalUsd = new global::System.Data.DataColumn("TotalUsd", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUsd);
                this.columnSubcontractorID.AutoIncrement = true;
                this.columnSubcontractorID.ReadOnly = true;
                this.columnProjectID.ReadOnly = true;
                this.columnProjectID.Caption = "ProjectId";
                this.columnDate_.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalSubcontractorRow NewOriginalSubcontractorRow() {
                return ((OriginalSubcontractorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalSubcontractorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalSubcontractorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalSubcontractorRowChanged != null)) {
                    this.OriginalSubcontractorRowChanged(this, new OriginalSubcontractorRowChangeEvent(((OriginalSubcontractorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalSubcontractorRowChanging != null)) {
                    this.OriginalSubcontractorRowChanging(this, new OriginalSubcontractorRowChangeEvent(((OriginalSubcontractorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalSubcontractorRowDeleted != null)) {
                    this.OriginalSubcontractorRowDeleted(this, new OriginalSubcontractorRowChangeEvent(((OriginalSubcontractorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalSubcontractorRowDeleting != null)) {
                    this.OriginalSubcontractorRowDeleting(this, new OriginalSubcontractorRowChangeEvent(((OriginalSubcontractorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalSubcontractorRow(OriginalSubcontractorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalSubcontractorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RevenueInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefIDRevenue;
            
            private global::System.Data.DataColumn columnRevenue;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationDataTable() {
                this.TableName = "RevenueInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RevenueInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RevenueInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDRevenueColumn {
                get {
                    return this.columnRefIDRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueColumn {
                get {
                    return this.columnRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow this[int index] {
                get {
                    return ((RevenueInformationRow)(this.Rows[index]));
                }
            }
            
            public event RevenueInformationRowChangeEventHandler RevenueInformationRowChanging;
            
            public event RevenueInformationRowChangeEventHandler RevenueInformationRowChanged;
            
            public event RevenueInformationRowChangeEventHandler RevenueInformationRowDeleting;
            
            public event RevenueInformationRowChangeEventHandler RevenueInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRevenueInformationRow(RevenueInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow AddRevenueInformationRow(int CostingSheetID, int RefIDRevenue, decimal Revenue, string Comment, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, bool Deleted, bool InDatabase, bool FromDatabase) {
                RevenueInformationRow rowRevenueInformationRow = ((RevenueInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefIDRevenue,
                        Revenue,
                        Comment,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Deleted,
                        InDatabase,
                        FromDatabase};
                rowRevenueInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRevenueInformationRow);
                return rowRevenueInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow FindByCostingSheetIDRefIDRevenue(int CostingSheetID, int RefIDRevenue) {
                return ((RevenueInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefIDRevenue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RevenueInformationDataTable cln = ((RevenueInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RevenueInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefIDRevenue = base.Columns["RefIDRevenue"];
                this.columnRevenue = base.Columns["Revenue"];
                this.columnComment = base.Columns["Comment"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefIDRevenue = new global::System.Data.DataColumn("RefIDRevenue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefIDRevenue);
                this.columnRevenue = new global::System.Data.DataColumn("Revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenue);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefIDRevenue}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefIDRevenue.AllowDBNull = false;
                this.columnRevenue.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow NewRevenueInformationRow() {
                return ((RevenueInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RevenueInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RevenueInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RevenueInformationRowChanged != null)) {
                    this.RevenueInformationRowChanged(this, new RevenueInformationRowChangeEvent(((RevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RevenueInformationRowChanging != null)) {
                    this.RevenueInformationRowChanging(this, new RevenueInformationRowChangeEvent(((RevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RevenueInformationRowDeleted != null)) {
                    this.RevenueInformationRowDeleted(this, new RevenueInformationRowChangeEvent(((RevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RevenueInformationRowDeleting != null)) {
                    this.RevenueInformationRowDeleting(this, new RevenueInformationRowChangeEvent(((RevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRevenueInformationRow(RevenueInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RevenueInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalRevenueDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRefIDRevenue;
            
            private global::System.Data.DataColumn columnRevenue;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnDate_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRevenueDataTable() {
                this.TableName = "OriginalRevenue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalRevenueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalRevenueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDRevenueColumn {
                get {
                    return this.columnRefIDRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueColumn {
                get {
                    return this.columnRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRevenueRow this[int index] {
                get {
                    return ((OriginalRevenueRow)(this.Rows[index]));
                }
            }
            
            public event OriginalRevenueRowChangeEventHandler OriginalRevenueRowChanging;
            
            public event OriginalRevenueRowChangeEventHandler OriginalRevenueRowChanged;
            
            public event OriginalRevenueRowChangeEventHandler OriginalRevenueRowDeleting;
            
            public event OriginalRevenueRowChangeEventHandler OriginalRevenueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalRevenueRow(OriginalRevenueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRevenueRow AddOriginalRevenueRow(int RefIDRevenue, decimal Revenue, string Comment, System.DateTime Date_) {
                OriginalRevenueRow rowOriginalRevenueRow = ((OriginalRevenueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RefIDRevenue,
                        Revenue,
                        Comment,
                        Date_};
                rowOriginalRevenueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalRevenueRow);
                return rowOriginalRevenueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalRevenueDataTable cln = ((OriginalRevenueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalRevenueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRefIDRevenue = base.Columns["RefIDRevenue"];
                this.columnRevenue = base.Columns["Revenue"];
                this.columnComment = base.Columns["Comment"];
                this.columnDate_ = base.Columns["Date_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRefIDRevenue = new global::System.Data.DataColumn("RefIDRevenue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefIDRevenue);
                this.columnRevenue = new global::System.Data.DataColumn("Revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenue);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnRefIDRevenue.AllowDBNull = false;
                this.columnRevenue.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRevenueRow NewOriginalRevenueRow() {
                return ((OriginalRevenueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalRevenueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalRevenueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalRevenueRowChanged != null)) {
                    this.OriginalRevenueRowChanged(this, new OriginalRevenueRowChangeEvent(((OriginalRevenueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalRevenueRowChanging != null)) {
                    this.OriginalRevenueRowChanging(this, new OriginalRevenueRowChangeEvent(((OriginalRevenueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalRevenueRowDeleted != null)) {
                    this.OriginalRevenueRowDeleted(this, new OriginalRevenueRowChangeEvent(((OriginalRevenueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalRevenueRowDeleting != null)) {
                    this.OriginalRevenueRowDeleting(this, new OriginalRevenueRowChangeEvent(((OriginalRevenueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalRevenueRow(OriginalRevenueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalRevenueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TemplateInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetTemplateID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnRAData;
            
            private global::System.Data.DataColumn columnFLLData;
            
            private global::System.Data.DataColumn columnPRData;
            
            private global::System.Data.DataColumn columnJLData;
            
            private global::System.Data.DataColumn columnMRData;
            
            private global::System.Data.DataColumn columnMOBData;
            
            private global::System.Data.DataColumn columnOtherData;
            
            private global::System.Data.DataColumn columnLabourHourData;
            
            private global::System.Data.DataColumn columnUnitData;
            
            private global::System.Data.DataColumn columnMaterialData;
            
            private global::System.Data.DataColumn columnSubcontractorData;
            
            private global::System.Data.DataColumn columnMiscData;
            
            private global::System.Data.DataColumn columnRevenueIncluded;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnTypeOfWork;
            
            private global::System.Data.DataColumn columnCostingArea;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnMonth;
            
            private global::System.Data.DataColumn columnDay;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnMonth2;
            
            private global::System.Data.DataColumn columnDay2;
            
            private global::System.Data.DataColumn columnYear2;
            
            private global::System.Data.DataColumn columnSelected;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateInformationDataTable() {
                this.TableName = "TemplateInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TemplateInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetTemplateIDColumn {
                get {
                    return this.columnCostingSheetTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RADataColumn {
                get {
                    return this.columnRAData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLLDataColumn {
                get {
                    return this.columnFLLData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRDataColumn {
                get {
                    return this.columnPRData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JLDataColumn {
                get {
                    return this.columnJLData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MRDataColumn {
                get {
                    return this.columnMRData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOBDataColumn {
                get {
                    return this.columnMOBData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherDataColumn {
                get {
                    return this.columnOtherData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabourHourDataColumn {
                get {
                    return this.columnLabourHourData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDataColumn {
                get {
                    return this.columnUnitData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialDataColumn {
                get {
                    return this.columnMaterialData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorDataColumn {
                get {
                    return this.columnSubcontractorData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiscDataColumn {
                get {
                    return this.columnMiscData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueIncludedColumn {
                get {
                    return this.columnRevenueIncluded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfWorkColumn {
                get {
                    return this.columnTypeOfWork;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingAreaColumn {
                get {
                    return this.columnCostingArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonthColumn {
                get {
                    return this.columnMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DayColumn {
                get {
                    return this.columnDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Month2Column {
                get {
                    return this.columnMonth2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Day2Column {
                get {
                    return this.columnDay2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Year2Column {
                get {
                    return this.columnYear2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateInformationRow this[int index] {
                get {
                    return ((TemplateInformationRow)(this.Rows[index]));
                }
            }
            
            public event TemplateInformationRowChangeEventHandler TemplateInformationRowChanging;
            
            public event TemplateInformationRowChangeEventHandler TemplateInformationRowChanged;
            
            public event TemplateInformationRowChangeEventHandler TemplateInformationRowDeleting;
            
            public event TemplateInformationRowChangeEventHandler TemplateInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemplateInformationRow(TemplateInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateInformationRow AddTemplateInformationRow(
                        string Name, 
                        bool RAData, 
                        bool FLLData, 
                        bool PRData, 
                        bool JLData, 
                        bool MRData, 
                        bool MOBData, 
                        bool OtherData, 
                        bool LabourHourData, 
                        bool UnitData, 
                        bool MaterialData, 
                        bool SubcontractorData, 
                        bool MiscData, 
                        bool RevenueIncluded, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string TypeOfWork, 
                        string CostingArea, 
                        bool InDatabase, 
                        int Month, 
                        int Day, 
                        int Year, 
                        int Month2, 
                        int Day2, 
                        int Year2, 
                        bool Selected) {
                TemplateInformationRow rowTemplateInformationRow = ((TemplateInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        RAData,
                        FLLData,
                        PRData,
                        JLData,
                        MRData,
                        MOBData,
                        OtherData,
                        LabourHourData,
                        UnitData,
                        MaterialData,
                        SubcontractorData,
                        MiscData,
                        RevenueIncluded,
                        Deleted,
                        COMPANY_ID,
                        TypeOfWork,
                        CostingArea,
                        InDatabase,
                        Month,
                        Day,
                        Year,
                        Month2,
                        Day2,
                        Year2,
                        Selected};
                rowTemplateInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemplateInformationRow);
                return rowTemplateInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateInformationRow FindByCostingSheetTemplateID(int CostingSheetTemplateID) {
                return ((TemplateInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetTemplateID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TemplateInformationDataTable cln = ((TemplateInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TemplateInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetTemplateID = base.Columns["CostingSheetTemplateID"];
                this.columnName = base.Columns["Name"];
                this.columnRAData = base.Columns["RAData"];
                this.columnFLLData = base.Columns["FLLData"];
                this.columnPRData = base.Columns["PRData"];
                this.columnJLData = base.Columns["JLData"];
                this.columnMRData = base.Columns["MRData"];
                this.columnMOBData = base.Columns["MOBData"];
                this.columnOtherData = base.Columns["OtherData"];
                this.columnLabourHourData = base.Columns["LabourHourData"];
                this.columnUnitData = base.Columns["UnitData"];
                this.columnMaterialData = base.Columns["MaterialData"];
                this.columnSubcontractorData = base.Columns["SubcontractorData"];
                this.columnMiscData = base.Columns["MiscData"];
                this.columnRevenueIncluded = base.Columns["RevenueIncluded"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnTypeOfWork = base.Columns["TypeOfWork"];
                this.columnCostingArea = base.Columns["CostingArea"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnMonth = base.Columns["Month"];
                this.columnDay = base.Columns["Day"];
                this.columnYear = base.Columns["Year"];
                this.columnMonth2 = base.Columns["Month2"];
                this.columnDay2 = base.Columns["Day2"];
                this.columnYear2 = base.Columns["Year2"];
                this.columnSelected = base.Columns["Selected"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetTemplateID = new global::System.Data.DataColumn("CostingSheetTemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetTemplateID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnRAData = new global::System.Data.DataColumn("RAData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAData);
                this.columnFLLData = new global::System.Data.DataColumn("FLLData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLLData);
                this.columnPRData = new global::System.Data.DataColumn("PRData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRData);
                this.columnJLData = new global::System.Data.DataColumn("JLData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJLData);
                this.columnMRData = new global::System.Data.DataColumn("MRData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRData);
                this.columnMOBData = new global::System.Data.DataColumn("MOBData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOBData);
                this.columnOtherData = new global::System.Data.DataColumn("OtherData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherData);
                this.columnLabourHourData = new global::System.Data.DataColumn("LabourHourData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabourHourData);
                this.columnUnitData = new global::System.Data.DataColumn("UnitData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitData);
                this.columnMaterialData = new global::System.Data.DataColumn("MaterialData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialData);
                this.columnSubcontractorData = new global::System.Data.DataColumn("SubcontractorData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorData);
                this.columnMiscData = new global::System.Data.DataColumn("MiscData", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiscData);
                this.columnRevenueIncluded = new global::System.Data.DataColumn("RevenueIncluded", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenueIncluded);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnTypeOfWork = new global::System.Data.DataColumn("TypeOfWork", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfWork);
                this.columnCostingArea = new global::System.Data.DataColumn("CostingArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingArea);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnMonth = new global::System.Data.DataColumn("Month", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth);
                this.columnDay = new global::System.Data.DataColumn("Day", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnMonth2 = new global::System.Data.DataColumn("Month2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonth2);
                this.columnDay2 = new global::System.Data.DataColumn("Day2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDay2);
                this.columnYear2 = new global::System.Data.DataColumn("Year2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear2);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetTemplateID}, true));
                this.columnCostingSheetTemplateID.AutoIncrement = true;
                this.columnCostingSheetTemplateID.AutoIncrementSeed = -1;
                this.columnCostingSheetTemplateID.AutoIncrementStep = -1;
                this.columnCostingSheetTemplateID.AllowDBNull = false;
                this.columnCostingSheetTemplateID.ReadOnly = true;
                this.columnCostingSheetTemplateID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnRAData.AllowDBNull = false;
                this.columnFLLData.AllowDBNull = false;
                this.columnPRData.AllowDBNull = false;
                this.columnJLData.AllowDBNull = false;
                this.columnMRData.AllowDBNull = false;
                this.columnMOBData.AllowDBNull = false;
                this.columnOtherData.AllowDBNull = false;
                this.columnLabourHourData.AllowDBNull = false;
                this.columnUnitData.AllowDBNull = false;
                this.columnMaterialData.AllowDBNull = false;
                this.columnSubcontractorData.AllowDBNull = false;
                this.columnMiscData.AllowDBNull = false;
                this.columnRevenueIncluded.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateInformationRow NewTemplateInformationRow() {
                return ((TemplateInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TemplateInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TemplateInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateInformationRowChanged != null)) {
                    this.TemplateInformationRowChanged(this, new TemplateInformationRowChangeEvent(((TemplateInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateInformationRowChanging != null)) {
                    this.TemplateInformationRowChanging(this, new TemplateInformationRowChangeEvent(((TemplateInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateInformationRowDeleted != null)) {
                    this.TemplateInformationRowDeleted(this, new TemplateInformationRowChangeEvent(((TemplateInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateInformationRowDeleting != null)) {
                    this.TemplateInformationRowDeleting(this, new TemplateInformationRowChangeEvent(((TemplateInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemplateInformationRow(TemplateInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TemplateInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedBasicInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnTotalLabourHoursCad;
            
            private global::System.Data.DataColumn columnTotalLabourHoursUsd;
            
            private global::System.Data.DataColumn columnTotalMaterialsCad;
            
            private global::System.Data.DataColumn columnTotalMaterialsUsd;
            
            private global::System.Data.DataColumn columnTotalUnitsCad;
            
            private global::System.Data.DataColumn columnTotalUnitsUsd;
            
            private global::System.Data.DataColumn columnTotalOtherCostsCad;
            
            private global::System.Data.DataColumn columnTotalOtherCostsUsd;
            
            private global::System.Data.DataColumn columnGrantTotalCostCad;
            
            private global::System.Data.DataColumn columnGrantTotalCostUsd;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsCad;
            
            private global::System.Data.DataColumn columnTotalSubcontractorsUsd;
            
            private global::System.Data.DataColumn columnGrandRevenue;
            
            private global::System.Data.DataColumn columnGrandProfit;
            
            private global::System.Data.DataColumn columnGrandGrossMargin;
            
            private global::System.Data.DataColumn columnCombinedProjects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationDataTable() {
                this.TableName = "CombinedBasicInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedBasicInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedBasicInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursCadColumn {
                get {
                    return this.columnTotalLabourHoursCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursUsdColumn {
                get {
                    return this.columnTotalLabourHoursUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsCadColumn {
                get {
                    return this.columnTotalMaterialsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsUsdColumn {
                get {
                    return this.columnTotalMaterialsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsCadColumn {
                get {
                    return this.columnTotalUnitsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsUsdColumn {
                get {
                    return this.columnTotalUnitsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsCadColumn {
                get {
                    return this.columnTotalOtherCostsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsUsdColumn {
                get {
                    return this.columnTotalOtherCostsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantTotalCostCadColumn {
                get {
                    return this.columnGrantTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantTotalCostUsdColumn {
                get {
                    return this.columnGrantTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsCadColumn {
                get {
                    return this.columnTotalSubcontractorsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalSubcontractorsUsdColumn {
                get {
                    return this.columnTotalSubcontractorsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandRevenueColumn {
                get {
                    return this.columnGrandRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandProfitColumn {
                get {
                    return this.columnGrandProfit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrandGrossMarginColumn {
                get {
                    return this.columnGrandGrossMargin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CombinedProjectsColumn {
                get {
                    return this.columnCombinedProjects;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow this[int index] {
                get {
                    return ((CombinedBasicInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedBasicInformationRowChangeEventHandler CombinedBasicInformationRowChanging;
            
            public event CombinedBasicInformationRowChangeEventHandler CombinedBasicInformationRowChanged;
            
            public event CombinedBasicInformationRowChangeEventHandler CombinedBasicInformationRowDeleting;
            
            public event CombinedBasicInformationRowChangeEventHandler CombinedBasicInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedBasicInformationRow(CombinedBasicInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow AddCombinedBasicInformationRow(
                        int CostingSheetID, 
                        int ClientID, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        decimal TotalLabourHoursCad, 
                        decimal TotalLabourHoursUsd, 
                        decimal TotalMaterialsCad, 
                        decimal TotalMaterialsUsd, 
                        decimal TotalUnitsCad, 
                        decimal TotalUnitsUsd, 
                        decimal TotalOtherCostsCad, 
                        decimal TotalOtherCostsUsd, 
                        decimal GrantTotalCostCad, 
                        decimal GrantTotalCostUsd, 
                        string State, 
                        decimal TotalSubcontractorsCad, 
                        decimal TotalSubcontractorsUsd, 
                        decimal GrandRevenue, 
                        decimal GrandProfit, 
                        decimal GrandGrossMargin, 
                        string CombinedProjects) {
                CombinedBasicInformationRow rowCombinedBasicInformationRow = ((CombinedBasicInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        ClientID,
                        Name,
                        StartDate,
                        EndDate,
                        Deleted,
                        COMPANY_ID,
                        TotalLabourHoursCad,
                        TotalLabourHoursUsd,
                        TotalMaterialsCad,
                        TotalMaterialsUsd,
                        TotalUnitsCad,
                        TotalUnitsUsd,
                        TotalOtherCostsCad,
                        TotalOtherCostsUsd,
                        GrantTotalCostCad,
                        GrantTotalCostUsd,
                        State,
                        TotalSubcontractorsCad,
                        TotalSubcontractorsUsd,
                        GrandRevenue,
                        GrandProfit,
                        GrandGrossMargin,
                        CombinedProjects};
                rowCombinedBasicInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedBasicInformationRow);
                return rowCombinedBasicInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow FindByCostingSheetID(int CostingSheetID) {
                return ((CombinedBasicInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedBasicInformationDataTable cln = ((CombinedBasicInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedBasicInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnTotalLabourHoursCad = base.Columns["TotalLabourHoursCad"];
                this.columnTotalLabourHoursUsd = base.Columns["TotalLabourHoursUsd"];
                this.columnTotalMaterialsCad = base.Columns["TotalMaterialsCad"];
                this.columnTotalMaterialsUsd = base.Columns["TotalMaterialsUsd"];
                this.columnTotalUnitsCad = base.Columns["TotalUnitsCad"];
                this.columnTotalUnitsUsd = base.Columns["TotalUnitsUsd"];
                this.columnTotalOtherCostsCad = base.Columns["TotalOtherCostsCad"];
                this.columnTotalOtherCostsUsd = base.Columns["TotalOtherCostsUsd"];
                this.columnGrantTotalCostCad = base.Columns["GrantTotalCostCad"];
                this.columnGrantTotalCostUsd = base.Columns["GrantTotalCostUsd"];
                this.columnState = base.Columns["State"];
                this.columnTotalSubcontractorsCad = base.Columns["TotalSubcontractorsCad"];
                this.columnTotalSubcontractorsUsd = base.Columns["TotalSubcontractorsUsd"];
                this.columnGrandRevenue = base.Columns["GrandRevenue"];
                this.columnGrandProfit = base.Columns["GrandProfit"];
                this.columnGrandGrossMargin = base.Columns["GrandGrossMargin"];
                this.columnCombinedProjects = base.Columns["CombinedProjects"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnTotalLabourHoursCad = new global::System.Data.DataColumn("TotalLabourHoursCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursCad);
                this.columnTotalLabourHoursUsd = new global::System.Data.DataColumn("TotalLabourHoursUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursUsd);
                this.columnTotalMaterialsCad = new global::System.Data.DataColumn("TotalMaterialsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsCad);
                this.columnTotalMaterialsUsd = new global::System.Data.DataColumn("TotalMaterialsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsUsd);
                this.columnTotalUnitsCad = new global::System.Data.DataColumn("TotalUnitsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsCad);
                this.columnTotalUnitsUsd = new global::System.Data.DataColumn("TotalUnitsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsUsd);
                this.columnTotalOtherCostsCad = new global::System.Data.DataColumn("TotalOtherCostsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsCad);
                this.columnTotalOtherCostsUsd = new global::System.Data.DataColumn("TotalOtherCostsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsUsd);
                this.columnGrantTotalCostCad = new global::System.Data.DataColumn("GrantTotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantTotalCostCad);
                this.columnGrantTotalCostUsd = new global::System.Data.DataColumn("GrantTotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantTotalCostUsd);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnTotalSubcontractorsCad = new global::System.Data.DataColumn("TotalSubcontractorsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsCad);
                this.columnTotalSubcontractorsUsd = new global::System.Data.DataColumn("TotalSubcontractorsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalSubcontractorsUsd);
                this.columnGrandRevenue = new global::System.Data.DataColumn("GrandRevenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandRevenue);
                this.columnGrandProfit = new global::System.Data.DataColumn("GrandProfit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandProfit);
                this.columnGrandGrossMargin = new global::System.Data.DataColumn("GrandGrossMargin", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrandGrossMargin);
                this.columnCombinedProjects = new global::System.Data.DataColumn("CombinedProjects", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCombinedProjects);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.Unique = true;
                this.columnClientID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 150;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow NewCombinedBasicInformationRow() {
                return ((CombinedBasicInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedBasicInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedBasicInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedBasicInformationRowChanged != null)) {
                    this.CombinedBasicInformationRowChanged(this, new CombinedBasicInformationRowChangeEvent(((CombinedBasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedBasicInformationRowChanging != null)) {
                    this.CombinedBasicInformationRowChanging(this, new CombinedBasicInformationRowChangeEvent(((CombinedBasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedBasicInformationRowDeleted != null)) {
                    this.CombinedBasicInformationRowDeleted(this, new CombinedBasicInformationRowChangeEvent(((CombinedBasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedBasicInformationRowDeleting != null)) {
                    this.CombinedBasicInformationRowDeleting(this, new CombinedBasicInformationRowChangeEvent(((CombinedBasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedBasicInformationRow(CombinedBasicInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedBasicInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedLabourHoursInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnLHQuantity;
            
            private global::System.Data.DataColumn columnLHUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsQuantity;
            
            private global::System.Data.DataColumn columnMotelUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMotelQuantity;
            
            private global::System.Data.DataColumn columnLHCostCad;
            
            private global::System.Data.DataColumn columnMealsCostCad;
            
            private global::System.Data.DataColumn columnMotelCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnLHCostUsd;
            
            private global::System.Data.DataColumn columnMealsCostUsd;
            
            private global::System.Data.DataColumn columnMotelCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationDataTable() {
                this.TableName = "CombinedLabourHoursInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedLabourHoursInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedLabourHoursInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHQuantityColumn {
                get {
                    return this.columnLHQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHUnitOfMeasurementColumn {
                get {
                    return this.columnLHUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsUnitOfMeasurementColumn {
                get {
                    return this.columnMealsUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsQuantityColumn {
                get {
                    return this.columnMealsQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelUnitOfMeasurementColumn {
                get {
                    return this.columnMotelUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelQuantityColumn {
                get {
                    return this.columnMotelQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostCadColumn {
                get {
                    return this.columnLHCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostCadColumn {
                get {
                    return this.columnMealsCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostCadColumn {
                get {
                    return this.columnMotelCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostUsdColumn {
                get {
                    return this.columnLHCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostUsdColumn {
                get {
                    return this.columnMealsCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostUsdColumn {
                get {
                    return this.columnMotelCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow this[int index] {
                get {
                    return ((CombinedLabourHoursInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedLabourHoursInformationRowChangeEventHandler CombinedLabourHoursInformationRowChanging;
            
            public event CombinedLabourHoursInformationRowChangeEventHandler CombinedLabourHoursInformationRowChanged;
            
            public event CombinedLabourHoursInformationRowChangeEventHandler CombinedLabourHoursInformationRowDeleting;
            
            public event CombinedLabourHoursInformationRowChangeEventHandler CombinedLabourHoursInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedLabourHoursInformationRow(CombinedLabourHoursInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow AddCombinedLabourHoursInformationRow(
                        int CostingSheetID, 
                        string Work_, 
                        int EmployeeID, 
                        int RefID, 
                        double LHQuantity, 
                        string LHUnitOfMeasurement, 
                        string MealsUnitOfMeasurement, 
                        int MealsQuantity, 
                        string MotelUnitOfMeasurement, 
                        int MotelQuantity, 
                        decimal LHCostCad, 
                        decimal MealsCostCad, 
                        decimal MotelCostCad, 
                        decimal TotalCostCad, 
                        decimal LHCostUsd, 
                        decimal MealsCostUsd, 
                        decimal MotelCostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool FromDatabase, 
                        string WorkFunction, 
                        string Function_, 
                        int ClientID, 
                        int ProjectID, 
                        string Project) {
                CombinedLabourHoursInformationRow rowCombinedLabourHoursInformationRow = ((CombinedLabourHoursInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        EmployeeID,
                        RefID,
                        LHQuantity,
                        LHUnitOfMeasurement,
                        MealsUnitOfMeasurement,
                        MealsQuantity,
                        MotelUnitOfMeasurement,
                        MotelQuantity,
                        LHCostCad,
                        MealsCostCad,
                        MotelCostCad,
                        TotalCostCad,
                        LHCostUsd,
                        MealsCostUsd,
                        MotelCostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Name,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        WorkFunction,
                        Function_,
                        ClientID,
                        ProjectID,
                        Project};
                rowCombinedLabourHoursInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedLabourHoursInformationRow);
                return rowCombinedLabourHoursInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow FindByRefIDEmployeeIDWork_CostingSheetID(int RefID, int EmployeeID, string Work_, int CostingSheetID) {
                return ((CombinedLabourHoursInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            EmployeeID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedLabourHoursInformationDataTable cln = ((CombinedLabourHoursInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedLabourHoursInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnLHQuantity = base.Columns["LHQuantity"];
                this.columnLHUnitOfMeasurement = base.Columns["LHUnitOfMeasurement"];
                this.columnMealsUnitOfMeasurement = base.Columns["MealsUnitOfMeasurement"];
                this.columnMealsQuantity = base.Columns["MealsQuantity"];
                this.columnMotelUnitOfMeasurement = base.Columns["MotelUnitOfMeasurement"];
                this.columnMotelQuantity = base.Columns["MotelQuantity"];
                this.columnLHCostCad = base.Columns["LHCostCad"];
                this.columnMealsCostCad = base.Columns["MealsCostCad"];
                this.columnMotelCostCad = base.Columns["MotelCostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnLHCostUsd = base.Columns["LHCostUsd"];
                this.columnMealsCostUsd = base.Columns["MealsCostUsd"];
                this.columnMotelCostUsd = base.Columns["MotelCostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnLHQuantity = new global::System.Data.DataColumn("LHQuantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHQuantity);
                this.columnLHUnitOfMeasurement = new global::System.Data.DataColumn("LHUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHUnitOfMeasurement);
                this.columnMealsUnitOfMeasurement = new global::System.Data.DataColumn("MealsUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsUnitOfMeasurement);
                this.columnMealsQuantity = new global::System.Data.DataColumn("MealsQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsQuantity);
                this.columnMotelUnitOfMeasurement = new global::System.Data.DataColumn("MotelUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelUnitOfMeasurement);
                this.columnMotelQuantity = new global::System.Data.DataColumn("MotelQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelQuantity);
                this.columnLHCostCad = new global::System.Data.DataColumn("LHCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostCad);
                this.columnMealsCostCad = new global::System.Data.DataColumn("MealsCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostCad);
                this.columnMotelCostCad = new global::System.Data.DataColumn("MotelCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnLHCostUsd = new global::System.Data.DataColumn("LHCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostUsd);
                this.columnMealsCostUsd = new global::System.Data.DataColumn("MealsCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostUsd);
                this.columnMotelCostUsd = new global::System.Data.DataColumn("MotelCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnEmployeeID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnLHQuantity.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.MaxLength = 10;
                this.columnMealsUnitOfMeasurement.MaxLength = 25;
                this.columnMotelUnitOfMeasurement.MaxLength = 25;
                this.columnLHCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnLHCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow NewCombinedLabourHoursInformationRow() {
                return ((CombinedLabourHoursInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedLabourHoursInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedLabourHoursInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedLabourHoursInformationRowChanged != null)) {
                    this.CombinedLabourHoursInformationRowChanged(this, new CombinedLabourHoursInformationRowChangeEvent(((CombinedLabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedLabourHoursInformationRowChanging != null)) {
                    this.CombinedLabourHoursInformationRowChanging(this, new CombinedLabourHoursInformationRowChangeEvent(((CombinedLabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedLabourHoursInformationRowDeleted != null)) {
                    this.CombinedLabourHoursInformationRowDeleted(this, new CombinedLabourHoursInformationRowChangeEvent(((CombinedLabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedLabourHoursInformationRowDeleting != null)) {
                    this.CombinedLabourHoursInformationRowDeleting(this, new CombinedLabourHoursInformationRowChangeEvent(((CombinedLabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedLabourHoursInformationRow(CombinedLabourHoursInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedLabourHoursInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedUnitsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnUnitDescription;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationDataTable() {
                this.TableName = "CombinedUnitsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedUnitsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedUnitsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDescriptionColumn {
                get {
                    return this.columnUnitDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow this[int index] {
                get {
                    return ((CombinedUnitsInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedUnitsInformationRowChangeEventHandler CombinedUnitsInformationRowChanging;
            
            public event CombinedUnitsInformationRowChangeEventHandler CombinedUnitsInformationRowChanged;
            
            public event CombinedUnitsInformationRowChangeEventHandler CombinedUnitsInformationRowDeleting;
            
            public event CombinedUnitsInformationRowChangeEventHandler CombinedUnitsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedUnitsInformationRow(CombinedUnitsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow AddCombinedUnitsInformationRow(
                        int CostingSheetID, 
                        string Work_, 
                        int UnitID, 
                        int RefID, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string UnitCode, 
                        string UnitDescription, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool FromDatabase, 
                        string WorkFunction, 
                        string Function_, 
                        int ClientID, 
                        int ProjectID, 
                        string Project) {
                CombinedUnitsInformationRow rowCombinedUnitsInformationRow = ((CombinedUnitsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        UnitID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UnitCode,
                        UnitDescription,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        WorkFunction,
                        Function_,
                        ClientID,
                        ProjectID,
                        Project};
                rowCombinedUnitsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedUnitsInformationRow);
                return rowCombinedUnitsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow FindByRefIDUnitIDWork_CostingSheetID(int RefID, int UnitID, string Work_, int CostingSheetID) {
                return ((CombinedUnitsInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            UnitID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedUnitsInformationDataTable cln = ((CombinedUnitsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedUnitsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnUnitDescription = base.Columns["UnitDescription"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnUnitDescription = new global::System.Data.DataColumn("UnitDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitDescription);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnUnitID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnUnitID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow NewCombinedUnitsInformationRow() {
                return ((CombinedUnitsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedUnitsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedUnitsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedUnitsInformationRowChanged != null)) {
                    this.CombinedUnitsInformationRowChanged(this, new CombinedUnitsInformationRowChangeEvent(((CombinedUnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedUnitsInformationRowChanging != null)) {
                    this.CombinedUnitsInformationRowChanging(this, new CombinedUnitsInformationRowChangeEvent(((CombinedUnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedUnitsInformationRowDeleted != null)) {
                    this.CombinedUnitsInformationRowDeleted(this, new CombinedUnitsInformationRowChangeEvent(((CombinedUnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedUnitsInformationRowDeleting != null)) {
                    this.CombinedUnitsInformationRowDeleting(this, new CombinedUnitsInformationRowChangeEvent(((CombinedUnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedUnitsInformationRow(CombinedUnitsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedUnitsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedMaterialsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnProcess;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationDataTable() {
                this.TableName = "CombinedMaterialsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedMaterialsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedMaterialsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessColumn {
                get {
                    return this.columnProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow this[int index] {
                get {
                    return ((CombinedMaterialsInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedMaterialsInformationRowChangeEventHandler CombinedMaterialsInformationRowChanging;
            
            public event CombinedMaterialsInformationRowChangeEventHandler CombinedMaterialsInformationRowChanged;
            
            public event CombinedMaterialsInformationRowChangeEventHandler CombinedMaterialsInformationRowDeleting;
            
            public event CombinedMaterialsInformationRowChangeEventHandler CombinedMaterialsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedMaterialsInformationRow(CombinedMaterialsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow AddCombinedMaterialsInformationRow(
                        int CostingSheetID, 
                        int MaterialID, 
                        int RefID, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Process, 
                        string Description, 
                        string UnitOfMeasurement, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool FromDatabase, 
                        string Function_, 
                        string WorkFunction, 
                        int ClientID, 
                        int ProjectID, 
                        string Project) {
                CombinedMaterialsInformationRow rowCombinedMaterialsInformationRow = ((CombinedMaterialsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        MaterialID,
                        RefID,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Process,
                        Description,
                        UnitOfMeasurement,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        Function_,
                        WorkFunction,
                        ClientID,
                        ProjectID,
                        Project};
                rowCombinedMaterialsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedMaterialsInformationRow);
                return rowCombinedMaterialsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow FindByCostingSheetIDMaterialIDRefID(int CostingSheetID, int MaterialID, int RefID) {
                return ((CombinedMaterialsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            MaterialID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedMaterialsInformationDataTable cln = ((CombinedMaterialsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedMaterialsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnProcess = base.Columns["Process"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnProcess = new global::System.Data.DataColumn("Process", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnMaterialID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnMaterialID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow NewCombinedMaterialsInformationRow() {
                return ((CombinedMaterialsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedMaterialsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedMaterialsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedMaterialsInformationRowChanged != null)) {
                    this.CombinedMaterialsInformationRowChanged(this, new CombinedMaterialsInformationRowChangeEvent(((CombinedMaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedMaterialsInformationRowChanging != null)) {
                    this.CombinedMaterialsInformationRowChanging(this, new CombinedMaterialsInformationRowChangeEvent(((CombinedMaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedMaterialsInformationRowDeleted != null)) {
                    this.CombinedMaterialsInformationRowDeleted(this, new CombinedMaterialsInformationRowChangeEvent(((CombinedMaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedMaterialsInformationRowDeleting != null)) {
                    this.CombinedMaterialsInformationRowDeleting(this, new CombinedMaterialsInformationRowChangeEvent(((CombinedMaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedMaterialsInformationRow(CombinedMaterialsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedMaterialsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedSubcontractorsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnSubcontractorID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnSubcontractor;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationDataTable() {
                this.TableName = "CombinedSubcontractorsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedSubcontractorsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedSubcontractorsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubcontractorColumn {
                get {
                    return this.columnSubcontractor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow this[int index] {
                get {
                    return ((CombinedSubcontractorsInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedSubcontractorsInformationRowChangeEventHandler CombinedSubcontractorsInformationRowChanging;
            
            public event CombinedSubcontractorsInformationRowChangeEventHandler CombinedSubcontractorsInformationRowChanged;
            
            public event CombinedSubcontractorsInformationRowChangeEventHandler CombinedSubcontractorsInformationRowDeleting;
            
            public event CombinedSubcontractorsInformationRowChangeEventHandler CombinedSubcontractorsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedSubcontractorsInformationRow(CombinedSubcontractorsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow AddCombinedSubcontractorsInformationRow(
                        int CostingSheetID, 
                        int SubcontractorID, 
                        int RefID, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal CostUsd, 
                        decimal TotalCostCad, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Comment, 
                        string UnitOfMeasurement, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool FromDatabase, 
                        string Subcontractor, 
                        int ClientID, 
                        int ProjectID, 
                        string Project) {
                CombinedSubcontractorsInformationRow rowCombinedSubcontractorsInformationRow = ((CombinedSubcontractorsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        SubcontractorID,
                        RefID,
                        Quantity,
                        CostCad,
                        CostUsd,
                        TotalCostCad,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Comment,
                        UnitOfMeasurement,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        Subcontractor,
                        ClientID,
                        ProjectID,
                        Project};
                rowCombinedSubcontractorsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedSubcontractorsInformationRow);
                return rowCombinedSubcontractorsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow FindByCostingSheetIDSubcontractorIDRefID(int CostingSheetID, int SubcontractorID, int RefID) {
                return ((CombinedSubcontractorsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            SubcontractorID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedSubcontractorsInformationDataTable cln = ((CombinedSubcontractorsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedSubcontractorsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnSubcontractorID = base.Columns["SubcontractorID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnComment = base.Columns["Comment"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnSubcontractor = base.Columns["Subcontractor"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnSubcontractorID = new global::System.Data.DataColumn("SubcontractorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractorID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnSubcontractor = new global::System.Data.DataColumn("Subcontractor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubcontractor);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnSubcontractorID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnSubcontractorID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow NewCombinedSubcontractorsInformationRow() {
                return ((CombinedSubcontractorsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedSubcontractorsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedSubcontractorsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedSubcontractorsInformationRowChanged != null)) {
                    this.CombinedSubcontractorsInformationRowChanged(this, new CombinedSubcontractorsInformationRowChangeEvent(((CombinedSubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedSubcontractorsInformationRowChanging != null)) {
                    this.CombinedSubcontractorsInformationRowChanging(this, new CombinedSubcontractorsInformationRowChangeEvent(((CombinedSubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedSubcontractorsInformationRowDeleted != null)) {
                    this.CombinedSubcontractorsInformationRowDeleted(this, new CombinedSubcontractorsInformationRowChangeEvent(((CombinedSubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedSubcontractorsInformationRowDeleting != null)) {
                    this.CombinedSubcontractorsInformationRowDeleting(this, new CombinedSubcontractorsInformationRowChangeEvent(((CombinedSubcontractorsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedSubcontractorsInformationRow(CombinedSubcontractorsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedSubcontractorsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedRevenueInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefIDRevenue;
            
            private global::System.Data.DataColumn columnRevenue;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationDataTable() {
                this.TableName = "CombinedRevenueInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedRevenueInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedRevenueInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDRevenueColumn {
                get {
                    return this.columnRefIDRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RevenueColumn {
                get {
                    return this.columnRevenue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow this[int index] {
                get {
                    return ((CombinedRevenueInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedRevenueInformationRowChangeEventHandler CombinedRevenueInformationRowChanging;
            
            public event CombinedRevenueInformationRowChangeEventHandler CombinedRevenueInformationRowChanged;
            
            public event CombinedRevenueInformationRowChangeEventHandler CombinedRevenueInformationRowDeleting;
            
            public event CombinedRevenueInformationRowChangeEventHandler CombinedRevenueInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedRevenueInformationRow(CombinedRevenueInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow AddCombinedRevenueInformationRow(int CostingSheetID, int RefIDRevenue, decimal Revenue, string Comment, int COMPANY_ID, System.DateTime StartDate, System.DateTime EndDate, bool Deleted, bool InDatabase, bool FromDatabase, int ClientID, int ProjectID, string Project) {
                CombinedRevenueInformationRow rowCombinedRevenueInformationRow = ((CombinedRevenueInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefIDRevenue,
                        Revenue,
                        Comment,
                        COMPANY_ID,
                        StartDate,
                        EndDate,
                        Deleted,
                        InDatabase,
                        FromDatabase,
                        ClientID,
                        ProjectID,
                        Project};
                rowCombinedRevenueInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedRevenueInformationRow);
                return rowCombinedRevenueInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow FindByCostingSheetIDRefIDRevenue(int CostingSheetID, int RefIDRevenue) {
                return ((CombinedRevenueInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefIDRevenue})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedRevenueInformationDataTable cln = ((CombinedRevenueInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedRevenueInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefIDRevenue = base.Columns["RefIDRevenue"];
                this.columnRevenue = base.Columns["Revenue"];
                this.columnComment = base.Columns["Comment"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefIDRevenue = new global::System.Data.DataColumn("RefIDRevenue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefIDRevenue);
                this.columnRevenue = new global::System.Data.DataColumn("Revenue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevenue);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefIDRevenue}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefIDRevenue.AllowDBNull = false;
                this.columnRevenue.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow NewCombinedRevenueInformationRow() {
                return ((CombinedRevenueInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedRevenueInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedRevenueInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedRevenueInformationRowChanged != null)) {
                    this.CombinedRevenueInformationRowChanged(this, new CombinedRevenueInformationRowChangeEvent(((CombinedRevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedRevenueInformationRowChanging != null)) {
                    this.CombinedRevenueInformationRowChanging(this, new CombinedRevenueInformationRowChangeEvent(((CombinedRevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedRevenueInformationRowDeleted != null)) {
                    this.CombinedRevenueInformationRowDeleted(this, new CombinedRevenueInformationRowChangeEvent(((CombinedRevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedRevenueInformationRowDeleting != null)) {
                    this.CombinedRevenueInformationRowDeleting(this, new CombinedRevenueInformationRowChangeEvent(((CombinedRevenueInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedRevenueInformationRow(CombinedRevenueInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedRevenueInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CombinedOtherCostsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationDataTable() {
                this.TableName = "CombinedOtherCostsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedOtherCostsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CombinedOtherCostsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow this[int index] {
                get {
                    return ((CombinedOtherCostsInformationRow)(this.Rows[index]));
                }
            }
            
            public event CombinedOtherCostsInformationRowChangeEventHandler CombinedOtherCostsInformationRowChanging;
            
            public event CombinedOtherCostsInformationRowChangeEventHandler CombinedOtherCostsInformationRowChanged;
            
            public event CombinedOtherCostsInformationRowChangeEventHandler CombinedOtherCostsInformationRowDeleting;
            
            public event CombinedOtherCostsInformationRowChangeEventHandler CombinedOtherCostsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCombinedOtherCostsInformationRow(CombinedOtherCostsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow AddCombinedOtherCostsInformationRow(
                        int CostingSheetID, 
                        int RefID, 
                        string Work_, 
                        string Function_, 
                        string Description, 
                        string UnitOfMeasurement, 
                        double Quantity, 
                        decimal CostCad, 
                        decimal TotalCostCad, 
                        decimal CostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string WorkFunction, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        int ClientID, 
                        int ProjectID, 
                        string Project) {
                CombinedOtherCostsInformationRow rowCombinedOtherCostsInformationRow = ((CombinedOtherCostsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefID,
                        Work_,
                        Function_,
                        Description,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        WorkFunction,
                        StartDate,
                        EndDate,
                        ClientID,
                        ProjectID,
                        Project};
                rowCombinedOtherCostsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCombinedOtherCostsInformationRow);
                return rowCombinedOtherCostsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow FindByCostingSheetIDRefID(int CostingSheetID, int RefID) {
                return ((CombinedOtherCostsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CombinedOtherCostsInformationDataTable cln = ((CombinedOtherCostsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CombinedOtherCostsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProject = base.Columns["Project"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProject = new global::System.Data.DataColumn("Project", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 150;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow NewCombinedOtherCostsInformationRow() {
                return ((CombinedOtherCostsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CombinedOtherCostsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CombinedOtherCostsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CombinedOtherCostsInformationRowChanged != null)) {
                    this.CombinedOtherCostsInformationRowChanged(this, new CombinedOtherCostsInformationRowChangeEvent(((CombinedOtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CombinedOtherCostsInformationRowChanging != null)) {
                    this.CombinedOtherCostsInformationRowChanging(this, new CombinedOtherCostsInformationRowChangeEvent(((CombinedOtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CombinedOtherCostsInformationRowDeleted != null)) {
                    this.CombinedOtherCostsInformationRowDeleted(this, new CombinedOtherCostsInformationRowChangeEvent(((CombinedOtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CombinedOtherCostsInformationRowDeleting != null)) {
                    this.CombinedOtherCostsInformationRowDeleting(this, new CombinedOtherCostsInformationRowChangeEvent(((CombinedOtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCombinedOtherCostsInformationRow(CombinedOtherCostsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CombinedOtherCostsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HotelsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnHotelID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnHotel;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationDataTable() {
                this.TableName = "HotelsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HotelsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HotelsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotelIDColumn {
                get {
                    return this.columnHotelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotelColumn {
                get {
                    return this.columnHotel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow this[int index] {
                get {
                    return ((HotelsInformationRow)(this.Rows[index]));
                }
            }
            
            public event HotelsInformationRowChangeEventHandler HotelsInformationRowChanging;
            
            public event HotelsInformationRowChangeEventHandler HotelsInformationRowChanged;
            
            public event HotelsInformationRowChangeEventHandler HotelsInformationRowDeleting;
            
            public event HotelsInformationRowChangeEventHandler HotelsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHotelsInformationRow(HotelsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow AddHotelsInformationRow(int CostingSheetID, int HotelID, int RefID, decimal Rate, bool Deleted, int COMPANY_ID, bool InDatabase, System.DateTime StartDate, System.DateTime EndDate, bool FromDatabase, string Hotel, string Comment) {
                HotelsInformationRow rowHotelsInformationRow = ((HotelsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        HotelID,
                        RefID,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        Hotel,
                        Comment};
                rowHotelsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHotelsInformationRow);
                return rowHotelsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow FindByCostingSheetIDHotelIDRefID(int CostingSheetID, int HotelID, int RefID) {
                return ((HotelsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            HotelID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HotelsInformationDataTable cln = ((HotelsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HotelsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnHotelID = base.Columns["HotelID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnHotel = base.Columns["Hotel"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnHotelID = new global::System.Data.DataColumn("HotelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotelID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnHotel = new global::System.Data.DataColumn("Hotel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotel);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnHotelID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnHotelID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow NewHotelsInformationRow() {
                return ((HotelsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HotelsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HotelsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HotelsInformationRowChanged != null)) {
                    this.HotelsInformationRowChanged(this, new HotelsInformationRowChangeEvent(((HotelsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HotelsInformationRowChanging != null)) {
                    this.HotelsInformationRowChanging(this, new HotelsInformationRowChangeEvent(((HotelsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HotelsInformationRowDeleted != null)) {
                    this.HotelsInformationRowDeleted(this, new HotelsInformationRowChangeEvent(((HotelsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HotelsInformationRowDeleting != null)) {
                    this.HotelsInformationRowDeleting(this, new HotelsInformationRowChangeEvent(((HotelsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHotelsInformationRow(HotelsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HotelsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BondingsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnBondingCompanyID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnBonding;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationDataTable() {
                this.TableName = "BondingsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BondingsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BondingsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingCompanyIDColumn {
                get {
                    return this.columnBondingCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingColumn {
                get {
                    return this.columnBonding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow this[int index] {
                get {
                    return ((BondingsInformationRow)(this.Rows[index]));
                }
            }
            
            public event BondingsInformationRowChangeEventHandler BondingsInformationRowChanging;
            
            public event BondingsInformationRowChangeEventHandler BondingsInformationRowChanged;
            
            public event BondingsInformationRowChangeEventHandler BondingsInformationRowDeleting;
            
            public event BondingsInformationRowChangeEventHandler BondingsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBondingsInformationRow(BondingsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow AddBondingsInformationRow(int CostingSheetID, int BondingCompanyID, int RefID, decimal Rate, bool Deleted, int COMPANY_ID, bool InDatabase, System.DateTime StartDate, System.DateTime EndDate, bool FromDatabase, string Bonding, string Comment) {
                BondingsInformationRow rowBondingsInformationRow = ((BondingsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        BondingCompanyID,
                        RefID,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        Bonding,
                        Comment};
                rowBondingsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBondingsInformationRow);
                return rowBondingsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow FindByCostingSheetIDBondingCompanyIDRefID(int CostingSheetID, int BondingCompanyID, int RefID) {
                return ((BondingsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            BondingCompanyID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BondingsInformationDataTable cln = ((BondingsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BondingsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnBondingCompanyID = base.Columns["BondingCompanyID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnBonding = base.Columns["Bonding"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnBondingCompanyID = new global::System.Data.DataColumn("BondingCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBondingCompanyID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnBonding = new global::System.Data.DataColumn("Bonding", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonding);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnBondingCompanyID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnBondingCompanyID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow NewBondingsInformationRow() {
                return ((BondingsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BondingsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BondingsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BondingsInformationRowChanged != null)) {
                    this.BondingsInformationRowChanged(this, new BondingsInformationRowChangeEvent(((BondingsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BondingsInformationRowChanging != null)) {
                    this.BondingsInformationRowChanging(this, new BondingsInformationRowChangeEvent(((BondingsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BondingsInformationRowDeleted != null)) {
                    this.BondingsInformationRowDeleted(this, new BondingsInformationRowChangeEvent(((BondingsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BondingsInformationRowDeleting != null)) {
                    this.BondingsInformationRowDeleting(this, new BondingsInformationRowChangeEvent(((BondingsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBondingsInformationRow(BondingsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BondingsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InsurancesInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnInsuranceCompanyID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnInsurance;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationDataTable() {
                this.TableName = "InsurancesInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InsurancesInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InsurancesInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceCompanyIDColumn {
                get {
                    return this.columnInsuranceCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceColumn {
                get {
                    return this.columnInsurance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow this[int index] {
                get {
                    return ((InsurancesInformationRow)(this.Rows[index]));
                }
            }
            
            public event InsurancesInformationRowChangeEventHandler InsurancesInformationRowChanging;
            
            public event InsurancesInformationRowChangeEventHandler InsurancesInformationRowChanged;
            
            public event InsurancesInformationRowChangeEventHandler InsurancesInformationRowDeleting;
            
            public event InsurancesInformationRowChangeEventHandler InsurancesInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInsurancesInformationRow(InsurancesInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow AddInsurancesInformationRow(int CostingSheetID, int InsuranceCompanyID, int RefID, decimal Rate, bool Deleted, int COMPANY_ID, bool InDatabase, System.DateTime StartDate, System.DateTime EndDate, bool FromDatabase, string Insurance, string Comment) {
                InsurancesInformationRow rowInsurancesInformationRow = ((InsurancesInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        InsuranceCompanyID,
                        RefID,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        Insurance,
                        Comment};
                rowInsurancesInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInsurancesInformationRow);
                return rowInsurancesInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow FindByCostingSheetIDInsuranceCompanyIDRefID(int CostingSheetID, int InsuranceCompanyID, int RefID) {
                return ((InsurancesInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            InsuranceCompanyID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InsurancesInformationDataTable cln = ((InsurancesInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InsurancesInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnInsuranceCompanyID = base.Columns["InsuranceCompanyID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnInsurance = base.Columns["Insurance"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnInsuranceCompanyID = new global::System.Data.DataColumn("InsuranceCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCompanyID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnInsurance = new global::System.Data.DataColumn("Insurance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsurance);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnInsuranceCompanyID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnInsuranceCompanyID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow NewInsurancesInformationRow() {
                return ((InsurancesInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InsurancesInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InsurancesInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InsurancesInformationRowChanged != null)) {
                    this.InsurancesInformationRowChanged(this, new InsurancesInformationRowChangeEvent(((InsurancesInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InsurancesInformationRowChanging != null)) {
                    this.InsurancesInformationRowChanging(this, new InsurancesInformationRowChangeEvent(((InsurancesInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InsurancesInformationRowDeleted != null)) {
                    this.InsurancesInformationRowDeleted(this, new InsurancesInformationRowChangeEvent(((InsurancesInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InsurancesInformationRowDeleting != null)) {
                    this.InsurancesInformationRowDeleting(this, new InsurancesInformationRowChangeEvent(((InsurancesInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInsurancesInformationRow(InsurancesInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InsurancesInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OtherCategoryInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnFromDatabase;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationDataTable() {
                this.TableName = "OtherCategoryInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCategoryInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OtherCategoryInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FromDatabaseColumn {
                get {
                    return this.columnFromDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow this[int index] {
                get {
                    return ((OtherCategoryInformationRow)(this.Rows[index]));
                }
            }
            
            public event OtherCategoryInformationRowChangeEventHandler OtherCategoryInformationRowChanging;
            
            public event OtherCategoryInformationRowChangeEventHandler OtherCategoryInformationRowChanged;
            
            public event OtherCategoryInformationRowChangeEventHandler OtherCategoryInformationRowDeleting;
            
            public event OtherCategoryInformationRowChangeEventHandler OtherCategoryInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOtherCategoryInformationRow(OtherCategoryInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow AddOtherCategoryInformationRow(int CostingSheetID, string Category, int RefID, decimal Rate, bool Deleted, int COMPANY_ID, bool InDatabase, System.DateTime StartDate, System.DateTime EndDate, bool FromDatabase, string Comment) {
                OtherCategoryInformationRow rowOtherCategoryInformationRow = ((OtherCategoryInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Category,
                        RefID,
                        Rate,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        StartDate,
                        EndDate,
                        FromDatabase,
                        Comment};
                rowOtherCategoryInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOtherCategoryInformationRow);
                return rowOtherCategoryInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow FindByCostingSheetIDCategoryRefID(int CostingSheetID, string Category, int RefID) {
                return ((OtherCategoryInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            Category,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OtherCategoryInformationDataTable cln = ((OtherCategoryInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OtherCategoryInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnCategory = base.Columns["Category"];
                this.columnRefID = base.Columns["RefID"];
                this.columnRate = base.Columns["Rate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnFromDatabase = base.Columns["FromDatabase"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnFromDatabase = new global::System.Data.DataColumn("FromDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromDatabase);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnCategory,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCategory.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnRate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow NewOtherCategoryInformationRow() {
                return ((OtherCategoryInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OtherCategoryInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OtherCategoryInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OtherCategoryInformationRowChanged != null)) {
                    this.OtherCategoryInformationRowChanged(this, new OtherCategoryInformationRowChangeEvent(((OtherCategoryInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OtherCategoryInformationRowChanging != null)) {
                    this.OtherCategoryInformationRowChanging(this, new OtherCategoryInformationRowChangeEvent(((OtherCategoryInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OtherCategoryInformationRowDeleted != null)) {
                    this.OtherCategoryInformationRowDeleted(this, new OtherCategoryInformationRowChangeEvent(((OtherCategoryInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OtherCategoryInformationRowDeleting != null)) {
                    this.OtherCategoryInformationRowDeleting(this, new OtherCategoryInformationRowChangeEvent(((OtherCategoryInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOtherCategoryInformationRow(OtherCategoryInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OtherCategoryInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HotelListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnHotelID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelListDataTable() {
                this.TableName = "HotelList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HotelListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HotelListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotelIDColumn {
                get {
                    return this.columnHotelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelListRow this[int index] {
                get {
                    return ((HotelListRow)(this.Rows[index]));
                }
            }
            
            public event HotelListRowChangeEventHandler HotelListRowChanging;
            
            public event HotelListRowChangeEventHandler HotelListRowChanged;
            
            public event HotelListRowChangeEventHandler HotelListRowDeleting;
            
            public event HotelListRowChangeEventHandler HotelListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHotelListRow(HotelListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelListRow AddHotelListRow(int HotelID) {
                HotelListRow rowHotelListRow = ((HotelListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HotelID};
                rowHotelListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHotelListRow);
                return rowHotelListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HotelListDataTable cln = ((HotelListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HotelListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHotelID = base.Columns["HotelID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHotelID = new global::System.Data.DataColumn("HotelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotelID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelListRow NewHotelListRow() {
                return ((HotelListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HotelListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HotelListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HotelListRowChanged != null)) {
                    this.HotelListRowChanged(this, new HotelListRowChangeEvent(((HotelListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HotelListRowChanging != null)) {
                    this.HotelListRowChanging(this, new HotelListRowChangeEvent(((HotelListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HotelListRowDeleted != null)) {
                    this.HotelListRowDeleted(this, new HotelListRowChangeEvent(((HotelListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HotelListRowDeleting != null)) {
                    this.HotelListRowDeleting(this, new HotelListRowChangeEvent(((HotelListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHotelListRow(HotelListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HotelListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BondingListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBondingCompanyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingListDataTable() {
                this.TableName = "BondingList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BondingListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BondingListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingCompanyIDColumn {
                get {
                    return this.columnBondingCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingListRow this[int index] {
                get {
                    return ((BondingListRow)(this.Rows[index]));
                }
            }
            
            public event BondingListRowChangeEventHandler BondingListRowChanging;
            
            public event BondingListRowChangeEventHandler BondingListRowChanged;
            
            public event BondingListRowChangeEventHandler BondingListRowDeleting;
            
            public event BondingListRowChangeEventHandler BondingListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBondingListRow(BondingListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingListRow AddBondingListRow(int BondingCompanyID) {
                BondingListRow rowBondingListRow = ((BondingListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BondingCompanyID};
                rowBondingListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBondingListRow);
                return rowBondingListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BondingListDataTable cln = ((BondingListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BondingListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBondingCompanyID = base.Columns["BondingCompanyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBondingCompanyID = new global::System.Data.DataColumn("BondingCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBondingCompanyID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingListRow NewBondingListRow() {
                return ((BondingListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BondingListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BondingListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BondingListRowChanged != null)) {
                    this.BondingListRowChanged(this, new BondingListRowChangeEvent(((BondingListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BondingListRowChanging != null)) {
                    this.BondingListRowChanging(this, new BondingListRowChangeEvent(((BondingListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BondingListRowDeleted != null)) {
                    this.BondingListRowDeleted(this, new BondingListRowChangeEvent(((BondingListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BondingListRowDeleting != null)) {
                    this.BondingListRowDeleting(this, new BondingListRowChangeEvent(((BondingListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBondingListRow(BondingListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BondingListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InsuranceListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInsuranceCompanyID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceListDataTable() {
                this.TableName = "InsuranceList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InsuranceListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InsuranceListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceCompanyIDColumn {
                get {
                    return this.columnInsuranceCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceListRow this[int index] {
                get {
                    return ((InsuranceListRow)(this.Rows[index]));
                }
            }
            
            public event InsuranceListRowChangeEventHandler InsuranceListRowChanging;
            
            public event InsuranceListRowChangeEventHandler InsuranceListRowChanged;
            
            public event InsuranceListRowChangeEventHandler InsuranceListRowDeleting;
            
            public event InsuranceListRowChangeEventHandler InsuranceListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInsuranceListRow(InsuranceListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceListRow AddInsuranceListRow(int InsuranceCompanyID) {
                InsuranceListRow rowInsuranceListRow = ((InsuranceListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        InsuranceCompanyID};
                rowInsuranceListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInsuranceListRow);
                return rowInsuranceListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InsuranceListDataTable cln = ((InsuranceListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InsuranceListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInsuranceCompanyID = base.Columns["InsuranceCompanyID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInsuranceCompanyID = new global::System.Data.DataColumn("InsuranceCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCompanyID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceListRow NewInsuranceListRow() {
                return ((InsuranceListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InsuranceListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InsuranceListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InsuranceListRowChanged != null)) {
                    this.InsuranceListRowChanged(this, new InsuranceListRowChangeEvent(((InsuranceListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InsuranceListRowChanging != null)) {
                    this.InsuranceListRowChanging(this, new InsuranceListRowChangeEvent(((InsuranceListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InsuranceListRowDeleted != null)) {
                    this.InsuranceListRowDeleted(this, new InsuranceListRowChangeEvent(((InsuranceListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InsuranceListRowDeleting != null)) {
                    this.InsuranceListRowDeleting(this, new InsuranceListRowChangeEvent(((InsuranceListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInsuranceListRow(InsuranceListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InsuranceListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OtherCategoryListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryListDataTable() {
                this.TableName = "OtherCategoryList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCategoryListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OtherCategoryListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryListRow this[int index] {
                get {
                    return ((OtherCategoryListRow)(this.Rows[index]));
                }
            }
            
            public event OtherCategoryListRowChangeEventHandler OtherCategoryListRowChanging;
            
            public event OtherCategoryListRowChangeEventHandler OtherCategoryListRowChanged;
            
            public event OtherCategoryListRowChangeEventHandler OtherCategoryListRowDeleting;
            
            public event OtherCategoryListRowChangeEventHandler OtherCategoryListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOtherCategoryListRow(OtherCategoryListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryListRow AddOtherCategoryListRow(string Category) {
                OtherCategoryListRow rowOtherCategoryListRow = ((OtherCategoryListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Category};
                rowOtherCategoryListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOtherCategoryListRow);
                return rowOtherCategoryListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OtherCategoryListDataTable cln = ((OtherCategoryListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OtherCategoryListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCategory = base.Columns["Category"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryListRow NewOtherCategoryListRow() {
                return ((OtherCategoryListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OtherCategoryListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OtherCategoryListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OtherCategoryListRowChanged != null)) {
                    this.OtherCategoryListRowChanged(this, new OtherCategoryListRowChangeEvent(((OtherCategoryListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OtherCategoryListRowChanging != null)) {
                    this.OtherCategoryListRowChanging(this, new OtherCategoryListRowChangeEvent(((OtherCategoryListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OtherCategoryListRowDeleted != null)) {
                    this.OtherCategoryListRowDeleted(this, new OtherCategoryListRowChangeEvent(((OtherCategoryListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OtherCategoryListRowDeleting != null)) {
                    this.OtherCategoryListRowDeleting(this, new OtherCategoryListRowChangeEvent(((OtherCategoryListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOtherCategoryListRow(OtherCategoryListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OtherCategoryListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalHotelDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnHotelID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnHotel;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalHotelDataTable() {
                this.TableName = "OriginalHotel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalHotelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalHotelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotelIDColumn {
                get {
                    return this.columnHotelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HotelColumn {
                get {
                    return this.columnHotel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalHotelRow this[int index] {
                get {
                    return ((OriginalHotelRow)(this.Rows[index]));
                }
            }
            
            public event OriginalHotelRowChangeEventHandler OriginalHotelRowChanging;
            
            public event OriginalHotelRowChangeEventHandler OriginalHotelRowChanged;
            
            public event OriginalHotelRowChangeEventHandler OriginalHotelRowDeleting;
            
            public event OriginalHotelRowChangeEventHandler OriginalHotelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalHotelRow(OriginalHotelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalHotelRow AddOriginalHotelRow(int ProjectID, System.DateTime Date_, decimal Rate, string Hotel, string Comment) {
                OriginalHotelRow rowOriginalHotelRow = ((OriginalHotelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectID,
                        Date_,
                        Rate,
                        Hotel,
                        Comment};
                rowOriginalHotelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalHotelRow);
                return rowOriginalHotelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalHotelDataTable cln = ((OriginalHotelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalHotelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHotelID = base.Columns["HotelID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnRate = base.Columns["Rate"];
                this.columnHotel = base.Columns["Hotel"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHotelID = new global::System.Data.DataColumn("HotelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotelID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnHotel = new global::System.Data.DataColumn("Hotel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotel);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnHotelID.AutoIncrement = true;
                this.columnHotelID.ReadOnly = true;
                this.columnProjectID.ReadOnly = true;
                this.columnProjectID.Caption = "ProjectId";
                this.columnDate_.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalHotelRow NewOriginalHotelRow() {
                return ((OriginalHotelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalHotelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalHotelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalHotelRowChanged != null)) {
                    this.OriginalHotelRowChanged(this, new OriginalHotelRowChangeEvent(((OriginalHotelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalHotelRowChanging != null)) {
                    this.OriginalHotelRowChanging(this, new OriginalHotelRowChangeEvent(((OriginalHotelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalHotelRowDeleted != null)) {
                    this.OriginalHotelRowDeleted(this, new OriginalHotelRowChangeEvent(((OriginalHotelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalHotelRowDeleting != null)) {
                    this.OriginalHotelRowDeleting(this, new OriginalHotelRowChangeEvent(((OriginalHotelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalHotelRow(OriginalHotelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalHotelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalBondingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBondingCompanyID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnBonding;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalBondingDataTable() {
                this.TableName = "OriginalBonding";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalBondingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalBondingDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingCompanyIDColumn {
                get {
                    return this.columnBondingCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondingColumn {
                get {
                    return this.columnBonding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalBondingRow this[int index] {
                get {
                    return ((OriginalBondingRow)(this.Rows[index]));
                }
            }
            
            public event OriginalBondingRowChangeEventHandler OriginalBondingRowChanging;
            
            public event OriginalBondingRowChangeEventHandler OriginalBondingRowChanged;
            
            public event OriginalBondingRowChangeEventHandler OriginalBondingRowDeleting;
            
            public event OriginalBondingRowChangeEventHandler OriginalBondingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalBondingRow(OriginalBondingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalBondingRow AddOriginalBondingRow(int ProjectID, System.DateTime Date_, decimal Rate, string Bonding, string Comment) {
                OriginalBondingRow rowOriginalBondingRow = ((OriginalBondingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectID,
                        Date_,
                        Rate,
                        Bonding,
                        Comment};
                rowOriginalBondingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalBondingRow);
                return rowOriginalBondingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalBondingDataTable cln = ((OriginalBondingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalBondingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBondingCompanyID = base.Columns["BondingCompanyID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnRate = base.Columns["Rate"];
                this.columnBonding = base.Columns["Bonding"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBondingCompanyID = new global::System.Data.DataColumn("BondingCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBondingCompanyID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnBonding = new global::System.Data.DataColumn("Bonding", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBonding);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnBondingCompanyID.AutoIncrement = true;
                this.columnBondingCompanyID.ReadOnly = true;
                this.columnProjectID.ReadOnly = true;
                this.columnProjectID.Caption = "ProjectId";
                this.columnDate_.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalBondingRow NewOriginalBondingRow() {
                return ((OriginalBondingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalBondingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalBondingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalBondingRowChanged != null)) {
                    this.OriginalBondingRowChanged(this, new OriginalBondingRowChangeEvent(((OriginalBondingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalBondingRowChanging != null)) {
                    this.OriginalBondingRowChanging(this, new OriginalBondingRowChangeEvent(((OriginalBondingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalBondingRowDeleted != null)) {
                    this.OriginalBondingRowDeleted(this, new OriginalBondingRowChangeEvent(((OriginalBondingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalBondingRowDeleting != null)) {
                    this.OriginalBondingRowDeleting(this, new OriginalBondingRowChangeEvent(((OriginalBondingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalBondingRow(OriginalBondingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalBondingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalInsuranceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnInsuranceCompanyID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnInsurance;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalInsuranceDataTable() {
                this.TableName = "OriginalInsurance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalInsuranceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalInsuranceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceCompanyIDColumn {
                get {
                    return this.columnInsuranceCompanyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceColumn {
                get {
                    return this.columnInsurance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalInsuranceRow this[int index] {
                get {
                    return ((OriginalInsuranceRow)(this.Rows[index]));
                }
            }
            
            public event OriginalInsuranceRowChangeEventHandler OriginalInsuranceRowChanging;
            
            public event OriginalInsuranceRowChangeEventHandler OriginalInsuranceRowChanged;
            
            public event OriginalInsuranceRowChangeEventHandler OriginalInsuranceRowDeleting;
            
            public event OriginalInsuranceRowChangeEventHandler OriginalInsuranceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalInsuranceRow(OriginalInsuranceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalInsuranceRow AddOriginalInsuranceRow(int ProjectID, System.DateTime Date_, decimal Rate, string Insurance, string Comment) {
                OriginalInsuranceRow rowOriginalInsuranceRow = ((OriginalInsuranceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectID,
                        Date_,
                        Rate,
                        Insurance,
                        Comment};
                rowOriginalInsuranceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalInsuranceRow);
                return rowOriginalInsuranceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalInsuranceDataTable cln = ((OriginalInsuranceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalInsuranceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInsuranceCompanyID = base.Columns["InsuranceCompanyID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnRate = base.Columns["Rate"];
                this.columnInsurance = base.Columns["Insurance"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInsuranceCompanyID = new global::System.Data.DataColumn("InsuranceCompanyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceCompanyID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnInsurance = new global::System.Data.DataColumn("Insurance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsurance);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnInsuranceCompanyID.AutoIncrement = true;
                this.columnInsuranceCompanyID.ReadOnly = true;
                this.columnProjectID.ReadOnly = true;
                this.columnProjectID.Caption = "ProjectId";
                this.columnDate_.AllowDBNull = false;
                this.columnInsurance.Caption = "InsuranceCompanyID";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalInsuranceRow NewOriginalInsuranceRow() {
                return ((OriginalInsuranceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalInsuranceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalInsuranceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalInsuranceRowChanged != null)) {
                    this.OriginalInsuranceRowChanged(this, new OriginalInsuranceRowChangeEvent(((OriginalInsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalInsuranceRowChanging != null)) {
                    this.OriginalInsuranceRowChanging(this, new OriginalInsuranceRowChangeEvent(((OriginalInsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalInsuranceRowDeleted != null)) {
                    this.OriginalInsuranceRowDeleted(this, new OriginalInsuranceRowChangeEvent(((OriginalInsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalInsuranceRowDeleting != null)) {
                    this.OriginalInsuranceRowDeleting(this, new OriginalInsuranceRowChangeEvent(((OriginalInsuranceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalInsuranceRow(OriginalInsuranceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalInsuranceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalOtherCategoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCategory;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalOtherCategoryDataTable() {
                this.TableName = "OriginalOtherCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalOtherCategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalOtherCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalOtherCategoryRow this[int index] {
                get {
                    return ((OriginalOtherCategoryRow)(this.Rows[index]));
                }
            }
            
            public event OriginalOtherCategoryRowChangeEventHandler OriginalOtherCategoryRowChanging;
            
            public event OriginalOtherCategoryRowChangeEventHandler OriginalOtherCategoryRowChanged;
            
            public event OriginalOtherCategoryRowChangeEventHandler OriginalOtherCategoryRowDeleting;
            
            public event OriginalOtherCategoryRowChangeEventHandler OriginalOtherCategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalOtherCategoryRow(OriginalOtherCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalOtherCategoryRow AddOriginalOtherCategoryRow(string Category, int ProjectID, System.DateTime Date_, decimal Rate, string Comment) {
                OriginalOtherCategoryRow rowOriginalOtherCategoryRow = ((OriginalOtherCategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Category,
                        ProjectID,
                        Date_,
                        Rate,
                        Comment};
                rowOriginalOtherCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalOtherCategoryRow);
                return rowOriginalOtherCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalOtherCategoryDataTable cln = ((OriginalOtherCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalOtherCategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCategory = base.Columns["Category"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnRate = base.Columns["Rate"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCategory = new global::System.Data.DataColumn("Category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnCategory.ReadOnly = true;
                this.columnProjectID.ReadOnly = true;
                this.columnProjectID.Caption = "ProjectId";
                this.columnDate_.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalOtherCategoryRow NewOriginalOtherCategoryRow() {
                return ((OriginalOtherCategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalOtherCategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalOtherCategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalOtherCategoryRowChanged != null)) {
                    this.OriginalOtherCategoryRowChanged(this, new OriginalOtherCategoryRowChangeEvent(((OriginalOtherCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalOtherCategoryRowChanging != null)) {
                    this.OriginalOtherCategoryRowChanging(this, new OriginalOtherCategoryRowChangeEvent(((OriginalOtherCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalOtherCategoryRowDeleted != null)) {
                    this.OriginalOtherCategoryRowDeleted(this, new OriginalOtherCategoryRowChangeEvent(((OriginalOtherCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalOtherCategoryRowDeleting != null)) {
                    this.OriginalOtherCategoryRowDeleting(this, new OriginalOtherCategoryRowChangeEvent(((OriginalOtherCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalOtherCategoryRow(OriginalOtherCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalOtherCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnProjectName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectListDataTable() {
                this.TableName = "ProjectList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectListRow this[int index] {
                get {
                    return ((ProjectListRow)(this.Rows[index]));
                }
            }
            
            public event ProjectListRowChangeEventHandler ProjectListRowChanging;
            
            public event ProjectListRowChangeEventHandler ProjectListRowChanged;
            
            public event ProjectListRowChangeEventHandler ProjectListRowDeleting;
            
            public event ProjectListRowChangeEventHandler ProjectListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectListRow(ProjectListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectListRow AddProjectListRow(int ProjectID, string ClientName, string ProjectName) {
                ProjectListRow rowProjectListRow = ((ProjectListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID,
                        ClientName,
                        ProjectName};
                rowProjectListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectListRow);
                return rowProjectListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectListRow FindByProjectID(int ProjectID) {
                return ((ProjectListRow)(this.Rows.Find(new object[] {
                            ProjectID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectListDataTable cln = ((ProjectListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnProjectName = base.Columns["ProjectName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnProjectID}, true));
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectListRow NewProjectListRow() {
                return ((ProjectListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectListRowChanged != null)) {
                    this.ProjectListRowChanged(this, new ProjectListRowChangeEvent(((ProjectListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectListRowChanging != null)) {
                    this.ProjectListRowChanging(this, new ProjectListRowChangeEvent(((ProjectListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectListRowDeleted != null)) {
                    this.ProjectListRowDeleted(this, new ProjectListRowChangeEvent(((ProjectListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectListRowDeleting != null)) {
                    this.ProjectListRowDeleting(this, new ProjectListRowChangeEvent(((ProjectListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectListRow(ProjectListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DummyInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DummyInformationDataTable() {
                this.TableName = "DummyInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DummyInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DummyInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DummyInformationRow this[int index] {
                get {
                    return ((DummyInformationRow)(this.Rows[index]));
                }
            }
            
            public event DummyInformationRowChangeEventHandler DummyInformationRowChanging;
            
            public event DummyInformationRowChangeEventHandler DummyInformationRowChanged;
            
            public event DummyInformationRowChangeEventHandler DummyInformationRowDeleting;
            
            public event DummyInformationRowChangeEventHandler DummyInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDummyInformationRow(DummyInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DummyInformationRow AddDummyInformationRow(int ProjectID) {
                DummyInformationRow rowDummyInformationRow = ((DummyInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectID};
                rowDummyInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDummyInformationRow);
                return rowDummyInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DummyInformationDataTable cln = ((DummyInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DummyInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DummyInformationRow NewDummyInformationRow() {
                return ((DummyInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DummyInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DummyInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DummyInformationRowChanged != null)) {
                    this.DummyInformationRowChanged(this, new DummyInformationRowChangeEvent(((DummyInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DummyInformationRowChanging != null)) {
                    this.DummyInformationRowChanging(this, new DummyInformationRowChangeEvent(((DummyInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DummyInformationRowDeleted != null)) {
                    this.DummyInformationRowDeleted(this, new DummyInformationRowChangeEvent(((DummyInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DummyInformationRowDeleting != null)) {
                    this.DummyInformationRowDeleting(this, new DummyInformationRowChangeEvent(((DummyInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDummyInformationRow(DummyInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DummyInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BasicInformationRow : global::System.Data.DataRow {
            
            private BasicInformationDataTable tableBasicInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBasicInformation = ((BasicInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableBasicInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableBasicInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableBasicInformation.ProjectIDColumn]));
                }
                set {
                    this[this.tableBasicInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableBasicInformation.NameColumn]));
                }
                set {
                    this[this.tableBasicInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableBasicInformation.StartDateColumn]));
                }
                set {
                    this[this.tableBasicInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableBasicInformation.EndDateColumn]));
                }
                set {
                    this[this.tableBasicInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableBasicInformation.DeletedColumn]));
                }
                set {
                    this[this.tableBasicInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableBasicInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableBasicInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalLabourHoursCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalLabourHoursCad\' in table \'BasicInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalLabourHoursCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalLabourHoursUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalLabourHoursUsd\' in table \'BasicInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalLabourHoursUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalMaterialsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMaterialsCad\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalMaterialsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalMaterialsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMaterialsUsd\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalMaterialsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalUnitsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUnitsCad\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalUnitsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalUnitsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUnitsUsd\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalUnitsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalOtherCostsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalOtherCostsCad\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalOtherCostsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalOtherCostsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalOtherCostsUsd\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalOtherCostsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrantTotalCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrantTotalCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrantTotalCostCad\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrantTotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrantTotalCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrantTotalCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrantTotalCostUsd\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrantTotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalSubcontractorsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSubcontractorsCad\' in table \'BasicInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalSubcontractorsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalSubcontractorsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSubcontractorsUsd\' in table \'BasicInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalSubcontractorsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandRevenue {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrandRevenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandRevenue\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrandRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandProfit {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrandProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandProfit\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrandProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandGrossMargin {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrandGrossMarginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandGrossMargin\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrandGrossMarginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Month {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalHotelCosts {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalHotelCostsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalHotelCosts\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalHotelCostsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalBondingCosts {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalBondingCostsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalBondingCosts\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalBondingCostsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalInsuranceCosts {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalInsuranceCostsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalInsuranceCosts\' in table \'BasicInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalInsuranceCostsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCategoryCosts {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalOtherCategoryCostsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalOtherCategoryCosts\' in table \'BasicInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalOtherCategoryCostsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalLabourHoursCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalLabourHoursCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalLabourHoursCadNull() {
                this[this.tableBasicInformation.TotalLabourHoursCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalLabourHoursUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalLabourHoursUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalLabourHoursUsdNull() {
                this[this.tableBasicInformation.TotalLabourHoursUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMaterialsCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalMaterialsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMaterialsCadNull() {
                this[this.tableBasicInformation.TotalMaterialsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMaterialsUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalMaterialsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMaterialsUsdNull() {
                this[this.tableBasicInformation.TotalMaterialsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUnitsCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalUnitsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUnitsCadNull() {
                this[this.tableBasicInformation.TotalUnitsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUnitsUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalUnitsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUnitsUsdNull() {
                this[this.tableBasicInformation.TotalUnitsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOtherCostsCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalOtherCostsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOtherCostsCadNull() {
                this[this.tableBasicInformation.TotalOtherCostsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOtherCostsUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalOtherCostsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOtherCostsUsdNull() {
                this[this.tableBasicInformation.TotalOtherCostsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantTotalCostCadNull() {
                return this.IsNull(this.tableBasicInformation.GrantTotalCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantTotalCostCadNull() {
                this[this.tableBasicInformation.GrantTotalCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantTotalCostUsdNull() {
                return this.IsNull(this.tableBasicInformation.GrantTotalCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantTotalCostUsdNull() {
                this[this.tableBasicInformation.GrantTotalCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableBasicInformation.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableBasicInformation.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSubcontractorsCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalSubcontractorsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSubcontractorsCadNull() {
                this[this.tableBasicInformation.TotalSubcontractorsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSubcontractorsUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalSubcontractorsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSubcontractorsUsdNull() {
                this[this.tableBasicInformation.TotalSubcontractorsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandRevenueNull() {
                return this.IsNull(this.tableBasicInformation.GrandRevenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandRevenueNull() {
                this[this.tableBasicInformation.GrandRevenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandProfitNull() {
                return this.IsNull(this.tableBasicInformation.GrandProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandProfitNull() {
                this[this.tableBasicInformation.GrandProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandGrossMarginNull() {
                return this.IsNull(this.tableBasicInformation.GrandGrossMarginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandGrossMarginNull() {
                this[this.tableBasicInformation.GrandGrossMarginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableBasicInformation.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableBasicInformation.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableBasicInformation.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableBasicInformation.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableBasicInformation.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableBasicInformation.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableBasicInformation.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableBasicInformation.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalHotelCostsNull() {
                return this.IsNull(this.tableBasicInformation.TotalHotelCostsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalHotelCostsNull() {
                this[this.tableBasicInformation.TotalHotelCostsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalBondingCostsNull() {
                return this.IsNull(this.tableBasicInformation.TotalBondingCostsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalBondingCostsNull() {
                this[this.tableBasicInformation.TotalBondingCostsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalInsuranceCostsNull() {
                return this.IsNull(this.tableBasicInformation.TotalInsuranceCostsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalInsuranceCostsNull() {
                this[this.tableBasicInformation.TotalInsuranceCostsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOtherCategoryCostsNull() {
                return this.IsNull(this.tableBasicInformation.TotalOtherCategoryCostsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOtherCategoryCostsNull() {
                this[this.tableBasicInformation.TotalOtherCategoryCostsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitsInformationRow : global::System.Data.DataRow {
            
            private UnitsInformationDataTable tableUnitsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitsInformation = ((UnitsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableUnitsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableUnitsInformation.Work_Column]));
                }
                set {
                    this[this.tableUnitsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableUnitsInformation.UnitIDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableUnitsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableUnitsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableUnitsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableUnitsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableUnitsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableUnitsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableUnitsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableUnitsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableUnitsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableUnitsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableUnitsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableUnitsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitDescription {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.UnitDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitDescription\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.UnitDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Month {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableUnitsInformation.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitsInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableUnitsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableUnitsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableUnitsInformation.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableUnitsInformation.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitDescriptionNull() {
                return this.IsNull(this.tableUnitsInformation.UnitDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitDescriptionNull() {
                this[this.tableUnitsInformation.UnitDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableUnitsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableUnitsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableUnitsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableUnitsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableUnitsInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableUnitsInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableUnitsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableUnitsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableUnitsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableUnitsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableUnitsInformation.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableUnitsInformation.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableUnitsInformation.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableUnitsInformation.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableUnitsInformation.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableUnitsInformation.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableUnitsInformation.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableUnitsInformation.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableUnitsInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableUnitsInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LabourHoursInformationRow : global::System.Data.DataRow {
            
            private LabourHoursInformationDataTable tableLabourHoursInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabourHoursInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabourHoursInformation = ((LabourHoursInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLabourHoursInformation.Work_Column]));
                }
                set {
                    this[this.tableLabourHoursInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.EmployeeIDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.RefIDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LHQuantity {
                get {
                    return ((double)(this[this.tableLabourHoursInformation.LHQuantityColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LHUnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLabourHoursInformation.LHUnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MealsUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsUnitOfMeasurement\' in table \'LabourHoursInformation\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MealsQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLabourHoursInformation.MealsQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsQuantity\' in table \'LabourHoursInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MotelUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelUnitOfMeasurement\' in table \'LabourHoursInformation\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MotelQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLabourHoursInformation.MotelQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelQuantity\' in table \'LabourHoursInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostCad {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.LHCostCadColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MealsCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostCad\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MotelCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostCad\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostUsd {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.LHCostUsdColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MealsCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostUsd\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MotelCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostUsd\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLabourHoursInformation.DeletedColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableLabourHoursInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLabourHoursInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLabourHoursInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableLabourHoursInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Month {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableLabourHoursInformation.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsUnitOfMeasurementNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsUnitOfMeasurementNull() {
                this[this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsQuantityNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsQuantityNull() {
                this[this.tableLabourHoursInformation.MealsQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelUnitOfMeasurementNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelUnitOfMeasurementNull() {
                this[this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelQuantityNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelQuantityNull() {
                this[this.tableLabourHoursInformation.MotelQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostCadNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostCadNull() {
                this[this.tableLabourHoursInformation.MealsCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostCadNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostCadNull() {
                this[this.tableLabourHoursInformation.MotelCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostUsdNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostUsdNull() {
                this[this.tableLabourHoursInformation.MealsCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostUsdNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostUsdNull() {
                this[this.tableLabourHoursInformation.MotelCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableLabourHoursInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableLabourHoursInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLabourHoursInformation.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLabourHoursInformation.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableLabourHoursInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableLabourHoursInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableLabourHoursInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableLabourHoursInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableLabourHoursInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableLabourHoursInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableLabourHoursInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableLabourHoursInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableLabourHoursInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableLabourHoursInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableLabourHoursInformation.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableLabourHoursInformation.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableLabourHoursInformation.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableLabourHoursInformation.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableLabourHoursInformation.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableLabourHoursInformation.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableLabourHoursInformation.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableLabourHoursInformation.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableLabourHoursInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableLabourHoursInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MaterialsInformationRow : global::System.Data.DataRow {
            
            private MaterialsInformationDataTable tableMaterialsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaterialsInformation = ((MaterialsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.MaterialIDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableMaterialsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableMaterialsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableMaterialsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Process {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.ProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.ProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'MaterialsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMaterialsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMaterialsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableMaterialsInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Month {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableMaterialsInformation.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableMaterialsInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableMaterialsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableMaterialsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessNull() {
                return this.IsNull(this.tableMaterialsInformation.ProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessNull() {
                this[this.tableMaterialsInformation.ProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableMaterialsInformation.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableMaterialsInformation.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableMaterialsInformation.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableMaterialsInformation.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableMaterialsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableMaterialsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableMaterialsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableMaterialsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableMaterialsInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableMaterialsInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableMaterialsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableMaterialsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableMaterialsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableMaterialsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableMaterialsInformation.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableMaterialsInformation.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableMaterialsInformation.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableMaterialsInformation.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableMaterialsInformation.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableMaterialsInformation.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableMaterialsInformation.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableMaterialsInformation.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableMaterialsInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableMaterialsInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeListRow : global::System.Data.DataRow {
            
            private EmployeeListDataTable tableEmployeeList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeList = ((EmployeeListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeList.EmployeeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeID\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.CostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCad\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.CostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostUsd\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeList.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PayRateCad {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.PayRateCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayRateCad\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.PayRateCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PayRateUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.PayRateUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PayRateUsd\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.PayRateUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BurdenRateCad {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.BurdenRateCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BurdenRateCad\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.BurdenRateCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BurdenRateUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.BurdenRateUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BurdenRateUsd\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.BurdenRateUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BenefitFactorCad {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.BenefitFactorCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BenefitFactorCad\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.BenefitFactorCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BenefitFactorUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.BenefitFactorUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BenefitFactorUsd\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.BenefitFactorUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal HealthBenefitUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.HealthBenefitUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HealthBenefitUsd\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.HealthBenefitUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BourdenFactor {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.BourdenFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BourdenFactor\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.BourdenFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIDNull() {
                return this.IsNull(this.tableEmployeeList.EmployeeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIDNull() {
                this[this.tableEmployeeList.EmployeeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCadNull() {
                return this.IsNull(this.tableEmployeeList.CostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCadNull() {
                this[this.tableEmployeeList.CostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostUsdNull() {
                return this.IsNull(this.tableEmployeeList.CostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostUsdNull() {
                this[this.tableEmployeeList.CostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableEmployeeList.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableEmployeeList.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayRateCadNull() {
                return this.IsNull(this.tableEmployeeList.PayRateCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayRateCadNull() {
                this[this.tableEmployeeList.PayRateCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPayRateUsdNull() {
                return this.IsNull(this.tableEmployeeList.PayRateUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPayRateUsdNull() {
                this[this.tableEmployeeList.PayRateUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBurdenRateCadNull() {
                return this.IsNull(this.tableEmployeeList.BurdenRateCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBurdenRateCadNull() {
                this[this.tableEmployeeList.BurdenRateCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBurdenRateUsdNull() {
                return this.IsNull(this.tableEmployeeList.BurdenRateUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBurdenRateUsdNull() {
                this[this.tableEmployeeList.BurdenRateUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBenefitFactorCadNull() {
                return this.IsNull(this.tableEmployeeList.BenefitFactorCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBenefitFactorCadNull() {
                this[this.tableEmployeeList.BenefitFactorCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBenefitFactorUsdNull() {
                return this.IsNull(this.tableEmployeeList.BenefitFactorUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBenefitFactorUsdNull() {
                this[this.tableEmployeeList.BenefitFactorUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHealthBenefitUsdNull() {
                return this.IsNull(this.tableEmployeeList.HealthBenefitUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHealthBenefitUsdNull() {
                this[this.tableEmployeeList.HealthBenefitUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBourdenFactorNull() {
                return this.IsNull(this.tableEmployeeList.BourdenFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBourdenFactorNull() {
                this[this.tableEmployeeList.BourdenFactorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalLabourHourRow : global::System.Data.DataRow {
            
            private OriginalLabourHourDataTable tableOriginalLabourHour;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalLabourHourRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalLabourHour = ((OriginalLabourHourDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableOriginalLabourHour.EmployeeIDColumn]));
                }
                set {
                    this[this.tableOriginalLabourHour.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginalLabourHour.Date_Column]));
                }
                set {
                    this[this.tableOriginalLabourHour.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProjectTime {
                get {
                    return ((double)(this[this.tableOriginalLabourHour.ProjectTimeColumn]));
                }
                set {
                    this[this.tableOriginalLabourHour.ProjectTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkingDetails {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.WorkingDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkingDetails\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.WorkingDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MealsCountry {
                get {
                    try {
                        return ((long)(this[this.tableOriginalLabourHour.MealsCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCountry\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.MealsCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsAllowance {
                get {
                    return ((decimal)(this[this.tableOriginalLabourHour.MealsAllowanceColumn]));
                }
                set {
                    this[this.tableOriginalLabourHour.MealsAllowanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobClassType {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.JobClassTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobClassType\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.JobClassTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalLabourHour.StartTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartTime\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.StartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalLabourHour.EndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndTime\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.EndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectTimeID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalLabourHour.ProjectTimeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectTimeID\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.ProjectTimeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableOriginalLabourHour.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableOriginalLabourHour.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkingDetailsNull() {
                return this.IsNull(this.tableOriginalLabourHour.WorkingDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkingDetailsNull() {
                this[this.tableOriginalLabourHour.WorkingDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCountryNull() {
                return this.IsNull(this.tableOriginalLabourHour.MealsCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCountryNull() {
                this[this.tableOriginalLabourHour.MealsCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableOriginalLabourHour.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableOriginalLabourHour.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableOriginalLabourHour.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableOriginalLabourHour.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobClassTypeNull() {
                return this.IsNull(this.tableOriginalLabourHour.JobClassTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobClassTypeNull() {
                this[this.tableOriginalLabourHour.JobClassTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartTimeNull() {
                return this.IsNull(this.tableOriginalLabourHour.StartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartTimeNull() {
                this[this.tableOriginalLabourHour.StartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndTimeNull() {
                return this.IsNull(this.tableOriginalLabourHour.EndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndTimeNull() {
                this[this.tableOriginalLabourHour.EndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectTimeIDNull() {
                return this.IsNull(this.tableOriginalLabourHour.ProjectTimeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectTimeIDNull() {
                this[this.tableOriginalLabourHour.ProjectTimeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableOriginalLabourHour.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableOriginalLabourHour.CategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OtherCostsInformationRow : global::System.Data.DataRow {
            
            private OtherCostsInformationDataTable tableOtherCostsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCostsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOtherCostsInformation = ((OtherCostsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableOtherCostsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableOtherCostsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableOtherCostsInformation.DescriptionColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableOtherCostsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableOtherCostsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableOtherCostsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableOtherCostsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableOtherCostsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOtherCostsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOtherCostsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Month {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableOtherCostsInformation.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableOtherCostsInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableOtherCostsInformation.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableOtherCostsInformation.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableOtherCostsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableOtherCostsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableOtherCostsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableOtherCostsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableOtherCostsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableOtherCostsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableOtherCostsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableOtherCostsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableOtherCostsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableOtherCostsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableOtherCostsInformation.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableOtherCostsInformation.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableOtherCostsInformation.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableOtherCostsInformation.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableOtherCostsInformation.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableOtherCostsInformation.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableOtherCostsInformation.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableOtherCostsInformation.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableOtherCostsInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableOtherCostsInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitListRow : global::System.Data.DataRow {
            
            private UnitListDataTable tableUnitList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitList = ((UnitListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableUnitList.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitList.CostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCad\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitList.CostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostUsd\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableUnitList.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableUnitList.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableUnitList.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableUnitList.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableUnitList.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCadNull() {
                return this.IsNull(this.tableUnitList.CostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCadNull() {
                this[this.tableUnitList.CostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostUsdNull() {
                return this.IsNull(this.tableUnitList.CostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostUsdNull() {
                this[this.tableUnitList.CostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableUnitList.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableUnitList.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableUnitList.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableUnitList.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableUnitList.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableUnitList.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalUnitRow : global::System.Data.DataRow {
            
            private OriginalUnitDataTable tableOriginalUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalUnitRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalUnit = ((OriginalUnitDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalUnit.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectId {
                get {
                    try {
                        return ((string)(this[this.tableOriginalUnit.ProjectIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectId\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.ProjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginalUnit.Date_Column]));
                }
                set {
                    this[this.tableOriginalUnit.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TowedUnitID {
                get {
                    try {
                        return ((double)(this[this.tableOriginalUnit.TowedUnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TowedUnitID\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.TowedUnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginalUnit.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginalUnit.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableOriginalUnit.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableOriginalUnit.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIdNull() {
                return this.IsNull(this.tableOriginalUnit.ProjectIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIdNull() {
                this[this.tableOriginalUnit.ProjectIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTowedUnitIDNull() {
                return this.IsNull(this.tableOriginalUnit.TowedUnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTowedUnitIDNull() {
                this[this.tableOriginalUnit.TowedUnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableOriginalUnit.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableOriginalUnit.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableOriginalUnit.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableOriginalUnit.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MaterialListRow : global::System.Data.DataRow {
            
            private MaterialListDataTable tableMaterialList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaterialList = ((MaterialListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableMaterialList.MaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thickness {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.ThicknessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thickness\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.ThicknessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableMaterialList.CostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCad\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableMaterialList.CostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostUsd\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableMaterialList.MaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableMaterialList.MaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableMaterialList.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableMaterialList.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableMaterialList.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableMaterialList.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableMaterialList.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableMaterialList.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThicknessNull() {
                return this.IsNull(this.tableMaterialList.ThicknessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThicknessNull() {
                this[this.tableMaterialList.ThicknessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableMaterialList.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableMaterialList.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCadNull() {
                return this.IsNull(this.tableMaterialList.CostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCadNull() {
                this[this.tableMaterialList.CostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostUsdNull() {
                return this.IsNull(this.tableMaterialList.CostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostUsdNull() {
                this[this.tableMaterialList.CostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableMaterialList.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableMaterialList.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalMaterialRow : global::System.Data.DataRow {
            
            private OriginalMaterialDataTable tableOriginalMaterial;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalMaterialRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalMaterial = ((OriginalMaterialDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmedSize {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.ConfirmedSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfirmedSize\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.ConfirmedSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SteelTapeLength {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.SteelTapeLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SteelTapeLength\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.SteelTapeLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerSize {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.LinerSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerSize\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.LinerSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LinerInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalMaterial.LinerInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInstalled\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.LinerInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime COInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalMaterial.COInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COInstalled\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.COInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledSoil {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalMaterial.BackfilledSoilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledSoil\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.BackfilledSoilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledConcrete {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalMaterial.BackfilledConcreteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledConcrete\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.BackfilledConcreteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tickness {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.TicknessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tickness\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.TicknessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedSizeNull() {
                return this.IsNull(this.tableOriginalMaterial.ConfirmedSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedSizeNull() {
                this[this.tableOriginalMaterial.ConfirmedSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSteelTapeLengthNull() {
                return this.IsNull(this.tableOriginalMaterial.SteelTapeLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSteelTapeLengthNull() {
                this[this.tableOriginalMaterial.SteelTapeLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerSizeNull() {
                return this.IsNull(this.tableOriginalMaterial.LinerSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerSizeNull() {
                this[this.tableOriginalMaterial.LinerSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInstalledNull() {
                return this.IsNull(this.tableOriginalMaterial.LinerInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInstalledNull() {
                this[this.tableOriginalMaterial.LinerInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOInstalledNull() {
                return this.IsNull(this.tableOriginalMaterial.COInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOInstalledNull() {
                this[this.tableOriginalMaterial.COInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledSoilNull() {
                return this.IsNull(this.tableOriginalMaterial.BackfilledSoilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledSoilNull() {
                this[this.tableOriginalMaterial.BackfilledSoilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledConcreteNull() {
                return this.IsNull(this.tableOriginalMaterial.BackfilledConcreteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledConcreteNull() {
                this[this.tableOriginalMaterial.BackfilledConcreteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableOriginalMaterial.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableOriginalMaterial.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableOriginalMaterial.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableOriginalMaterial.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTicknessNull() {
                return this.IsNull(this.tableOriginalMaterial.TicknessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTicknessNull() {
                this[this.tableOriginalMaterial.TicknessColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeePayPeriodRow : global::System.Data.DataRow {
            
            private EmployeePayPeriodDataTable tableEmployeePayPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeePayPeriodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeePayPeriod = ((EmployeePayPeriodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    try {
                        return ((int)(this[this.tableEmployeePayPeriod.EmployeeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeID\' in table \'EmployeePayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeePayPeriod.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmployeePayPeriod.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'EmployeePayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeePayPeriod.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIDNull() {
                return this.IsNull(this.tableEmployeePayPeriod.EmployeeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIDNull() {
                this[this.tableEmployeePayPeriod.EmployeeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tableEmployeePayPeriod.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tableEmployeePayPeriod.Date_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitPayPeriodRow : global::System.Data.DataRow {
            
            private UnitPayPeriodDataTable tableUnitPayPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitPayPeriodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitPayPeriod = ((UnitPayPeriodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableUnitPayPeriod.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'UnitPayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitPayPeriod.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitPayPeriod.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'UnitPayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitPayPeriod.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableUnitPayPeriod.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableUnitPayPeriod.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tableUnitPayPeriod.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tableUnitPayPeriod.Date_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MaterialPayPeriodRow : global::System.Data.DataRow {
            
            private MaterialPayPeriodDataTable tableMaterialPayPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialPayPeriodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaterialPayPeriod = ((MaterialPayPeriodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableMaterialPayPeriod.MaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'MaterialPayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialPayPeriod.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMaterialPayPeriod.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'MaterialPayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialPayPeriod.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableMaterialPayPeriod.MaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableMaterialPayPeriod.MaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tableMaterialPayPeriod.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tableMaterialPayPeriod.Date_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FunctionListRow : global::System.Data.DataRow {
            
            private FunctionListDataTable tableFunctionList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FunctionListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFunctionList = ((FunctionListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableFunctionList.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'FunctionList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFunctionList.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableFunctionList.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableFunctionList.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubcontractorsInformationRow : global::System.Data.DataRow {
            
            private SubcontractorsInformationDataTable tableSubcontractorsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubcontractorsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubcontractorsInformation = ((SubcontractorsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableSubcontractorsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubcontractorID {
                get {
                    return ((int)(this[this.tableSubcontractorsInformation.SubcontractorIDColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.SubcontractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableSubcontractorsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableSubcontractorsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableSubcontractorsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableSubcontractorsInformation.CostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostUsd\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableSubcontractorsInformation.TotalCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCostCad\' in table \'SubcontractorsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableSubcontractorsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableSubcontractorsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableSubcontractorsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableSubcontractorsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableSubcontractorsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'SubcontractorsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableSubcontractorsInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableSubcontractorsInformation.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'SubcontractorsInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSubcontractorsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSubcontractorsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableSubcontractorsInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'SubcontractorsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subcontractor {
                get {
                    try {
                        return ((string)(this[this.tableSubcontractorsInformation.SubcontractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subcontractor\' in table \'SubcontractorsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.SubcontractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableSubcontractorsInformation.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'SubcontractorsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableSubcontractorsInformation.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'SubcontractorsInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Month {
                get {
                    try {
                        return ((string)(this[this.tableSubcontractorsInformation.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableSubcontractorsInformation.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Budget {
                get {
                    try {
                        return ((decimal)(this[this.tableSubcontractorsInformation.BudgetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Budget\' in table \'SubcontractorsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorsInformation.BudgetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostUsdNull() {
                return this.IsNull(this.tableSubcontractorsInformation.CostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostUsdNull() {
                this[this.tableSubcontractorsInformation.CostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCostCadNull() {
                return this.IsNull(this.tableSubcontractorsInformation.TotalCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCostCadNull() {
                this[this.tableSubcontractorsInformation.TotalCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableSubcontractorsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableSubcontractorsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableSubcontractorsInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableSubcontractorsInformation.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableSubcontractorsInformation.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableSubcontractorsInformation.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableSubcontractorsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableSubcontractorsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableSubcontractorsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableSubcontractorsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableSubcontractorsInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableSubcontractorsInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubcontractorNull() {
                return this.IsNull(this.tableSubcontractorsInformation.SubcontractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubcontractorNull() {
                this[this.tableSubcontractorsInformation.SubcontractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableSubcontractorsInformation.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableSubcontractorsInformation.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableSubcontractorsInformation.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableSubcontractorsInformation.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableSubcontractorsInformation.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableSubcontractorsInformation.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableSubcontractorsInformation.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableSubcontractorsInformation.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBudgetNull() {
                return this.IsNull(this.tableSubcontractorsInformation.BudgetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBudgetNull() {
                this[this.tableSubcontractorsInformation.BudgetColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubcontractorListRow : global::System.Data.DataRow {
            
            private SubcontractorListDataTable tableSubcontractorList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubcontractorListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubcontractorList = ((SubcontractorListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubcontractorID {
                get {
                    try {
                        return ((int)(this[this.tableSubcontractorList.SubcontractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubcontractorID\' in table \'SubcontractorList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorList.SubcontractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Udf {
                get {
                    try {
                        return ((bool)(this[this.tableSubcontractorList.UdfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Udf\' in table \'SubcontractorList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorList.UdfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableSubcontractorList.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'SubcontractorList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubcontractorList.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubcontractorIDNull() {
                return this.IsNull(this.tableSubcontractorList.SubcontractorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubcontractorIDNull() {
                this[this.tableSubcontractorList.SubcontractorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUdfNull() {
                return this.IsNull(this.tableSubcontractorList.UdfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUdfNull() {
                this[this.tableSubcontractorList.UdfColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableSubcontractorList.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableSubcontractorList.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalSubcontractorRow : global::System.Data.DataRow {
            
            private OriginalSubcontractorDataTable tableOriginalSubcontractor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalSubcontractorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalSubcontractor = ((OriginalSubcontractorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubcontractorID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalSubcontractor.SubcontractorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubcontractorID\' in table \'OriginalSubcontractor\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableOriginalSubcontractor.SubcontractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalSubcontractor.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'OriginalSubcontractor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalSubcontractor.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginalSubcontractor.Date_Column]));
                }
                set {
                    this[this.tableOriginalSubcontractor.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    try {
                        return ((double)(this[this.tableOriginalSubcontractor.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'OriginalSubcontractor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalSubcontractor.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RateCad {
                get {
                    try {
                        return ((decimal)(this[this.tableOriginalSubcontractor.RateCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateCad\' in table \'OriginalSubcontractor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalSubcontractor.RateCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalCad {
                get {
                    try {
                        return ((double)(this[this.tableOriginalSubcontractor.TotalCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCad\' in table \'OriginalSubcontractor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalSubcontractor.TotalCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableOriginalSubcontractor.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'OriginalSubcontractor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalSubcontractor.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subcontractor {
                get {
                    try {
                        return ((string)(this[this.tableOriginalSubcontractor.SubcontractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subcontractor\' in table \'OriginalSubcontractor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalSubcontractor.SubcontractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RateUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableOriginalSubcontractor.RateUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RateUsd\' in table \'OriginalSubcontractor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalSubcontractor.RateUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalUsd {
                get {
                    try {
                        return ((double)(this[this.tableOriginalSubcontractor.TotalUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUsd\' in table \'OriginalSubcontractor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalSubcontractor.TotalUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubcontractorIDNull() {
                return this.IsNull(this.tableOriginalSubcontractor.SubcontractorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubcontractorIDNull() {
                this[this.tableOriginalSubcontractor.SubcontractorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableOriginalSubcontractor.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableOriginalSubcontractor.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableOriginalSubcontractor.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tableOriginalSubcontractor.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateCadNull() {
                return this.IsNull(this.tableOriginalSubcontractor.RateCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateCadNull() {
                this[this.tableOriginalSubcontractor.RateCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCadNull() {
                return this.IsNull(this.tableOriginalSubcontractor.TotalCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCadNull() {
                this[this.tableOriginalSubcontractor.TotalCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableOriginalSubcontractor.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableOriginalSubcontractor.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubcontractorNull() {
                return this.IsNull(this.tableOriginalSubcontractor.SubcontractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubcontractorNull() {
                this[this.tableOriginalSubcontractor.SubcontractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateUsdNull() {
                return this.IsNull(this.tableOriginalSubcontractor.RateUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateUsdNull() {
                this[this.tableOriginalSubcontractor.RateUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUsdNull() {
                return this.IsNull(this.tableOriginalSubcontractor.TotalUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUsdNull() {
                this[this.tableOriginalSubcontractor.TotalUsdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RevenueInformationRow : global::System.Data.DataRow {
            
            private RevenueInformationDataTable tableRevenueInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RevenueInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRevenueInformation = ((RevenueInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableRevenueInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableRevenueInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefIDRevenue {
                get {
                    return ((int)(this[this.tableRevenueInformation.RefIDRevenueColumn]));
                }
                set {
                    this[this.tableRevenueInformation.RefIDRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Revenue {
                get {
                    return ((decimal)(this[this.tableRevenueInformation.RevenueColumn]));
                }
                set {
                    this[this.tableRevenueInformation.RevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableRevenueInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'RevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRevenueInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableRevenueInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableRevenueInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRevenueInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'RevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRevenueInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRevenueInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'RevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRevenueInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableRevenueInformation.DeletedColumn]));
                }
                set {
                    this[this.tableRevenueInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableRevenueInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'RevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRevenueInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableRevenueInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'RevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRevenueInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableRevenueInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableRevenueInformation.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableRevenueInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableRevenueInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableRevenueInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableRevenueInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableRevenueInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableRevenueInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableRevenueInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableRevenueInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalRevenueRow : global::System.Data.DataRow {
            
            private OriginalRevenueDataTable tableOriginalRevenue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalRevenueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalRevenue = ((OriginalRevenueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefIDRevenue {
                get {
                    return ((int)(this[this.tableOriginalRevenue.RefIDRevenueColumn]));
                }
                set {
                    this[this.tableOriginalRevenue.RefIDRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Revenue {
                get {
                    return ((decimal)(this[this.tableOriginalRevenue.RevenueColumn]));
                }
                set {
                    this[this.tableOriginalRevenue.RevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableOriginalRevenue.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'OriginalRevenue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalRevenue.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalRevenue.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'OriginalRevenue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalRevenue.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableOriginalRevenue.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableOriginalRevenue.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tableOriginalRevenue.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tableOriginalRevenue.Date_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TemplateInformationRow : global::System.Data.DataRow {
            
            private TemplateInformationDataTable tableTemplateInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplateInformation = ((TemplateInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetTemplateID {
                get {
                    return ((int)(this[this.tableTemplateInformation.CostingSheetTemplateIDColumn]));
                }
                set {
                    this[this.tableTemplateInformation.CostingSheetTemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTemplateInformation.NameColumn]));
                }
                set {
                    this[this.tableTemplateInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RAData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.RADataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.RADataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FLLData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.FLLDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.FLLDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PRData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.PRDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.PRDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool JLData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.JLDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.JLDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MRData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.MRDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.MRDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MOBData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.MOBDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.MOBDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool OtherData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.OtherDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.OtherDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LabourHourData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.LabourHourDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.LabourHourDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool UnitData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.UnitDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.UnitDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MaterialData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.MaterialDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.MaterialDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SubcontractorData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.SubcontractorDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.SubcontractorDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MiscData {
                get {
                    return ((bool)(this[this.tableTemplateInformation.MiscDataColumn]));
                }
                set {
                    this[this.tableTemplateInformation.MiscDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RevenueIncluded {
                get {
                    return ((bool)(this[this.tableTemplateInformation.RevenueIncludedColumn]));
                }
                set {
                    this[this.tableTemplateInformation.RevenueIncludedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableTemplateInformation.DeletedColumn]));
                }
                set {
                    this[this.tableTemplateInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableTemplateInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableTemplateInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeOfWork {
                get {
                    try {
                        return ((string)(this[this.tableTemplateInformation.TypeOfWorkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeOfWork\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.TypeOfWorkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CostingArea {
                get {
                    try {
                        return ((string)(this[this.tableTemplateInformation.CostingAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostingArea\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.CostingAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableTemplateInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Month {
                get {
                    try {
                        return ((int)(this[this.tableTemplateInformation.MonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.MonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Day {
                get {
                    try {
                        return ((int)(this[this.tableTemplateInformation.DayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Day\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.DayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year {
                get {
                    try {
                        return ((int)(this[this.tableTemplateInformation.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Month2 {
                get {
                    try {
                        return ((int)(this[this.tableTemplateInformation.Month2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Month2\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.Month2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Day2 {
                get {
                    try {
                        return ((int)(this[this.tableTemplateInformation.Day2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Day2\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.Day2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Year2 {
                get {
                    try {
                        return ((int)(this[this.tableTemplateInformation.Year2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year2\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.Year2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableTemplateInformation.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'TemplateInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplateInformation.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfWorkNull() {
                return this.IsNull(this.tableTemplateInformation.TypeOfWorkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfWorkNull() {
                this[this.tableTemplateInformation.TypeOfWorkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostingAreaNull() {
                return this.IsNull(this.tableTemplateInformation.CostingAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostingAreaNull() {
                this[this.tableTemplateInformation.CostingAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableTemplateInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableTemplateInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonthNull() {
                return this.IsNull(this.tableTemplateInformation.MonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonthNull() {
                this[this.tableTemplateInformation.MonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDayNull() {
                return this.IsNull(this.tableTemplateInformation.DayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDayNull() {
                this[this.tableTemplateInformation.DayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableTemplateInformation.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableTemplateInformation.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonth2Null() {
                return this.IsNull(this.tableTemplateInformation.Month2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonth2Null() {
                this[this.tableTemplateInformation.Month2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDay2Null() {
                return this.IsNull(this.tableTemplateInformation.Day2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDay2Null() {
                this[this.tableTemplateInformation.Day2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYear2Null() {
                return this.IsNull(this.tableTemplateInformation.Year2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYear2Null() {
                this[this.tableTemplateInformation.Year2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableTemplateInformation.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableTemplateInformation.SelectedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedBasicInformationRow : global::System.Data.DataRow {
            
            private CombinedBasicInformationDataTable tableCombinedBasicInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedBasicInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedBasicInformation = ((CombinedBasicInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedBasicInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableCombinedBasicInformation.ClientIDColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCombinedBasicInformation.NameColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableCombinedBasicInformation.StartDateColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableCombinedBasicInformation.EndDateColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedBasicInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedBasicInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedBasicInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalLabourHoursCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalLabourHoursCad\' in table \'CombinedBasicInformation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalLabourHoursCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalLabourHoursUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalLabourHoursUsd\' in table \'CombinedBasicInformation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalLabourHoursUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalMaterialsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMaterialsCad\' in table \'CombinedBasicInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalMaterialsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalMaterialsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMaterialsUsd\' in table \'CombinedBasicInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalMaterialsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalUnitsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUnitsCad\' in table \'CombinedBasicInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalUnitsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalUnitsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUnitsUsd\' in table \'CombinedBasicInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalUnitsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalOtherCostsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalOtherCostsCad\' in table \'CombinedBasicInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalOtherCostsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalOtherCostsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalOtherCostsUsd\' in table \'CombinedBasicInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalOtherCostsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrantTotalCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.GrantTotalCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrantTotalCostCad\' in table \'CombinedBasicInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.GrantTotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrantTotalCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.GrantTotalCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrantTotalCostUsd\' in table \'CombinedBasicInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.GrantTotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableCombinedBasicInformation.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'CombinedBasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalSubcontractorsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSubcontractorsCad\' in table \'CombinedBasicInformation\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalSubcontractorsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalSubcontractorsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.TotalSubcontractorsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalSubcontractorsUsd\' in table \'CombinedBasicInformation\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.TotalSubcontractorsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandRevenue {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.GrandRevenueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandRevenue\' in table \'CombinedBasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.GrandRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandProfit {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.GrandProfitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandProfit\' in table \'CombinedBasicInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.GrandProfitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrandGrossMargin {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedBasicInformation.GrandGrossMarginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrandGrossMargin\' in table \'CombinedBasicInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.GrandGrossMarginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CombinedProjects {
                get {
                    try {
                        return ((string)(this[this.tableCombinedBasicInformation.CombinedProjectsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CombinedProjects\' in table \'CombinedBasicInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedBasicInformation.CombinedProjectsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalLabourHoursCadNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalLabourHoursCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalLabourHoursCadNull() {
                this[this.tableCombinedBasicInformation.TotalLabourHoursCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalLabourHoursUsdNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalLabourHoursUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalLabourHoursUsdNull() {
                this[this.tableCombinedBasicInformation.TotalLabourHoursUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMaterialsCadNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalMaterialsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMaterialsCadNull() {
                this[this.tableCombinedBasicInformation.TotalMaterialsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMaterialsUsdNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalMaterialsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMaterialsUsdNull() {
                this[this.tableCombinedBasicInformation.TotalMaterialsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUnitsCadNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalUnitsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUnitsCadNull() {
                this[this.tableCombinedBasicInformation.TotalUnitsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUnitsUsdNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalUnitsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUnitsUsdNull() {
                this[this.tableCombinedBasicInformation.TotalUnitsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOtherCostsCadNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalOtherCostsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOtherCostsCadNull() {
                this[this.tableCombinedBasicInformation.TotalOtherCostsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOtherCostsUsdNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalOtherCostsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOtherCostsUsdNull() {
                this[this.tableCombinedBasicInformation.TotalOtherCostsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantTotalCostCadNull() {
                return this.IsNull(this.tableCombinedBasicInformation.GrantTotalCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantTotalCostCadNull() {
                this[this.tableCombinedBasicInformation.GrantTotalCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantTotalCostUsdNull() {
                return this.IsNull(this.tableCombinedBasicInformation.GrantTotalCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantTotalCostUsdNull() {
                this[this.tableCombinedBasicInformation.GrantTotalCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableCombinedBasicInformation.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableCombinedBasicInformation.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSubcontractorsCadNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalSubcontractorsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSubcontractorsCadNull() {
                this[this.tableCombinedBasicInformation.TotalSubcontractorsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalSubcontractorsUsdNull() {
                return this.IsNull(this.tableCombinedBasicInformation.TotalSubcontractorsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalSubcontractorsUsdNull() {
                this[this.tableCombinedBasicInformation.TotalSubcontractorsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandRevenueNull() {
                return this.IsNull(this.tableCombinedBasicInformation.GrandRevenueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandRevenueNull() {
                this[this.tableCombinedBasicInformation.GrandRevenueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandProfitNull() {
                return this.IsNull(this.tableCombinedBasicInformation.GrandProfitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandProfitNull() {
                this[this.tableCombinedBasicInformation.GrandProfitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrandGrossMarginNull() {
                return this.IsNull(this.tableCombinedBasicInformation.GrandGrossMarginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrandGrossMarginNull() {
                this[this.tableCombinedBasicInformation.GrandGrossMarginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCombinedProjectsNull() {
                return this.IsNull(this.tableCombinedBasicInformation.CombinedProjectsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCombinedProjectsNull() {
                this[this.tableCombinedBasicInformation.CombinedProjectsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedLabourHoursInformationRow : global::System.Data.DataRow {
            
            private CombinedLabourHoursInformationDataTable tableCombinedLabourHoursInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedLabourHoursInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedLabourHoursInformation = ((CombinedLabourHoursInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedLabourHoursInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableCombinedLabourHoursInformation.Work_Column]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableCombinedLabourHoursInformation.EmployeeIDColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedLabourHoursInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LHQuantity {
                get {
                    return ((double)(this[this.tableCombinedLabourHoursInformation.LHQuantityColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.LHQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LHUnitOfMeasurement {
                get {
                    return ((string)(this[this.tableCombinedLabourHoursInformation.LHUnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.LHUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MealsUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.MealsUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsUnitOfMeasurement\' in table \'CombinedLabourHoursInform" +
                                "ation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MealsUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MealsQuantity {
                get {
                    try {
                        return ((int)(this[this.tableCombinedLabourHoursInformation.MealsQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsQuantity\' in table \'CombinedLabourHoursInformation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MealsQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MotelUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.MotelUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelUnitOfMeasurement\' in table \'CombinedLabourHoursInform" +
                                "ation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MotelUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MotelQuantity {
                get {
                    try {
                        return ((int)(this[this.tableCombinedLabourHoursInformation.MotelQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelQuantity\' in table \'CombinedLabourHoursInformation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MotelQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedLabourHoursInformation.LHCostCadColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.LHCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedLabourHoursInformation.MealsCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostCad\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MealsCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedLabourHoursInformation.MotelCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostCad\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MotelCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedLabourHoursInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedLabourHoursInformation.LHCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.LHCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedLabourHoursInformation.MealsCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostUsd\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MealsCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedLabourHoursInformation.MotelCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostUsd\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.MotelCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedLabourHoursInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedLabourHoursInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedLabourHoursInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedLabourHoursInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedLabourHoursInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'CombinedLabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedLabourHoursInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedLabourHoursInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedLabourHoursInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedLabourHoursInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedLabourHoursInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'CombinedLabourHoursInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'CombinedLabourHoursInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedLabourHoursInformation.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'CombinedLabourHoursInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedLabourHoursInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedLabourHoursInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedLabourHoursInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedLabourHoursInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedLabourHoursInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsUnitOfMeasurementNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MealsUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsUnitOfMeasurementNull() {
                this[this.tableCombinedLabourHoursInformation.MealsUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsQuantityNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MealsQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsQuantityNull() {
                this[this.tableCombinedLabourHoursInformation.MealsQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelUnitOfMeasurementNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MotelUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelUnitOfMeasurementNull() {
                this[this.tableCombinedLabourHoursInformation.MotelUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelQuantityNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MotelQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelQuantityNull() {
                this[this.tableCombinedLabourHoursInformation.MotelQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostCadNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MealsCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostCadNull() {
                this[this.tableCombinedLabourHoursInformation.MealsCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostCadNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MotelCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostCadNull() {
                this[this.tableCombinedLabourHoursInformation.MotelCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostUsdNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MealsCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostUsdNull() {
                this[this.tableCombinedLabourHoursInformation.MealsCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostUsdNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.MotelCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostUsdNull() {
                this[this.tableCombinedLabourHoursInformation.MotelCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedLabourHoursInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableCombinedLabourHoursInformation.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedLabourHoursInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedLabourHoursInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableCombinedLabourHoursInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableCombinedLabourHoursInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableCombinedLabourHoursInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableCombinedLabourHoursInformation.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedLabourHoursInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedLabourHoursInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedLabourHoursInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedUnitsInformationRow : global::System.Data.DataRow {
            
            private CombinedUnitsInformationDataTable tableCombinedUnitsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedUnitsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedUnitsInformation = ((CombinedUnitsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedUnitsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableCombinedUnitsInformation.Work_Column]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableCombinedUnitsInformation.UnitIDColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedUnitsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableCombinedUnitsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableCombinedUnitsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCombinedUnitsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedUnitsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedUnitsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedUnitsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedUnitsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedUnitsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedUnitsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedUnitsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitDescription {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.UnitDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitDescription\' in table \'CombinedUnitsInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.UnitDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedUnitsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedUnitsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedUnitsInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'CombinedUnitsInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'CombinedUnitsInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedUnitsInformation.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedUnitsInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedUnitsInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedUnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedUnitsInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedUnitsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableCombinedUnitsInformation.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitDescriptionNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.UnitDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitDescriptionNull() {
                this[this.tableCombinedUnitsInformation.UnitDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedUnitsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedUnitsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableCombinedUnitsInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableCombinedUnitsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableCombinedUnitsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableCombinedUnitsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableCombinedUnitsInformation.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedUnitsInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedUnitsInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedUnitsInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedMaterialsInformationRow : global::System.Data.DataRow {
            
            private CombinedMaterialsInformationDataTable tableCombinedMaterialsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedMaterialsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedMaterialsInformation = ((CombinedMaterialsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedMaterialsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableCombinedMaterialsInformation.MaterialIDColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedMaterialsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableCombinedMaterialsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCombinedMaterialsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedMaterialsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedMaterialsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedMaterialsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedMaterialsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedMaterialsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedMaterialsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedMaterialsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedMaterialsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Process {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.ProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process\' in table \'CombinedMaterialsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.ProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'CombinedMaterialsInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'CombinedMaterialsInformation\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedMaterialsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedMaterialsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedMaterialsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedMaterialsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedMaterialsInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'CombinedMaterialsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'CombinedMaterialsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'CombinedMaterialsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedMaterialsInformation.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'CombinedMaterialsInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedMaterialsInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedMaterialsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedMaterialsInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedMaterialsInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedMaterialsInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedMaterialsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.ProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessNull() {
                this[this.tableCombinedMaterialsInformation.ProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableCombinedMaterialsInformation.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableCombinedMaterialsInformation.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedMaterialsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedMaterialsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableCombinedMaterialsInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableCombinedMaterialsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableCombinedMaterialsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableCombinedMaterialsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableCombinedMaterialsInformation.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedMaterialsInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedMaterialsInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedMaterialsInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedSubcontractorsInformationRow : global::System.Data.DataRow {
            
            private CombinedSubcontractorsInformationDataTable tableCombinedSubcontractorsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedSubcontractorsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedSubcontractorsInformation = ((CombinedSubcontractorsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedSubcontractorsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SubcontractorID {
                get {
                    return ((int)(this[this.tableCombinedSubcontractorsInformation.SubcontractorIDColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.SubcontractorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedSubcontractorsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableCombinedSubcontractorsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCombinedSubcontractorsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedSubcontractorsInformation.CostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostUsd\' in table \'CombinedSubcontractorsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableCombinedSubcontractorsInformation.TotalCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCostCad\' in table \'CombinedSubcontractorsInformation\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedSubcontractorsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedSubcontractorsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedSubcontractorsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedSubcontractorsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedSubcontractorsInformation\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableCombinedSubcontractorsInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'CombinedSubcontractorsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableCombinedSubcontractorsInformation.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'CombinedSubcontractorsInformat" +
                                "ion\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedSubcontractorsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedSubcontractorsInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedSubcontractorsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedSubcontractorsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedSubcontractorsInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'CombinedSubcontractorsInformation\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subcontractor {
                get {
                    try {
                        return ((string)(this[this.tableCombinedSubcontractorsInformation.SubcontractorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subcontractor\' in table \'CombinedSubcontractorsInformation\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.SubcontractorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedSubcontractorsInformation.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'CombinedSubcontractorsInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedSubcontractorsInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedSubcontractorsInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedSubcontractorsInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedSubcontractorsInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCombinedSubcontractorsInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostUsdNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.CostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostUsdNull() {
                this[this.tableCombinedSubcontractorsInformation.CostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCostCadNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.TotalCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCostCadNull() {
                this[this.tableCombinedSubcontractorsInformation.TotalCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedSubcontractorsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableCombinedSubcontractorsInformation.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableCombinedSubcontractorsInformation.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedSubcontractorsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedSubcontractorsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableCombinedSubcontractorsInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubcontractorNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.SubcontractorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubcontractorNull() {
                this[this.tableCombinedSubcontractorsInformation.SubcontractorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableCombinedSubcontractorsInformation.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedSubcontractorsInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedSubcontractorsInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedSubcontractorsInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedRevenueInformationRow : global::System.Data.DataRow {
            
            private CombinedRevenueInformationDataTable tableCombinedRevenueInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedRevenueInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedRevenueInformation = ((CombinedRevenueInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedRevenueInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefIDRevenue {
                get {
                    return ((int)(this[this.tableCombinedRevenueInformation.RefIDRevenueColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.RefIDRevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Revenue {
                get {
                    return ((decimal)(this[this.tableCombinedRevenueInformation.RevenueColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.RevenueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableCombinedRevenueInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'CombinedRevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedRevenueInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedRevenueInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedRevenueInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedRevenueInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedRevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedRevenueInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedRevenueInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedRevenueInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedRevenueInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedRevenueInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'CombinedRevenueInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedRevenueInformation.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'CombinedRevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedRevenueInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedRevenueInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedRevenueInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedRevenueInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedRevenueInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableCombinedRevenueInformation.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedRevenueInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedRevenueInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedRevenueInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableCombinedRevenueInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableCombinedRevenueInformation.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedRevenueInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedRevenueInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedRevenueInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CombinedOtherCostsInformationRow : global::System.Data.DataRow {
            
            private CombinedOtherCostsInformationDataTable tableCombinedOtherCostsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CombinedOtherCostsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCombinedOtherCostsInformation = ((CombinedOtherCostsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableCombinedOtherCostsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCombinedOtherCostsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedOtherCostsInformation.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'CombinedOtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableCombinedOtherCostsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'CombinedOtherCostsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableCombinedOtherCostsInformation.DescriptionColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableCombinedOtherCostsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableCombinedOtherCostsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableCombinedOtherCostsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableCombinedOtherCostsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedOtherCostsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableCombinedOtherCostsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableCombinedOtherCostsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableCombinedOtherCostsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableCombinedOtherCostsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'CombinedOtherCostsInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableCombinedOtherCostsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'CombinedOtherCostsInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedOtherCostsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CombinedOtherCostsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCombinedOtherCostsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CombinedOtherCostsInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedOtherCostsInformation.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'CombinedOtherCostsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableCombinedOtherCostsInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'CombinedOtherCostsInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Project {
                get {
                    try {
                        return ((string)(this[this.tableCombinedOtherCostsInformation.ProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Project\' in table \'CombinedOtherCostsInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCombinedOtherCostsInformation.ProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableCombinedOtherCostsInformation.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableCombinedOtherCostsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableCombinedOtherCostsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableCombinedOtherCostsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCombinedOtherCostsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCombinedOtherCostsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableCombinedOtherCostsInformation.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableCombinedOtherCostsInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNull() {
                return this.IsNull(this.tableCombinedOtherCostsInformation.ProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNull() {
                this[this.tableCombinedOtherCostsInformation.ProjectColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HotelsInformationRow : global::System.Data.DataRow {
            
            private HotelsInformationDataTable tableHotelsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HotelsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHotelsInformation = ((HotelsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableHotelsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableHotelsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HotelID {
                get {
                    return ((int)(this[this.tableHotelsInformation.HotelIDColumn]));
                }
                set {
                    this[this.tableHotelsInformation.HotelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableHotelsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableHotelsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableHotelsInformation.RateColumn]));
                }
                set {
                    this[this.tableHotelsInformation.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableHotelsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableHotelsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableHotelsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableHotelsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableHotelsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableHotelsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableHotelsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableHotelsInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hotel {
                get {
                    try {
                        return ((string)(this[this.tableHotelsInformation.HotelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hotel\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.HotelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableHotelsInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'HotelsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelsInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableHotelsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableHotelsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableHotelsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableHotelsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableHotelsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableHotelsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableHotelsInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableHotelsInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHotelNull() {
                return this.IsNull(this.tableHotelsInformation.HotelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHotelNull() {
                this[this.tableHotelsInformation.HotelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableHotelsInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableHotelsInformation.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BondingsInformationRow : global::System.Data.DataRow {
            
            private BondingsInformationDataTable tableBondingsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BondingsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBondingsInformation = ((BondingsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableBondingsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableBondingsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BondingCompanyID {
                get {
                    return ((int)(this[this.tableBondingsInformation.BondingCompanyIDColumn]));
                }
                set {
                    this[this.tableBondingsInformation.BondingCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableBondingsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableBondingsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableBondingsInformation.RateColumn]));
                }
                set {
                    this[this.tableBondingsInformation.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableBondingsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableBondingsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableBondingsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableBondingsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableBondingsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBondingsInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBondingsInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableBondingsInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bonding {
                get {
                    try {
                        return ((string)(this[this.tableBondingsInformation.BondingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bonding\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.BondingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableBondingsInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'BondingsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingsInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableBondingsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableBondingsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableBondingsInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableBondingsInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableBondingsInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableBondingsInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableBondingsInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableBondingsInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBondingNull() {
                return this.IsNull(this.tableBondingsInformation.BondingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBondingNull() {
                this[this.tableBondingsInformation.BondingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableBondingsInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableBondingsInformation.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InsurancesInformationRow : global::System.Data.DataRow {
            
            private InsurancesInformationDataTable tableInsurancesInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InsurancesInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInsurancesInformation = ((InsurancesInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableInsurancesInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsuranceCompanyID {
                get {
                    return ((int)(this[this.tableInsurancesInformation.InsuranceCompanyIDColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.InsuranceCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableInsurancesInformation.RefIDColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableInsurancesInformation.RateColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableInsurancesInformation.DeletedColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableInsurancesInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableInsurancesInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableInsurancesInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInsurancesInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInsurancesInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableInsurancesInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Insurance {
                get {
                    try {
                        return ((string)(this[this.tableInsurancesInformation.InsuranceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Insurance\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.InsuranceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableInsurancesInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'InsurancesInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsurancesInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableInsurancesInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableInsurancesInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableInsurancesInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableInsurancesInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableInsurancesInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableInsurancesInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableInsurancesInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableInsurancesInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceNull() {
                return this.IsNull(this.tableInsurancesInformation.InsuranceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceNull() {
                this[this.tableInsurancesInformation.InsuranceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableInsurancesInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableInsurancesInformation.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OtherCategoryInformationRow : global::System.Data.DataRow {
            
            private OtherCategoryInformationDataTable tableOtherCategoryInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCategoryInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOtherCategoryInformation = ((OtherCategoryInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableOtherCategoryInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    return ((string)(this[this.tableOtherCategoryInformation.CategoryColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableOtherCategoryInformation.RefIDColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    return ((decimal)(this[this.tableOtherCategoryInformation.RateColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableOtherCategoryInformation.DeletedColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableOtherCategoryInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableOtherCategoryInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableOtherCategoryInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'OtherCategoryInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOtherCategoryInformation.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'OtherCategoryInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOtherCategoryInformation.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'OtherCategoryInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FromDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableOtherCategoryInformation.FromDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FromDatabase\' in table \'OtherCategoryInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.FromDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableOtherCategoryInformation.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'OtherCategoryInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryInformation.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableOtherCategoryInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableOtherCategoryInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableOtherCategoryInformation.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableOtherCategoryInformation.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableOtherCategoryInformation.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableOtherCategoryInformation.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFromDatabaseNull() {
                return this.IsNull(this.tableOtherCategoryInformation.FromDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFromDatabaseNull() {
                this[this.tableOtherCategoryInformation.FromDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableOtherCategoryInformation.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableOtherCategoryInformation.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HotelListRow : global::System.Data.DataRow {
            
            private HotelListDataTable tableHotelList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HotelListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHotelList = ((HotelListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HotelID {
                get {
                    try {
                        return ((int)(this[this.tableHotelList.HotelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HotelID\' in table \'HotelList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHotelList.HotelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHotelIDNull() {
                return this.IsNull(this.tableHotelList.HotelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHotelIDNull() {
                this[this.tableHotelList.HotelIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BondingListRow : global::System.Data.DataRow {
            
            private BondingListDataTable tableBondingList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BondingListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBondingList = ((BondingListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BondingCompanyID {
                get {
                    try {
                        return ((int)(this[this.tableBondingList.BondingCompanyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BondingCompanyID\' in table \'BondingList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBondingList.BondingCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBondingCompanyIDNull() {
                return this.IsNull(this.tableBondingList.BondingCompanyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBondingCompanyIDNull() {
                this[this.tableBondingList.BondingCompanyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InsuranceListRow : global::System.Data.DataRow {
            
            private InsuranceListDataTable tableInsuranceList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InsuranceListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInsuranceList = ((InsuranceListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsuranceCompanyID {
                get {
                    try {
                        return ((int)(this[this.tableInsuranceList.InsuranceCompanyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceCompanyID\' in table \'InsuranceList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInsuranceList.InsuranceCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceCompanyIDNull() {
                return this.IsNull(this.tableInsuranceList.InsuranceCompanyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceCompanyIDNull() {
                this[this.tableInsuranceList.InsuranceCompanyIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OtherCategoryListRow : global::System.Data.DataRow {
            
            private OtherCategoryListDataTable tableOtherCategoryList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCategoryListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOtherCategoryList = ((OtherCategoryListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableOtherCategoryList.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'OtherCategoryList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCategoryList.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableOtherCategoryList.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableOtherCategoryList.CategoryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalHotelRow : global::System.Data.DataRow {
            
            private OriginalHotelDataTable tableOriginalHotel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalHotelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalHotel = ((OriginalHotelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HotelID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalHotel.HotelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HotelID\' in table \'OriginalHotel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalHotel.HotelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalHotel.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'OriginalHotel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalHotel.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginalHotel.Date_Column]));
                }
                set {
                    this[this.tableOriginalHotel.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableOriginalHotel.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'OriginalHotel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalHotel.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hotel {
                get {
                    try {
                        return ((string)(this[this.tableOriginalHotel.HotelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hotel\' in table \'OriginalHotel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalHotel.HotelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableOriginalHotel.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'OriginalHotel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalHotel.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHotelIDNull() {
                return this.IsNull(this.tableOriginalHotel.HotelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHotelIDNull() {
                this[this.tableOriginalHotel.HotelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableOriginalHotel.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableOriginalHotel.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableOriginalHotel.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableOriginalHotel.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHotelNull() {
                return this.IsNull(this.tableOriginalHotel.HotelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHotelNull() {
                this[this.tableOriginalHotel.HotelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableOriginalHotel.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableOriginalHotel.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalBondingRow : global::System.Data.DataRow {
            
            private OriginalBondingDataTable tableOriginalBonding;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalBondingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalBonding = ((OriginalBondingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BondingCompanyID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalBonding.BondingCompanyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BondingCompanyID\' in table \'OriginalBonding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalBonding.BondingCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalBonding.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'OriginalBonding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalBonding.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginalBonding.Date_Column]));
                }
                set {
                    this[this.tableOriginalBonding.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableOriginalBonding.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'OriginalBonding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalBonding.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Bonding {
                get {
                    try {
                        return ((string)(this[this.tableOriginalBonding.BondingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Bonding\' in table \'OriginalBonding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalBonding.BondingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableOriginalBonding.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'OriginalBonding\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalBonding.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBondingCompanyIDNull() {
                return this.IsNull(this.tableOriginalBonding.BondingCompanyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBondingCompanyIDNull() {
                this[this.tableOriginalBonding.BondingCompanyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableOriginalBonding.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableOriginalBonding.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableOriginalBonding.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableOriginalBonding.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBondingNull() {
                return this.IsNull(this.tableOriginalBonding.BondingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBondingNull() {
                this[this.tableOriginalBonding.BondingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableOriginalBonding.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableOriginalBonding.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalInsuranceRow : global::System.Data.DataRow {
            
            private OriginalInsuranceDataTable tableOriginalInsurance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalInsuranceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalInsurance = ((OriginalInsuranceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InsuranceCompanyID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalInsurance.InsuranceCompanyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceCompanyID\' in table \'OriginalInsurance\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableOriginalInsurance.InsuranceCompanyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalInsurance.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'OriginalInsurance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalInsurance.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginalInsurance.Date_Column]));
                }
                set {
                    this[this.tableOriginalInsurance.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableOriginalInsurance.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'OriginalInsurance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalInsurance.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Insurance {
                get {
                    try {
                        return ((string)(this[this.tableOriginalInsurance.InsuranceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Insurance\' in table \'OriginalInsurance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalInsurance.InsuranceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableOriginalInsurance.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'OriginalInsurance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalInsurance.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceCompanyIDNull() {
                return this.IsNull(this.tableOriginalInsurance.InsuranceCompanyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceCompanyIDNull() {
                this[this.tableOriginalInsurance.InsuranceCompanyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableOriginalInsurance.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableOriginalInsurance.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableOriginalInsurance.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableOriginalInsurance.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceNull() {
                return this.IsNull(this.tableOriginalInsurance.InsuranceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceNull() {
                this[this.tableOriginalInsurance.InsuranceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableOriginalInsurance.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableOriginalInsurance.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalOtherCategoryRow : global::System.Data.DataRow {
            
            private OriginalOtherCategoryDataTable tableOriginalOtherCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalOtherCategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalOtherCategory = ((OriginalOtherCategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableOriginalOtherCategory.CategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Category\' in table \'OriginalOtherCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalOtherCategory.CategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalOtherCategory.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'OriginalOtherCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalOtherCategory.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginalOtherCategory.Date_Column]));
                }
                set {
                    this[this.tableOriginalOtherCategory.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableOriginalOtherCategory.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'OriginalOtherCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalOtherCategory.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableOriginalOtherCategory.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'OriginalOtherCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalOtherCategory.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableOriginalOtherCategory.CategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableOriginalOtherCategory.CategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableOriginalOtherCategory.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableOriginalOtherCategory.ProjectIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableOriginalOtherCategory.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableOriginalOtherCategory.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableOriginalOtherCategory.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableOriginalOtherCategory.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectListRow : global::System.Data.DataRow {
            
            private ProjectListDataTable tableProjectList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectList = ((ProjectListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectList.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectList.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableProjectList.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'ProjectList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectList.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableProjectList.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'ProjectList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectList.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableProjectList.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableProjectList.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableProjectList.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableProjectList.ProjectNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DummyInformationRow : global::System.Data.DataRow {
            
            private DummyInformationDataTable tableDummyInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DummyInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDummyInformation = ((DummyInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    try {
                        return ((int)(this[this.tableDummyInformation.ProjectIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectID\' in table \'DummyInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDummyInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIDNull() {
                return this.IsNull(this.tableDummyInformation.ProjectIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIDNull() {
                this[this.tableDummyInformation.ProjectIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BasicInformationRowChangeEvent : global::System.EventArgs {
            
            private BasicInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRowChangeEvent(BasicInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitsInformationRowChangeEvent : global::System.EventArgs {
            
            private UnitsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRowChangeEvent(UnitsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LabourHoursInformationRowChangeEvent : global::System.EventArgs {
            
            private LabourHoursInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRowChangeEvent(LabourHoursInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MaterialsInformationRowChangeEvent : global::System.EventArgs {
            
            private MaterialsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRowChangeEvent(MaterialsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeListRowChangeEvent : global::System.EventArgs {
            
            private EmployeeListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRowChangeEvent(EmployeeListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalLabourHourRowChangeEvent : global::System.EventArgs {
            
            private OriginalLabourHourRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRowChangeEvent(OriginalLabourHourRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OtherCostsInformationRowChangeEvent : global::System.EventArgs {
            
            private OtherCostsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRowChangeEvent(OtherCostsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitListRowChangeEvent : global::System.EventArgs {
            
            private UnitListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRowChangeEvent(UnitListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalUnitRowChangeEvent : global::System.EventArgs {
            
            private OriginalUnitRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRowChangeEvent(OriginalUnitRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MaterialListRowChangeEvent : global::System.EventArgs {
            
            private MaterialListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRowChangeEvent(MaterialListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalMaterialRowChangeEvent : global::System.EventArgs {
            
            private OriginalMaterialRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRowChangeEvent(OriginalMaterialRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeePayPeriodRowChangeEvent : global::System.EventArgs {
            
            private EmployeePayPeriodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRowChangeEvent(EmployeePayPeriodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitPayPeriodRowChangeEvent : global::System.EventArgs {
            
            private UnitPayPeriodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRowChangeEvent(UnitPayPeriodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MaterialPayPeriodRowChangeEvent : global::System.EventArgs {
            
            private MaterialPayPeriodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRowChangeEvent(MaterialPayPeriodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FunctionListRowChangeEvent : global::System.EventArgs {
            
            private FunctionListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionListRowChangeEvent(FunctionListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FunctionListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubcontractorsInformationRowChangeEvent : global::System.EventArgs {
            
            private SubcontractorsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRowChangeEvent(SubcontractorsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubcontractorListRowChangeEvent : global::System.EventArgs {
            
            private SubcontractorListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorListRowChangeEvent(SubcontractorListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubcontractorListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalSubcontractorRowChangeEvent : global::System.EventArgs {
            
            private OriginalSubcontractorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalSubcontractorRowChangeEvent(OriginalSubcontractorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalSubcontractorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RevenueInformationRowChangeEvent : global::System.EventArgs {
            
            private RevenueInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRowChangeEvent(RevenueInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RevenueInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalRevenueRowChangeEvent : global::System.EventArgs {
            
            private OriginalRevenueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRevenueRowChangeEvent(OriginalRevenueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalRevenueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TemplateInformationRowChangeEvent : global::System.EventArgs {
            
            private TemplateInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateInformationRowChangeEvent(TemplateInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedBasicInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedBasicInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRowChangeEvent(CombinedBasicInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedBasicInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedLabourHoursInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedLabourHoursInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRowChangeEvent(CombinedLabourHoursInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedLabourHoursInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedUnitsInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedUnitsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRowChangeEvent(CombinedUnitsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedUnitsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedMaterialsInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedMaterialsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRowChangeEvent(CombinedMaterialsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedMaterialsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedSubcontractorsInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedSubcontractorsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRowChangeEvent(CombinedSubcontractorsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedSubcontractorsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedRevenueInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedRevenueInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRowChangeEvent(CombinedRevenueInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedRevenueInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CombinedOtherCostsInformationRowChangeEvent : global::System.EventArgs {
            
            private CombinedOtherCostsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRowChangeEvent(CombinedOtherCostsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CombinedOtherCostsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HotelsInformationRowChangeEvent : global::System.EventArgs {
            
            private HotelsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRowChangeEvent(HotelsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BondingsInformationRowChangeEvent : global::System.EventArgs {
            
            private BondingsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRowChangeEvent(BondingsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InsurancesInformationRowChangeEvent : global::System.EventArgs {
            
            private InsurancesInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRowChangeEvent(InsurancesInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsurancesInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OtherCategoryInformationRowChangeEvent : global::System.EventArgs {
            
            private OtherCategoryInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRowChangeEvent(OtherCategoryInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HotelListRowChangeEvent : global::System.EventArgs {
            
            private HotelListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelListRowChangeEvent(HotelListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HotelListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BondingListRowChangeEvent : global::System.EventArgs {
            
            private BondingListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingListRowChangeEvent(BondingListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BondingListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InsuranceListRowChangeEvent : global::System.EventArgs {
            
            private InsuranceListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceListRowChangeEvent(InsuranceListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InsuranceListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OtherCategoryListRowChangeEvent : global::System.EventArgs {
            
            private OtherCategoryListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryListRowChangeEvent(OtherCategoryListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCategoryListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalHotelRowChangeEvent : global::System.EventArgs {
            
            private OriginalHotelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalHotelRowChangeEvent(OriginalHotelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalHotelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalBondingRowChangeEvent : global::System.EventArgs {
            
            private OriginalBondingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalBondingRowChangeEvent(OriginalBondingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalBondingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalInsuranceRowChangeEvent : global::System.EventArgs {
            
            private OriginalInsuranceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalInsuranceRowChangeEvent(OriginalInsuranceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalInsuranceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalOtherCategoryRowChangeEvent : global::System.EventArgs {
            
            private OriginalOtherCategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalOtherCategoryRowChangeEvent(OriginalOtherCategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalOtherCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectListRowChangeEvent : global::System.EventArgs {
            
            private ProjectListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectListRowChangeEvent(ProjectListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DummyInformationRowChangeEvent : global::System.EventArgs {
            
            private DummyInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DummyInformationRowChangeEvent(DummyInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DummyInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591