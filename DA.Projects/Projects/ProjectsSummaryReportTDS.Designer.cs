//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Projects.Projects {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectsSummaryReportTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectsSummaryReportTDS : global::System.Data.DataSet {
        
        private ProjectsSummaryReportDataTable tableProjectsSummaryReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectsSummaryReportTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectsSummaryReportTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ProjectsSummaryReport"] != null)) {
                    base.Tables.Add(new ProjectsSummaryReportDataTable(ds.Tables["ProjectsSummaryReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectsSummaryReportDataTable ProjectsSummaryReport {
            get {
                return this.tableProjectsSummaryReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectsSummaryReportTDS cln = ((ProjectsSummaryReportTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ProjectsSummaryReport"] != null)) {
                    base.Tables.Add(new ProjectsSummaryReportDataTable(ds.Tables["ProjectsSummaryReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProjectsSummaryReport = ((ProjectsSummaryReportDataTable)(base.Tables["ProjectsSummaryReport"]));
            if ((initTable == true)) {
                if ((this.tableProjectsSummaryReport != null)) {
                    this.tableProjectsSummaryReport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectsSummaryReportTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectsSummaryReportTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProjectsSummaryReport = new ProjectsSummaryReportDataTable();
            base.Tables.Add(this.tableProjectsSummaryReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectsSummaryReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectsSummaryReportTDS ds = new ProjectsSummaryReportTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ProjectsSummaryReportRowChangeEventHandler(object sender, ProjectsSummaryReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectsSummaryReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnBillMoney;
            
            private global::System.Data.DataColumn columnBillPrice;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnGeneralBondingSupplied;
            
            private global::System.Data.DataColumn columnExtrasToDate;
            
            private global::System.Data.DataColumn columnCostsIncurred;
            
            private global::System.Data.DataColumn columnCostToComplete;
            
            private global::System.Data.DataColumn columnOriginalProfitEstimated;
            
            private global::System.Data.DataColumn columnTotalAmountIncludingExtras;
            
            private global::System.Data.DataColumn columnInvoicedToDate;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnClientProjectNumber;
            
            private global::System.Data.DataColumn columnBondNumber;
            
            private global::System.Data.DataColumn columnLeftToInvoice;
            
            private global::System.Data.DataColumn columnPercentageCompleted;
            
            private global::System.Data.DataColumn columnProjectDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsSummaryReportDataTable() {
                this.TableName = "ProjectsSummaryReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectsSummaryReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectsSummaryReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillMoneyColumn {
                get {
                    return this.columnBillMoney;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BillPriceColumn {
                get {
                    return this.columnBillPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GeneralBondingSuppliedColumn {
                get {
                    return this.columnGeneralBondingSupplied;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtrasToDateColumn {
                get {
                    return this.columnExtrasToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostsIncurredColumn {
                get {
                    return this.columnCostsIncurred;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostToCompleteColumn {
                get {
                    return this.columnCostToComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OriginalProfitEstimatedColumn {
                get {
                    return this.columnOriginalProfitEstimated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountIncludingExtrasColumn {
                get {
                    return this.columnTotalAmountIncludingExtras;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoicedToDateColumn {
                get {
                    return this.columnInvoicedToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientProjectNumberColumn {
                get {
                    return this.columnClientProjectNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BondNumberColumn {
                get {
                    return this.columnBondNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeftToInvoiceColumn {
                get {
                    return this.columnLeftToInvoice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageCompletedColumn {
                get {
                    return this.columnPercentageCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectDescriptionColumn {
                get {
                    return this.columnProjectDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsSummaryReportRow this[int index] {
                get {
                    return ((ProjectsSummaryReportRow)(this.Rows[index]));
                }
            }
            
            public event ProjectsSummaryReportRowChangeEventHandler ProjectsSummaryReportRowChanging;
            
            public event ProjectsSummaryReportRowChangeEventHandler ProjectsSummaryReportRowChanged;
            
            public event ProjectsSummaryReportRowChangeEventHandler ProjectsSummaryReportRowDeleting;
            
            public event ProjectsSummaryReportRowChangeEventHandler ProjectsSummaryReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectsSummaryReportRow(ProjectsSummaryReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsSummaryReportRow AddProjectsSummaryReportRow(
                        string ProjectName, 
                        string BillMoney, 
                        decimal BillPrice, 
                        System.DateTime EndDate, 
                        string GeneralBondingSupplied, 
                        decimal ExtrasToDate, 
                        decimal CostsIncurred, 
                        decimal CostToComplete, 
                        decimal OriginalProfitEstimated, 
                        decimal TotalAmountIncludingExtras, 
                        decimal InvoicedToDate, 
                        string ClientName, 
                        string ClientProjectNumber, 
                        string BondNumber, 
                        decimal LeftToInvoice, 
                        int PercentageCompleted, 
                        string ProjectDescription) {
                ProjectsSummaryReportRow rowProjectsSummaryReportRow = ((ProjectsSummaryReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectName,
                        BillMoney,
                        BillPrice,
                        EndDate,
                        GeneralBondingSupplied,
                        ExtrasToDate,
                        CostsIncurred,
                        CostToComplete,
                        OriginalProfitEstimated,
                        TotalAmountIncludingExtras,
                        InvoicedToDate,
                        ClientName,
                        ClientProjectNumber,
                        BondNumber,
                        LeftToInvoice,
                        PercentageCompleted,
                        ProjectDescription};
                rowProjectsSummaryReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectsSummaryReportRow);
                return rowProjectsSummaryReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectsSummaryReportDataTable cln = ((ProjectsSummaryReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectsSummaryReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnBillMoney = base.Columns["BillMoney"];
                this.columnBillPrice = base.Columns["BillPrice"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnGeneralBondingSupplied = base.Columns["GeneralBondingSupplied"];
                this.columnExtrasToDate = base.Columns["ExtrasToDate"];
                this.columnCostsIncurred = base.Columns["CostsIncurred"];
                this.columnCostToComplete = base.Columns["CostToComplete"];
                this.columnOriginalProfitEstimated = base.Columns["OriginalProfitEstimated"];
                this.columnTotalAmountIncludingExtras = base.Columns["TotalAmountIncludingExtras"];
                this.columnInvoicedToDate = base.Columns["InvoicedToDate"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnClientProjectNumber = base.Columns["ClientProjectNumber"];
                this.columnBondNumber = base.Columns["BondNumber"];
                this.columnLeftToInvoice = base.Columns["LeftToInvoice"];
                this.columnPercentageCompleted = base.Columns["PercentageCompleted"];
                this.columnProjectDescription = base.Columns["ProjectDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnBillMoney = new global::System.Data.DataColumn("BillMoney", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillMoney);
                this.columnBillPrice = new global::System.Data.DataColumn("BillPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBillPrice);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnGeneralBondingSupplied = new global::System.Data.DataColumn("GeneralBondingSupplied", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGeneralBondingSupplied);
                this.columnExtrasToDate = new global::System.Data.DataColumn("ExtrasToDate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtrasToDate);
                this.columnCostsIncurred = new global::System.Data.DataColumn("CostsIncurred", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostsIncurred);
                this.columnCostToComplete = new global::System.Data.DataColumn("CostToComplete", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostToComplete);
                this.columnOriginalProfitEstimated = new global::System.Data.DataColumn("OriginalProfitEstimated", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOriginalProfitEstimated);
                this.columnTotalAmountIncludingExtras = new global::System.Data.DataColumn("TotalAmountIncludingExtras", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmountIncludingExtras);
                this.columnInvoicedToDate = new global::System.Data.DataColumn("InvoicedToDate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoicedToDate);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnClientProjectNumber = new global::System.Data.DataColumn("ClientProjectNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientProjectNumber);
                this.columnBondNumber = new global::System.Data.DataColumn("BondNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBondNumber);
                this.columnLeftToInvoice = new global::System.Data.DataColumn("LeftToInvoice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeftToInvoice);
                this.columnPercentageCompleted = new global::System.Data.DataColumn("PercentageCompleted", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentageCompleted);
                this.columnProjectDescription = new global::System.Data.DataColumn("ProjectDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectDescription);
                this.columnProjectID.AutoIncrement = true;
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.ReadOnly = true;
                this.columnBillMoney.MaxLength = 5;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsSummaryReportRow NewProjectsSummaryReportRow() {
                return ((ProjectsSummaryReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectsSummaryReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectsSummaryReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectsSummaryReportRowChanged != null)) {
                    this.ProjectsSummaryReportRowChanged(this, new ProjectsSummaryReportRowChangeEvent(((ProjectsSummaryReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectsSummaryReportRowChanging != null)) {
                    this.ProjectsSummaryReportRowChanging(this, new ProjectsSummaryReportRowChangeEvent(((ProjectsSummaryReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectsSummaryReportRowDeleted != null)) {
                    this.ProjectsSummaryReportRowDeleted(this, new ProjectsSummaryReportRowChangeEvent(((ProjectsSummaryReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectsSummaryReportRowDeleting != null)) {
                    this.ProjectsSummaryReportRowDeleting(this, new ProjectsSummaryReportRowChangeEvent(((ProjectsSummaryReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectsSummaryReportRow(ProjectsSummaryReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectsSummaryReportTDS ds = new ProjectsSummaryReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectsSummaryReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectsSummaryReportRow : global::System.Data.DataRow {
            
            private ProjectsSummaryReportDataTable tableProjectsSummaryReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectsSummaryReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectsSummaryReport = ((ProjectsSummaryReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProjectsSummaryReport.ProjectIDColumn]));
                }
                set {
                    this[this.tableProjectsSummaryReport.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableProjectsSummaryReport.ProjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectName\' in table \'ProjectsSummaryReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BillMoney {
                get {
                    try {
                        return ((string)(this[this.tableProjectsSummaryReport.BillMoneyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillMoney\' in table \'ProjectsSummaryReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.BillMoneyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BillPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectsSummaryReport.BillPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BillPrice\' in table \'ProjectsSummaryReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.BillPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableProjectsSummaryReport.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'ProjectsSummaryReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GeneralBondingSupplied {
                get {
                    try {
                        return ((string)(this[this.tableProjectsSummaryReport.GeneralBondingSuppliedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GeneralBondingSupplied\' in table \'ProjectsSummaryReport\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.GeneralBondingSuppliedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ExtrasToDate {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectsSummaryReport.ExtrasToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExtrasToDate\' in table \'ProjectsSummaryReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.ExtrasToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostsIncurred {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectsSummaryReport.CostsIncurredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostsIncurred\' in table \'ProjectsSummaryReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.CostsIncurredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostToComplete {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectsSummaryReport.CostToCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostToComplete\' in table \'ProjectsSummaryReport\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.CostToCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OriginalProfitEstimated {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectsSummaryReport.OriginalProfitEstimatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OriginalProfitEstimated\' in table \'ProjectsSummaryReport\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.OriginalProfitEstimatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmountIncludingExtras {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectsSummaryReport.TotalAmountIncludingExtrasColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmountIncludingExtras\' in table \'ProjectsSummaryReport" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.TotalAmountIncludingExtrasColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal InvoicedToDate {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectsSummaryReport.InvoicedToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoicedToDate\' in table \'ProjectsSummaryReport\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.InvoicedToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableProjectsSummaryReport.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'ProjectsSummaryReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientProjectNumber {
                get {
                    try {
                        return ((string)(this[this.tableProjectsSummaryReport.ClientProjectNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientProjectNumber\' in table \'ProjectsSummaryReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.ClientProjectNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BondNumber {
                get {
                    try {
                        return ((string)(this[this.tableProjectsSummaryReport.BondNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BondNumber\' in table \'ProjectsSummaryReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.BondNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LeftToInvoice {
                get {
                    try {
                        return ((decimal)(this[this.tableProjectsSummaryReport.LeftToInvoiceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeftToInvoice\' in table \'ProjectsSummaryReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.LeftToInvoiceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PercentageCompleted {
                get {
                    try {
                        return ((int)(this[this.tableProjectsSummaryReport.PercentageCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PercentageCompleted\' in table \'ProjectsSummaryReport\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.PercentageCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectDescription {
                get {
                    try {
                        return ((string)(this[this.tableProjectsSummaryReport.ProjectDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectDescription\' in table \'ProjectsSummaryReport\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableProjectsSummaryReport.ProjectDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableProjectsSummaryReport.ProjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectNameNull() {
                this[this.tableProjectsSummaryReport.ProjectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillMoneyNull() {
                return this.IsNull(this.tableProjectsSummaryReport.BillMoneyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillMoneyNull() {
                this[this.tableProjectsSummaryReport.BillMoneyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBillPriceNull() {
                return this.IsNull(this.tableProjectsSummaryReport.BillPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBillPriceNull() {
                this[this.tableProjectsSummaryReport.BillPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableProjectsSummaryReport.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableProjectsSummaryReport.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGeneralBondingSuppliedNull() {
                return this.IsNull(this.tableProjectsSummaryReport.GeneralBondingSuppliedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGeneralBondingSuppliedNull() {
                this[this.tableProjectsSummaryReport.GeneralBondingSuppliedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtrasToDateNull() {
                return this.IsNull(this.tableProjectsSummaryReport.ExtrasToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtrasToDateNull() {
                this[this.tableProjectsSummaryReport.ExtrasToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostsIncurredNull() {
                return this.IsNull(this.tableProjectsSummaryReport.CostsIncurredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostsIncurredNull() {
                this[this.tableProjectsSummaryReport.CostsIncurredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostToCompleteNull() {
                return this.IsNull(this.tableProjectsSummaryReport.CostToCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostToCompleteNull() {
                this[this.tableProjectsSummaryReport.CostToCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOriginalProfitEstimatedNull() {
                return this.IsNull(this.tableProjectsSummaryReport.OriginalProfitEstimatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOriginalProfitEstimatedNull() {
                this[this.tableProjectsSummaryReport.OriginalProfitEstimatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountIncludingExtrasNull() {
                return this.IsNull(this.tableProjectsSummaryReport.TotalAmountIncludingExtrasColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountIncludingExtrasNull() {
                this[this.tableProjectsSummaryReport.TotalAmountIncludingExtrasColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoicedToDateNull() {
                return this.IsNull(this.tableProjectsSummaryReport.InvoicedToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoicedToDateNull() {
                this[this.tableProjectsSummaryReport.InvoicedToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableProjectsSummaryReport.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableProjectsSummaryReport.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientProjectNumberNull() {
                return this.IsNull(this.tableProjectsSummaryReport.ClientProjectNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientProjectNumberNull() {
                this[this.tableProjectsSummaryReport.ClientProjectNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBondNumberNull() {
                return this.IsNull(this.tableProjectsSummaryReport.BondNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBondNumberNull() {
                this[this.tableProjectsSummaryReport.BondNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeftToInvoiceNull() {
                return this.IsNull(this.tableProjectsSummaryReport.LeftToInvoiceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeftToInvoiceNull() {
                this[this.tableProjectsSummaryReport.LeftToInvoiceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageCompletedNull() {
                return this.IsNull(this.tableProjectsSummaryReport.PercentageCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageCompletedNull() {
                this[this.tableProjectsSummaryReport.PercentageCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectDescriptionNull() {
                return this.IsNull(this.tableProjectsSummaryReport.ProjectDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectDescriptionNull() {
                this[this.tableProjectsSummaryReport.ProjectDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectsSummaryReportRowChangeEvent : global::System.EventArgs {
            
            private ProjectsSummaryReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsSummaryReportRowChangeEvent(ProjectsSummaryReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectsSummaryReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591