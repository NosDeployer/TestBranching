//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Projects.Projects {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectCostingSheetAddTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectCostingSheetAddTDS : global::System.Data.DataSet {
        
        private BasicInformationDataTable tableBasicInformation;
        
        private UnitsInformationDataTable tableUnitsInformation;
        
        private LabourHoursInformationDataTable tableLabourHoursInformation;
        
        private MaterialsInformationDataTable tableMaterialsInformation;
        
        private EmployeeListDataTable tableEmployeeList;
        
        private WorkListDataTable tableWorkList;
        
        private OriginalLabourHourDataTable tableOriginalLabourHour;
        
        private OtherCostsInformationDataTable tableOtherCostsInformation;
        
        private UnitListDataTable tableUnitList;
        
        private OriginalUnitDataTable tableOriginalUnit;
        
        private MaterialListDataTable tableMaterialList;
        
        private OriginalMaterialDataTable tableOriginalMaterial;
        
        private EmployeePayPeriodDataTable tableEmployeePayPeriod;
        
        private UnitPayPeriodDataTable tableUnitPayPeriod;
        
        private MaterialPayPeriodDataTable tableMaterialPayPeriod;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectCostingSheetAddTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectCostingSheetAddTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["UnitsInformation"] != null)) {
                    base.Tables.Add(new UnitsInformationDataTable(ds.Tables["UnitsInformation"]));
                }
                if ((ds.Tables["LabourHoursInformation"] != null)) {
                    base.Tables.Add(new LabourHoursInformationDataTable(ds.Tables["LabourHoursInformation"]));
                }
                if ((ds.Tables["MaterialsInformation"] != null)) {
                    base.Tables.Add(new MaterialsInformationDataTable(ds.Tables["MaterialsInformation"]));
                }
                if ((ds.Tables["EmployeeList"] != null)) {
                    base.Tables.Add(new EmployeeListDataTable(ds.Tables["EmployeeList"]));
                }
                if ((ds.Tables["WorkList"] != null)) {
                    base.Tables.Add(new WorkListDataTable(ds.Tables["WorkList"]));
                }
                if ((ds.Tables["OriginalLabourHour"] != null)) {
                    base.Tables.Add(new OriginalLabourHourDataTable(ds.Tables["OriginalLabourHour"]));
                }
                if ((ds.Tables["OtherCostsInformation"] != null)) {
                    base.Tables.Add(new OtherCostsInformationDataTable(ds.Tables["OtherCostsInformation"]));
                }
                if ((ds.Tables["UnitList"] != null)) {
                    base.Tables.Add(new UnitListDataTable(ds.Tables["UnitList"]));
                }
                if ((ds.Tables["OriginalUnit"] != null)) {
                    base.Tables.Add(new OriginalUnitDataTable(ds.Tables["OriginalUnit"]));
                }
                if ((ds.Tables["MaterialList"] != null)) {
                    base.Tables.Add(new MaterialListDataTable(ds.Tables["MaterialList"]));
                }
                if ((ds.Tables["OriginalMaterial"] != null)) {
                    base.Tables.Add(new OriginalMaterialDataTable(ds.Tables["OriginalMaterial"]));
                }
                if ((ds.Tables["EmployeePayPeriod"] != null)) {
                    base.Tables.Add(new EmployeePayPeriodDataTable(ds.Tables["EmployeePayPeriod"]));
                }
                if ((ds.Tables["UnitPayPeriod"] != null)) {
                    base.Tables.Add(new UnitPayPeriodDataTable(ds.Tables["UnitPayPeriod"]));
                }
                if ((ds.Tables["MaterialPayPeriod"] != null)) {
                    base.Tables.Add(new MaterialPayPeriodDataTable(ds.Tables["MaterialPayPeriod"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BasicInformationDataTable BasicInformation {
            get {
                return this.tableBasicInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitsInformationDataTable UnitsInformation {
            get {
                return this.tableUnitsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LabourHoursInformationDataTable LabourHoursInformation {
            get {
                return this.tableLabourHoursInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MaterialsInformationDataTable MaterialsInformation {
            get {
                return this.tableMaterialsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeListDataTable EmployeeList {
            get {
                return this.tableEmployeeList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WorkListDataTable WorkList {
            get {
                return this.tableWorkList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalLabourHourDataTable OriginalLabourHour {
            get {
                return this.tableOriginalLabourHour;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OtherCostsInformationDataTable OtherCostsInformation {
            get {
                return this.tableOtherCostsInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitListDataTable UnitList {
            get {
                return this.tableUnitList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalUnitDataTable OriginalUnit {
            get {
                return this.tableOriginalUnit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MaterialListDataTable MaterialList {
            get {
                return this.tableMaterialList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OriginalMaterialDataTable OriginalMaterial {
            get {
                return this.tableOriginalMaterial;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeePayPeriodDataTable EmployeePayPeriod {
            get {
                return this.tableEmployeePayPeriod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitPayPeriodDataTable UnitPayPeriod {
            get {
                return this.tableUnitPayPeriod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MaterialPayPeriodDataTable MaterialPayPeriod {
            get {
                return this.tableMaterialPayPeriod;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectCostingSheetAddTDS cln = ((ProjectCostingSheetAddTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["UnitsInformation"] != null)) {
                    base.Tables.Add(new UnitsInformationDataTable(ds.Tables["UnitsInformation"]));
                }
                if ((ds.Tables["LabourHoursInformation"] != null)) {
                    base.Tables.Add(new LabourHoursInformationDataTable(ds.Tables["LabourHoursInformation"]));
                }
                if ((ds.Tables["MaterialsInformation"] != null)) {
                    base.Tables.Add(new MaterialsInformationDataTable(ds.Tables["MaterialsInformation"]));
                }
                if ((ds.Tables["EmployeeList"] != null)) {
                    base.Tables.Add(new EmployeeListDataTable(ds.Tables["EmployeeList"]));
                }
                if ((ds.Tables["WorkList"] != null)) {
                    base.Tables.Add(new WorkListDataTable(ds.Tables["WorkList"]));
                }
                if ((ds.Tables["OriginalLabourHour"] != null)) {
                    base.Tables.Add(new OriginalLabourHourDataTable(ds.Tables["OriginalLabourHour"]));
                }
                if ((ds.Tables["OtherCostsInformation"] != null)) {
                    base.Tables.Add(new OtherCostsInformationDataTable(ds.Tables["OtherCostsInformation"]));
                }
                if ((ds.Tables["UnitList"] != null)) {
                    base.Tables.Add(new UnitListDataTable(ds.Tables["UnitList"]));
                }
                if ((ds.Tables["OriginalUnit"] != null)) {
                    base.Tables.Add(new OriginalUnitDataTable(ds.Tables["OriginalUnit"]));
                }
                if ((ds.Tables["MaterialList"] != null)) {
                    base.Tables.Add(new MaterialListDataTable(ds.Tables["MaterialList"]));
                }
                if ((ds.Tables["OriginalMaterial"] != null)) {
                    base.Tables.Add(new OriginalMaterialDataTable(ds.Tables["OriginalMaterial"]));
                }
                if ((ds.Tables["EmployeePayPeriod"] != null)) {
                    base.Tables.Add(new EmployeePayPeriodDataTable(ds.Tables["EmployeePayPeriod"]));
                }
                if ((ds.Tables["UnitPayPeriod"] != null)) {
                    base.Tables.Add(new UnitPayPeriodDataTable(ds.Tables["UnitPayPeriod"]));
                }
                if ((ds.Tables["MaterialPayPeriod"] != null)) {
                    base.Tables.Add(new MaterialPayPeriodDataTable(ds.Tables["MaterialPayPeriod"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBasicInformation = ((BasicInformationDataTable)(base.Tables["BasicInformation"]));
            if ((initTable == true)) {
                if ((this.tableBasicInformation != null)) {
                    this.tableBasicInformation.InitVars();
                }
            }
            this.tableUnitsInformation = ((UnitsInformationDataTable)(base.Tables["UnitsInformation"]));
            if ((initTable == true)) {
                if ((this.tableUnitsInformation != null)) {
                    this.tableUnitsInformation.InitVars();
                }
            }
            this.tableLabourHoursInformation = ((LabourHoursInformationDataTable)(base.Tables["LabourHoursInformation"]));
            if ((initTable == true)) {
                if ((this.tableLabourHoursInformation != null)) {
                    this.tableLabourHoursInformation.InitVars();
                }
            }
            this.tableMaterialsInformation = ((MaterialsInformationDataTable)(base.Tables["MaterialsInformation"]));
            if ((initTable == true)) {
                if ((this.tableMaterialsInformation != null)) {
                    this.tableMaterialsInformation.InitVars();
                }
            }
            this.tableEmployeeList = ((EmployeeListDataTable)(base.Tables["EmployeeList"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeList != null)) {
                    this.tableEmployeeList.InitVars();
                }
            }
            this.tableWorkList = ((WorkListDataTable)(base.Tables["WorkList"]));
            if ((initTable == true)) {
                if ((this.tableWorkList != null)) {
                    this.tableWorkList.InitVars();
                }
            }
            this.tableOriginalLabourHour = ((OriginalLabourHourDataTable)(base.Tables["OriginalLabourHour"]));
            if ((initTable == true)) {
                if ((this.tableOriginalLabourHour != null)) {
                    this.tableOriginalLabourHour.InitVars();
                }
            }
            this.tableOtherCostsInformation = ((OtherCostsInformationDataTable)(base.Tables["OtherCostsInformation"]));
            if ((initTable == true)) {
                if ((this.tableOtherCostsInformation != null)) {
                    this.tableOtherCostsInformation.InitVars();
                }
            }
            this.tableUnitList = ((UnitListDataTable)(base.Tables["UnitList"]));
            if ((initTable == true)) {
                if ((this.tableUnitList != null)) {
                    this.tableUnitList.InitVars();
                }
            }
            this.tableOriginalUnit = ((OriginalUnitDataTable)(base.Tables["OriginalUnit"]));
            if ((initTable == true)) {
                if ((this.tableOriginalUnit != null)) {
                    this.tableOriginalUnit.InitVars();
                }
            }
            this.tableMaterialList = ((MaterialListDataTable)(base.Tables["MaterialList"]));
            if ((initTable == true)) {
                if ((this.tableMaterialList != null)) {
                    this.tableMaterialList.InitVars();
                }
            }
            this.tableOriginalMaterial = ((OriginalMaterialDataTable)(base.Tables["OriginalMaterial"]));
            if ((initTable == true)) {
                if ((this.tableOriginalMaterial != null)) {
                    this.tableOriginalMaterial.InitVars();
                }
            }
            this.tableEmployeePayPeriod = ((EmployeePayPeriodDataTable)(base.Tables["EmployeePayPeriod"]));
            if ((initTable == true)) {
                if ((this.tableEmployeePayPeriod != null)) {
                    this.tableEmployeePayPeriod.InitVars();
                }
            }
            this.tableUnitPayPeriod = ((UnitPayPeriodDataTable)(base.Tables["UnitPayPeriod"]));
            if ((initTable == true)) {
                if ((this.tableUnitPayPeriod != null)) {
                    this.tableUnitPayPeriod.InitVars();
                }
            }
            this.tableMaterialPayPeriod = ((MaterialPayPeriodDataTable)(base.Tables["MaterialPayPeriod"]));
            if ((initTable == true)) {
                if ((this.tableMaterialPayPeriod != null)) {
                    this.tableMaterialPayPeriod.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectCostingSheetAddTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectCostingSheetAddTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBasicInformation = new BasicInformationDataTable();
            base.Tables.Add(this.tableBasicInformation);
            this.tableUnitsInformation = new UnitsInformationDataTable();
            base.Tables.Add(this.tableUnitsInformation);
            this.tableLabourHoursInformation = new LabourHoursInformationDataTable();
            base.Tables.Add(this.tableLabourHoursInformation);
            this.tableMaterialsInformation = new MaterialsInformationDataTable();
            base.Tables.Add(this.tableMaterialsInformation);
            this.tableEmployeeList = new EmployeeListDataTable();
            base.Tables.Add(this.tableEmployeeList);
            this.tableWorkList = new WorkListDataTable();
            base.Tables.Add(this.tableWorkList);
            this.tableOriginalLabourHour = new OriginalLabourHourDataTable();
            base.Tables.Add(this.tableOriginalLabourHour);
            this.tableOtherCostsInformation = new OtherCostsInformationDataTable();
            base.Tables.Add(this.tableOtherCostsInformation);
            this.tableUnitList = new UnitListDataTable();
            base.Tables.Add(this.tableUnitList);
            this.tableOriginalUnit = new OriginalUnitDataTable();
            base.Tables.Add(this.tableOriginalUnit);
            this.tableMaterialList = new MaterialListDataTable();
            base.Tables.Add(this.tableMaterialList);
            this.tableOriginalMaterial = new OriginalMaterialDataTable();
            base.Tables.Add(this.tableOriginalMaterial);
            this.tableEmployeePayPeriod = new EmployeePayPeriodDataTable();
            base.Tables.Add(this.tableEmployeePayPeriod);
            this.tableUnitPayPeriod = new UnitPayPeriodDataTable();
            base.Tables.Add(this.tableUnitPayPeriod);
            this.tableMaterialPayPeriod = new MaterialPayPeriodDataTable();
            base.Tables.Add(this.tableMaterialPayPeriod);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBasicInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLabourHoursInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaterialsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeWorkList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalLabourHour() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOtherCostsInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalUnit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaterialList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOriginalMaterial() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeePayPeriod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitPayPeriod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMaterialPayPeriod() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BasicInformationRowChangeEventHandler(object sender, BasicInformationRowChangeEvent e);
        
        public delegate void UnitsInformationRowChangeEventHandler(object sender, UnitsInformationRowChangeEvent e);
        
        public delegate void LabourHoursInformationRowChangeEventHandler(object sender, LabourHoursInformationRowChangeEvent e);
        
        public delegate void MaterialsInformationRowChangeEventHandler(object sender, MaterialsInformationRowChangeEvent e);
        
        public delegate void EmployeeListRowChangeEventHandler(object sender, EmployeeListRowChangeEvent e);
        
        public delegate void WorkListRowChangeEventHandler(object sender, WorkListRowChangeEvent e);
        
        public delegate void OriginalLabourHourRowChangeEventHandler(object sender, OriginalLabourHourRowChangeEvent e);
        
        public delegate void OtherCostsInformationRowChangeEventHandler(object sender, OtherCostsInformationRowChangeEvent e);
        
        public delegate void UnitListRowChangeEventHandler(object sender, UnitListRowChangeEvent e);
        
        public delegate void OriginalUnitRowChangeEventHandler(object sender, OriginalUnitRowChangeEvent e);
        
        public delegate void MaterialListRowChangeEventHandler(object sender, MaterialListRowChangeEvent e);
        
        public delegate void OriginalMaterialRowChangeEventHandler(object sender, OriginalMaterialRowChangeEvent e);
        
        public delegate void EmployeePayPeriodRowChangeEventHandler(object sender, EmployeePayPeriodRowChangeEvent e);
        
        public delegate void UnitPayPeriodRowChangeEventHandler(object sender, UnitPayPeriodRowChangeEvent e);
        
        public delegate void MaterialPayPeriodRowChangeEventHandler(object sender, MaterialPayPeriodRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BasicInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnProjectID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnTotalLabourHoursCad;
            
            private global::System.Data.DataColumn columnTotalLabourHoursUsd;
            
            private global::System.Data.DataColumn columnTotalMaterialsCad;
            
            private global::System.Data.DataColumn columnTotalMaterialsUsd;
            
            private global::System.Data.DataColumn columnTotalUnitsCad;
            
            private global::System.Data.DataColumn columnTotalUnitsUsd;
            
            private global::System.Data.DataColumn columnTotalOtherCostsCad;
            
            private global::System.Data.DataColumn columnTotalOtherCostsUsd;
            
            private global::System.Data.DataColumn columnGrantTotalCostCad;
            
            private global::System.Data.DataColumn columnGrantTotalCostUsd;
            
            private global::System.Data.DataColumn columnState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationDataTable() {
                this.TableName = "BasicInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BasicInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursCadColumn {
                get {
                    return this.columnTotalLabourHoursCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalLabourHoursUsdColumn {
                get {
                    return this.columnTotalLabourHoursUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsCadColumn {
                get {
                    return this.columnTotalMaterialsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMaterialsUsdColumn {
                get {
                    return this.columnTotalMaterialsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsCadColumn {
                get {
                    return this.columnTotalUnitsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalUnitsUsdColumn {
                get {
                    return this.columnTotalUnitsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsCadColumn {
                get {
                    return this.columnTotalOtherCostsCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalOtherCostsUsdColumn {
                get {
                    return this.columnTotalOtherCostsUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantTotalCostCadColumn {
                get {
                    return this.columnGrantTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrantTotalCostUsdColumn {
                get {
                    return this.columnGrantTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow this[int index] {
                get {
                    return ((BasicInformationRow)(this.Rows[index]));
                }
            }
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanging;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanged;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleting;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBasicInformationRow(BasicInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow AddBasicInformationRow(
                        int CostingSheetID, 
                        int ProjectID, 
                        string Name, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        decimal TotalLabourHoursCad, 
                        decimal TotalLabourHoursUsd, 
                        decimal TotalMaterialsCad, 
                        decimal TotalMaterialsUsd, 
                        decimal TotalUnitsCad, 
                        decimal TotalUnitsUsd, 
                        decimal TotalOtherCostsCad, 
                        decimal TotalOtherCostsUsd, 
                        decimal GrantTotalCostCad, 
                        decimal GrantTotalCostUsd, 
                        string State) {
                BasicInformationRow rowBasicInformationRow = ((BasicInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        ProjectID,
                        Name,
                        StartDate,
                        EndDate,
                        Deleted,
                        COMPANY_ID,
                        TotalLabourHoursCad,
                        TotalLabourHoursUsd,
                        TotalMaterialsCad,
                        TotalMaterialsUsd,
                        TotalUnitsCad,
                        TotalUnitsUsd,
                        TotalOtherCostsCad,
                        TotalOtherCostsUsd,
                        GrantTotalCostCad,
                        GrantTotalCostUsd,
                        State};
                rowBasicInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBasicInformationRow);
                return rowBasicInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow FindByCostingSheetID(int CostingSheetID) {
                return ((BasicInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BasicInformationDataTable cln = ((BasicInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BasicInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnName = base.Columns["Name"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnTotalLabourHoursCad = base.Columns["TotalLabourHoursCad"];
                this.columnTotalLabourHoursUsd = base.Columns["TotalLabourHoursUsd"];
                this.columnTotalMaterialsCad = base.Columns["TotalMaterialsCad"];
                this.columnTotalMaterialsUsd = base.Columns["TotalMaterialsUsd"];
                this.columnTotalUnitsCad = base.Columns["TotalUnitsCad"];
                this.columnTotalUnitsUsd = base.Columns["TotalUnitsUsd"];
                this.columnTotalOtherCostsCad = base.Columns["TotalOtherCostsCad"];
                this.columnTotalOtherCostsUsd = base.Columns["TotalOtherCostsUsd"];
                this.columnGrantTotalCostCad = base.Columns["GrantTotalCostCad"];
                this.columnGrantTotalCostUsd = base.Columns["GrantTotalCostUsd"];
                this.columnState = base.Columns["State"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnProjectID = new global::System.Data.DataColumn("ProjectID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnTotalLabourHoursCad = new global::System.Data.DataColumn("TotalLabourHoursCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursCad);
                this.columnTotalLabourHoursUsd = new global::System.Data.DataColumn("TotalLabourHoursUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalLabourHoursUsd);
                this.columnTotalMaterialsCad = new global::System.Data.DataColumn("TotalMaterialsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsCad);
                this.columnTotalMaterialsUsd = new global::System.Data.DataColumn("TotalMaterialsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMaterialsUsd);
                this.columnTotalUnitsCad = new global::System.Data.DataColumn("TotalUnitsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsCad);
                this.columnTotalUnitsUsd = new global::System.Data.DataColumn("TotalUnitsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalUnitsUsd);
                this.columnTotalOtherCostsCad = new global::System.Data.DataColumn("TotalOtherCostsCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsCad);
                this.columnTotalOtherCostsUsd = new global::System.Data.DataColumn("TotalOtherCostsUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalOtherCostsUsd);
                this.columnGrantTotalCostCad = new global::System.Data.DataColumn("GrantTotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantTotalCostCad);
                this.columnGrantTotalCostUsd = new global::System.Data.DataColumn("GrantTotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrantTotalCostUsd);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnCostingSheetID.Unique = true;
                this.columnProjectID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 150;
                this.columnStartDate.AllowDBNull = false;
                this.columnEndDate.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow NewBasicInformationRow() {
                return ((BasicInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BasicInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BasicInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BasicInformationRowChanged != null)) {
                    this.BasicInformationRowChanged(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BasicInformationRowChanging != null)) {
                    this.BasicInformationRowChanging(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BasicInformationRowDeleted != null)) {
                    this.BasicInformationRowDeleted(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BasicInformationRowDeleting != null)) {
                    this.BasicInformationRowDeleting(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBasicInformationRow(BasicInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BasicInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnUnitDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationDataTable() {
                this.TableName = "UnitsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDescriptionColumn {
                get {
                    return this.columnUnitDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow this[int index] {
                get {
                    return ((UnitsInformationRow)(this.Rows[index]));
                }
            }
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowChanging;
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowChanged;
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowDeleting;
            
            public event UnitsInformationRowChangeEventHandler UnitsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitsInformationRow(UnitsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow AddUnitsInformationRow(int CostingSheetID, string Work_, int UnitID, int RefID, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, bool InDatabase, string UnitCode, string UnitDescription) {
                UnitsInformationRow rowUnitsInformationRow = ((UnitsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        UnitID,
                        RefID,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        UnitCode,
                        UnitDescription};
                rowUnitsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitsInformationRow);
                return rowUnitsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow FindByRefIDUnitIDWork_CostingSheetID(int RefID, int UnitID, string Work_, int CostingSheetID) {
                return ((UnitsInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            UnitID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitsInformationDataTable cln = ((UnitsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnUnitDescription = base.Columns["UnitDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnUnitDescription = new global::System.Data.DataColumn("UnitDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnUnitID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnUnitID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow NewUnitsInformationRow() {
                return ((UnitsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitsInformationRowChanged != null)) {
                    this.UnitsInformationRowChanged(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitsInformationRowChanging != null)) {
                    this.UnitsInformationRowChanging(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitsInformationRowDeleted != null)) {
                    this.UnitsInformationRowDeleted(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitsInformationRowDeleting != null)) {
                    this.UnitsInformationRowDeleting(this, new UnitsInformationRowChangeEvent(((UnitsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitsInformationRow(UnitsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LabourHoursInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnLHQuantity;
            
            private global::System.Data.DataColumn columnLHUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMealsQuantity;
            
            private global::System.Data.DataColumn columnMotelUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnMotelQuantity;
            
            private global::System.Data.DataColumn columnLHCostCad;
            
            private global::System.Data.DataColumn columnMealsCostCad;
            
            private global::System.Data.DataColumn columnMotelCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnLHCostUsd;
            
            private global::System.Data.DataColumn columnMealsCostUsd;
            
            private global::System.Data.DataColumn columnMotelCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationDataTable() {
                this.TableName = "LabourHoursInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabourHoursInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LabourHoursInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHQuantityColumn {
                get {
                    return this.columnLHQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHUnitOfMeasurementColumn {
                get {
                    return this.columnLHUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsUnitOfMeasurementColumn {
                get {
                    return this.columnMealsUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsQuantityColumn {
                get {
                    return this.columnMealsQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelUnitOfMeasurementColumn {
                get {
                    return this.columnMotelUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelQuantityColumn {
                get {
                    return this.columnMotelQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostCadColumn {
                get {
                    return this.columnLHCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostCadColumn {
                get {
                    return this.columnMealsCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostCadColumn {
                get {
                    return this.columnMotelCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LHCostUsdColumn {
                get {
                    return this.columnLHCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCostUsdColumn {
                get {
                    return this.columnMealsCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MotelCostUsdColumn {
                get {
                    return this.columnMotelCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow this[int index] {
                get {
                    return ((LabourHoursInformationRow)(this.Rows[index]));
                }
            }
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowChanging;
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowChanged;
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowDeleting;
            
            public event LabourHoursInformationRowChangeEventHandler LabourHoursInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLabourHoursInformationRow(LabourHoursInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow AddLabourHoursInformationRow(
                        int CostingSheetID, 
                        string Work_, 
                        int EmployeeID, 
                        int RefID, 
                        double LHQuantity, 
                        string LHUnitOfMeasurement, 
                        string MealsUnitOfMeasurement, 
                        int MealsQuantity, 
                        string MotelUnitOfMeasurement, 
                        int MotelQuantity, 
                        decimal LHCostCad, 
                        decimal MealsCostCad, 
                        decimal MotelCostCad, 
                        decimal TotalCostCad, 
                        decimal LHCostUsd, 
                        decimal MealsCostUsd, 
                        decimal MotelCostUsd, 
                        decimal TotalCostUsd, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        bool InDatabase, 
                        string Name) {
                LabourHoursInformationRow rowLabourHoursInformationRow = ((LabourHoursInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        Work_,
                        EmployeeID,
                        RefID,
                        LHQuantity,
                        LHUnitOfMeasurement,
                        MealsUnitOfMeasurement,
                        MealsQuantity,
                        MotelUnitOfMeasurement,
                        MotelQuantity,
                        LHCostCad,
                        MealsCostCad,
                        MotelCostCad,
                        TotalCostCad,
                        LHCostUsd,
                        MealsCostUsd,
                        MotelCostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Name};
                rowLabourHoursInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLabourHoursInformationRow);
                return rowLabourHoursInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow FindByRefIDEmployeeIDWork_CostingSheetID(int RefID, int EmployeeID, string Work_, int CostingSheetID) {
                return ((LabourHoursInformationRow)(this.Rows.Find(new object[] {
                            RefID,
                            EmployeeID,
                            Work_,
                            CostingSheetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LabourHoursInformationDataTable cln = ((LabourHoursInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LabourHoursInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnLHQuantity = base.Columns["LHQuantity"];
                this.columnLHUnitOfMeasurement = base.Columns["LHUnitOfMeasurement"];
                this.columnMealsUnitOfMeasurement = base.Columns["MealsUnitOfMeasurement"];
                this.columnMealsQuantity = base.Columns["MealsQuantity"];
                this.columnMotelUnitOfMeasurement = base.Columns["MotelUnitOfMeasurement"];
                this.columnMotelQuantity = base.Columns["MotelQuantity"];
                this.columnLHCostCad = base.Columns["LHCostCad"];
                this.columnMealsCostCad = base.Columns["MealsCostCad"];
                this.columnMotelCostCad = base.Columns["MotelCostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnLHCostUsd = base.Columns["LHCostUsd"];
                this.columnMealsCostUsd = base.Columns["MealsCostUsd"];
                this.columnMotelCostUsd = base.Columns["MotelCostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnLHQuantity = new global::System.Data.DataColumn("LHQuantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHQuantity);
                this.columnLHUnitOfMeasurement = new global::System.Data.DataColumn("LHUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHUnitOfMeasurement);
                this.columnMealsUnitOfMeasurement = new global::System.Data.DataColumn("MealsUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsUnitOfMeasurement);
                this.columnMealsQuantity = new global::System.Data.DataColumn("MealsQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsQuantity);
                this.columnMotelUnitOfMeasurement = new global::System.Data.DataColumn("MotelUnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelUnitOfMeasurement);
                this.columnMotelQuantity = new global::System.Data.DataColumn("MotelQuantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelQuantity);
                this.columnLHCostCad = new global::System.Data.DataColumn("LHCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostCad);
                this.columnMealsCostCad = new global::System.Data.DataColumn("MealsCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostCad);
                this.columnMotelCostCad = new global::System.Data.DataColumn("MotelCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnLHCostUsd = new global::System.Data.DataColumn("LHCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLHCostUsd);
                this.columnMealsCostUsd = new global::System.Data.DataColumn("MealsCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCostUsd);
                this.columnMotelCostUsd = new global::System.Data.DataColumn("MotelCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMotelCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnEmployeeID,
                                this.columnWork_,
                                this.columnCostingSheetID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnLHQuantity.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.AllowDBNull = false;
                this.columnLHUnitOfMeasurement.MaxLength = 10;
                this.columnMealsUnitOfMeasurement.MaxLength = 25;
                this.columnMotelUnitOfMeasurement.MaxLength = 25;
                this.columnLHCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnLHCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow NewLabourHoursInformationRow() {
                return ((LabourHoursInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LabourHoursInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LabourHoursInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LabourHoursInformationRowChanged != null)) {
                    this.LabourHoursInformationRowChanged(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LabourHoursInformationRowChanging != null)) {
                    this.LabourHoursInformationRowChanging(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LabourHoursInformationRowDeleted != null)) {
                    this.LabourHoursInformationRowDeleted(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LabourHoursInformationRowDeleting != null)) {
                    this.LabourHoursInformationRowDeleting(this, new LabourHoursInformationRowChangeEvent(((LabourHoursInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLabourHoursInformationRow(LabourHoursInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LabourHoursInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MaterialsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnProcess;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationDataTable() {
                this.TableName = "MaterialsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MaterialsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProcessColumn {
                get {
                    return this.columnProcess;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow this[int index] {
                get {
                    return ((MaterialsInformationRow)(this.Rows[index]));
                }
            }
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowChanging;
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowChanged;
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowDeleting;
            
            public event MaterialsInformationRowChangeEventHandler MaterialsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMaterialsInformationRow(MaterialsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow AddMaterialsInformationRow(int CostingSheetID, int MaterialID, int RefID, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, bool InDatabase, string Process, string Description, string UnitOfMeasurement) {
                MaterialsInformationRow rowMaterialsInformationRow = ((MaterialsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        MaterialID,
                        RefID,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        Process,
                        Description,
                        UnitOfMeasurement};
                rowMaterialsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMaterialsInformationRow);
                return rowMaterialsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow FindByCostingSheetIDMaterialIDRefID(int CostingSheetID, int MaterialID, int RefID) {
                return ((MaterialsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            MaterialID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MaterialsInformationDataTable cln = ((MaterialsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MaterialsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnProcess = base.Columns["Process"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnProcess = new global::System.Data.DataColumn("Process", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProcess);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnMaterialID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnMaterialID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow NewMaterialsInformationRow() {
                return ((MaterialsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MaterialsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MaterialsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MaterialsInformationRowChanged != null)) {
                    this.MaterialsInformationRowChanged(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MaterialsInformationRowChanging != null)) {
                    this.MaterialsInformationRowChanging(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MaterialsInformationRowDeleted != null)) {
                    this.MaterialsInformationRowDeleted(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MaterialsInformationRowDeleting != null)) {
                    this.MaterialsInformationRowDeleting(this, new MaterialsInformationRowChangeEvent(((MaterialsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMaterialsInformationRow(MaterialsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MaterialsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListDataTable() {
                this.TableName = "EmployeeList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRow this[int index] {
                get {
                    return ((EmployeeListRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeListRowChangeEventHandler EmployeeListRowChanging;
            
            public event EmployeeListRowChangeEventHandler EmployeeListRowChanged;
            
            public event EmployeeListRowChangeEventHandler EmployeeListRowDeleting;
            
            public event EmployeeListRowChangeEventHandler EmployeeListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeListRow(EmployeeListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRow AddEmployeeListRow(int EmployeeID, decimal CostCad, decimal CostUsd, string UnitOfMeasurement) {
                EmployeeListRow rowEmployeeListRow = ((EmployeeListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeID,
                        CostCad,
                        CostUsd,
                        UnitOfMeasurement};
                rowEmployeeListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeListRow);
                return rowEmployeeListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeListDataTable cln = ((EmployeeListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRow NewEmployeeListRow() {
                return ((EmployeeListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeListRowChanged != null)) {
                    this.EmployeeListRowChanged(this, new EmployeeListRowChangeEvent(((EmployeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeListRowChanging != null)) {
                    this.EmployeeListRowChanging(this, new EmployeeListRowChangeEvent(((EmployeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeListRowDeleted != null)) {
                    this.EmployeeListRowDeleted(this, new EmployeeListRowChangeEvent(((EmployeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeListRowDeleting != null)) {
                    this.EmployeeListRowDeleting(this, new EmployeeListRowChangeEvent(((EmployeeListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeListRow(EmployeeListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WorkListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnWork_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkListDataTable() {
                this.TableName = "WorkList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected WorkListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkListRow this[int index] {
                get {
                    return ((WorkListRow)(this.Rows[index]));
                }
            }
            
            public event WorkListRowChangeEventHandler WorkListRowChanging;
            
            public event WorkListRowChangeEventHandler WorkListRowChanged;
            
            public event WorkListRowChangeEventHandler WorkListRowDeleting;
            
            public event WorkListRowChangeEventHandler WorkListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddWorkListRow(WorkListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkListRow AddWorkListRow(string Work_) {
                WorkListRow rowWorkListRow = ((WorkListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Work_};
                rowWorkListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWorkListRow);
                return rowWorkListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                WorkListDataTable cln = ((WorkListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WorkListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWork_ = base.Columns["Work_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkListRow NewWorkListRow() {
                return ((WorkListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WorkListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(WorkListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WorkListRowChanged != null)) {
                    this.WorkListRowChanged(this, new WorkListRowChangeEvent(((WorkListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WorkListRowChanging != null)) {
                    this.WorkListRowChanging(this, new WorkListRowChangeEvent(((WorkListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WorkListRowDeleted != null)) {
                    this.WorkListRowDeleted(this, new WorkListRowChangeEvent(((WorkListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WorkListRowDeleting != null)) {
                    this.WorkListRowDeleting(this, new WorkListRowChangeEvent(((WorkListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveWorkListRow(WorkListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WorkListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalLabourHourDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnProjectTime;
            
            private global::System.Data.DataColumn columnWorkingDetails;
            
            private global::System.Data.DataColumn columnMealsCountry;
            
            private global::System.Data.DataColumn columnMealsAllowance;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourDataTable() {
                this.TableName = "OriginalLabourHour";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalLabourHourDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalLabourHourDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectTimeColumn {
                get {
                    return this.columnProjectTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkingDetailsColumn {
                get {
                    return this.columnWorkingDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsCountryColumn {
                get {
                    return this.columnMealsCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MealsAllowanceColumn {
                get {
                    return this.columnMealsAllowance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRow this[int index] {
                get {
                    return ((OriginalLabourHourRow)(this.Rows[index]));
                }
            }
            
            public event OriginalLabourHourRowChangeEventHandler OriginalLabourHourRowChanging;
            
            public event OriginalLabourHourRowChangeEventHandler OriginalLabourHourRowChanged;
            
            public event OriginalLabourHourRowChangeEventHandler OriginalLabourHourRowDeleting;
            
            public event OriginalLabourHourRowChangeEventHandler OriginalLabourHourRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalLabourHourRow(OriginalLabourHourRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRow AddOriginalLabourHourRow(string EmployeeName, System.DateTime Date_, double ProjectTime, string WorkingDetails, long MealsCountry, decimal MealsAllowance, string Work_, string Function_) {
                OriginalLabourHourRow rowOriginalLabourHourRow = ((OriginalLabourHourRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmployeeName,
                        Date_,
                        ProjectTime,
                        WorkingDetails,
                        MealsCountry,
                        MealsAllowance,
                        Work_,
                        Function_};
                rowOriginalLabourHourRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalLabourHourRow);
                return rowOriginalLabourHourRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalLabourHourDataTable cln = ((OriginalLabourHourDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalLabourHourDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnProjectTime = base.Columns["ProjectTime"];
                this.columnWorkingDetails = base.Columns["WorkingDetails"];
                this.columnMealsCountry = base.Columns["MealsCountry"];
                this.columnMealsAllowance = base.Columns["MealsAllowance"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnProjectTime = new global::System.Data.DataColumn("ProjectTime", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectTime);
                this.columnWorkingDetails = new global::System.Data.DataColumn("WorkingDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkingDetails);
                this.columnMealsCountry = new global::System.Data.DataColumn("MealsCountry", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsCountry);
                this.columnMealsAllowance = new global::System.Data.DataColumn("MealsAllowance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMealsAllowance);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnEmployeeID.AutoIncrement = true;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnEmployeeID.ReadOnly = true;
                this.columnEmployeeName.ReadOnly = true;
                this.columnEmployeeName.MaxLength = 101;
                this.columnDate_.AllowDBNull = false;
                this.columnProjectTime.AllowDBNull = false;
                this.columnWorkingDetails.MaxLength = 25;
                this.columnMealsAllowance.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRow NewOriginalLabourHourRow() {
                return ((OriginalLabourHourRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalLabourHourRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalLabourHourRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalLabourHourRowChanged != null)) {
                    this.OriginalLabourHourRowChanged(this, new OriginalLabourHourRowChangeEvent(((OriginalLabourHourRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalLabourHourRowChanging != null)) {
                    this.OriginalLabourHourRowChanging(this, new OriginalLabourHourRowChangeEvent(((OriginalLabourHourRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalLabourHourRowDeleted != null)) {
                    this.OriginalLabourHourRowDeleted(this, new OriginalLabourHourRowChangeEvent(((OriginalLabourHourRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalLabourHourRowDeleting != null)) {
                    this.OriginalLabourHourRowDeleting(this, new OriginalLabourHourRowChangeEvent(((OriginalLabourHourRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalLabourHourRow(OriginalLabourHourRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalLabourHourDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OtherCostsInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCostingSheetID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnTotalCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnTotalCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            private global::System.Data.DataColumn columnWorkFunction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationDataTable() {
                this.TableName = "OtherCostsInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCostsInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OtherCostsInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostingSheetIDColumn {
                get {
                    return this.columnCostingSheetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostCadColumn {
                get {
                    return this.columnTotalCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCostUsdColumn {
                get {
                    return this.columnTotalCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkFunctionColumn {
                get {
                    return this.columnWorkFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow this[int index] {
                get {
                    return ((OtherCostsInformationRow)(this.Rows[index]));
                }
            }
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowChanging;
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowChanged;
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowDeleting;
            
            public event OtherCostsInformationRowChangeEventHandler OtherCostsInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOtherCostsInformationRow(OtherCostsInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow AddOtherCostsInformationRow(int CostingSheetID, int RefID, string Work_, string Function_, string Description, string UnitOfMeasurement, double Quantity, decimal CostCad, decimal TotalCostCad, decimal CostUsd, decimal TotalCostUsd, bool Deleted, int COMPANY_ID, bool InDatabase, string WorkFunction) {
                OtherCostsInformationRow rowOtherCostsInformationRow = ((OtherCostsInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostingSheetID,
                        RefID,
                        Work_,
                        Function_,
                        Description,
                        UnitOfMeasurement,
                        Quantity,
                        CostCad,
                        TotalCostCad,
                        CostUsd,
                        TotalCostUsd,
                        Deleted,
                        COMPANY_ID,
                        InDatabase,
                        WorkFunction};
                rowOtherCostsInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOtherCostsInformationRow);
                return rowOtherCostsInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow FindByCostingSheetIDRefID(int CostingSheetID, int RefID) {
                return ((OtherCostsInformationRow)(this.Rows.Find(new object[] {
                            CostingSheetID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OtherCostsInformationDataTable cln = ((OtherCostsInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OtherCostsInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostingSheetID = base.Columns["CostingSheetID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnDescription = base.Columns["Description"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnTotalCostCad = base.Columns["TotalCostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnTotalCostUsd = base.Columns["TotalCostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInDatabase = base.Columns["InDatabase"];
                this.columnWorkFunction = base.Columns["WorkFunction"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostingSheetID = new global::System.Data.DataColumn("CostingSheetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostingSheetID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnTotalCostCad = new global::System.Data.DataColumn("TotalCostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnTotalCostUsd = new global::System.Data.DataColumn("TotalCostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.columnWorkFunction = new global::System.Data.DataColumn("WorkFunction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkFunction);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostingSheetID,
                                this.columnRefID}, true));
                this.columnCostingSheetID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.MaxLength = 50;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 150;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnQuantity.AllowDBNull = false;
                this.columnCostCad.AllowDBNull = false;
                this.columnTotalCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnTotalCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow NewOtherCostsInformationRow() {
                return ((OtherCostsInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OtherCostsInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OtherCostsInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OtherCostsInformationRowChanged != null)) {
                    this.OtherCostsInformationRowChanged(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OtherCostsInformationRowChanging != null)) {
                    this.OtherCostsInformationRowChanging(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OtherCostsInformationRowDeleted != null)) {
                    this.OtherCostsInformationRowDeleted(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OtherCostsInformationRowDeleting != null)) {
                    this.OtherCostsInformationRowDeleting(this, new OtherCostsInformationRowChangeEvent(((OtherCostsInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOtherCostsInformationRow(OtherCostsInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OtherCostsInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListDataTable() {
                this.TableName = "UnitList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRow this[int index] {
                get {
                    return ((UnitListRow)(this.Rows[index]));
                }
            }
            
            public event UnitListRowChangeEventHandler UnitListRowChanging;
            
            public event UnitListRowChangeEventHandler UnitListRowChanged;
            
            public event UnitListRowChangeEventHandler UnitListRowDeleting;
            
            public event UnitListRowChangeEventHandler UnitListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitListRow(UnitListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRow AddUnitListRow(int UnitID, decimal CostCad, decimal CostUsd, string UnitOfMeasurement, string UnitCode, string Description) {
                UnitListRow rowUnitListRow = ((UnitListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitID,
                        CostCad,
                        CostUsd,
                        UnitOfMeasurement,
                        UnitCode,
                        Description};
                rowUnitListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitListRow);
                return rowUnitListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitListDataTable cln = ((UnitListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnitID.Caption = "EmployeeID";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRow NewUnitListRow() {
                return ((UnitListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitListRowChanged != null)) {
                    this.UnitListRowChanged(this, new UnitListRowChangeEvent(((UnitListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitListRowChanging != null)) {
                    this.UnitListRowChanging(this, new UnitListRowChangeEvent(((UnitListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitListRowDeleted != null)) {
                    this.UnitListRowDeleted(this, new UnitListRowChangeEvent(((UnitListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitListRowDeleting != null)) {
                    this.UnitListRowDeleting(this, new UnitListRowChangeEvent(((UnitListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitListRow(UnitListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalUnitDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnProjectId;
            
            private global::System.Data.DataColumn columnDate_;
            
            private global::System.Data.DataColumn columnTowedUnitID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitDataTable() {
                this.TableName = "OriginalUnit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalUnitDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalUnitDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIdColumn {
                get {
                    return this.columnProjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TowedUnitIDColumn {
                get {
                    return this.columnTowedUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRow this[int index] {
                get {
                    return ((OriginalUnitRow)(this.Rows[index]));
                }
            }
            
            public event OriginalUnitRowChangeEventHandler OriginalUnitRowChanging;
            
            public event OriginalUnitRowChangeEventHandler OriginalUnitRowChanged;
            
            public event OriginalUnitRowChangeEventHandler OriginalUnitRowDeleting;
            
            public event OriginalUnitRowChangeEventHandler OriginalUnitRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalUnitRow(OriginalUnitRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRow AddOriginalUnitRow(string ProjectId, System.DateTime Date_, double TowedUnitID, string Work_, string Function_) {
                OriginalUnitRow rowOriginalUnitRow = ((OriginalUnitRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ProjectId,
                        Date_,
                        TowedUnitID,
                        Work_,
                        Function_};
                rowOriginalUnitRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalUnitRow);
                return rowOriginalUnitRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalUnitDataTable cln = ((OriginalUnitDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalUnitDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnProjectId = base.Columns["ProjectId"];
                this.columnDate_ = base.Columns["Date_"];
                this.columnTowedUnitID = base.Columns["TowedUnitID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnProjectId = new global::System.Data.DataColumn("ProjectId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectId);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
                this.columnTowedUnitID = new global::System.Data.DataColumn("TowedUnitID", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTowedUnitID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnUnitID.AutoIncrement = true;
                this.columnUnitID.ReadOnly = true;
                this.columnUnitID.Caption = "EmployeeID";
                this.columnProjectId.ReadOnly = true;
                this.columnProjectId.Caption = "EmployeeName";
                this.columnProjectId.MaxLength = 101;
                this.columnDate_.AllowDBNull = false;
                this.columnTowedUnitID.Caption = "ProjectTime";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRow NewOriginalUnitRow() {
                return ((OriginalUnitRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalUnitRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalUnitRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalUnitRowChanged != null)) {
                    this.OriginalUnitRowChanged(this, new OriginalUnitRowChangeEvent(((OriginalUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalUnitRowChanging != null)) {
                    this.OriginalUnitRowChanging(this, new OriginalUnitRowChangeEvent(((OriginalUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalUnitRowDeleted != null)) {
                    this.OriginalUnitRowDeleted(this, new OriginalUnitRowChangeEvent(((OriginalUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalUnitRowDeleting != null)) {
                    this.OriginalUnitRowDeleting(this, new OriginalUnitRowChangeEvent(((OriginalUnitRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalUnitRow(OriginalUnitRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalUnitDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MaterialListDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnThickness;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListDataTable() {
                this.TableName = "MaterialList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MaterialListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThicknessColumn {
                get {
                    return this.columnThickness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRow this[int index] {
                get {
                    return ((MaterialListRow)(this.Rows[index]));
                }
            }
            
            public event MaterialListRowChangeEventHandler MaterialListRowChanging;
            
            public event MaterialListRowChangeEventHandler MaterialListRowChanged;
            
            public event MaterialListRowChangeEventHandler MaterialListRowDeleting;
            
            public event MaterialListRowChangeEventHandler MaterialListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMaterialListRow(MaterialListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRow AddMaterialListRow(int MaterialID, string Description, string Size, string Length, string Thickness, string Type, decimal CostCad, decimal CostUsd, string UnitOfMeasurement) {
                MaterialListRow rowMaterialListRow = ((MaterialListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaterialID,
                        Description,
                        Size,
                        Length,
                        Thickness,
                        Type,
                        CostCad,
                        CostUsd,
                        UnitOfMeasurement};
                rowMaterialListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMaterialListRow);
                return rowMaterialListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MaterialListDataTable cln = ((MaterialListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MaterialListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnDescription = base.Columns["Description"];
                this.columnSize = base.Columns["Size"];
                this.columnLength = base.Columns["Length"];
                this.columnThickness = base.Columns["Thickness"];
                this.columnType = base.Columns["Type"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnThickness = new global::System.Data.DataColumn("Thickness", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThickness);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRow NewMaterialListRow() {
                return ((MaterialListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MaterialListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MaterialListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MaterialListRowChanged != null)) {
                    this.MaterialListRowChanged(this, new MaterialListRowChangeEvent(((MaterialListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MaterialListRowChanging != null)) {
                    this.MaterialListRowChanging(this, new MaterialListRowChangeEvent(((MaterialListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MaterialListRowDeleted != null)) {
                    this.MaterialListRowDeleted(this, new MaterialListRowChangeEvent(((MaterialListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MaterialListRowDeleting != null)) {
                    this.MaterialListRowDeleting(this, new MaterialListRowChangeEvent(((MaterialListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMaterialListRow(MaterialListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MaterialListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OriginalMaterialDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConfirmedSize;
            
            private global::System.Data.DataColumn columnSteelTapeLength;
            
            private global::System.Data.DataColumn columnLinerSize;
            
            private global::System.Data.DataColumn columnLinerInstalled;
            
            private global::System.Data.DataColumn columnCOInstalled;
            
            private global::System.Data.DataColumn columnBackfilledSoil;
            
            private global::System.Data.DataColumn columnBackfilledConcrete;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnTickness;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialDataTable() {
                this.TableName = "OriginalMaterial";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalMaterialDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OriginalMaterialDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedSizeColumn {
                get {
                    return this.columnConfirmedSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SteelTapeLengthColumn {
                get {
                    return this.columnSteelTapeLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerSizeColumn {
                get {
                    return this.columnLinerSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInstalledColumn {
                get {
                    return this.columnLinerInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COInstalledColumn {
                get {
                    return this.columnCOInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledSoilColumn {
                get {
                    return this.columnBackfilledSoil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackfilledConcreteColumn {
                get {
                    return this.columnBackfilledConcrete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TicknessColumn {
                get {
                    return this.columnTickness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRow this[int index] {
                get {
                    return ((OriginalMaterialRow)(this.Rows[index]));
                }
            }
            
            public event OriginalMaterialRowChangeEventHandler OriginalMaterialRowChanging;
            
            public event OriginalMaterialRowChangeEventHandler OriginalMaterialRowChanged;
            
            public event OriginalMaterialRowChangeEventHandler OriginalMaterialRowDeleting;
            
            public event OriginalMaterialRowChangeEventHandler OriginalMaterialRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOriginalMaterialRow(OriginalMaterialRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRow AddOriginalMaterialRow(string ConfirmedSize, string SteelTapeLength, string LinerSize, System.DateTime LinerInstalled, System.DateTime COInstalled, System.DateTime BackfilledSoil, System.DateTime BackfilledConcrete, string Size, string Length, string Tickness) {
                OriginalMaterialRow rowOriginalMaterialRow = ((OriginalMaterialRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConfirmedSize,
                        SteelTapeLength,
                        LinerSize,
                        LinerInstalled,
                        COInstalled,
                        BackfilledSoil,
                        BackfilledConcrete,
                        Size,
                        Length,
                        Tickness};
                rowOriginalMaterialRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOriginalMaterialRow);
                return rowOriginalMaterialRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OriginalMaterialDataTable cln = ((OriginalMaterialDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OriginalMaterialDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConfirmedSize = base.Columns["ConfirmedSize"];
                this.columnSteelTapeLength = base.Columns["SteelTapeLength"];
                this.columnLinerSize = base.Columns["LinerSize"];
                this.columnLinerInstalled = base.Columns["LinerInstalled"];
                this.columnCOInstalled = base.Columns["COInstalled"];
                this.columnBackfilledSoil = base.Columns["BackfilledSoil"];
                this.columnBackfilledConcrete = base.Columns["BackfilledConcrete"];
                this.columnSize = base.Columns["Size"];
                this.columnLength = base.Columns["Length"];
                this.columnTickness = base.Columns["Tickness"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConfirmedSize = new global::System.Data.DataColumn("ConfirmedSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmedSize);
                this.columnSteelTapeLength = new global::System.Data.DataColumn("SteelTapeLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSteelTapeLength);
                this.columnLinerSize = new global::System.Data.DataColumn("LinerSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerSize);
                this.columnLinerInstalled = new global::System.Data.DataColumn("LinerInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInstalled);
                this.columnCOInstalled = new global::System.Data.DataColumn("COInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOInstalled);
                this.columnBackfilledSoil = new global::System.Data.DataColumn("BackfilledSoil", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledSoil);
                this.columnBackfilledConcrete = new global::System.Data.DataColumn("BackfilledConcrete", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackfilledConcrete);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnTickness = new global::System.Data.DataColumn("Tickness", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTickness);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRow NewOriginalMaterialRow() {
                return ((OriginalMaterialRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OriginalMaterialRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OriginalMaterialRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OriginalMaterialRowChanged != null)) {
                    this.OriginalMaterialRowChanged(this, new OriginalMaterialRowChangeEvent(((OriginalMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OriginalMaterialRowChanging != null)) {
                    this.OriginalMaterialRowChanging(this, new OriginalMaterialRowChangeEvent(((OriginalMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OriginalMaterialRowDeleted != null)) {
                    this.OriginalMaterialRowDeleted(this, new OriginalMaterialRowChangeEvent(((OriginalMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OriginalMaterialRowDeleting != null)) {
                    this.OriginalMaterialRowDeleting(this, new OriginalMaterialRowChangeEvent(((OriginalMaterialRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOriginalMaterialRow(OriginalMaterialRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OriginalMaterialDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeePayPeriodDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnDate_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodDataTable() {
                this.TableName = "EmployeePayPeriod";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeePayPeriodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeePayPeriodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRow this[int index] {
                get {
                    return ((EmployeePayPeriodRow)(this.Rows[index]));
                }
            }
            
            public event EmployeePayPeriodRowChangeEventHandler EmployeePayPeriodRowChanging;
            
            public event EmployeePayPeriodRowChangeEventHandler EmployeePayPeriodRowChanged;
            
            public event EmployeePayPeriodRowChangeEventHandler EmployeePayPeriodRowDeleting;
            
            public event EmployeePayPeriodRowChangeEventHandler EmployeePayPeriodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeePayPeriodRow(EmployeePayPeriodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRow AddEmployeePayPeriodRow(int EmployeeID, System.DateTime Date_) {
                EmployeePayPeriodRow rowEmployeePayPeriodRow = ((EmployeePayPeriodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeID,
                        Date_};
                rowEmployeePayPeriodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeePayPeriodRow);
                return rowEmployeePayPeriodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeePayPeriodDataTable cln = ((EmployeePayPeriodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeePayPeriodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnDate_ = base.Columns["Date_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRow NewEmployeePayPeriodRow() {
                return ((EmployeePayPeriodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeePayPeriodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeePayPeriodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeePayPeriodRowChanged != null)) {
                    this.EmployeePayPeriodRowChanged(this, new EmployeePayPeriodRowChangeEvent(((EmployeePayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeePayPeriodRowChanging != null)) {
                    this.EmployeePayPeriodRowChanging(this, new EmployeePayPeriodRowChangeEvent(((EmployeePayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeePayPeriodRowDeleted != null)) {
                    this.EmployeePayPeriodRowDeleted(this, new EmployeePayPeriodRowChangeEvent(((EmployeePayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeePayPeriodRowDeleting != null)) {
                    this.EmployeePayPeriodRowDeleting(this, new EmployeePayPeriodRowChangeEvent(((EmployeePayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeePayPeriodRow(EmployeePayPeriodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeePayPeriodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitPayPeriodDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnDate_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodDataTable() {
                this.TableName = "UnitPayPeriod";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitPayPeriodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitPayPeriodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRow this[int index] {
                get {
                    return ((UnitPayPeriodRow)(this.Rows[index]));
                }
            }
            
            public event UnitPayPeriodRowChangeEventHandler UnitPayPeriodRowChanging;
            
            public event UnitPayPeriodRowChangeEventHandler UnitPayPeriodRowChanged;
            
            public event UnitPayPeriodRowChangeEventHandler UnitPayPeriodRowDeleting;
            
            public event UnitPayPeriodRowChangeEventHandler UnitPayPeriodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitPayPeriodRow(UnitPayPeriodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRow AddUnitPayPeriodRow(int UnitID, System.DateTime Date_) {
                UnitPayPeriodRow rowUnitPayPeriodRow = ((UnitPayPeriodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitID,
                        Date_};
                rowUnitPayPeriodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitPayPeriodRow);
                return rowUnitPayPeriodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitPayPeriodDataTable cln = ((UnitPayPeriodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitPayPeriodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnDate_ = base.Columns["Date_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRow NewUnitPayPeriodRow() {
                return ((UnitPayPeriodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitPayPeriodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitPayPeriodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitPayPeriodRowChanged != null)) {
                    this.UnitPayPeriodRowChanged(this, new UnitPayPeriodRowChangeEvent(((UnitPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitPayPeriodRowChanging != null)) {
                    this.UnitPayPeriodRowChanging(this, new UnitPayPeriodRowChangeEvent(((UnitPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitPayPeriodRowDeleted != null)) {
                    this.UnitPayPeriodRowDeleted(this, new UnitPayPeriodRowChangeEvent(((UnitPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitPayPeriodRowDeleting != null)) {
                    this.UnitPayPeriodRowDeleting(this, new UnitPayPeriodRowChangeEvent(((UnitPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitPayPeriodRow(UnitPayPeriodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitPayPeriodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MaterialPayPeriodDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnDate_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodDataTable() {
                this.TableName = "MaterialPayPeriod";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialPayPeriodDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MaterialPayPeriodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_Column {
                get {
                    return this.columnDate_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRow this[int index] {
                get {
                    return ((MaterialPayPeriodRow)(this.Rows[index]));
                }
            }
            
            public event MaterialPayPeriodRowChangeEventHandler MaterialPayPeriodRowChanging;
            
            public event MaterialPayPeriodRowChangeEventHandler MaterialPayPeriodRowChanged;
            
            public event MaterialPayPeriodRowChangeEventHandler MaterialPayPeriodRowDeleting;
            
            public event MaterialPayPeriodRowChangeEventHandler MaterialPayPeriodRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMaterialPayPeriodRow(MaterialPayPeriodRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRow AddMaterialPayPeriodRow(int MaterialID, System.DateTime Date_) {
                MaterialPayPeriodRow rowMaterialPayPeriodRow = ((MaterialPayPeriodRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaterialID,
                        Date_};
                rowMaterialPayPeriodRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMaterialPayPeriodRow);
                return rowMaterialPayPeriodRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MaterialPayPeriodDataTable cln = ((MaterialPayPeriodDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MaterialPayPeriodDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnDate_ = base.Columns["Date_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnDate_ = new global::System.Data.DataColumn("Date_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRow NewMaterialPayPeriodRow() {
                return ((MaterialPayPeriodRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MaterialPayPeriodRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MaterialPayPeriodRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MaterialPayPeriodRowChanged != null)) {
                    this.MaterialPayPeriodRowChanged(this, new MaterialPayPeriodRowChangeEvent(((MaterialPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MaterialPayPeriodRowChanging != null)) {
                    this.MaterialPayPeriodRowChanging(this, new MaterialPayPeriodRowChangeEvent(((MaterialPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MaterialPayPeriodRowDeleted != null)) {
                    this.MaterialPayPeriodRowDeleted(this, new MaterialPayPeriodRowChangeEvent(((MaterialPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MaterialPayPeriodRowDeleting != null)) {
                    this.MaterialPayPeriodRowDeleting(this, new MaterialPayPeriodRowChangeEvent(((MaterialPayPeriodRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMaterialPayPeriodRow(MaterialPayPeriodRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectCostingSheetAddTDS ds = new ProjectCostingSheetAddTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MaterialPayPeriodDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BasicInformationRow : global::System.Data.DataRow {
            
            private BasicInformationDataTable tableBasicInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBasicInformation = ((BasicInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableBasicInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableBasicInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableBasicInformation.ProjectIDColumn]));
                }
                set {
                    this[this.tableBasicInformation.ProjectIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableBasicInformation.NameColumn]));
                }
                set {
                    this[this.tableBasicInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableBasicInformation.StartDateColumn]));
                }
                set {
                    this[this.tableBasicInformation.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    return ((global::System.DateTime)(this[this.tableBasicInformation.EndDateColumn]));
                }
                set {
                    this[this.tableBasicInformation.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableBasicInformation.DeletedColumn]));
                }
                set {
                    this[this.tableBasicInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableBasicInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableBasicInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalLabourHoursCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalLabourHoursCad\' in table \'BasicInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalLabourHoursCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalLabourHoursUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalLabourHoursUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalLabourHoursUsd\' in table \'BasicInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalLabourHoursUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalMaterialsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMaterialsCad\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalMaterialsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalMaterialsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalMaterialsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMaterialsUsd\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalMaterialsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalUnitsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUnitsCad\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalUnitsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalUnitsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalUnitsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalUnitsUsd\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalUnitsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalOtherCostsCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalOtherCostsCad\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalOtherCostsCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalOtherCostsUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.TotalOtherCostsUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalOtherCostsUsd\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TotalOtherCostsUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrantTotalCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrantTotalCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrantTotalCostCad\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrantTotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GrantTotalCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.GrantTotalCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrantTotalCostUsd\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.GrantTotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalLabourHoursCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalLabourHoursCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalLabourHoursCadNull() {
                this[this.tableBasicInformation.TotalLabourHoursCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalLabourHoursUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalLabourHoursUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalLabourHoursUsdNull() {
                this[this.tableBasicInformation.TotalLabourHoursUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMaterialsCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalMaterialsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMaterialsCadNull() {
                this[this.tableBasicInformation.TotalMaterialsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMaterialsUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalMaterialsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMaterialsUsdNull() {
                this[this.tableBasicInformation.TotalMaterialsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUnitsCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalUnitsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUnitsCadNull() {
                this[this.tableBasicInformation.TotalUnitsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalUnitsUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalUnitsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalUnitsUsdNull() {
                this[this.tableBasicInformation.TotalUnitsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOtherCostsCadNull() {
                return this.IsNull(this.tableBasicInformation.TotalOtherCostsCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOtherCostsCadNull() {
                this[this.tableBasicInformation.TotalOtherCostsCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalOtherCostsUsdNull() {
                return this.IsNull(this.tableBasicInformation.TotalOtherCostsUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalOtherCostsUsdNull() {
                this[this.tableBasicInformation.TotalOtherCostsUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantTotalCostCadNull() {
                return this.IsNull(this.tableBasicInformation.GrantTotalCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantTotalCostCadNull() {
                this[this.tableBasicInformation.GrantTotalCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrantTotalCostUsdNull() {
                return this.IsNull(this.tableBasicInformation.GrantTotalCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrantTotalCostUsdNull() {
                this[this.tableBasicInformation.GrantTotalCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableBasicInformation.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableBasicInformation.StateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitsInformationRow : global::System.Data.DataRow {
            
            private UnitsInformationDataTable tableUnitsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitsInformation = ((UnitsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableUnitsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableUnitsInformation.Work_Column]));
                }
                set {
                    this[this.tableUnitsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableUnitsInformation.UnitIDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableUnitsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableUnitsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableUnitsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableUnitsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableUnitsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableUnitsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableUnitsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableUnitsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableUnitsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableUnitsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableUnitsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableUnitsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableUnitsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableUnitsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitDescription {
                get {
                    try {
                        return ((string)(this[this.tableUnitsInformation.UnitDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitDescription\' in table \'UnitsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsInformation.UnitDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableUnitsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableUnitsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableUnitsInformation.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableUnitsInformation.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitDescriptionNull() {
                return this.IsNull(this.tableUnitsInformation.UnitDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitDescriptionNull() {
                this[this.tableUnitsInformation.UnitDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LabourHoursInformationRow : global::System.Data.DataRow {
            
            private LabourHoursInformationDataTable tableLabourHoursInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LabourHoursInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLabourHoursInformation = ((LabourHoursInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLabourHoursInformation.Work_Column]));
                }
                set {
                    this[this.tableLabourHoursInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.EmployeeIDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.RefIDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LHQuantity {
                get {
                    return ((double)(this[this.tableLabourHoursInformation.LHQuantityColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LHUnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLabourHoursInformation.LHUnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MealsUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsUnitOfMeasurement\' in table \'LabourHoursInformation\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MealsQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLabourHoursInformation.MealsQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsQuantity\' in table \'LabourHoursInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MotelUnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelUnitOfMeasurement\' in table \'LabourHoursInformation\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MotelQuantity {
                get {
                    try {
                        return ((int)(this[this.tableLabourHoursInformation.MotelQuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelQuantity\' in table \'LabourHoursInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelQuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostCad {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.LHCostCadColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MealsCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostCad\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MotelCostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostCad\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LHCostUsd {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.LHCostUsdColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.LHCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MealsCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCostUsd\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MealsCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MotelCostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableLabourHoursInformation.MotelCostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MotelCostUsd\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.MotelCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableLabourHoursInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLabourHoursInformation.DeletedColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLabourHoursInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLabourHoursInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableLabourHoursInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLabourHoursInformation.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'LabourHoursInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLabourHoursInformation.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsUnitOfMeasurementNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsUnitOfMeasurementNull() {
                this[this.tableLabourHoursInformation.MealsUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsQuantityNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsQuantityNull() {
                this[this.tableLabourHoursInformation.MealsQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelUnitOfMeasurementNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelUnitOfMeasurementNull() {
                this[this.tableLabourHoursInformation.MotelUnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelQuantityNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelQuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelQuantityNull() {
                this[this.tableLabourHoursInformation.MotelQuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostCadNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostCadNull() {
                this[this.tableLabourHoursInformation.MealsCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostCadNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelCostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostCadNull() {
                this[this.tableLabourHoursInformation.MotelCostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCostUsdNull() {
                return this.IsNull(this.tableLabourHoursInformation.MealsCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCostUsdNull() {
                this[this.tableLabourHoursInformation.MealsCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMotelCostUsdNull() {
                return this.IsNull(this.tableLabourHoursInformation.MotelCostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMotelCostUsdNull() {
                this[this.tableLabourHoursInformation.MotelCostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableLabourHoursInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableLabourHoursInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLabourHoursInformation.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLabourHoursInformation.NameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MaterialsInformationRow : global::System.Data.DataRow {
            
            private MaterialsInformationDataTable tableMaterialsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaterialsInformation = ((MaterialsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.MaterialIDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableMaterialsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableMaterialsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableMaterialsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableMaterialsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableMaterialsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableMaterialsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Process {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.ProcessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Process\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.ProcessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'MaterialsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableMaterialsInformation.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'MaterialsInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMaterialsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableMaterialsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableMaterialsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProcessNull() {
                return this.IsNull(this.tableMaterialsInformation.ProcessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProcessNull() {
                this[this.tableMaterialsInformation.ProcessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableMaterialsInformation.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableMaterialsInformation.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableMaterialsInformation.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableMaterialsInformation.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeListRow : global::System.Data.DataRow {
            
            private EmployeeListDataTable tableEmployeeList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeList = ((EmployeeListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    try {
                        return ((int)(this[this.tableEmployeeList.EmployeeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeID\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.CostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCad\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableEmployeeList.CostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostUsd\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeList.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'EmployeeList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeList.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIDNull() {
                return this.IsNull(this.tableEmployeeList.EmployeeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIDNull() {
                this[this.tableEmployeeList.EmployeeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCadNull() {
                return this.IsNull(this.tableEmployeeList.CostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCadNull() {
                this[this.tableEmployeeList.CostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostUsdNull() {
                return this.IsNull(this.tableEmployeeList.CostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostUsdNull() {
                this[this.tableEmployeeList.CostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableEmployeeList.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableEmployeeList.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class WorkListRow : global::System.Data.DataRow {
            
            private WorkListDataTable tableWorkList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal WorkListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWorkList = ((WorkListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableWorkList.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'WorkList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWorkList.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableWorkList.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableWorkList.Work_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalLabourHourRow : global::System.Data.DataRow {
            
            private OriginalLabourHourDataTable tableOriginalLabourHour;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalLabourHourRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalLabourHour = ((OriginalLabourHourDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableOriginalLabourHour.EmployeeIDColumn]));
                }
                set {
                    this[this.tableOriginalLabourHour.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginalLabourHour.Date_Column]));
                }
                set {
                    this[this.tableOriginalLabourHour.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ProjectTime {
                get {
                    return ((double)(this[this.tableOriginalLabourHour.ProjectTimeColumn]));
                }
                set {
                    this[this.tableOriginalLabourHour.ProjectTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkingDetails {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.WorkingDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkingDetails\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.WorkingDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MealsCountry {
                get {
                    try {
                        return ((long)(this[this.tableOriginalLabourHour.MealsCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MealsCountry\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.MealsCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MealsAllowance {
                get {
                    return ((decimal)(this[this.tableOriginalLabourHour.MealsAllowanceColumn]));
                }
                set {
                    this[this.tableOriginalLabourHour.MealsAllowanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginalLabourHour.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'OriginalLabourHour\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalLabourHour.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableOriginalLabourHour.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableOriginalLabourHour.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkingDetailsNull() {
                return this.IsNull(this.tableOriginalLabourHour.WorkingDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkingDetailsNull() {
                this[this.tableOriginalLabourHour.WorkingDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMealsCountryNull() {
                return this.IsNull(this.tableOriginalLabourHour.MealsCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMealsCountryNull() {
                this[this.tableOriginalLabourHour.MealsCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableOriginalLabourHour.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableOriginalLabourHour.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableOriginalLabourHour.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableOriginalLabourHour.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OtherCostsInformationRow : global::System.Data.DataRow {
            
            private OtherCostsInformationDataTable tableOtherCostsInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OtherCostsInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOtherCostsInformation = ((OtherCostsInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostingSheetID {
                get {
                    return ((int)(this[this.tableOtherCostsInformation.CostingSheetIDColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.CostingSheetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableOtherCostsInformation.RefIDColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableOtherCostsInformation.DescriptionColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableOtherCostsInformation.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Quantity {
                get {
                    return ((double)(this[this.tableOtherCostsInformation.QuantityColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.CostCadColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostCad {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.TotalCostCadColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.TotalCostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.CostUsdColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalCostUsd {
                get {
                    return ((decimal)(this[this.tableOtherCostsInformation.TotalCostUsdColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.TotalCostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableOtherCostsInformation.DeletedColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableOtherCostsInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableOtherCostsInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableOtherCostsInformation.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkFunction {
                get {
                    try {
                        return ((string)(this[this.tableOtherCostsInformation.WorkFunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkFunction\' in table \'OtherCostsInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOtherCostsInformation.WorkFunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableOtherCostsInformation.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableOtherCostsInformation.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableOtherCostsInformation.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableOtherCostsInformation.Function_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableOtherCostsInformation.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableOtherCostsInformation.InDatabaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkFunctionNull() {
                return this.IsNull(this.tableOtherCostsInformation.WorkFunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkFunctionNull() {
                this[this.tableOtherCostsInformation.WorkFunctionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitListRow : global::System.Data.DataRow {
            
            private UnitListDataTable tableUnitList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitList = ((UnitListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableUnitList.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitList.CostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCad\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableUnitList.CostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostUsd\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableUnitList.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableUnitList.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableUnitList.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'UnitList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitList.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableUnitList.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableUnitList.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCadNull() {
                return this.IsNull(this.tableUnitList.CostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCadNull() {
                this[this.tableUnitList.CostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostUsdNull() {
                return this.IsNull(this.tableUnitList.CostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostUsdNull() {
                this[this.tableUnitList.CostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableUnitList.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableUnitList.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableUnitList.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableUnitList.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableUnitList.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableUnitList.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalUnitRow : global::System.Data.DataRow {
            
            private OriginalUnitDataTable tableOriginalUnit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalUnitRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalUnit = ((OriginalUnitDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableOriginalUnit.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectId {
                get {
                    try {
                        return ((string)(this[this.tableOriginalUnit.ProjectIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProjectId\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.ProjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    return ((global::System.DateTime)(this[this.tableOriginalUnit.Date_Column]));
                }
                set {
                    this[this.tableOriginalUnit.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TowedUnitID {
                get {
                    try {
                        return ((double)(this[this.tableOriginalUnit.TowedUnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TowedUnitID\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.TowedUnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginalUnit.Work_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Work_\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    try {
                        return ((string)(this[this.tableOriginalUnit.Function_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function_\' in table \'OriginalUnit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalUnit.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableOriginalUnit.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableOriginalUnit.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProjectIdNull() {
                return this.IsNull(this.tableOriginalUnit.ProjectIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProjectIdNull() {
                this[this.tableOriginalUnit.ProjectIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTowedUnitIDNull() {
                return this.IsNull(this.tableOriginalUnit.TowedUnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTowedUnitIDNull() {
                this[this.tableOriginalUnit.TowedUnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWork_Null() {
                return this.IsNull(this.tableOriginalUnit.Work_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWork_Null() {
                this[this.tableOriginalUnit.Work_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunction_Null() {
                return this.IsNull(this.tableOriginalUnit.Function_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunction_Null() {
                this[this.tableOriginalUnit.Function_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MaterialListRow : global::System.Data.DataRow {
            
            private MaterialListDataTable tableMaterialList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaterialList = ((MaterialListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableMaterialList.MaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thickness {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.ThicknessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thickness\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.ThicknessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    try {
                        return ((decimal)(this[this.tableMaterialList.CostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCad\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    try {
                        return ((decimal)(this[this.tableMaterialList.CostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostUsd\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    try {
                        return ((string)(this[this.tableMaterialList.UnitOfMeasurementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOfMeasurement\' in table \'MaterialList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialList.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableMaterialList.MaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableMaterialList.MaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableMaterialList.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableMaterialList.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableMaterialList.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableMaterialList.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableMaterialList.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableMaterialList.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThicknessNull() {
                return this.IsNull(this.tableMaterialList.ThicknessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThicknessNull() {
                this[this.tableMaterialList.ThicknessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableMaterialList.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableMaterialList.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCadNull() {
                return this.IsNull(this.tableMaterialList.CostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCadNull() {
                this[this.tableMaterialList.CostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostUsdNull() {
                return this.IsNull(this.tableMaterialList.CostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostUsdNull() {
                this[this.tableMaterialList.CostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOfMeasurementNull() {
                return this.IsNull(this.tableMaterialList.UnitOfMeasurementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOfMeasurementNull() {
                this[this.tableMaterialList.UnitOfMeasurementColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OriginalMaterialRow : global::System.Data.DataRow {
            
            private OriginalMaterialDataTable tableOriginalMaterial;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OriginalMaterialRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOriginalMaterial = ((OriginalMaterialDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmedSize {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.ConfirmedSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfirmedSize\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.ConfirmedSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SteelTapeLength {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.SteelTapeLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SteelTapeLength\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.SteelTapeLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LinerSize {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.LinerSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerSize\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.LinerSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LinerInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalMaterial.LinerInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInstalled\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.LinerInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime COInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalMaterial.COInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COInstalled\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.COInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledSoil {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalMaterial.BackfilledSoilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledSoil\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.BackfilledSoilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime BackfilledConcrete {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableOriginalMaterial.BackfilledConcreteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BackfilledConcrete\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.BackfilledConcreteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tickness {
                get {
                    try {
                        return ((string)(this[this.tableOriginalMaterial.TicknessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tickness\' in table \'OriginalMaterial\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOriginalMaterial.TicknessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedSizeNull() {
                return this.IsNull(this.tableOriginalMaterial.ConfirmedSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedSizeNull() {
                this[this.tableOriginalMaterial.ConfirmedSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSteelTapeLengthNull() {
                return this.IsNull(this.tableOriginalMaterial.SteelTapeLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSteelTapeLengthNull() {
                this[this.tableOriginalMaterial.SteelTapeLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerSizeNull() {
                return this.IsNull(this.tableOriginalMaterial.LinerSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerSizeNull() {
                this[this.tableOriginalMaterial.LinerSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInstalledNull() {
                return this.IsNull(this.tableOriginalMaterial.LinerInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInstalledNull() {
                this[this.tableOriginalMaterial.LinerInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOInstalledNull() {
                return this.IsNull(this.tableOriginalMaterial.COInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOInstalledNull() {
                this[this.tableOriginalMaterial.COInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledSoilNull() {
                return this.IsNull(this.tableOriginalMaterial.BackfilledSoilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledSoilNull() {
                this[this.tableOriginalMaterial.BackfilledSoilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBackfilledConcreteNull() {
                return this.IsNull(this.tableOriginalMaterial.BackfilledConcreteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBackfilledConcreteNull() {
                this[this.tableOriginalMaterial.BackfilledConcreteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableOriginalMaterial.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableOriginalMaterial.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableOriginalMaterial.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableOriginalMaterial.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTicknessNull() {
                return this.IsNull(this.tableOriginalMaterial.TicknessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTicknessNull() {
                this[this.tableOriginalMaterial.TicknessColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeePayPeriodRow : global::System.Data.DataRow {
            
            private EmployeePayPeriodDataTable tableEmployeePayPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeePayPeriodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeePayPeriod = ((EmployeePayPeriodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    try {
                        return ((int)(this[this.tableEmployeePayPeriod.EmployeeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeID\' in table \'EmployeePayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeePayPeriod.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEmployeePayPeriod.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'EmployeePayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeePayPeriod.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIDNull() {
                return this.IsNull(this.tableEmployeePayPeriod.EmployeeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIDNull() {
                this[this.tableEmployeePayPeriod.EmployeeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tableEmployeePayPeriod.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tableEmployeePayPeriod.Date_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitPayPeriodRow : global::System.Data.DataRow {
            
            private UnitPayPeriodDataTable tableUnitPayPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitPayPeriodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitPayPeriod = ((UnitPayPeriodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableUnitPayPeriod.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'UnitPayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitPayPeriod.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitPayPeriod.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'UnitPayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitPayPeriod.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableUnitPayPeriod.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableUnitPayPeriod.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tableUnitPayPeriod.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tableUnitPayPeriod.Date_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MaterialPayPeriodRow : global::System.Data.DataRow {
            
            private MaterialPayPeriodDataTable tableMaterialPayPeriod;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MaterialPayPeriodRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMaterialPayPeriod = ((MaterialPayPeriodDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    try {
                        return ((int)(this[this.tableMaterialPayPeriod.MaterialIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaterialID\' in table \'MaterialPayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialPayPeriod.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMaterialPayPeriod.Date_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_\' in table \'MaterialPayPeriod\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMaterialPayPeriod.Date_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaterialIDNull() {
                return this.IsNull(this.tableMaterialPayPeriod.MaterialIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaterialIDNull() {
                this[this.tableMaterialPayPeriod.MaterialIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_Null() {
                return this.IsNull(this.tableMaterialPayPeriod.Date_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_Null() {
                this[this.tableMaterialPayPeriod.Date_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BasicInformationRowChangeEvent : global::System.EventArgs {
            
            private BasicInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRowChangeEvent(BasicInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitsInformationRowChangeEvent : global::System.EventArgs {
            
            private UnitsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRowChangeEvent(UnitsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LabourHoursInformationRowChangeEvent : global::System.EventArgs {
            
            private LabourHoursInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRowChangeEvent(LabourHoursInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LabourHoursInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MaterialsInformationRowChangeEvent : global::System.EventArgs {
            
            private MaterialsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRowChangeEvent(MaterialsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeListRowChangeEvent : global::System.EventArgs {
            
            private EmployeeListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRowChangeEvent(EmployeeListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class WorkListRowChangeEvent : global::System.EventArgs {
            
            private WorkListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkListRowChangeEvent(WorkListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public WorkListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalLabourHourRowChangeEvent : global::System.EventArgs {
            
            private OriginalLabourHourRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRowChangeEvent(OriginalLabourHourRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalLabourHourRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OtherCostsInformationRowChangeEvent : global::System.EventArgs {
            
            private OtherCostsInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRowChangeEvent(OtherCostsInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OtherCostsInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitListRowChangeEvent : global::System.EventArgs {
            
            private UnitListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRowChangeEvent(UnitListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalUnitRowChangeEvent : global::System.EventArgs {
            
            private OriginalUnitRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRowChangeEvent(OriginalUnitRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalUnitRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MaterialListRowChangeEvent : global::System.EventArgs {
            
            private MaterialListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRowChangeEvent(MaterialListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OriginalMaterialRowChangeEvent : global::System.EventArgs {
            
            private OriginalMaterialRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRowChangeEvent(OriginalMaterialRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OriginalMaterialRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeePayPeriodRowChangeEvent : global::System.EventArgs {
            
            private EmployeePayPeriodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRowChangeEvent(EmployeePayPeriodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeePayPeriodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitPayPeriodRowChangeEvent : global::System.EventArgs {
            
            private UnitPayPeriodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRowChangeEvent(UnitPayPeriodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitPayPeriodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MaterialPayPeriodRowChangeEvent : global::System.EventArgs {
            
            private MaterialPayPeriodRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRowChangeEvent(MaterialPayPeriodRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MaterialPayPeriodRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591