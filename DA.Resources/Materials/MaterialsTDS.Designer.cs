//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Resources.Materials {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MaterialsTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MaterialsTDS : global::System.Data.DataSet {
        
        private LFS_RESOURCES_MATERIALDataTable tableLFS_RESOURCES_MATERIAL;
        
        private LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS;
        
        private LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable tableLFS_RESOURCES_MATERIAL_COST_HISTORY;
        
        private LFS_RESOURCES_MATERIAL_NOTESDataTable tableLFS_RESOURCES_MATERIAL_NOTES;
        
        private global::System.Data.DataRelation relationFK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HISTORY;
        
        private global::System.Data.DataRelation relationFK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY;
        
        private global::System.Data.DataRelation relationFK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MaterialsTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MaterialsTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_RESOURCES_MATERIAL"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_MATERIALDataTable(ds.Tables["LFS_RESOURCES_MATERIAL"]));
                }
                if ((ds.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable(ds.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS"]));
                }
                if ((ds.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable(ds.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY"]));
                }
                if ((ds.Tables["LFS_RESOURCES_MATERIAL_NOTES"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_MATERIAL_NOTESDataTable(ds.Tables["LFS_RESOURCES_MATERIAL_NOTES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_RESOURCES_MATERIALDataTable LFS_RESOURCES_MATERIAL {
            get {
                return this.tableLFS_RESOURCES_MATERIAL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS {
            get {
                return this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable LFS_RESOURCES_MATERIAL_COST_HISTORY {
            get {
                return this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_RESOURCES_MATERIAL_NOTESDataTable LFS_RESOURCES_MATERIAL_NOTES {
            get {
                return this.tableLFS_RESOURCES_MATERIAL_NOTES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MaterialsTDS cln = ((MaterialsTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_RESOURCES_MATERIAL"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_MATERIALDataTable(ds.Tables["LFS_RESOURCES_MATERIAL"]));
                }
                if ((ds.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable(ds.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS"]));
                }
                if ((ds.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable(ds.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY"]));
                }
                if ((ds.Tables["LFS_RESOURCES_MATERIAL_NOTES"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_MATERIAL_NOTESDataTable(ds.Tables["LFS_RESOURCES_MATERIAL_NOTES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_RESOURCES_MATERIAL = ((LFS_RESOURCES_MATERIALDataTable)(base.Tables["LFS_RESOURCES_MATERIAL"]));
            if ((initTable == true)) {
                if ((this.tableLFS_RESOURCES_MATERIAL != null)) {
                    this.tableLFS_RESOURCES_MATERIAL.InitVars();
                }
            }
            this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS = ((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable)(base.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS"]));
            if ((initTable == true)) {
                if ((this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS != null)) {
                    this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.InitVars();
                }
            }
            this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY = ((LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable)(base.Tables["LFS_RESOURCES_MATERIAL_COST_HISTORY"]));
            if ((initTable == true)) {
                if ((this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY != null)) {
                    this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.InitVars();
                }
            }
            this.tableLFS_RESOURCES_MATERIAL_NOTES = ((LFS_RESOURCES_MATERIAL_NOTESDataTable)(base.Tables["LFS_RESOURCES_MATERIAL_NOTES"]));
            if ((initTable == true)) {
                if ((this.tableLFS_RESOURCES_MATERIAL_NOTES != null)) {
                    this.tableLFS_RESOURCES_MATERIAL_NOTES.InitVars();
                }
            }
            this.relationFK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HISTORY = this.Relations["FK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HIS" +
                "TORY"];
            this.relationFK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY = this.Relations["FK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY"];
            this.relationFK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES = this.Relations["FK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MaterialsTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MaterialsTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_RESOURCES_MATERIAL = new LFS_RESOURCES_MATERIALDataTable();
            base.Tables.Add(this.tableLFS_RESOURCES_MATERIAL);
            this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS = new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable();
            base.Tables.Add(this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS);
            this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY = new LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable();
            base.Tables.Add(this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY);
            this.tableLFS_RESOURCES_MATERIAL_NOTES = new LFS_RESOURCES_MATERIAL_NOTESDataTable();
            base.Tables.Add(this.tableLFS_RESOURCES_MATERIAL_NOTES);
            this.relationFK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HISTORY = new global::System.Data.DataRelation("FK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HIS" +
                    "TORY", new global::System.Data.DataColumn[] {
                        this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.CostIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.CostIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HISTORY);
            this.relationFK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY = new global::System.Data.DataRelation("FK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY", new global::System.Data.DataColumn[] {
                        this.tableLFS_RESOURCES_MATERIAL.MaterialIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.MaterialIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY);
            this.relationFK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES = new global::System.Data.DataRelation("FK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES", new global::System.Data.DataColumn[] {
                        this.tableLFS_RESOURCES_MATERIAL.MaterialIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_RESOURCES_MATERIAL_NOTES.MaterialIDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_RESOURCES_MATERIAL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_RESOURCES_MATERIAL_COST_HISTORY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_RESOURCES_MATERIAL_NOTES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MaterialsTDS ds = new MaterialsTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_RESOURCES_MATERIALRowChangeEventHandler(object sender, LFS_RESOURCES_MATERIALRowChangeEvent e);
        
        public delegate void LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEventHandler(object sender, LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEvent e);
        
        public delegate void LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEventHandler(object sender, LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEvent e);
        
        public delegate void LFS_RESOURCES_MATERIAL_NOTESRowChangeEventHandler(object sender, LFS_RESOURCES_MATERIAL_NOTESRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_RESOURCES_MATERIALDataTable : global::System.Data.TypedTableBase<LFS_RESOURCES_MATERIALRow> {
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnSize;
            
            private global::System.Data.DataColumn columnLength;
            
            private global::System.Data.DataColumn columnThickness;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIALDataTable() {
                this.TableName = "LFS_RESOURCES_MATERIAL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_MATERIALDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_RESOURCES_MATERIALDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LengthColumn {
                get {
                    return this.columnLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThicknessColumn {
                get {
                    return this.columnThickness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIALRow this[int index] {
                get {
                    return ((LFS_RESOURCES_MATERIALRow)(this.Rows[index]));
                }
            }
            
            public event LFS_RESOURCES_MATERIALRowChangeEventHandler LFS_RESOURCES_MATERIALRowChanging;
            
            public event LFS_RESOURCES_MATERIALRowChangeEventHandler LFS_RESOURCES_MATERIALRowChanged;
            
            public event LFS_RESOURCES_MATERIALRowChangeEventHandler LFS_RESOURCES_MATERIALRowDeleting;
            
            public event LFS_RESOURCES_MATERIALRowChangeEventHandler LFS_RESOURCES_MATERIALRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_RESOURCES_MATERIALRow(LFS_RESOURCES_MATERIALRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIALRow AddLFS_RESOURCES_MATERIALRow(int MaterialID, string Description, string Size, string Length, string Thickness, string Type, string State, bool Deleted, int COMPANY_ID) {
                LFS_RESOURCES_MATERIALRow rowLFS_RESOURCES_MATERIALRow = ((LFS_RESOURCES_MATERIALRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MaterialID,
                        Description,
                        Size,
                        Length,
                        Thickness,
                        Type,
                        State,
                        Deleted,
                        COMPANY_ID};
                rowLFS_RESOURCES_MATERIALRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_RESOURCES_MATERIALRow);
                return rowLFS_RESOURCES_MATERIALRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIALRow FindByMaterialID(int MaterialID) {
                return ((LFS_RESOURCES_MATERIALRow)(this.Rows.Find(new object[] {
                            MaterialID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_RESOURCES_MATERIALDataTable cln = ((LFS_RESOURCES_MATERIALDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_RESOURCES_MATERIALDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnDescription = base.Columns["Description"];
                this.columnSize = base.Columns["Size"];
                this.columnLength = base.Columns["Length"];
                this.columnThickness = base.Columns["Thickness"];
                this.columnType = base.Columns["Type"];
                this.columnState = base.Columns["State"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnSize = new global::System.Data.DataColumn("Size", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnLength = new global::System.Data.DataColumn("Length", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLength);
                this.columnThickness = new global::System.Data.DataColumn("Thickness", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThickness);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMaterialID}, true));
                this.columnMaterialID.AllowDBNull = false;
                this.columnMaterialID.Unique = true;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 150;
                this.columnSize.MaxLength = 25;
                this.columnLength.MaxLength = 25;
                this.columnThickness.MaxLength = 25;
                this.columnType.AllowDBNull = false;
                this.columnType.MaxLength = 50;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIALRow NewLFS_RESOURCES_MATERIALRow() {
                return ((LFS_RESOURCES_MATERIALRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_RESOURCES_MATERIALRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_RESOURCES_MATERIALRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_RESOURCES_MATERIALRowChanged != null)) {
                    this.LFS_RESOURCES_MATERIALRowChanged(this, new LFS_RESOURCES_MATERIALRowChangeEvent(((LFS_RESOURCES_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_RESOURCES_MATERIALRowChanging != null)) {
                    this.LFS_RESOURCES_MATERIALRowChanging(this, new LFS_RESOURCES_MATERIALRowChangeEvent(((LFS_RESOURCES_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_RESOURCES_MATERIALRowDeleted != null)) {
                    this.LFS_RESOURCES_MATERIALRowDeleted(this, new LFS_RESOURCES_MATERIALRowChangeEvent(((LFS_RESOURCES_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_RESOURCES_MATERIALRowDeleting != null)) {
                    this.LFS_RESOURCES_MATERIALRowDeleting(this, new LFS_RESOURCES_MATERIALRowChangeEvent(((LFS_RESOURCES_MATERIALRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_RESOURCES_MATERIALRow(LFS_RESOURCES_MATERIALRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MaterialsTDS ds = new MaterialsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_RESOURCES_MATERIALDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable : global::System.Data.TypedTableBase<LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow> {
            
            private global::System.Data.DataColumn columnCostID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnWork_;
            
            private global::System.Data.DataColumn columnFunction_;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable() {
                this.TableName = "LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostIDColumn {
                get {
                    return this.columnCostID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Work_Column {
                get {
                    return this.columnWork_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Function_Column {
                get {
                    return this.columnFunction_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow this[int index] {
                get {
                    return ((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow)(this.Rows[index]));
                }
            }
            
            public event LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEventHandler LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChanging;
            
            public event LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEventHandler LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChanged;
            
            public event LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEventHandler LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowDeleting;
            
            public event LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEventHandler LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow(LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow AddLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow(LFS_RESOURCES_MATERIAL_COST_HISTORYRow parentLFS_RESOURCES_MATERIAL_COST_HISTORYRowByFK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HISTORY, int RefID, int MaterialID, string Work_, string Function_, string UnitOfMeasurement, decimal CostCad, decimal CostUsd, bool Deleted, int COMPANY_ID) {
                LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow rowLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow = ((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RefID,
                        MaterialID,
                        Work_,
                        Function_,
                        UnitOfMeasurement,
                        CostCad,
                        CostUsd,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_RESOURCES_MATERIAL_COST_HISTORYRowByFK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HISTORY != null)) {
                    columnValuesArray[0] = parentLFS_RESOURCES_MATERIAL_COST_HISTORYRowByFK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HISTORY[0];
                }
                rowLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow);
                return rowLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow FindByCostIDRefID(int CostID, int RefID) {
                return ((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow)(this.Rows.Find(new object[] {
                            CostID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable cln = ((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostID = base.Columns["CostID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnWork_ = base.Columns["Work_"];
                this.columnFunction_ = base.Columns["Function_"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostID = new global::System.Data.DataColumn("CostID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnWork_ = new global::System.Data.DataColumn("Work_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWork_);
                this.columnFunction_ = new global::System.Data.DataColumn("Function_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction_);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostID,
                                this.columnRefID}, true));
                this.columnCostID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnMaterialID.AllowDBNull = false;
                this.columnWork_.AllowDBNull = false;
                this.columnWork_.MaxLength = 50;
                this.columnFunction_.AllowDBNull = false;
                this.columnFunction_.MaxLength = 50;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow NewLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow() {
                return ((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChanged != null)) {
                    this.LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChanged(this, new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEvent(((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChanging != null)) {
                    this.LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChanging(this, new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEvent(((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowDeleted != null)) {
                    this.LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowDeleted(this, new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEvent(((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowDeleting != null)) {
                    this.LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowDeleting(this, new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEvent(((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow(LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MaterialsTDS ds = new MaterialsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable : global::System.Data.TypedTableBase<LFS_RESOURCES_MATERIAL_COST_HISTORYRow> {
            
            private global::System.Data.DataColumn columnCostID;
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnUnitOfMeasurement;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable() {
                this.TableName = "LFS_RESOURCES_MATERIAL_COST_HISTORY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostIDColumn {
                get {
                    return this.columnCostID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOfMeasurementColumn {
                get {
                    return this.columnUnitOfMeasurement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORYRow this[int index] {
                get {
                    return ((LFS_RESOURCES_MATERIAL_COST_HISTORYRow)(this.Rows[index]));
                }
            }
            
            public event LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEventHandler LFS_RESOURCES_MATERIAL_COST_HISTORYRowChanging;
            
            public event LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEventHandler LFS_RESOURCES_MATERIAL_COST_HISTORYRowChanged;
            
            public event LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEventHandler LFS_RESOURCES_MATERIAL_COST_HISTORYRowDeleting;
            
            public event LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEventHandler LFS_RESOURCES_MATERIAL_COST_HISTORYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_RESOURCES_MATERIAL_COST_HISTORYRow(LFS_RESOURCES_MATERIAL_COST_HISTORYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORYRow AddLFS_RESOURCES_MATERIAL_COST_HISTORYRow(int CostID, LFS_RESOURCES_MATERIALRow parentLFS_RESOURCES_MATERIALRowByFK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY, System.DateTime Date, string UnitOfMeasurement, decimal CostCad, decimal CostUsd, bool Deleted, int COMPANY_ID) {
                LFS_RESOURCES_MATERIAL_COST_HISTORYRow rowLFS_RESOURCES_MATERIAL_COST_HISTORYRow = ((LFS_RESOURCES_MATERIAL_COST_HISTORYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CostID,
                        null,
                        Date,
                        UnitOfMeasurement,
                        CostCad,
                        CostUsd,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_RESOURCES_MATERIALRowByFK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY != null)) {
                    columnValuesArray[1] = parentLFS_RESOURCES_MATERIALRowByFK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY[0];
                }
                rowLFS_RESOURCES_MATERIAL_COST_HISTORYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_RESOURCES_MATERIAL_COST_HISTORYRow);
                return rowLFS_RESOURCES_MATERIAL_COST_HISTORYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORYRow FindByCostID(int CostID) {
                return ((LFS_RESOURCES_MATERIAL_COST_HISTORYRow)(this.Rows.Find(new object[] {
                            CostID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable cln = ((LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCostID = base.Columns["CostID"];
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnDate = base.Columns["Date"];
                this.columnUnitOfMeasurement = base.Columns["UnitOfMeasurement"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCostID = new global::System.Data.DataColumn("CostID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostID);
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnUnitOfMeasurement = new global::System.Data.DataColumn("UnitOfMeasurement", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOfMeasurement);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCostID}, true));
                this.columnCostID.AllowDBNull = false;
                this.columnCostID.Unique = true;
                this.columnMaterialID.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnUnitOfMeasurement.AllowDBNull = false;
                this.columnUnitOfMeasurement.MaxLength = 25;
                this.columnCostCad.AllowDBNull = false;
                this.columnCostUsd.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORYRow NewLFS_RESOURCES_MATERIAL_COST_HISTORYRow() {
                return ((LFS_RESOURCES_MATERIAL_COST_HISTORYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_RESOURCES_MATERIAL_COST_HISTORYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_RESOURCES_MATERIAL_COST_HISTORYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_RESOURCES_MATERIAL_COST_HISTORYRowChanged != null)) {
                    this.LFS_RESOURCES_MATERIAL_COST_HISTORYRowChanged(this, new LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEvent(((LFS_RESOURCES_MATERIAL_COST_HISTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_RESOURCES_MATERIAL_COST_HISTORYRowChanging != null)) {
                    this.LFS_RESOURCES_MATERIAL_COST_HISTORYRowChanging(this, new LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEvent(((LFS_RESOURCES_MATERIAL_COST_HISTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_RESOURCES_MATERIAL_COST_HISTORYRowDeleted != null)) {
                    this.LFS_RESOURCES_MATERIAL_COST_HISTORYRowDeleted(this, new LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEvent(((LFS_RESOURCES_MATERIAL_COST_HISTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_RESOURCES_MATERIAL_COST_HISTORYRowDeleting != null)) {
                    this.LFS_RESOURCES_MATERIAL_COST_HISTORYRowDeleting(this, new LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEvent(((LFS_RESOURCES_MATERIAL_COST_HISTORYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_RESOURCES_MATERIAL_COST_HISTORYRow(LFS_RESOURCES_MATERIAL_COST_HISTORYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MaterialsTDS ds = new MaterialsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_RESOURCES_MATERIAL_NOTESDataTable : global::System.Data.TypedTableBase<LFS_RESOURCES_MATERIAL_NOTESRow> {
            
            private global::System.Data.DataColumn columnMaterialID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnNote;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_NOTESDataTable() {
                this.TableName = "LFS_RESOURCES_MATERIAL_NOTES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_MATERIAL_NOTESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_RESOURCES_MATERIAL_NOTESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaterialIDColumn {
                get {
                    return this.columnMaterialID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_NOTESRow this[int index] {
                get {
                    return ((LFS_RESOURCES_MATERIAL_NOTESRow)(this.Rows[index]));
                }
            }
            
            public event LFS_RESOURCES_MATERIAL_NOTESRowChangeEventHandler LFS_RESOURCES_MATERIAL_NOTESRowChanging;
            
            public event LFS_RESOURCES_MATERIAL_NOTESRowChangeEventHandler LFS_RESOURCES_MATERIAL_NOTESRowChanged;
            
            public event LFS_RESOURCES_MATERIAL_NOTESRowChangeEventHandler LFS_RESOURCES_MATERIAL_NOTESRowDeleting;
            
            public event LFS_RESOURCES_MATERIAL_NOTESRowChangeEventHandler LFS_RESOURCES_MATERIAL_NOTESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_RESOURCES_MATERIAL_NOTESRow(LFS_RESOURCES_MATERIAL_NOTESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_NOTESRow AddLFS_RESOURCES_MATERIAL_NOTESRow(LFS_RESOURCES_MATERIALRow parentLFS_RESOURCES_MATERIALRowByFK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES, int RefID, string Subject, int UserID, System.DateTime DateTime_, string Note, bool Deleted, int COMPANY_ID) {
                LFS_RESOURCES_MATERIAL_NOTESRow rowLFS_RESOURCES_MATERIAL_NOTESRow = ((LFS_RESOURCES_MATERIAL_NOTESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RefID,
                        Subject,
                        UserID,
                        DateTime_,
                        Note,
                        Deleted,
                        COMPANY_ID};
                if ((parentLFS_RESOURCES_MATERIALRowByFK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES != null)) {
                    columnValuesArray[0] = parentLFS_RESOURCES_MATERIALRowByFK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES[0];
                }
                rowLFS_RESOURCES_MATERIAL_NOTESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_RESOURCES_MATERIAL_NOTESRow);
                return rowLFS_RESOURCES_MATERIAL_NOTESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_NOTESRow FindByMaterialIDRefID(int MaterialID, int RefID) {
                return ((LFS_RESOURCES_MATERIAL_NOTESRow)(this.Rows.Find(new object[] {
                            MaterialID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_RESOURCES_MATERIAL_NOTESDataTable cln = ((LFS_RESOURCES_MATERIAL_NOTESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_RESOURCES_MATERIAL_NOTESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMaterialID = base.Columns["MaterialID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnNote = base.Columns["Note"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMaterialID = new global::System.Data.DataColumn("MaterialID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaterialID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMaterialID,
                                this.columnRefID}, true));
                this.columnMaterialID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 255;
                this.columnUserID.AllowDBNull = false;
                this.columnDateTime_.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_NOTESRow NewLFS_RESOURCES_MATERIAL_NOTESRow() {
                return ((LFS_RESOURCES_MATERIAL_NOTESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_RESOURCES_MATERIAL_NOTESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_RESOURCES_MATERIAL_NOTESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_RESOURCES_MATERIAL_NOTESRowChanged != null)) {
                    this.LFS_RESOURCES_MATERIAL_NOTESRowChanged(this, new LFS_RESOURCES_MATERIAL_NOTESRowChangeEvent(((LFS_RESOURCES_MATERIAL_NOTESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_RESOURCES_MATERIAL_NOTESRowChanging != null)) {
                    this.LFS_RESOURCES_MATERIAL_NOTESRowChanging(this, new LFS_RESOURCES_MATERIAL_NOTESRowChangeEvent(((LFS_RESOURCES_MATERIAL_NOTESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_RESOURCES_MATERIAL_NOTESRowDeleted != null)) {
                    this.LFS_RESOURCES_MATERIAL_NOTESRowDeleted(this, new LFS_RESOURCES_MATERIAL_NOTESRowChangeEvent(((LFS_RESOURCES_MATERIAL_NOTESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_RESOURCES_MATERIAL_NOTESRowDeleting != null)) {
                    this.LFS_RESOURCES_MATERIAL_NOTESRowDeleting(this, new LFS_RESOURCES_MATERIAL_NOTESRowChangeEvent(((LFS_RESOURCES_MATERIAL_NOTESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_RESOURCES_MATERIAL_NOTESRow(LFS_RESOURCES_MATERIAL_NOTESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MaterialsTDS ds = new MaterialsTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_RESOURCES_MATERIAL_NOTESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_RESOURCES_MATERIALRow : global::System.Data.DataRow {
            
            private LFS_RESOURCES_MATERIALDataTable tableLFS_RESOURCES_MATERIAL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_MATERIALRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_RESOURCES_MATERIAL = ((LFS_RESOURCES_MATERIALDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL.MaterialIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_MATERIAL.DescriptionColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Size {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_MATERIAL.SizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Size\' in table \'LFS_RESOURCES_MATERIAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL.SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Length {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_MATERIAL.LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Length\' in table \'LFS_RESOURCES_MATERIAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL.LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thickness {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_MATERIAL.ThicknessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thickness\' in table \'LFS_RESOURCES_MATERIAL\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL.ThicknessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_MATERIAL.TypeColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_MATERIAL.StateColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_RESOURCES_MATERIAL.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSizeNull() {
                return this.IsNull(this.tableLFS_RESOURCES_MATERIAL.SizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSizeNull() {
                this[this.tableLFS_RESOURCES_MATERIAL.SizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLengthNull() {
                return this.IsNull(this.tableLFS_RESOURCES_MATERIAL.LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLengthNull() {
                this[this.tableLFS_RESOURCES_MATERIAL.LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThicknessNull() {
                return this.IsNull(this.tableLFS_RESOURCES_MATERIAL.ThicknessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThicknessNull() {
                this[this.tableLFS_RESOURCES_MATERIAL.ThicknessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORYRow[] GetLFS_RESOURCES_MATERIAL_COST_HISTORYRows() {
                if ((this.Table.ChildRelations["FK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY"] == null)) {
                    return new LFS_RESOURCES_MATERIAL_COST_HISTORYRow[0];
                }
                else {
                    return ((LFS_RESOURCES_MATERIAL_COST_HISTORYRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_NOTESRow[] GetLFS_RESOURCES_MATERIAL_NOTESRows() {
                if ((this.Table.ChildRelations["FK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES"] == null)) {
                    return new LFS_RESOURCES_MATERIAL_NOTESRow[0];
                }
                else {
                    return ((LFS_RESOURCES_MATERIAL_NOTESRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow : global::System.Data.DataRow {
            
            private LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS = ((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.CostIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.CostIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.MaterialIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Work_ {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.Work_Column]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.Work_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function_ {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.Function_Column]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.Function_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCE" +
                                "PTIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORYRow LFS_RESOURCES_MATERIAL_COST_HISTORYRow {
                get {
                    return ((LFS_RESOURCES_MATERIAL_COST_HISTORYRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HIS" +
                            "TORY"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HIS" +
                            "TORY"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_RESOURCES_MATERIAL_COST_HISTORYRow : global::System.Data.DataRow {
            
            private LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable tableLFS_RESOURCES_MATERIAL_COST_HISTORY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_MATERIAL_COST_HISTORYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY = ((LFS_RESOURCES_MATERIAL_COST_HISTORYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CostID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.CostIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.CostIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.MaterialIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.DateColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOfMeasurement {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.UnitOfMeasurementColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.UnitOfMeasurementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostCad {
                get {
                    return ((decimal)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.CostCadColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CostUsd {
                get {
                    return ((decimal)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.CostUsdColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_COST_HISTORY.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIALRow LFS_RESOURCES_MATERIALRow {
                get {
                    return ((LFS_RESOURCES_MATERIALRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_RESOURCES_MATERIAL_LFS_RESOURCES_MATERIAL_COST_HISTORY"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow[] GetLFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRows() {
                if ((this.Table.ChildRelations["FK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HIS" +
                    "TORY"] == null)) {
                    return new LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow[0];
                }
                else {
                    return ((LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONS_LFS_RESOURCES_MATERIAL_COST_HIS" +
                            "TORY"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_RESOURCES_MATERIAL_NOTESRow : global::System.Data.DataRow {
            
            private LFS_RESOURCES_MATERIAL_NOTESDataTable tableLFS_RESOURCES_MATERIAL_NOTES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_MATERIAL_NOTESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_RESOURCES_MATERIAL_NOTES = ((LFS_RESOURCES_MATERIAL_NOTESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaterialID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_NOTES.MaterialIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_NOTES.MaterialIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_NOTES.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_NOTES.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_MATERIAL_NOTES.SubjectColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_NOTES.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_NOTES.UserIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_NOTES.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_RESOURCES_MATERIAL_NOTES.DateTime_Column]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_NOTES.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_MATERIAL_NOTES.NoteColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_NOTES.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_RESOURCES_MATERIAL_NOTES.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_NOTES.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_MATERIAL_NOTES.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_MATERIAL_NOTES.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIALRow LFS_RESOURCES_MATERIALRow {
                get {
                    return ((LFS_RESOURCES_MATERIALRow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_RESOURCES_MATERIAL_LFS_WRESOURCES_MATERIAL_NOTES"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_RESOURCES_MATERIALRowChangeEvent : global::System.EventArgs {
            
            private LFS_RESOURCES_MATERIALRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIALRowChangeEvent(LFS_RESOURCES_MATERIALRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIALRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEvent : global::System.EventArgs {
            
            private LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRowChangeEvent(LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORY_EXCEPTIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEvent : global::System.EventArgs {
            
            private LFS_RESOURCES_MATERIAL_COST_HISTORYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORYRowChangeEvent(LFS_RESOURCES_MATERIAL_COST_HISTORYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_COST_HISTORYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_RESOURCES_MATERIAL_NOTESRowChangeEvent : global::System.EventArgs {
            
            private LFS_RESOURCES_MATERIAL_NOTESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_NOTESRowChangeEvent(LFS_RESOURCES_MATERIAL_NOTESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_MATERIAL_NOTESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591