//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.Resources.Common {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ResourceViewTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ResourceViewTDS : global::System.Data.DataSet {
        
        private LFS_RESOURCES_TYPE_VIEW_SORTDataTable tableLFS_RESOURCES_TYPE_VIEW_SORT;
        
        private LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable tableLFS_RESOURCES_TYPE_VIEW_CONDITION;
        
        private LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE;
        
        private LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable tableLFS_RESOURCES_TYPE_VIEW_DISPLAY;
        
        private global::System.Data.DataRelation relationFK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ResourceViewTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ResourceViewTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_RESOURCES_TYPE_VIEW_SORT"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_TYPE_VIEW_SORTDataTable(ds.Tables["LFS_RESOURCES_TYPE_VIEW_SORT"]));
                }
                if ((ds.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable(ds.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION"]));
                }
                if ((ds.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable(ds.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE"]));
                }
                if ((ds.Tables["LFS_RESOURCES_TYPE_VIEW_DISPLAY"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable(ds.Tables["LFS_RESOURCES_TYPE_VIEW_DISPLAY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_RESOURCES_TYPE_VIEW_SORTDataTable LFS_RESOURCES_TYPE_VIEW_SORT {
            get {
                return this.tableLFS_RESOURCES_TYPE_VIEW_SORT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable LFS_RESOURCES_TYPE_VIEW_CONDITION {
            get {
                return this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE {
            get {
                return this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable LFS_RESOURCES_TYPE_VIEW_DISPLAY {
            get {
                return this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ResourceViewTDS cln = ((ResourceViewTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_RESOURCES_TYPE_VIEW_SORT"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_TYPE_VIEW_SORTDataTable(ds.Tables["LFS_RESOURCES_TYPE_VIEW_SORT"]));
                }
                if ((ds.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable(ds.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION"]));
                }
                if ((ds.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable(ds.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE"]));
                }
                if ((ds.Tables["LFS_RESOURCES_TYPE_VIEW_DISPLAY"] != null)) {
                    base.Tables.Add(new LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable(ds.Tables["LFS_RESOURCES_TYPE_VIEW_DISPLAY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_RESOURCES_TYPE_VIEW_SORT = ((LFS_RESOURCES_TYPE_VIEW_SORTDataTable)(base.Tables["LFS_RESOURCES_TYPE_VIEW_SORT"]));
            if ((initTable == true)) {
                if ((this.tableLFS_RESOURCES_TYPE_VIEW_SORT != null)) {
                    this.tableLFS_RESOURCES_TYPE_VIEW_SORT.InitVars();
                }
            }
            this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION = ((LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable)(base.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION"]));
            if ((initTable == true)) {
                if ((this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION != null)) {
                    this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.InitVars();
                }
            }
            this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE = ((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable)(base.Tables["LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE != null)) {
                    this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE.InitVars();
                }
            }
            this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY = ((LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable)(base.Tables["LFS_RESOURCES_TYPE_VIEW_DISPLAY"]));
            if ((initTable == true)) {
                if ((this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY != null)) {
                    this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.InitVars();
                }
            }
            this.relationFK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION = this.Relations["FK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ResourceViewTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ResourceViewTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_RESOURCES_TYPE_VIEW_SORT = new LFS_RESOURCES_TYPE_VIEW_SORTDataTable();
            base.Tables.Add(this.tableLFS_RESOURCES_TYPE_VIEW_SORT);
            this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION = new LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable();
            base.Tables.Add(this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION);
            this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE = new LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable();
            base.Tables.Add(this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE);
            this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY = new LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable();
            base.Tables.Add(this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY);
            this.relationFK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION = new global::System.Data.DataRelation("FK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION", new global::System.Data.DataColumn[] {
                        this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE.TypeColumn,
                        this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE.COMPANY_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.TypeColumn,
                        this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.COMPANY_IDColumn}, false);
            this.Relations.Add(this.relationFK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_RESOURCES_TYPE_VIEW_SORT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_RESOURCES_TYPE_VIEW_CONDITION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_RESOURCES_TYPE_VIEW_DISPLAY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ResourceViewTDS ds = new ResourceViewTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEventHandler(object sender, LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEvent e);
        
        public delegate void LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEventHandler(object sender, LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEvent e);
        
        public delegate void LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEventHandler(object sender, LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEvent e);
        
        public delegate void LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEventHandler(object sender, LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_RESOURCES_TYPE_VIEW_SORTDataTable : global::System.Data.TypedTableBase<LFS_RESOURCES_TYPE_VIEW_SORTRow> {
            
            private global::System.Data.DataColumn columnResourceType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnSortID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnInFor;
            
            private global::System.Data.DataColumn columnInView;
            
            private global::System.Data.DataColumn columnColumn_;
            
            private global::System.Data.DataColumn columnTable_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_SORTDataTable() {
                this.TableName = "LFS_RESOURCES_TYPE_VIEW_SORT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_TYPE_VIEW_SORTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_RESOURCES_TYPE_VIEW_SORTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResourceTypeColumn {
                get {
                    return this.columnResourceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortIDColumn {
                get {
                    return this.columnSortID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InForColumn {
                get {
                    return this.columnInFor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InViewColumn {
                get {
                    return this.columnInView;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column_Column {
                get {
                    return this.columnColumn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Table_Column {
                get {
                    return this.columnTable_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_SORTRow this[int index] {
                get {
                    return ((LFS_RESOURCES_TYPE_VIEW_SORTRow)(this.Rows[index]));
                }
            }
            
            public event LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_SORTRowChanging;
            
            public event LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_SORTRowChanged;
            
            public event LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_SORTRowDeleting;
            
            public event LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_SORTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_RESOURCES_TYPE_VIEW_SORTRow(LFS_RESOURCES_TYPE_VIEW_SORTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_SORTRow AddLFS_RESOURCES_TYPE_VIEW_SORTRow(string ResourceType, int COMPANY_ID, int SortID, string Name, bool InFor, bool InView, string Column_, string Table_) {
                LFS_RESOURCES_TYPE_VIEW_SORTRow rowLFS_RESOURCES_TYPE_VIEW_SORTRow = ((LFS_RESOURCES_TYPE_VIEW_SORTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ResourceType,
                        COMPANY_ID,
                        SortID,
                        Name,
                        InFor,
                        InView,
                        Column_,
                        Table_};
                rowLFS_RESOURCES_TYPE_VIEW_SORTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_RESOURCES_TYPE_VIEW_SORTRow);
                return rowLFS_RESOURCES_TYPE_VIEW_SORTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_RESOURCES_TYPE_VIEW_SORTDataTable cln = ((LFS_RESOURCES_TYPE_VIEW_SORTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_RESOURCES_TYPE_VIEW_SORTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnResourceType = base.Columns["ResourceType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnSortID = base.Columns["SortID"];
                this.columnName = base.Columns["Name"];
                this.columnInFor = base.Columns["InFor"];
                this.columnInView = base.Columns["InView"];
                this.columnColumn_ = base.Columns["Column_"];
                this.columnTable_ = base.Columns["Table_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnResourceType = new global::System.Data.DataColumn("ResourceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResourceType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnSortID = new global::System.Data.DataColumn("SortID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnInFor = new global::System.Data.DataColumn("InFor", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInFor);
                this.columnInView = new global::System.Data.DataColumn("InView", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInView);
                this.columnColumn_ = new global::System.Data.DataColumn("Column_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn_);
                this.columnTable_ = new global::System.Data.DataColumn("Table_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTable_);
                this.columnResourceType.AllowDBNull = false;
                this.columnResourceType.MaxLength = 50;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnSortID.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnInFor.AllowDBNull = false;
                this.columnInView.AllowDBNull = false;
                this.columnColumn_.MaxLength = 100;
                this.columnTable_.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_SORTRow NewLFS_RESOURCES_TYPE_VIEW_SORTRow() {
                return ((LFS_RESOURCES_TYPE_VIEW_SORTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_RESOURCES_TYPE_VIEW_SORTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_RESOURCES_TYPE_VIEW_SORTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_SORTRowChanged != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_SORTRowChanged(this, new LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_SORTRowChanging != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_SORTRowChanging(this, new LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_SORTRowDeleted != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_SORTRowDeleted(this, new LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_SORTRowDeleting != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_SORTRowDeleting(this, new LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_SORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_RESOURCES_TYPE_VIEW_SORTRow(LFS_RESOURCES_TYPE_VIEW_SORTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ResourceViewTDS ds = new ResourceViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_RESOURCES_TYPE_VIEW_SORTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable : global::System.Data.TypedTableBase<LFS_RESOURCES_TYPE_VIEW_CONDITIONRow> {
            
            private global::System.Data.DataColumn columnResourceType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnConditionID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnInFor;
            
            private global::System.Data.DataColumn columnColumn_;
            
            private global::System.Data.DataColumn columnTable_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable() {
                this.TableName = "LFS_RESOURCES_TYPE_VIEW_CONDITION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResourceTypeColumn {
                get {
                    return this.columnResourceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConditionIDColumn {
                get {
                    return this.columnConditionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InForColumn {
                get {
                    return this.columnInFor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column_Column {
                get {
                    return this.columnColumn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Table_Column {
                get {
                    return this.columnTable_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITIONRow this[int index] {
                get {
                    return ((LFS_RESOURCES_TYPE_VIEW_CONDITIONRow)(this.Rows[index]));
                }
            }
            
            public event LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChanging;
            
            public event LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChanged;
            
            public event LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_CONDITIONRowDeleting;
            
            public event LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_CONDITIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_RESOURCES_TYPE_VIEW_CONDITIONRow(LFS_RESOURCES_TYPE_VIEW_CONDITIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITIONRow AddLFS_RESOURCES_TYPE_VIEW_CONDITIONRow(string ResourceType, int COMPANY_ID, int ConditionID, string Name, string Type, bool InFor, string Column_, string Table_) {
                LFS_RESOURCES_TYPE_VIEW_CONDITIONRow rowLFS_RESOURCES_TYPE_VIEW_CONDITIONRow = ((LFS_RESOURCES_TYPE_VIEW_CONDITIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ResourceType,
                        COMPANY_ID,
                        ConditionID,
                        Name,
                        Type,
                        InFor,
                        Column_,
                        Table_};
                rowLFS_RESOURCES_TYPE_VIEW_CONDITIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_RESOURCES_TYPE_VIEW_CONDITIONRow);
                return rowLFS_RESOURCES_TYPE_VIEW_CONDITIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITIONRow FindByResourceTypeCOMPANY_IDConditionID(string ResourceType, int COMPANY_ID, int ConditionID) {
                return ((LFS_RESOURCES_TYPE_VIEW_CONDITIONRow)(this.Rows.Find(new object[] {
                            ResourceType,
                            COMPANY_ID,
                            ConditionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable cln = ((LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnResourceType = base.Columns["ResourceType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnConditionID = base.Columns["ConditionID"];
                this.columnName = base.Columns["Name"];
                this.columnType = base.Columns["Type"];
                this.columnInFor = base.Columns["InFor"];
                this.columnColumn_ = base.Columns["Column_"];
                this.columnTable_ = base.Columns["Table_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnResourceType = new global::System.Data.DataColumn("ResourceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResourceType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnConditionID = new global::System.Data.DataColumn("ConditionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConditionID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnInFor = new global::System.Data.DataColumn("InFor", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInFor);
                this.columnColumn_ = new global::System.Data.DataColumn("Column_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn_);
                this.columnTable_ = new global::System.Data.DataColumn("Table_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTable_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnResourceType,
                                this.columnCOMPANY_ID,
                                this.columnConditionID}, true));
                this.columnResourceType.AllowDBNull = false;
                this.columnResourceType.MaxLength = 50;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnConditionID.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnType.MaxLength = 50;
                this.columnColumn_.MaxLength = 100;
                this.columnTable_.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITIONRow NewLFS_RESOURCES_TYPE_VIEW_CONDITIONRow() {
                return ((LFS_RESOURCES_TYPE_VIEW_CONDITIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_RESOURCES_TYPE_VIEW_CONDITIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_RESOURCES_TYPE_VIEW_CONDITIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChanged != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChanged(this, new LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChanging != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChanging(this, new LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_CONDITIONRowDeleted != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_CONDITIONRowDeleted(this, new LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_CONDITIONRowDeleting != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_CONDITIONRowDeleting(this, new LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_CONDITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_RESOURCES_TYPE_VIEW_CONDITIONRow(LFS_RESOURCES_TYPE_VIEW_CONDITIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ResourceViewTDS ds = new ResourceViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable : global::System.Data.TypedTableBase<LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow> {
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable() {
                this.TableName = "LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow this[int index] {
                get {
                    return ((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow)(this.Rows[index]));
                }
            }
            
            public event LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChanging;
            
            public event LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChanged;
            
            public event LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowDeleting;
            
            public event LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow(LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow AddLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow(string Type, int COMPANY_ID) {
                LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow rowLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow = ((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Type,
                        COMPANY_ID};
                rowLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow);
                return rowLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow FindByTypeCOMPANY_ID(string Type, int COMPANY_ID) {
                return ((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow)(this.Rows.Find(new object[] {
                            Type,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable cln = ((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnType = base.Columns["Type"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnType,
                                this.columnCOMPANY_ID}, true));
                this.columnType.AllowDBNull = false;
                this.columnType.MaxLength = 50;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow NewLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow() {
                return ((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChanged != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChanged(this, new LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChanging != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChanging(this, new LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowDeleted != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowDeleted(this, new LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowDeleting != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowDeleting(this, new LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow(LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ResourceViewTDS ds = new ResourceViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable : global::System.Data.TypedTableBase<LFS_RESOURCES_TYPE_VIEW_DISPLAYRow> {
            
            private global::System.Data.DataColumn columnResourceType;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnDisplayID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAlways;
            
            private global::System.Data.DataColumn columnColumn_;
            
            private global::System.Data.DataColumn columnTable_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable() {
                this.TableName = "LFS_RESOURCES_TYPE_VIEW_DISPLAY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResourceTypeColumn {
                get {
                    return this.columnResourceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayIDColumn {
                get {
                    return this.columnDisplayID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlwaysColumn {
                get {
                    return this.columnAlways;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column_Column {
                get {
                    return this.columnColumn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Table_Column {
                get {
                    return this.columnTable_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_DISPLAYRow this[int index] {
                get {
                    return ((LFS_RESOURCES_TYPE_VIEW_DISPLAYRow)(this.Rows[index]));
                }
            }
            
            public event LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChanging;
            
            public event LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChanged;
            
            public event LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_DISPLAYRowDeleting;
            
            public event LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEventHandler LFS_RESOURCES_TYPE_VIEW_DISPLAYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_RESOURCES_TYPE_VIEW_DISPLAYRow(LFS_RESOURCES_TYPE_VIEW_DISPLAYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_DISPLAYRow AddLFS_RESOURCES_TYPE_VIEW_DISPLAYRow(string ResourceType, int COMPANY_ID, int DisplayID, string Name, bool Always, string Column_, string Table_) {
                LFS_RESOURCES_TYPE_VIEW_DISPLAYRow rowLFS_RESOURCES_TYPE_VIEW_DISPLAYRow = ((LFS_RESOURCES_TYPE_VIEW_DISPLAYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ResourceType,
                        COMPANY_ID,
                        DisplayID,
                        Name,
                        Always,
                        Column_,
                        Table_};
                rowLFS_RESOURCES_TYPE_VIEW_DISPLAYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_RESOURCES_TYPE_VIEW_DISPLAYRow);
                return rowLFS_RESOURCES_TYPE_VIEW_DISPLAYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_DISPLAYRow FindByResourceTypeCOMPANY_IDDisplayID(string ResourceType, int COMPANY_ID, int DisplayID) {
                return ((LFS_RESOURCES_TYPE_VIEW_DISPLAYRow)(this.Rows.Find(new object[] {
                            ResourceType,
                            COMPANY_ID,
                            DisplayID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable cln = ((LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnResourceType = base.Columns["ResourceType"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnDisplayID = base.Columns["DisplayID"];
                this.columnName = base.Columns["Name"];
                this.columnAlways = base.Columns["Always"];
                this.columnColumn_ = base.Columns["Column_"];
                this.columnTable_ = base.Columns["Table_"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnResourceType = new global::System.Data.DataColumn("ResourceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResourceType);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnDisplayID = new global::System.Data.DataColumn("DisplayID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAlways = new global::System.Data.DataColumn("Always", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlways);
                this.columnColumn_ = new global::System.Data.DataColumn("Column_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn_);
                this.columnTable_ = new global::System.Data.DataColumn("Table_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTable_);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnResourceType,
                                this.columnCOMPANY_ID,
                                this.columnDisplayID}, true));
                this.columnResourceType.AllowDBNull = false;
                this.columnResourceType.MaxLength = 50;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDisplayID.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnColumn_.MaxLength = 100;
                this.columnTable_.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_DISPLAYRow NewLFS_RESOURCES_TYPE_VIEW_DISPLAYRow() {
                return ((LFS_RESOURCES_TYPE_VIEW_DISPLAYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_RESOURCES_TYPE_VIEW_DISPLAYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_RESOURCES_TYPE_VIEW_DISPLAYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChanged != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChanged(this, new LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChanging != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChanging(this, new LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_DISPLAYRowDeleted != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_DISPLAYRowDeleted(this, new LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_RESOURCES_TYPE_VIEW_DISPLAYRowDeleting != null)) {
                    this.LFS_RESOURCES_TYPE_VIEW_DISPLAYRowDeleting(this, new LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEvent(((LFS_RESOURCES_TYPE_VIEW_DISPLAYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_RESOURCES_TYPE_VIEW_DISPLAYRow(LFS_RESOURCES_TYPE_VIEW_DISPLAYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ResourceViewTDS ds = new ResourceViewTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_RESOURCES_TYPE_VIEW_SORTRow : global::System.Data.DataRow {
            
            private LFS_RESOURCES_TYPE_VIEW_SORTDataTable tableLFS_RESOURCES_TYPE_VIEW_SORT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_TYPE_VIEW_SORTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_RESOURCES_TYPE_VIEW_SORT = ((LFS_RESOURCES_TYPE_VIEW_SORTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResourceType {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.ResourceTypeColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.ResourceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SortID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.SortIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.SortIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'LFS_RESOURCES_TYPE_VIEW_SORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InFor {
                get {
                    return ((bool)(this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.InForColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.InForColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InView {
                get {
                    return ((bool)(this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.InViewColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.InViewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.Column_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column_\' in table \'LFS_RESOURCES_TYPE_VIEW_SORT\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.Column_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Table_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.Table_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Table_\' in table \'LFS_RESOURCES_TYPE_VIEW_SORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.Table_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_SORT.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn_Null() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_SORT.Column_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn_Null() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.Column_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTable_Null() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_SORT.Table_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTable_Null() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_SORT.Table_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_RESOURCES_TYPE_VIEW_CONDITIONRow : global::System.Data.DataRow {
            
            private LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable tableLFS_RESOURCES_TYPE_VIEW_CONDITION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_TYPE_VIEW_CONDITIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION = ((LFS_RESOURCES_TYPE_VIEW_CONDITIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResourceType {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.ResourceTypeColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.ResourceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConditionID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.ConditionIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.ConditionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'LFS_RESOURCES_TYPE_VIEW_CONDITION\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'LFS_RESOURCES_TYPE_VIEW_CONDITION\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InFor {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.InForColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InFor\' in table \'LFS_RESOURCES_TYPE_VIEW_CONDITION\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.InForColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.Column_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column_\' in table \'LFS_RESOURCES_TYPE_VIEW_CONDITION\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.Column_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Table_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.Table_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Table_\' in table \'LFS_RESOURCES_TYPE_VIEW_CONDITION\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.Table_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowParent {
                get {
                    return ((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInForNull() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.InForColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInForNull() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.InForColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn_Null() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.Column_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn_Null() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.Column_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTable_Null() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.Table_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTable_Null() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION.Table_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow : global::System.Data.DataRow {
            
            private LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE = ((LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE.TypeColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITIONRow[] GetLFS_RESOURCES_TYPE_VIEW_CONDITIONRows() {
                if ((this.Table.ChildRelations["FK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION"] == null)) {
                    return new LFS_RESOURCES_TYPE_VIEW_CONDITIONRow[0];
                }
                else {
                    return ((LFS_RESOURCES_TYPE_VIEW_CONDITIONRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPE_LFS_RESOURCES_TYPE_VIEW_CONDITION"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_RESOURCES_TYPE_VIEW_DISPLAYRow : global::System.Data.DataRow {
            
            private LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable tableLFS_RESOURCES_TYPE_VIEW_DISPLAY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_RESOURCES_TYPE_VIEW_DISPLAYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY = ((LFS_RESOURCES_TYPE_VIEW_DISPLAYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResourceType {
                get {
                    return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.ResourceTypeColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.ResourceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DisplayID {
                get {
                    return ((int)(this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.DisplayIDColumn]));
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.DisplayIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'LFS_RESOURCES_TYPE_VIEW_DISPLAY\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Always {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.AlwaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Always\' in table \'LFS_RESOURCES_TYPE_VIEW_DISPLAY\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.AlwaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.Column_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column_\' in table \'LFS_RESOURCES_TYPE_VIEW_DISPLAY\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.Column_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Table_ {
                get {
                    try {
                        return ((string)(this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.Table_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Table_\' in table \'LFS_RESOURCES_TYPE_VIEW_DISPLAY\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.Table_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlwaysNull() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.AlwaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlwaysNull() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.AlwaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn_Null() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.Column_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn_Null() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.Column_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTable_Null() {
                return this.IsNull(this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.Table_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTable_Null() {
                this[this.tableLFS_RESOURCES_TYPE_VIEW_DISPLAY.Table_Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEvent : global::System.EventArgs {
            
            private LFS_RESOURCES_TYPE_VIEW_SORTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_SORTRowChangeEvent(LFS_RESOURCES_TYPE_VIEW_SORTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_SORTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEvent : global::System.EventArgs {
            
            private LFS_RESOURCES_TYPE_VIEW_CONDITIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITIONRowChangeEvent(LFS_RESOURCES_TYPE_VIEW_CONDITIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEvent : global::System.EventArgs {
            
            private LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERowChangeEvent(LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_CONDITION_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEvent : global::System.EventArgs {
            
            private LFS_RESOURCES_TYPE_VIEW_DISPLAYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_DISPLAYRowChangeEvent(LFS_RESOURCES_TYPE_VIEW_DISPLAYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_RESOURCES_TYPE_VIEW_DISPLAYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace LiquiForce.LFSLive.DA.Resources.Common.ResourceViewTDSTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LFS_RESOURCES_TYPE_VIEW_SORTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LFS_RESOURCES_TYPE_VIEW_SORTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LFS_RESOURCES_TYPE_VIEW_SORT";
            tableMapping.ColumnMappings.Add("ResourceType", "ResourceType");
            tableMapping.ColumnMappings.Add("COMPANY_ID", "COMPANY_ID");
            tableMapping.ColumnMappings.Add("SortID", "SortID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("InFor", "InFor");
            tableMapping.ColumnMappings.Add("InView", "InView");
            tableMapping.ColumnMappings.Add("Column_", "Column_");
            tableMapping.ColumnMappings.Add("Table_", "Table_");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LFS_RESOURCES_TYPE_VIEW_SORT] ([ResourceType], [COMPANY_ID], [" +
                "SortID], [Name], [InFor], [InView], [Column_], [Table_]) VALUES (@ResourceType, " +
                "@COMPANY_ID, @SortID, @Name, @InFor, @InView, @Column_, @Table_)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ResourceType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ResourceType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMPANY_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMPANY_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SortID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SortID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InFor", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InFor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@InView", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "InView", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Column_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Column_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Table_", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Table_", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::LiquiForce.LFSLive.DA.Resources.Properties.Settings.Default.eCRMLive6ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ResourceType, COMPANY_ID, SortID, Name, InFor, InView, Column_, Table_ FRO" +
                "M dbo.LFS_RESOURCES_TYPE_VIEW_SORT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ResourceViewTDS.LFS_RESOURCES_TYPE_VIEW_SORTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ResourceViewTDS.LFS_RESOURCES_TYPE_VIEW_SORTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ResourceViewTDS.LFS_RESOURCES_TYPE_VIEW_SORTDataTable dataTable = new ResourceViewTDS.LFS_RESOURCES_TYPE_VIEW_SORTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ResourceViewTDS.LFS_RESOURCES_TYPE_VIEW_SORTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ResourceViewTDS dataSet) {
            return this.Adapter.Update(dataSet, "LFS_RESOURCES_TYPE_VIEW_SORT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ResourceType, int COMPANY_ID, int SortID, string Name, bool InFor, bool InView, string Column_, string Table_) {
            if ((ResourceType == null)) {
                throw new global::System.ArgumentNullException("ResourceType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ResourceType));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(COMPANY_ID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(SortID));
            if ((Name == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(InFor));
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(InView));
            if ((Column_ == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Column_));
            }
            if ((Table_ == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Table_));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private LFS_RESOURCES_TYPE_VIEW_SORTTableAdapter _lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public LFS_RESOURCES_TYPE_VIEW_SORTTableAdapter LFS_RESOURCES_TYPE_VIEW_SORTTableAdapter {
            get {
                return this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter;
            }
            set {
                this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter != null) 
                            && (this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Connection != null))) {
                    return this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ResourceViewTDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.LFS_RESOURCES_TYPE_VIEW_SORT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ResourceViewTDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.LFS_RESOURCES_TYPE_VIEW_SORT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ResourceViewTDS dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.LFS_RESOURCES_TYPE_VIEW_SORT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ResourceViewTDS dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter != null)) {
                    revertConnections.Add(this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter, this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Connection);
                    this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter != null)) {
                    this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter]));
                    this._lFS_RESOURCES_TYPE_VIEW_SORTTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591