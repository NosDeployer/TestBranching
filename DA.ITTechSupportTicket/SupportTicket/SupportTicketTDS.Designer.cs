//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.ITTechSupportTicket.SupportTicket {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SupportTicketTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SupportTicketTDS : global::System.Data.DataSet {
        
        private LFS_ITTST_SUPPORTICKETDataTable tableLFS_ITTST_SUPPORTICKET;
        
        private LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable tableLFS_ITTST_SUPPORTICKET_ACTIVITY;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SupportTicketTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SupportTicketTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_ITTST_SUPPORTICKET"] != null)) {
                    base.Tables.Add(new LFS_ITTST_SUPPORTICKETDataTable(ds.Tables["LFS_ITTST_SUPPORTICKET"]));
                }
                if ((ds.Tables["LFS_ITTST_SUPPORTICKET_ACTIVITY"] != null)) {
                    base.Tables.Add(new LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable(ds.Tables["LFS_ITTST_SUPPORTICKET_ACTIVITY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_ITTST_SUPPORTICKETDataTable LFS_ITTST_SUPPORTICKET {
            get {
                return this.tableLFS_ITTST_SUPPORTICKET;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable LFS_ITTST_SUPPORTICKET_ACTIVITY {
            get {
                return this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SupportTicketTDS cln = ((SupportTicketTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_ITTST_SUPPORTICKET"] != null)) {
                    base.Tables.Add(new LFS_ITTST_SUPPORTICKETDataTable(ds.Tables["LFS_ITTST_SUPPORTICKET"]));
                }
                if ((ds.Tables["LFS_ITTST_SUPPORTICKET_ACTIVITY"] != null)) {
                    base.Tables.Add(new LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable(ds.Tables["LFS_ITTST_SUPPORTICKET_ACTIVITY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_ITTST_SUPPORTICKET = ((LFS_ITTST_SUPPORTICKETDataTable)(base.Tables["LFS_ITTST_SUPPORTICKET"]));
            if ((initTable == true)) {
                if ((this.tableLFS_ITTST_SUPPORTICKET != null)) {
                    this.tableLFS_ITTST_SUPPORTICKET.InitVars();
                }
            }
            this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY = ((LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable)(base.Tables["LFS_ITTST_SUPPORTICKET_ACTIVITY"]));
            if ((initTable == true)) {
                if ((this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY != null)) {
                    this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SupportTicketTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SupportTicketTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_ITTST_SUPPORTICKET = new LFS_ITTST_SUPPORTICKETDataTable();
            base.Tables.Add(this.tableLFS_ITTST_SUPPORTICKET);
            this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY = new LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable();
            base.Tables.Add(this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_ITTST_SUPPORTICKET() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_ITTST_SUPPORTICKET_ACTIVITY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SupportTicketTDS ds = new SupportTicketTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_ITTST_SUPPORTICKETRowChangeEventHandler(object sender, LFS_ITTST_SUPPORTICKETRowChangeEvent e);
        
        public delegate void LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEventHandler(object sender, LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_ITTST_SUPPORTICKETDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSupportTicketID;
            
            private global::System.Data.DataColumn columnCategoryID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnCreationDate;
            
            private global::System.Data.DataColumn columnCreatedByID;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDueDate;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKETDataTable() {
                this.TableName = "LFS_ITTST_SUPPORTICKET";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ITTST_SUPPORTICKETDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_ITTST_SUPPORTICKETDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupportTicketIDColumn {
                get {
                    return this.columnSupportTicketID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreationDateColumn {
                get {
                    return this.columnCreationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByIDColumn {
                get {
                    return this.columnCreatedByID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DueDateColumn {
                get {
                    return this.columnDueDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKETRow this[int index] {
                get {
                    return ((LFS_ITTST_SUPPORTICKETRow)(this.Rows[index]));
                }
            }
            
            public event LFS_ITTST_SUPPORTICKETRowChangeEventHandler LFS_ITTST_SUPPORTICKETRowChanging;
            
            public event LFS_ITTST_SUPPORTICKETRowChangeEventHandler LFS_ITTST_SUPPORTICKETRowChanged;
            
            public event LFS_ITTST_SUPPORTICKETRowChangeEventHandler LFS_ITTST_SUPPORTICKETRowDeleting;
            
            public event LFS_ITTST_SUPPORTICKETRowChangeEventHandler LFS_ITTST_SUPPORTICKETRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_ITTST_SUPPORTICKETRow(LFS_ITTST_SUPPORTICKETRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKETRow AddLFS_ITTST_SUPPORTICKETRow(int SupportTicketID, int CategoryID, string Subject, System.DateTime CreationDate, int CreatedByID, string State, System.DateTime DueDate, bool Deleted, int COMPANY_ID) {
                LFS_ITTST_SUPPORTICKETRow rowLFS_ITTST_SUPPORTICKETRow = ((LFS_ITTST_SUPPORTICKETRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SupportTicketID,
                        CategoryID,
                        Subject,
                        CreationDate,
                        CreatedByID,
                        State,
                        DueDate,
                        Deleted,
                        COMPANY_ID};
                rowLFS_ITTST_SUPPORTICKETRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_ITTST_SUPPORTICKETRow);
                return rowLFS_ITTST_SUPPORTICKETRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKETRow FindBySupportTicketID(int SupportTicketID) {
                return ((LFS_ITTST_SUPPORTICKETRow)(this.Rows.Find(new object[] {
                            SupportTicketID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_ITTST_SUPPORTICKETDataTable cln = ((LFS_ITTST_SUPPORTICKETDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_ITTST_SUPPORTICKETDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSupportTicketID = base.Columns["SupportTicketID"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnCreationDate = base.Columns["CreationDate"];
                this.columnCreatedByID = base.Columns["CreatedByID"];
                this.columnState = base.Columns["State"];
                this.columnDueDate = base.Columns["DueDate"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSupportTicketID = new global::System.Data.DataColumn("SupportTicketID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupportTicketID);
                this.columnCategoryID = new global::System.Data.DataColumn("CategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnCreationDate = new global::System.Data.DataColumn("CreationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreationDate);
                this.columnCreatedByID = new global::System.Data.DataColumn("CreatedByID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedByID);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDueDate = new global::System.Data.DataColumn("DueDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDueDate);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSupportTicketID}, true));
                this.columnSupportTicketID.AllowDBNull = false;
                this.columnSupportTicketID.Unique = true;
                this.columnCategoryID.AllowDBNull = false;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 150;
                this.columnCreationDate.AllowDBNull = false;
                this.columnCreatedByID.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnState.MaxLength = 25;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKETRow NewLFS_ITTST_SUPPORTICKETRow() {
                return ((LFS_ITTST_SUPPORTICKETRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_ITTST_SUPPORTICKETRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_ITTST_SUPPORTICKETRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_ITTST_SUPPORTICKETRowChanged != null)) {
                    this.LFS_ITTST_SUPPORTICKETRowChanged(this, new LFS_ITTST_SUPPORTICKETRowChangeEvent(((LFS_ITTST_SUPPORTICKETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_ITTST_SUPPORTICKETRowChanging != null)) {
                    this.LFS_ITTST_SUPPORTICKETRowChanging(this, new LFS_ITTST_SUPPORTICKETRowChangeEvent(((LFS_ITTST_SUPPORTICKETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_ITTST_SUPPORTICKETRowDeleted != null)) {
                    this.LFS_ITTST_SUPPORTICKETRowDeleted(this, new LFS_ITTST_SUPPORTICKETRowChangeEvent(((LFS_ITTST_SUPPORTICKETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_ITTST_SUPPORTICKETRowDeleting != null)) {
                    this.LFS_ITTST_SUPPORTICKETRowDeleting(this, new LFS_ITTST_SUPPORTICKETRowChangeEvent(((LFS_ITTST_SUPPORTICKETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_ITTST_SUPPORTICKETRow(LFS_ITTST_SUPPORTICKETRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupportTicketTDS ds = new SupportTicketTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_ITTST_SUPPORTICKETDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSupportTicketID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnType_;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable() {
                this.TableName = "LFS_ITTST_SUPPORTICKET_ACTIVITY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupportTicketIDColumn {
                get {
                    return this.columnSupportTicketID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Type_Column {
                get {
                    return this.columnType_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKET_ACTIVITYRow this[int index] {
                get {
                    return ((LFS_ITTST_SUPPORTICKET_ACTIVITYRow)(this.Rows[index]));
                }
            }
            
            public event LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEventHandler LFS_ITTST_SUPPORTICKET_ACTIVITYRowChanging;
            
            public event LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEventHandler LFS_ITTST_SUPPORTICKET_ACTIVITYRowChanged;
            
            public event LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEventHandler LFS_ITTST_SUPPORTICKET_ACTIVITYRowDeleting;
            
            public event LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEventHandler LFS_ITTST_SUPPORTICKET_ACTIVITYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_ITTST_SUPPORTICKET_ACTIVITYRow(LFS_ITTST_SUPPORTICKET_ACTIVITYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKET_ACTIVITYRow AddLFS_ITTST_SUPPORTICKET_ACTIVITYRow(int SupportTicketID, int RefID, string Type_, System.DateTime DateTime_, int EmployeeID, string Comment, bool Deleted, bool COMPANY_ID) {
                LFS_ITTST_SUPPORTICKET_ACTIVITYRow rowLFS_ITTST_SUPPORTICKET_ACTIVITYRow = ((LFS_ITTST_SUPPORTICKET_ACTIVITYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SupportTicketID,
                        RefID,
                        Type_,
                        DateTime_,
                        EmployeeID,
                        Comment,
                        Deleted,
                        COMPANY_ID};
                rowLFS_ITTST_SUPPORTICKET_ACTIVITYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_ITTST_SUPPORTICKET_ACTIVITYRow);
                return rowLFS_ITTST_SUPPORTICKET_ACTIVITYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKET_ACTIVITYRow FindBySupportTicketIDRefID(int SupportTicketID, int RefID) {
                return ((LFS_ITTST_SUPPORTICKET_ACTIVITYRow)(this.Rows.Find(new object[] {
                            SupportTicketID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable cln = ((LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSupportTicketID = base.Columns["SupportTicketID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnType_ = base.Columns["Type_"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnComment = base.Columns["Comment"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSupportTicketID = new global::System.Data.DataColumn("SupportTicketID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupportTicketID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnType_ = new global::System.Data.DataColumn("Type_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType_);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSupportTicketID,
                                this.columnRefID}, true));
                this.columnSupportTicketID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnType_.AllowDBNull = false;
                this.columnType_.MaxLength = 25;
                this.columnDateTime_.AllowDBNull = false;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnComment.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKET_ACTIVITYRow NewLFS_ITTST_SUPPORTICKET_ACTIVITYRow() {
                return ((LFS_ITTST_SUPPORTICKET_ACTIVITYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_ITTST_SUPPORTICKET_ACTIVITYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_ITTST_SUPPORTICKET_ACTIVITYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_ITTST_SUPPORTICKET_ACTIVITYRowChanged != null)) {
                    this.LFS_ITTST_SUPPORTICKET_ACTIVITYRowChanged(this, new LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEvent(((LFS_ITTST_SUPPORTICKET_ACTIVITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_ITTST_SUPPORTICKET_ACTIVITYRowChanging != null)) {
                    this.LFS_ITTST_SUPPORTICKET_ACTIVITYRowChanging(this, new LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEvent(((LFS_ITTST_SUPPORTICKET_ACTIVITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_ITTST_SUPPORTICKET_ACTIVITYRowDeleted != null)) {
                    this.LFS_ITTST_SUPPORTICKET_ACTIVITYRowDeleted(this, new LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEvent(((LFS_ITTST_SUPPORTICKET_ACTIVITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_ITTST_SUPPORTICKET_ACTIVITYRowDeleting != null)) {
                    this.LFS_ITTST_SUPPORTICKET_ACTIVITYRowDeleting(this, new LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEvent(((LFS_ITTST_SUPPORTICKET_ACTIVITYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_ITTST_SUPPORTICKET_ACTIVITYRow(LFS_ITTST_SUPPORTICKET_ACTIVITYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SupportTicketTDS ds = new SupportTicketTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_ITTST_SUPPORTICKETRow : global::System.Data.DataRow {
            
            private LFS_ITTST_SUPPORTICKETDataTable tableLFS_ITTST_SUPPORTICKET;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ITTST_SUPPORTICKETRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_ITTST_SUPPORTICKET = ((LFS_ITTST_SUPPORTICKETDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupportTicketID {
                get {
                    return ((int)(this[this.tableLFS_ITTST_SUPPORTICKET.SupportTicketIDColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET.SupportTicketIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CategoryID {
                get {
                    return ((int)(this[this.tableLFS_ITTST_SUPPORTICKET.CategoryIDColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET.CategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    return ((string)(this[this.tableLFS_ITTST_SUPPORTICKET.SubjectColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreationDate {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_ITTST_SUPPORTICKET.CreationDateColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET.CreationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CreatedByID {
                get {
                    return ((int)(this[this.tableLFS_ITTST_SUPPORTICKET.CreatedByIDColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET.CreatedByIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableLFS_ITTST_SUPPORTICKET.StateColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DueDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_ITTST_SUPPORTICKET.DueDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DueDate\' in table \'LFS_ITTST_SUPPORTICKET\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET.DueDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_ITTST_SUPPORTICKET.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'LFS_ITTST_SUPPORTICKET\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_ITTST_SUPPORTICKET.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDueDateNull() {
                return this.IsNull(this.tableLFS_ITTST_SUPPORTICKET.DueDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDueDateNull() {
                this[this.tableLFS_ITTST_SUPPORTICKET.DueDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableLFS_ITTST_SUPPORTICKET.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableLFS_ITTST_SUPPORTICKET.DeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_ITTST_SUPPORTICKET_ACTIVITYRow : global::System.Data.DataRow {
            
            private LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable tableLFS_ITTST_SUPPORTICKET_ACTIVITY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_ITTST_SUPPORTICKET_ACTIVITYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY = ((LFS_ITTST_SUPPORTICKET_ACTIVITYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupportTicketID {
                get {
                    return ((int)(this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.SupportTicketIDColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.SupportTicketIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type_ {
                get {
                    return ((string)(this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.Type_Column]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.Type_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    return ((global::System.DateTime)(this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.DateTime_Column]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.EmployeeIDColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'LFS_ITTST_SUPPORTICKET_ACTIVITY\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool COMPANY_ID {
                get {
                    return ((bool)(this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableLFS_ITTST_SUPPORTICKET_ACTIVITY.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_ITTST_SUPPORTICKETRowChangeEvent : global::System.EventArgs {
            
            private LFS_ITTST_SUPPORTICKETRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKETRowChangeEvent(LFS_ITTST_SUPPORTICKETRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKETRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEvent : global::System.EventArgs {
            
            private LFS_ITTST_SUPPORTICKET_ACTIVITYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKET_ACTIVITYRowChangeEvent(LFS_ITTST_SUPPORTICKET_ACTIVITYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_ITTST_SUPPORTICKET_ACTIVITYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591