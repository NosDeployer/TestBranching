//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3625
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.ITTechSupportTicket.Dashboard {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DashboardTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DashboardTDS : global::System.Data.DataSet {
        
        private DashboardMySupportTicketDataTable tableDashboardMySupportTicket;
        
        private DashboardMySupportTicketOnHoldDataTable tableDashboardMySupportTicketOnHold;
        
        private DashboardSupportTicketAssignedToMeDataTable tableDashboardSupportTicketAssignedToMe;
        
        private DashboardSupportTicketAssignedToMeOnHoldDataTable tableDashboardSupportTicketAssignedToMeOnHold;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DashboardTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DashboardTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DashboardMySupportTicket"] != null)) {
                    base.Tables.Add(new DashboardMySupportTicketDataTable(ds.Tables["DashboardMySupportTicket"]));
                }
                if ((ds.Tables["DashboardMySupportTicketOnHold"] != null)) {
                    base.Tables.Add(new DashboardMySupportTicketOnHoldDataTable(ds.Tables["DashboardMySupportTicketOnHold"]));
                }
                if ((ds.Tables["DashboardSupportTicketAssignedToMe"] != null)) {
                    base.Tables.Add(new DashboardSupportTicketAssignedToMeDataTable(ds.Tables["DashboardSupportTicketAssignedToMe"]));
                }
                if ((ds.Tables["DashboardSupportTicketAssignedToMeOnHold"] != null)) {
                    base.Tables.Add(new DashboardSupportTicketAssignedToMeOnHoldDataTable(ds.Tables["DashboardSupportTicketAssignedToMeOnHold"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardMySupportTicketDataTable DashboardMySupportTicket {
            get {
                return this.tableDashboardMySupportTicket;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardMySupportTicketOnHoldDataTable DashboardMySupportTicketOnHold {
            get {
                return this.tableDashboardMySupportTicketOnHold;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardSupportTicketAssignedToMeDataTable DashboardSupportTicketAssignedToMe {
            get {
                return this.tableDashboardSupportTicketAssignedToMe;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DashboardSupportTicketAssignedToMeOnHoldDataTable DashboardSupportTicketAssignedToMeOnHold {
            get {
                return this.tableDashboardSupportTicketAssignedToMeOnHold;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DashboardTDS cln = ((DashboardTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DashboardMySupportTicket"] != null)) {
                    base.Tables.Add(new DashboardMySupportTicketDataTable(ds.Tables["DashboardMySupportTicket"]));
                }
                if ((ds.Tables["DashboardMySupportTicketOnHold"] != null)) {
                    base.Tables.Add(new DashboardMySupportTicketOnHoldDataTable(ds.Tables["DashboardMySupportTicketOnHold"]));
                }
                if ((ds.Tables["DashboardSupportTicketAssignedToMe"] != null)) {
                    base.Tables.Add(new DashboardSupportTicketAssignedToMeDataTable(ds.Tables["DashboardSupportTicketAssignedToMe"]));
                }
                if ((ds.Tables["DashboardSupportTicketAssignedToMeOnHold"] != null)) {
                    base.Tables.Add(new DashboardSupportTicketAssignedToMeOnHoldDataTable(ds.Tables["DashboardSupportTicketAssignedToMeOnHold"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDashboardMySupportTicket = ((DashboardMySupportTicketDataTable)(base.Tables["DashboardMySupportTicket"]));
            if ((initTable == true)) {
                if ((this.tableDashboardMySupportTicket != null)) {
                    this.tableDashboardMySupportTicket.InitVars();
                }
            }
            this.tableDashboardMySupportTicketOnHold = ((DashboardMySupportTicketOnHoldDataTable)(base.Tables["DashboardMySupportTicketOnHold"]));
            if ((initTable == true)) {
                if ((this.tableDashboardMySupportTicketOnHold != null)) {
                    this.tableDashboardMySupportTicketOnHold.InitVars();
                }
            }
            this.tableDashboardSupportTicketAssignedToMe = ((DashboardSupportTicketAssignedToMeDataTable)(base.Tables["DashboardSupportTicketAssignedToMe"]));
            if ((initTable == true)) {
                if ((this.tableDashboardSupportTicketAssignedToMe != null)) {
                    this.tableDashboardSupportTicketAssignedToMe.InitVars();
                }
            }
            this.tableDashboardSupportTicketAssignedToMeOnHold = ((DashboardSupportTicketAssignedToMeOnHoldDataTable)(base.Tables["DashboardSupportTicketAssignedToMeOnHold"]));
            if ((initTable == true)) {
                if ((this.tableDashboardSupportTicketAssignedToMeOnHold != null)) {
                    this.tableDashboardSupportTicketAssignedToMeOnHold.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DashboardTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DashboardTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDashboardMySupportTicket = new DashboardMySupportTicketDataTable();
            base.Tables.Add(this.tableDashboardMySupportTicket);
            this.tableDashboardMySupportTicketOnHold = new DashboardMySupportTicketOnHoldDataTable();
            base.Tables.Add(this.tableDashboardMySupportTicketOnHold);
            this.tableDashboardSupportTicketAssignedToMe = new DashboardSupportTicketAssignedToMeDataTable();
            base.Tables.Add(this.tableDashboardSupportTicketAssignedToMe);
            this.tableDashboardSupportTicketAssignedToMeOnHold = new DashboardSupportTicketAssignedToMeOnHoldDataTable();
            base.Tables.Add(this.tableDashboardSupportTicketAssignedToMeOnHold);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardMySupportTicket() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardMySupportTicketOnHold() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardSupportTicketAssignedToMe() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDashboardSupportTicketAssignedToMeOnHold() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DashboardTDS ds = new DashboardTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DashboardMySupportTicketRowChangeEventHandler(object sender, DashboardMySupportTicketRowChangeEvent e);
        
        public delegate void DashboardMySupportTicketOnHoldRowChangeEventHandler(object sender, DashboardMySupportTicketOnHoldRowChangeEvent e);
        
        public delegate void DashboardSupportTicketAssignedToMeRowChangeEventHandler(object sender, DashboardSupportTicketAssignedToMeRowChangeEvent e);
        
        public delegate void DashboardSupportTicketAssignedToMeOnHoldRowChangeEventHandler(object sender, DashboardSupportTicketAssignedToMeOnHoldRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardMySupportTicketDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSupportTicketID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnLastComment;
            
            private global::System.Data.DataColumn columnCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketDataTable() {
                this.TableName = "DashboardMySupportTicket";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMySupportTicketDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardMySupportTicketDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupportTicketIDColumn {
                get {
                    return this.columnSupportTicketID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastCommentColumn {
                get {
                    return this.columnLastComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketRow this[int index] {
                get {
                    return ((DashboardMySupportTicketRow)(this.Rows[index]));
                }
            }
            
            public event DashboardMySupportTicketRowChangeEventHandler DashboardMySupportTicketRowChanging;
            
            public event DashboardMySupportTicketRowChangeEventHandler DashboardMySupportTicketRowChanged;
            
            public event DashboardMySupportTicketRowChangeEventHandler DashboardMySupportTicketRowDeleting;
            
            public event DashboardMySupportTicketRowChangeEventHandler DashboardMySupportTicketRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardMySupportTicketRow(DashboardMySupportTicketRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketRow AddDashboardMySupportTicketRow(int SupportTicketID, string Subject, bool Selected, string State, string LastComment, string CategoryName) {
                DashboardMySupportTicketRow rowDashboardMySupportTicketRow = ((DashboardMySupportTicketRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SupportTicketID,
                        Subject,
                        Selected,
                        State,
                        LastComment,
                        CategoryName};
                rowDashboardMySupportTicketRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardMySupportTicketRow);
                return rowDashboardMySupportTicketRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketRow FindBySupportTicketID(int SupportTicketID) {
                return ((DashboardMySupportTicketRow)(this.Rows.Find(new object[] {
                            SupportTicketID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardMySupportTicketDataTable cln = ((DashboardMySupportTicketDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardMySupportTicketDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSupportTicketID = base.Columns["SupportTicketID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnLastComment = base.Columns["LastComment"];
                this.columnCategoryName = base.Columns["CategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSupportTicketID = new global::System.Data.DataColumn("SupportTicketID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupportTicketID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnLastComment = new global::System.Data.DataColumn("LastComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastComment);
                this.columnCategoryName = new global::System.Data.DataColumn("CategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSupportTicketID}, true));
                this.columnSupportTicketID.AllowDBNull = false;
                this.columnSupportTicketID.Unique = true;
                this.columnSubject.Caption = "MyServicesCompleteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketRow NewDashboardMySupportTicketRow() {
                return ((DashboardMySupportTicketRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardMySupportTicketRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardMySupportTicketRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardMySupportTicketRowChanged != null)) {
                    this.DashboardMySupportTicketRowChanged(this, new DashboardMySupportTicketRowChangeEvent(((DashboardMySupportTicketRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardMySupportTicketRowChanging != null)) {
                    this.DashboardMySupportTicketRowChanging(this, new DashboardMySupportTicketRowChangeEvent(((DashboardMySupportTicketRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardMySupportTicketRowDeleted != null)) {
                    this.DashboardMySupportTicketRowDeleted(this, new DashboardMySupportTicketRowChangeEvent(((DashboardMySupportTicketRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardMySupportTicketRowDeleting != null)) {
                    this.DashboardMySupportTicketRowDeleting(this, new DashboardMySupportTicketRowChangeEvent(((DashboardMySupportTicketRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardMySupportTicketRow(DashboardMySupportTicketRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardMySupportTicketDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardMySupportTicketOnHoldDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSupportTicketID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnLastComment;
            
            private global::System.Data.DataColumn columnCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketOnHoldDataTable() {
                this.TableName = "DashboardMySupportTicketOnHold";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMySupportTicketOnHoldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardMySupportTicketOnHoldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupportTicketIDColumn {
                get {
                    return this.columnSupportTicketID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastCommentColumn {
                get {
                    return this.columnLastComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketOnHoldRow this[int index] {
                get {
                    return ((DashboardMySupportTicketOnHoldRow)(this.Rows[index]));
                }
            }
            
            public event DashboardMySupportTicketOnHoldRowChangeEventHandler DashboardMySupportTicketOnHoldRowChanging;
            
            public event DashboardMySupportTicketOnHoldRowChangeEventHandler DashboardMySupportTicketOnHoldRowChanged;
            
            public event DashboardMySupportTicketOnHoldRowChangeEventHandler DashboardMySupportTicketOnHoldRowDeleting;
            
            public event DashboardMySupportTicketOnHoldRowChangeEventHandler DashboardMySupportTicketOnHoldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardMySupportTicketOnHoldRow(DashboardMySupportTicketOnHoldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketOnHoldRow AddDashboardMySupportTicketOnHoldRow(int SupportTicketID, string Subject, bool Selected, string State, string LastComment, string CategoryName) {
                DashboardMySupportTicketOnHoldRow rowDashboardMySupportTicketOnHoldRow = ((DashboardMySupportTicketOnHoldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SupportTicketID,
                        Subject,
                        Selected,
                        State,
                        LastComment,
                        CategoryName};
                rowDashboardMySupportTicketOnHoldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardMySupportTicketOnHoldRow);
                return rowDashboardMySupportTicketOnHoldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketOnHoldRow FindBySupportTicketID(int SupportTicketID) {
                return ((DashboardMySupportTicketOnHoldRow)(this.Rows.Find(new object[] {
                            SupportTicketID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardMySupportTicketOnHoldDataTable cln = ((DashboardMySupportTicketOnHoldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardMySupportTicketOnHoldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSupportTicketID = base.Columns["SupportTicketID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnLastComment = base.Columns["LastComment"];
                this.columnCategoryName = base.Columns["CategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSupportTicketID = new global::System.Data.DataColumn("SupportTicketID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupportTicketID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnLastComment = new global::System.Data.DataColumn("LastComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastComment);
                this.columnCategoryName = new global::System.Data.DataColumn("CategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSupportTicketID}, true));
                this.columnSupportTicketID.AllowDBNull = false;
                this.columnSupportTicketID.Unique = true;
                this.columnSubject.Caption = "MyServicesCompleteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketOnHoldRow NewDashboardMySupportTicketOnHoldRow() {
                return ((DashboardMySupportTicketOnHoldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardMySupportTicketOnHoldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardMySupportTicketOnHoldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardMySupportTicketOnHoldRowChanged != null)) {
                    this.DashboardMySupportTicketOnHoldRowChanged(this, new DashboardMySupportTicketOnHoldRowChangeEvent(((DashboardMySupportTicketOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardMySupportTicketOnHoldRowChanging != null)) {
                    this.DashboardMySupportTicketOnHoldRowChanging(this, new DashboardMySupportTicketOnHoldRowChangeEvent(((DashboardMySupportTicketOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardMySupportTicketOnHoldRowDeleted != null)) {
                    this.DashboardMySupportTicketOnHoldRowDeleted(this, new DashboardMySupportTicketOnHoldRowChangeEvent(((DashboardMySupportTicketOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardMySupportTicketOnHoldRowDeleting != null)) {
                    this.DashboardMySupportTicketOnHoldRowDeleting(this, new DashboardMySupportTicketOnHoldRowChangeEvent(((DashboardMySupportTicketOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardMySupportTicketOnHoldRow(DashboardMySupportTicketOnHoldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardMySupportTicketOnHoldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardSupportTicketAssignedToMeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSupportTicketID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnLastComment;
            
            private global::System.Data.DataColumn columnCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeDataTable() {
                this.TableName = "DashboardSupportTicketAssignedToMe";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardSupportTicketAssignedToMeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardSupportTicketAssignedToMeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupportTicketIDColumn {
                get {
                    return this.columnSupportTicketID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastCommentColumn {
                get {
                    return this.columnLastComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeRow this[int index] {
                get {
                    return ((DashboardSupportTicketAssignedToMeRow)(this.Rows[index]));
                }
            }
            
            public event DashboardSupportTicketAssignedToMeRowChangeEventHandler DashboardSupportTicketAssignedToMeRowChanging;
            
            public event DashboardSupportTicketAssignedToMeRowChangeEventHandler DashboardSupportTicketAssignedToMeRowChanged;
            
            public event DashboardSupportTicketAssignedToMeRowChangeEventHandler DashboardSupportTicketAssignedToMeRowDeleting;
            
            public event DashboardSupportTicketAssignedToMeRowChangeEventHandler DashboardSupportTicketAssignedToMeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardSupportTicketAssignedToMeRow(DashboardSupportTicketAssignedToMeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeRow AddDashboardSupportTicketAssignedToMeRow(int SupportTicketID, int RefID, string Subject, bool Selected, string State, string LastComment, string CategoryName) {
                DashboardSupportTicketAssignedToMeRow rowDashboardSupportTicketAssignedToMeRow = ((DashboardSupportTicketAssignedToMeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SupportTicketID,
                        RefID,
                        Subject,
                        Selected,
                        State,
                        LastComment,
                        CategoryName};
                rowDashboardSupportTicketAssignedToMeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardSupportTicketAssignedToMeRow);
                return rowDashboardSupportTicketAssignedToMeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeRow FindByRefIDSupportTicketID(int RefID, int SupportTicketID) {
                return ((DashboardSupportTicketAssignedToMeRow)(this.Rows.Find(new object[] {
                            RefID,
                            SupportTicketID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardSupportTicketAssignedToMeDataTable cln = ((DashboardSupportTicketAssignedToMeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardSupportTicketAssignedToMeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSupportTicketID = base.Columns["SupportTicketID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnLastComment = base.Columns["LastComment"];
                this.columnCategoryName = base.Columns["CategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSupportTicketID = new global::System.Data.DataColumn("SupportTicketID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupportTicketID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnLastComment = new global::System.Data.DataColumn("LastComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastComment);
                this.columnCategoryName = new global::System.Data.DataColumn("CategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnSupportTicketID}, true));
                this.columnSupportTicketID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.Caption = "MyServicesCompleteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeRow NewDashboardSupportTicketAssignedToMeRow() {
                return ((DashboardSupportTicketAssignedToMeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardSupportTicketAssignedToMeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardSupportTicketAssignedToMeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardSupportTicketAssignedToMeRowChanged != null)) {
                    this.DashboardSupportTicketAssignedToMeRowChanged(this, new DashboardSupportTicketAssignedToMeRowChangeEvent(((DashboardSupportTicketAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardSupportTicketAssignedToMeRowChanging != null)) {
                    this.DashboardSupportTicketAssignedToMeRowChanging(this, new DashboardSupportTicketAssignedToMeRowChangeEvent(((DashboardSupportTicketAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardSupportTicketAssignedToMeRowDeleted != null)) {
                    this.DashboardSupportTicketAssignedToMeRowDeleted(this, new DashboardSupportTicketAssignedToMeRowChangeEvent(((DashboardSupportTicketAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardSupportTicketAssignedToMeRowDeleting != null)) {
                    this.DashboardSupportTicketAssignedToMeRowDeleting(this, new DashboardSupportTicketAssignedToMeRowChangeEvent(((DashboardSupportTicketAssignedToMeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardSupportTicketAssignedToMeRow(DashboardSupportTicketAssignedToMeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardSupportTicketAssignedToMeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DashboardSupportTicketAssignedToMeOnHoldDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSupportTicketID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnLastComment;
            
            private global::System.Data.DataColumn columnCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeOnHoldDataTable() {
                this.TableName = "DashboardSupportTicketAssignedToMeOnHold";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardSupportTicketAssignedToMeOnHoldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DashboardSupportTicketAssignedToMeOnHoldDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupportTicketIDColumn {
                get {
                    return this.columnSupportTicketID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastCommentColumn {
                get {
                    return this.columnLastComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeOnHoldRow this[int index] {
                get {
                    return ((DashboardSupportTicketAssignedToMeOnHoldRow)(this.Rows[index]));
                }
            }
            
            public event DashboardSupportTicketAssignedToMeOnHoldRowChangeEventHandler DashboardSupportTicketAssignedToMeOnHoldRowChanging;
            
            public event DashboardSupportTicketAssignedToMeOnHoldRowChangeEventHandler DashboardSupportTicketAssignedToMeOnHoldRowChanged;
            
            public event DashboardSupportTicketAssignedToMeOnHoldRowChangeEventHandler DashboardSupportTicketAssignedToMeOnHoldRowDeleting;
            
            public event DashboardSupportTicketAssignedToMeOnHoldRowChangeEventHandler DashboardSupportTicketAssignedToMeOnHoldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDashboardSupportTicketAssignedToMeOnHoldRow(DashboardSupportTicketAssignedToMeOnHoldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeOnHoldRow AddDashboardSupportTicketAssignedToMeOnHoldRow(int SupportTicketID, int RefID, string Subject, bool Selected, string State, string LastComment, string CategoryName) {
                DashboardSupportTicketAssignedToMeOnHoldRow rowDashboardSupportTicketAssignedToMeOnHoldRow = ((DashboardSupportTicketAssignedToMeOnHoldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SupportTicketID,
                        RefID,
                        Subject,
                        Selected,
                        State,
                        LastComment,
                        CategoryName};
                rowDashboardSupportTicketAssignedToMeOnHoldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDashboardSupportTicketAssignedToMeOnHoldRow);
                return rowDashboardSupportTicketAssignedToMeOnHoldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeOnHoldRow FindByRefIDSupportTicketID(int RefID, int SupportTicketID) {
                return ((DashboardSupportTicketAssignedToMeOnHoldRow)(this.Rows.Find(new object[] {
                            RefID,
                            SupportTicketID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DashboardSupportTicketAssignedToMeOnHoldDataTable cln = ((DashboardSupportTicketAssignedToMeOnHoldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DashboardSupportTicketAssignedToMeOnHoldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSupportTicketID = base.Columns["SupportTicketID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnSelected = base.Columns["Selected"];
                this.columnState = base.Columns["State"];
                this.columnLastComment = base.Columns["LastComment"];
                this.columnCategoryName = base.Columns["CategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSupportTicketID = new global::System.Data.DataColumn("SupportTicketID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupportTicketID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnLastComment = new global::System.Data.DataColumn("LastComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastComment);
                this.columnCategoryName = new global::System.Data.DataColumn("CategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRefID,
                                this.columnSupportTicketID}, true));
                this.columnSupportTicketID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.Caption = "MyServicesCompleteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeOnHoldRow NewDashboardSupportTicketAssignedToMeOnHoldRow() {
                return ((DashboardSupportTicketAssignedToMeOnHoldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DashboardSupportTicketAssignedToMeOnHoldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DashboardSupportTicketAssignedToMeOnHoldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DashboardSupportTicketAssignedToMeOnHoldRowChanged != null)) {
                    this.DashboardSupportTicketAssignedToMeOnHoldRowChanged(this, new DashboardSupportTicketAssignedToMeOnHoldRowChangeEvent(((DashboardSupportTicketAssignedToMeOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DashboardSupportTicketAssignedToMeOnHoldRowChanging != null)) {
                    this.DashboardSupportTicketAssignedToMeOnHoldRowChanging(this, new DashboardSupportTicketAssignedToMeOnHoldRowChangeEvent(((DashboardSupportTicketAssignedToMeOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DashboardSupportTicketAssignedToMeOnHoldRowDeleted != null)) {
                    this.DashboardSupportTicketAssignedToMeOnHoldRowDeleted(this, new DashboardSupportTicketAssignedToMeOnHoldRowChangeEvent(((DashboardSupportTicketAssignedToMeOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DashboardSupportTicketAssignedToMeOnHoldRowDeleting != null)) {
                    this.DashboardSupportTicketAssignedToMeOnHoldRowDeleting(this, new DashboardSupportTicketAssignedToMeOnHoldRowChangeEvent(((DashboardSupportTicketAssignedToMeOnHoldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDashboardSupportTicketAssignedToMeOnHoldRow(DashboardSupportTicketAssignedToMeOnHoldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DashboardTDS ds = new DashboardTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DashboardSupportTicketAssignedToMeOnHoldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardMySupportTicketRow : global::System.Data.DataRow {
            
            private DashboardMySupportTicketDataTable tableDashboardMySupportTicket;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMySupportTicketRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardMySupportTicket = ((DashboardMySupportTicketDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupportTicketID {
                get {
                    return ((int)(this[this.tableDashboardMySupportTicket.SupportTicketIDColumn]));
                }
                set {
                    this[this.tableDashboardMySupportTicket.SupportTicketIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMySupportTicket.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'DashboardMySupportTicket\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicket.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardMySupportTicket.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardMySupportTicket\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicket.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMySupportTicket.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardMySupportTicket\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicket.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastComment {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMySupportTicket.LastCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastComment\' in table \'DashboardMySupportTicket\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicket.LastCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMySupportTicket.CategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryName\' in table \'DashboardMySupportTicket\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicket.CategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableDashboardMySupportTicket.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableDashboardMySupportTicket.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardMySupportTicket.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardMySupportTicket.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardMySupportTicket.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardMySupportTicket.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastCommentNull() {
                return this.IsNull(this.tableDashboardMySupportTicket.LastCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastCommentNull() {
                this[this.tableDashboardMySupportTicket.LastCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNameNull() {
                return this.IsNull(this.tableDashboardMySupportTicket.CategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNameNull() {
                this[this.tableDashboardMySupportTicket.CategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardMySupportTicketOnHoldRow : global::System.Data.DataRow {
            
            private DashboardMySupportTicketOnHoldDataTable tableDashboardMySupportTicketOnHold;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardMySupportTicketOnHoldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardMySupportTicketOnHold = ((DashboardMySupportTicketOnHoldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupportTicketID {
                get {
                    return ((int)(this[this.tableDashboardMySupportTicketOnHold.SupportTicketIDColumn]));
                }
                set {
                    this[this.tableDashboardMySupportTicketOnHold.SupportTicketIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMySupportTicketOnHold.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'DashboardMySupportTicketOnHold\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicketOnHold.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardMySupportTicketOnHold.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardMySupportTicketOnHold\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicketOnHold.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMySupportTicketOnHold.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardMySupportTicketOnHold\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicketOnHold.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastComment {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMySupportTicketOnHold.LastCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastComment\' in table \'DashboardMySupportTicketOnHold\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicketOnHold.LastCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardMySupportTicketOnHold.CategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryName\' in table \'DashboardMySupportTicketOnHold\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardMySupportTicketOnHold.CategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableDashboardMySupportTicketOnHold.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableDashboardMySupportTicketOnHold.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardMySupportTicketOnHold.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardMySupportTicketOnHold.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardMySupportTicketOnHold.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardMySupportTicketOnHold.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastCommentNull() {
                return this.IsNull(this.tableDashboardMySupportTicketOnHold.LastCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastCommentNull() {
                this[this.tableDashboardMySupportTicketOnHold.LastCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNameNull() {
                return this.IsNull(this.tableDashboardMySupportTicketOnHold.CategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNameNull() {
                this[this.tableDashboardMySupportTicketOnHold.CategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardSupportTicketAssignedToMeRow : global::System.Data.DataRow {
            
            private DashboardSupportTicketAssignedToMeDataTable tableDashboardSupportTicketAssignedToMe;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardSupportTicketAssignedToMeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardSupportTicketAssignedToMe = ((DashboardSupportTicketAssignedToMeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupportTicketID {
                get {
                    return ((int)(this[this.tableDashboardSupportTicketAssignedToMe.SupportTicketIDColumn]));
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMe.SupportTicketIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableDashboardSupportTicketAssignedToMe.RefIDColumn]));
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMe.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableDashboardSupportTicketAssignedToMe.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'DashboardSupportTicketAssignedToMe\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMe.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardSupportTicketAssignedToMe.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardSupportTicketAssignedToMe\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMe.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardSupportTicketAssignedToMe.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardSupportTicketAssignedToMe\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMe.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastComment {
                get {
                    try {
                        return ((string)(this[this.tableDashboardSupportTicketAssignedToMe.LastCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastComment\' in table \'DashboardSupportTicketAssignedToMe\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMe.LastCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardSupportTicketAssignedToMe.CategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryName\' in table \'DashboardSupportTicketAssignedToMe\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMe.CategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMe.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableDashboardSupportTicketAssignedToMe.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMe.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardSupportTicketAssignedToMe.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMe.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardSupportTicketAssignedToMe.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastCommentNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMe.LastCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastCommentNull() {
                this[this.tableDashboardSupportTicketAssignedToMe.LastCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNameNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMe.CategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNameNull() {
                this[this.tableDashboardSupportTicketAssignedToMe.CategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DashboardSupportTicketAssignedToMeOnHoldRow : global::System.Data.DataRow {
            
            private DashboardSupportTicketAssignedToMeOnHoldDataTable tableDashboardSupportTicketAssignedToMeOnHold;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DashboardSupportTicketAssignedToMeOnHoldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDashboardSupportTicketAssignedToMeOnHold = ((DashboardSupportTicketAssignedToMeOnHoldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupportTicketID {
                get {
                    return ((int)(this[this.tableDashboardSupportTicketAssignedToMeOnHold.SupportTicketIDColumn]));
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMeOnHold.SupportTicketIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableDashboardSupportTicketAssignedToMeOnHold.RefIDColumn]));
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMeOnHold.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableDashboardSupportTicketAssignedToMeOnHold.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Subject\' in table \'DashboardSupportTicketAssignedToMeOnHold" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMeOnHold.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableDashboardSupportTicketAssignedToMeOnHold.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'DashboardSupportTicketAssignedToMeOnHol" +
                                "d\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMeOnHold.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableDashboardSupportTicketAssignedToMeOnHold.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'DashboardSupportTicketAssignedToMeOnHold\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMeOnHold.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastComment {
                get {
                    try {
                        return ((string)(this[this.tableDashboardSupportTicketAssignedToMeOnHold.LastCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastComment\' in table \'DashboardSupportTicketAssignedToMeOn" +
                                "Hold\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMeOnHold.LastCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryName {
                get {
                    try {
                        return ((string)(this[this.tableDashboardSupportTicketAssignedToMeOnHold.CategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryName\' in table \'DashboardSupportTicketAssignedToMeO" +
                                "nHold\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDashboardSupportTicketAssignedToMeOnHold.CategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMeOnHold.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableDashboardSupportTicketAssignedToMeOnHold.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMeOnHold.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableDashboardSupportTicketAssignedToMeOnHold.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMeOnHold.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableDashboardSupportTicketAssignedToMeOnHold.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastCommentNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMeOnHold.LastCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastCommentNull() {
                this[this.tableDashboardSupportTicketAssignedToMeOnHold.LastCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNameNull() {
                return this.IsNull(this.tableDashboardSupportTicketAssignedToMeOnHold.CategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNameNull() {
                this[this.tableDashboardSupportTicketAssignedToMeOnHold.CategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardMySupportTicketRowChangeEvent : global::System.EventArgs {
            
            private DashboardMySupportTicketRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketRowChangeEvent(DashboardMySupportTicketRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardMySupportTicketOnHoldRowChangeEvent : global::System.EventArgs {
            
            private DashboardMySupportTicketOnHoldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketOnHoldRowChangeEvent(DashboardMySupportTicketOnHoldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardMySupportTicketOnHoldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardSupportTicketAssignedToMeRowChangeEvent : global::System.EventArgs {
            
            private DashboardSupportTicketAssignedToMeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeRowChangeEvent(DashboardSupportTicketAssignedToMeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DashboardSupportTicketAssignedToMeOnHoldRowChangeEvent : global::System.EventArgs {
            
            private DashboardSupportTicketAssignedToMeOnHoldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeOnHoldRowChangeEvent(DashboardSupportTicketAssignedToMeOnHoldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DashboardSupportTicketAssignedToMeOnHoldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591