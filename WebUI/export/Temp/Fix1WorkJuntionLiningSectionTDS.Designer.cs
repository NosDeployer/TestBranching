//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.WebUI.export.Temp {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Fix1WorkJuntionLiningSectionTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Fix1WorkJuntionLiningSectionTDS : global::System.Data.DataSet {
        
        private LFS_WORK_JUNCTIONLINING_SECTIONDataTable tableLFS_WORK_JUNCTIONLINING_SECTION;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Fix1WorkJuntionLiningSectionTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Fix1WorkJuntionLiningSectionTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_WORK_JUNCTIONLINING_SECTION"] != null)) {
                    base.Tables.Add(new LFS_WORK_JUNCTIONLINING_SECTIONDataTable(ds.Tables["LFS_WORK_JUNCTIONLINING_SECTION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_WORK_JUNCTIONLINING_SECTIONDataTable LFS_WORK_JUNCTIONLINING_SECTION {
            get {
                return this.tableLFS_WORK_JUNCTIONLINING_SECTION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Fix1WorkJuntionLiningSectionTDS cln = ((Fix1WorkJuntionLiningSectionTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_WORK_JUNCTIONLINING_SECTION"] != null)) {
                    base.Tables.Add(new LFS_WORK_JUNCTIONLINING_SECTIONDataTable(ds.Tables["LFS_WORK_JUNCTIONLINING_SECTION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_WORK_JUNCTIONLINING_SECTION = ((LFS_WORK_JUNCTIONLINING_SECTIONDataTable)(base.Tables["LFS_WORK_JUNCTIONLINING_SECTION"]));
            if ((initTable == true)) {
                if ((this.tableLFS_WORK_JUNCTIONLINING_SECTION != null)) {
                    this.tableLFS_WORK_JUNCTIONLINING_SECTION.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Fix1WorkJuntionLiningSectionTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Fix1WorkJuntionLiningSectionTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_WORK_JUNCTIONLINING_SECTION = new LFS_WORK_JUNCTIONLINING_SECTIONDataTable();
            base.Tables.Add(this.tableLFS_WORK_JUNCTIONLINING_SECTION);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_WORK_JUNCTIONLINING_SECTION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Fix1WorkJuntionLiningSectionTDS ds = new Fix1WorkJuntionLiningSectionTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEventHandler(object sender, LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_WORK_JUNCTIONLINING_SECTIONDataTable : global::System.Data.TypedTableBase<LFS_WORK_JUNCTIONLINING_SECTIONRow> {
            
            private global::System.Data.DataColumn columnWorkID;
            
            private global::System.Data.DataColumn columnNumLats;
            
            private global::System.Data.DataColumn columnNotLinedYet;
            
            private global::System.Data.DataColumn columnAllMeasured;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnIssueWithLaterals;
            
            private global::System.Data.DataColumn columnNotMeasuredYet;
            
            private global::System.Data.DataColumn columnNotDeliveredYet;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnTrafficControl;
            
            private global::System.Data.DataColumn columnTrafficControlDetails;
            
            private global::System.Data.DataColumn columnStandardBypass;
            
            private global::System.Data.DataColumn columnStandardBypassComments;
            
            private global::System.Data.DataColumn columnAvailableToLine;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_WORK_JUNCTIONLINING_SECTIONDataTable() {
                this.TableName = "LFS_WORK_JUNCTIONLINING_SECTION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_WORK_JUNCTIONLINING_SECTIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_WORK_JUNCTIONLINING_SECTIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkIDColumn {
                get {
                    return this.columnWorkID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumLatsColumn {
                get {
                    return this.columnNumLats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotLinedYetColumn {
                get {
                    return this.columnNotLinedYet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AllMeasuredColumn {
                get {
                    return this.columnAllMeasured;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IssueWithLateralsColumn {
                get {
                    return this.columnIssueWithLaterals;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotMeasuredYetColumn {
                get {
                    return this.columnNotMeasuredYet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotDeliveredYetColumn {
                get {
                    return this.columnNotDeliveredYet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlColumn {
                get {
                    return this.columnTrafficControl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlDetailsColumn {
                get {
                    return this.columnTrafficControlDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandardBypassColumn {
                get {
                    return this.columnStandardBypass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandardBypassCommentsColumn {
                get {
                    return this.columnStandardBypassComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AvailableToLineColumn {
                get {
                    return this.columnAvailableToLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_WORK_JUNCTIONLINING_SECTIONRow this[int index] {
                get {
                    return ((LFS_WORK_JUNCTIONLINING_SECTIONRow)(this.Rows[index]));
                }
            }
            
            public event LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEventHandler LFS_WORK_JUNCTIONLINING_SECTIONRowChanging;
            
            public event LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEventHandler LFS_WORK_JUNCTIONLINING_SECTIONRowChanged;
            
            public event LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEventHandler LFS_WORK_JUNCTIONLINING_SECTIONRowDeleting;
            
            public event LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEventHandler LFS_WORK_JUNCTIONLINING_SECTIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_WORK_JUNCTIONLINING_SECTIONRow(LFS_WORK_JUNCTIONLINING_SECTIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_WORK_JUNCTIONLINING_SECTIONRow AddLFS_WORK_JUNCTIONLINING_SECTIONRow(int WorkID, int NumLats, int NotLinedYet, bool AllMeasured, bool Deleted, string IssueWithLaterals, int NotMeasuredYet, int NotDeliveredYet, int COMPANY_ID, string TrafficControl, string TrafficControlDetails, bool StandardBypass, string StandardBypassComments, int AvailableToLine) {
                LFS_WORK_JUNCTIONLINING_SECTIONRow rowLFS_WORK_JUNCTIONLINING_SECTIONRow = ((LFS_WORK_JUNCTIONLINING_SECTIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WorkID,
                        NumLats,
                        NotLinedYet,
                        AllMeasured,
                        Deleted,
                        IssueWithLaterals,
                        NotMeasuredYet,
                        NotDeliveredYet,
                        COMPANY_ID,
                        TrafficControl,
                        TrafficControlDetails,
                        StandardBypass,
                        StandardBypassComments,
                        AvailableToLine};
                rowLFS_WORK_JUNCTIONLINING_SECTIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_WORK_JUNCTIONLINING_SECTIONRow);
                return rowLFS_WORK_JUNCTIONLINING_SECTIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_WORK_JUNCTIONLINING_SECTIONRow FindByWorkID(int WorkID) {
                return ((LFS_WORK_JUNCTIONLINING_SECTIONRow)(this.Rows.Find(new object[] {
                            WorkID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_WORK_JUNCTIONLINING_SECTIONDataTable cln = ((LFS_WORK_JUNCTIONLINING_SECTIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_WORK_JUNCTIONLINING_SECTIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWorkID = base.Columns["WorkID"];
                this.columnNumLats = base.Columns["NumLats"];
                this.columnNotLinedYet = base.Columns["NotLinedYet"];
                this.columnAllMeasured = base.Columns["AllMeasured"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnIssueWithLaterals = base.Columns["IssueWithLaterals"];
                this.columnNotMeasuredYet = base.Columns["NotMeasuredYet"];
                this.columnNotDeliveredYet = base.Columns["NotDeliveredYet"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnTrafficControl = base.Columns["TrafficControl"];
                this.columnTrafficControlDetails = base.Columns["TrafficControlDetails"];
                this.columnStandardBypass = base.Columns["StandardBypass"];
                this.columnStandardBypassComments = base.Columns["StandardBypassComments"];
                this.columnAvailableToLine = base.Columns["AvailableToLine"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWorkID = new global::System.Data.DataColumn("WorkID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkID);
                this.columnNumLats = new global::System.Data.DataColumn("NumLats", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumLats);
                this.columnNotLinedYet = new global::System.Data.DataColumn("NotLinedYet", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotLinedYet);
                this.columnAllMeasured = new global::System.Data.DataColumn("AllMeasured", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAllMeasured);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnIssueWithLaterals = new global::System.Data.DataColumn("IssueWithLaterals", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIssueWithLaterals);
                this.columnNotMeasuredYet = new global::System.Data.DataColumn("NotMeasuredYet", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotMeasuredYet);
                this.columnNotDeliveredYet = new global::System.Data.DataColumn("NotDeliveredYet", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotDeliveredYet);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnTrafficControl = new global::System.Data.DataColumn("TrafficControl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControl);
                this.columnTrafficControlDetails = new global::System.Data.DataColumn("TrafficControlDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControlDetails);
                this.columnStandardBypass = new global::System.Data.DataColumn("StandardBypass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardBypass);
                this.columnStandardBypassComments = new global::System.Data.DataColumn("StandardBypassComments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandardBypassComments);
                this.columnAvailableToLine = new global::System.Data.DataColumn("AvailableToLine", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAvailableToLine);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnWorkID}, true));
                this.columnWorkID.AllowDBNull = false;
                this.columnWorkID.Unique = true;
                this.columnNumLats.AllowDBNull = false;
                this.columnNotLinedYet.AllowDBNull = false;
                this.columnAllMeasured.AllowDBNull = false;
                this.columnDeleted.AllowDBNull = false;
                this.columnIssueWithLaterals.AllowDBNull = false;
                this.columnIssueWithLaterals.MaxLength = 50;
                this.columnNotMeasuredYet.AllowDBNull = false;
                this.columnNotDeliveredYet.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnTrafficControl.MaxLength = 100;
                this.columnTrafficControlDetails.MaxLength = 1073741823;
                this.columnStandardBypass.AllowDBNull = false;
                this.columnStandardBypassComments.MaxLength = 1073741823;
                this.columnAvailableToLine.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_WORK_JUNCTIONLINING_SECTIONRow NewLFS_WORK_JUNCTIONLINING_SECTIONRow() {
                return ((LFS_WORK_JUNCTIONLINING_SECTIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_WORK_JUNCTIONLINING_SECTIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_WORK_JUNCTIONLINING_SECTIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_WORK_JUNCTIONLINING_SECTIONRowChanged != null)) {
                    this.LFS_WORK_JUNCTIONLINING_SECTIONRowChanged(this, new LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEvent(((LFS_WORK_JUNCTIONLINING_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_WORK_JUNCTIONLINING_SECTIONRowChanging != null)) {
                    this.LFS_WORK_JUNCTIONLINING_SECTIONRowChanging(this, new LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEvent(((LFS_WORK_JUNCTIONLINING_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_WORK_JUNCTIONLINING_SECTIONRowDeleted != null)) {
                    this.LFS_WORK_JUNCTIONLINING_SECTIONRowDeleted(this, new LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEvent(((LFS_WORK_JUNCTIONLINING_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_WORK_JUNCTIONLINING_SECTIONRowDeleting != null)) {
                    this.LFS_WORK_JUNCTIONLINING_SECTIONRowDeleting(this, new LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEvent(((LFS_WORK_JUNCTIONLINING_SECTIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_WORK_JUNCTIONLINING_SECTIONRow(LFS_WORK_JUNCTIONLINING_SECTIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Fix1WorkJuntionLiningSectionTDS ds = new Fix1WorkJuntionLiningSectionTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_WORK_JUNCTIONLINING_SECTIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_WORK_JUNCTIONLINING_SECTIONRow : global::System.Data.DataRow {
            
            private LFS_WORK_JUNCTIONLINING_SECTIONDataTable tableLFS_WORK_JUNCTIONLINING_SECTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_WORK_JUNCTIONLINING_SECTIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_WORK_JUNCTIONLINING_SECTION = ((LFS_WORK_JUNCTIONLINING_SECTIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int WorkID {
                get {
                    return ((int)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.WorkIDColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.WorkIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumLats {
                get {
                    return ((int)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.NumLatsColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.NumLatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NotLinedYet {
                get {
                    return ((int)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.NotLinedYetColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.NotLinedYetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AllMeasured {
                get {
                    return ((bool)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.AllMeasuredColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.AllMeasuredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.DeletedColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IssueWithLaterals {
                get {
                    return ((string)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.IssueWithLateralsColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.IssueWithLateralsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NotMeasuredYet {
                get {
                    return ((int)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.NotMeasuredYetColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.NotMeasuredYetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NotDeliveredYet {
                get {
                    return ((int)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.NotDeliveredYetColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.NotDeliveredYetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControl {
                get {
                    try {
                        return ((string)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.TrafficControlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControl\' in table \'LFS_WORK_JUNCTIONLINING_SECTION\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.TrafficControlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControlDetails {
                get {
                    try {
                        return ((string)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.TrafficControlDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControlDetails\' in table \'LFS_WORK_JUNCTIONLINING_SE" +
                                "CTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.TrafficControlDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StandardBypass {
                get {
                    return ((bool)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.StandardBypassColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.StandardBypassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StandardBypassComments {
                get {
                    try {
                        return ((string)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.StandardBypassCommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StandardBypassComments\' in table \'LFS_WORK_JUNCTIONLINING_S" +
                                "ECTION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.StandardBypassCommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AvailableToLine {
                get {
                    return ((int)(this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.AvailableToLineColumn]));
                }
                set {
                    this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.AvailableToLineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlNull() {
                return this.IsNull(this.tableLFS_WORK_JUNCTIONLINING_SECTION.TrafficControlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlNull() {
                this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.TrafficControlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlDetailsNull() {
                return this.IsNull(this.tableLFS_WORK_JUNCTIONLINING_SECTION.TrafficControlDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlDetailsNull() {
                this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.TrafficControlDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandardBypassCommentsNull() {
                return this.IsNull(this.tableLFS_WORK_JUNCTIONLINING_SECTION.StandardBypassCommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandardBypassCommentsNull() {
                this[this.tableLFS_WORK_JUNCTIONLINING_SECTION.StandardBypassCommentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEvent : global::System.EventArgs {
            
            private LFS_WORK_JUNCTIONLINING_SECTIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_WORK_JUNCTIONLINING_SECTIONRowChangeEvent(LFS_WORK_JUNCTIONLINING_SECTIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_WORK_JUNCTIONLINING_SECTIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591