//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.CWP.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TDSM2ReportByID")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TDSM2ReportByID : global::System.Data.DataSet {
        
        private LFS_MASTER_AREADataTable tableLFS_MASTER_AREA;
        
        private LFS_M2_TABLESDataTable tableLFS_M2_TABLES;
        
        private global::System.Data.DataRelation relationLFS_MASTER_AREALFS_M2_TABLES;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TDSM2ReportByID() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TDSM2ReportByID(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LFS_MASTER_AREA"] != null)) {
                    base.Tables.Add(new LFS_MASTER_AREADataTable(ds.Tables["LFS_MASTER_AREA"]));
                }
                if ((ds.Tables["LFS_M2_TABLES"] != null)) {
                    base.Tables.Add(new LFS_M2_TABLESDataTable(ds.Tables["LFS_M2_TABLES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_MASTER_AREADataTable LFS_MASTER_AREA {
            get {
                return this.tableLFS_MASTER_AREA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_M2_TABLESDataTable LFS_M2_TABLES {
            get {
                return this.tableLFS_M2_TABLES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TDSM2ReportByID cln = ((TDSM2ReportByID)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LFS_MASTER_AREA"] != null)) {
                    base.Tables.Add(new LFS_MASTER_AREADataTable(ds.Tables["LFS_MASTER_AREA"]));
                }
                if ((ds.Tables["LFS_M2_TABLES"] != null)) {
                    base.Tables.Add(new LFS_M2_TABLESDataTable(ds.Tables["LFS_M2_TABLES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLFS_MASTER_AREA = ((LFS_MASTER_AREADataTable)(base.Tables["LFS_MASTER_AREA"]));
            if ((initTable == true)) {
                if ((this.tableLFS_MASTER_AREA != null)) {
                    this.tableLFS_MASTER_AREA.InitVars();
                }
            }
            this.tableLFS_M2_TABLES = ((LFS_M2_TABLESDataTable)(base.Tables["LFS_M2_TABLES"]));
            if ((initTable == true)) {
                if ((this.tableLFS_M2_TABLES != null)) {
                    this.tableLFS_M2_TABLES.InitVars();
                }
            }
            this.relationLFS_MASTER_AREALFS_M2_TABLES = this.Relations["LFS_MASTER_AREALFS_M2_TABLES"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TDSM2ReportByID";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TDSM2ReportByID.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLFS_MASTER_AREA = new LFS_MASTER_AREADataTable();
            base.Tables.Add(this.tableLFS_MASTER_AREA);
            this.tableLFS_M2_TABLES = new LFS_M2_TABLESDataTable();
            base.Tables.Add(this.tableLFS_M2_TABLES);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("LFS_MASTER_AREALFS_M2_TABLES", new global::System.Data.DataColumn[] {
                        this.tableLFS_MASTER_AREA.IDColumn,
                        this.tableLFS_MASTER_AREA.COMPANY_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_M2_TABLES.IDColumn,
                        this.tableLFS_M2_TABLES.COMPANY_IDColumn});
            this.tableLFS_M2_TABLES.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationLFS_MASTER_AREALFS_M2_TABLES = new global::System.Data.DataRelation("LFS_MASTER_AREALFS_M2_TABLES", new global::System.Data.DataColumn[] {
                        this.tableLFS_MASTER_AREA.IDColumn,
                        this.tableLFS_MASTER_AREA.COMPANY_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_M2_TABLES.IDColumn,
                        this.tableLFS_M2_TABLES.COMPANY_IDColumn}, false);
            this.Relations.Add(this.relationLFS_MASTER_AREALFS_M2_TABLES);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_MASTER_AREA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_M2_TABLES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TDSM2ReportByID ds = new TDSM2ReportByID();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LFS_MASTER_AREARowChangeEventHandler(object sender, LFS_MASTER_AREARowChangeEvent e);
        
        public delegate void LFS_M2_TABLESRowChangeEventHandler(object sender, LFS_M2_TABLESRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_MASTER_AREADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnRecordID;
            
            private global::System.Data.DataColumn columnCOMPANIES_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnConfirmedSize;
            
            private global::System.Data.DataColumn columnLiveLats;
            
            private global::System.Data.DataColumn columnM2Date;
            
            private global::System.Data.DataColumn columnVideoDoneFrom;
            
            private global::System.Data.DataColumn columnToManhole;
            
            private global::System.Data.DataColumn columnCutterDescriptionDuringMeasuring;
            
            private global::System.Data.DataColumn columnMeasurementType;
            
            private global::System.Data.DataColumn columnMeasuredFromManhole;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_MASTER_AREADataTable() {
                this.TableName = "LFS_MASTER_AREA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_MASTER_AREADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_MASTER_AREADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordIDColumn {
                get {
                    return this.columnRecordID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANIES_IDColumn {
                get {
                    return this.columnCOMPANIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedSizeColumn {
                get {
                    return this.columnConfirmedSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveLatsColumn {
                get {
                    return this.columnLiveLats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M2DateColumn {
                get {
                    return this.columnM2Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDoneFromColumn {
                get {
                    return this.columnVideoDoneFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToManholeColumn {
                get {
                    return this.columnToManhole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CutterDescriptionDuringMeasuringColumn {
                get {
                    return this.columnCutterDescriptionDuringMeasuring;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementTypeColumn {
                get {
                    return this.columnMeasurementType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasuredFromManholeColumn {
                get {
                    return this.columnMeasuredFromManhole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_MASTER_AREARow this[int index] {
                get {
                    return ((LFS_MASTER_AREARow)(this.Rows[index]));
                }
            }
            
            public event LFS_MASTER_AREARowChangeEventHandler LFS_MASTER_AREARowChanging;
            
            public event LFS_MASTER_AREARowChangeEventHandler LFS_MASTER_AREARowChanged;
            
            public event LFS_MASTER_AREARowChangeEventHandler LFS_MASTER_AREARowDeleting;
            
            public event LFS_MASTER_AREARowChangeEventHandler LFS_MASTER_AREARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_MASTER_AREARow(LFS_MASTER_AREARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_MASTER_AREARow AddLFS_MASTER_AREARow(
                        string ID, 
                        int COMPANY_ID, 
                        string RecordID, 
                        int COMPANIES_ID, 
                        string NAME, 
                        string Street, 
                        string USMH, 
                        string DSMH, 
                        int ConfirmedSize, 
                        double LiveLats, 
                        System.DateTime M2Date, 
                        string VideoDoneFrom, 
                        string ToManhole, 
                        string CutterDescriptionDuringMeasuring, 
                        string MeasurementType, 
                        string MeasuredFromManhole) {
                LFS_MASTER_AREARow rowLFS_MASTER_AREARow = ((LFS_MASTER_AREARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        COMPANY_ID,
                        RecordID,
                        COMPANIES_ID,
                        NAME,
                        Street,
                        USMH,
                        DSMH,
                        ConfirmedSize,
                        LiveLats,
                        M2Date,
                        VideoDoneFrom,
                        ToManhole,
                        CutterDescriptionDuringMeasuring,
                        MeasurementType,
                        MeasuredFromManhole};
                rowLFS_MASTER_AREARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_MASTER_AREARow);
                return rowLFS_MASTER_AREARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_MASTER_AREARow FindByIDCOMPANY_ID(string ID, int COMPANY_ID) {
                return ((LFS_MASTER_AREARow)(this.Rows.Find(new object[] {
                            ID,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_MASTER_AREADataTable cln = ((LFS_MASTER_AREADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_MASTER_AREADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnRecordID = base.Columns["RecordID"];
                this.columnCOMPANIES_ID = base.Columns["COMPANIES_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnStreet = base.Columns["Street"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnConfirmedSize = base.Columns["ConfirmedSize"];
                this.columnLiveLats = base.Columns["LiveLats"];
                this.columnM2Date = base.Columns["M2Date"];
                this.columnVideoDoneFrom = base.Columns["VideoDoneFrom"];
                this.columnToManhole = base.Columns["ToManhole"];
                this.columnCutterDescriptionDuringMeasuring = base.Columns["CutterDescriptionDuringMeasuring"];
                this.columnMeasurementType = base.Columns["MeasurementType"];
                this.columnMeasuredFromManhole = base.Columns["MeasuredFromManhole"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnRecordID = new global::System.Data.DataColumn("RecordID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordID);
                this.columnCOMPANIES_ID = new global::System.Data.DataColumn("COMPANIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANIES_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnConfirmedSize = new global::System.Data.DataColumn("ConfirmedSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmedSize);
                this.columnLiveLats = new global::System.Data.DataColumn("LiveLats", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveLats);
                this.columnM2Date = new global::System.Data.DataColumn("M2Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM2Date);
                this.columnVideoDoneFrom = new global::System.Data.DataColumn("VideoDoneFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDoneFrom);
                this.columnToManhole = new global::System.Data.DataColumn("ToManhole", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToManhole);
                this.columnCutterDescriptionDuringMeasuring = new global::System.Data.DataColumn("CutterDescriptionDuringMeasuring", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCutterDescriptionDuringMeasuring);
                this.columnMeasurementType = new global::System.Data.DataColumn("MeasurementType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementType);
                this.columnMeasuredFromManhole = new global::System.Data.DataColumn("MeasuredFromManhole", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasuredFromManhole);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TDSM2ReportByIDKey1", new global::System.Data.DataColumn[] {
                                this.columnID,
                                this.columnCOMPANY_ID}, true));
                this.columnID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_MASTER_AREARow NewLFS_MASTER_AREARow() {
                return ((LFS_MASTER_AREARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_MASTER_AREARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_MASTER_AREARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_MASTER_AREARowChanged != null)) {
                    this.LFS_MASTER_AREARowChanged(this, new LFS_MASTER_AREARowChangeEvent(((LFS_MASTER_AREARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_MASTER_AREARowChanging != null)) {
                    this.LFS_MASTER_AREARowChanging(this, new LFS_MASTER_AREARowChangeEvent(((LFS_MASTER_AREARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_MASTER_AREARowDeleted != null)) {
                    this.LFS_MASTER_AREARowDeleted(this, new LFS_MASTER_AREARowChangeEvent(((LFS_MASTER_AREARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_MASTER_AREARowDeleting != null)) {
                    this.LFS_MASTER_AREARowDeleting(this, new LFS_MASTER_AREARowChangeEvent(((LFS_MASTER_AREARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_MASTER_AREARow(LFS_MASTER_AREARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSM2ReportByID ds = new TDSM2ReportByID();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_MASTER_AREADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_M2_TABLESDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnVideoDistance;
            
            private global::System.Data.DataColumn columnClockPosition;
            
            private global::System.Data.DataColumn columnLiveOrAbandoned;
            
            private global::System.Data.DataColumn columnDistanceToCentreOfLateral;
            
            private global::System.Data.DataColumn columnLateralDiameter;
            
            private global::System.Data.DataColumn columnLateralType;
            
            private global::System.Data.DataColumn columnDateTimeOpened;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnReverseSetup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_M2_TABLESDataTable() {
                this.TableName = "LFS_M2_TABLES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_M2_TABLESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_M2_TABLESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDistanceColumn {
                get {
                    return this.columnVideoDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClockPositionColumn {
                get {
                    return this.columnClockPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveOrAbandonedColumn {
                get {
                    return this.columnLiveOrAbandoned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToCentreOfLateralColumn {
                get {
                    return this.columnDistanceToCentreOfLateral;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralDiameterColumn {
                get {
                    return this.columnLateralDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralTypeColumn {
                get {
                    return this.columnLateralType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTimeOpenedColumn {
                get {
                    return this.columnDateTimeOpened;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReverseSetupColumn {
                get {
                    return this.columnReverseSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_M2_TABLESRow this[int index] {
                get {
                    return ((LFS_M2_TABLESRow)(this.Rows[index]));
                }
            }
            
            public event LFS_M2_TABLESRowChangeEventHandler LFS_M2_TABLESRowChanging;
            
            public event LFS_M2_TABLESRowChangeEventHandler LFS_M2_TABLESRowChanged;
            
            public event LFS_M2_TABLESRowChangeEventHandler LFS_M2_TABLESRowDeleting;
            
            public event LFS_M2_TABLESRowChangeEventHandler LFS_M2_TABLESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_M2_TABLESRow(LFS_M2_TABLESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_M2_TABLESRow AddLFS_M2_TABLESRow(string ID, int RefID, int COMPANY_ID, float VideoDistance, string ClockPosition, string LiveOrAbandoned, string DistanceToCentreOfLateral, string LateralDiameter, string LateralType, string DateTimeOpened, string Comments, string ReverseSetup) {
                LFS_M2_TABLESRow rowLFS_M2_TABLESRow = ((LFS_M2_TABLESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        RefID,
                        COMPANY_ID,
                        VideoDistance,
                        ClockPosition,
                        LiveOrAbandoned,
                        DistanceToCentreOfLateral,
                        LateralDiameter,
                        LateralType,
                        DateTimeOpened,
                        Comments,
                        ReverseSetup};
                rowLFS_M2_TABLESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_M2_TABLESRow);
                return rowLFS_M2_TABLESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_M2_TABLESRow FindByIDRefIDCOMPANY_ID(string ID, int RefID, int COMPANY_ID) {
                return ((LFS_M2_TABLESRow)(this.Rows.Find(new object[] {
                            ID,
                            RefID,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_M2_TABLESDataTable cln = ((LFS_M2_TABLESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_M2_TABLESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnVideoDistance = base.Columns["VideoDistance"];
                this.columnClockPosition = base.Columns["ClockPosition"];
                this.columnLiveOrAbandoned = base.Columns["LiveOrAbandoned"];
                this.columnDistanceToCentreOfLateral = base.Columns["DistanceToCentreOfLateral"];
                this.columnLateralDiameter = base.Columns["LateralDiameter"];
                this.columnLateralType = base.Columns["LateralType"];
                this.columnDateTimeOpened = base.Columns["DateTimeOpened"];
                this.columnComments = base.Columns["Comments"];
                this.columnReverseSetup = base.Columns["ReverseSetup"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnVideoDistance = new global::System.Data.DataColumn("VideoDistance", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDistance);
                this.columnClockPosition = new global::System.Data.DataColumn("ClockPosition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClockPosition);
                this.columnLiveOrAbandoned = new global::System.Data.DataColumn("LiveOrAbandoned", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveOrAbandoned);
                this.columnDistanceToCentreOfLateral = new global::System.Data.DataColumn("DistanceToCentreOfLateral", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToCentreOfLateral);
                this.columnLateralDiameter = new global::System.Data.DataColumn("LateralDiameter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralDiameter);
                this.columnLateralType = new global::System.Data.DataColumn("LateralType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralType);
                this.columnDateTimeOpened = new global::System.Data.DataColumn("DateTimeOpened", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeOpened);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnReverseSetup = new global::System.Data.DataColumn("ReverseSetup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReverseSetup);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TDSM2ReportByIDKey2", new global::System.Data.DataColumn[] {
                                this.columnID,
                                this.columnRefID,
                                this.columnCOMPANY_ID}, true));
                this.columnID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_M2_TABLESRow NewLFS_M2_TABLESRow() {
                return ((LFS_M2_TABLESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_M2_TABLESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_M2_TABLESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_M2_TABLESRowChanged != null)) {
                    this.LFS_M2_TABLESRowChanged(this, new LFS_M2_TABLESRowChangeEvent(((LFS_M2_TABLESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_M2_TABLESRowChanging != null)) {
                    this.LFS_M2_TABLESRowChanging(this, new LFS_M2_TABLESRowChangeEvent(((LFS_M2_TABLESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_M2_TABLESRowDeleted != null)) {
                    this.LFS_M2_TABLESRowDeleted(this, new LFS_M2_TABLESRowChangeEvent(((LFS_M2_TABLESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_M2_TABLESRowDeleting != null)) {
                    this.LFS_M2_TABLESRowDeleting(this, new LFS_M2_TABLESRowChangeEvent(((LFS_M2_TABLESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_M2_TABLESRow(LFS_M2_TABLESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSM2ReportByID ds = new TDSM2ReportByID();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_M2_TABLESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_MASTER_AREARow : global::System.Data.DataRow {
            
            private LFS_MASTER_AREADataTable tableLFS_MASTER_AREA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_MASTER_AREARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_MASTER_AREA = ((LFS_MASTER_AREADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableLFS_MASTER_AREA.IDColumn]));
                }
                set {
                    this[this.tableLFS_MASTER_AREA.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_MASTER_AREA.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_MASTER_AREA.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordID {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.RecordIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordID\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.RecordIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableLFS_MASTER_AREA.COMPANIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANIES_ID\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.COMPANIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMH {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMH {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConfirmedSize {
                get {
                    try {
                        return ((int)(this[this.tableLFS_MASTER_AREA.ConfirmedSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfirmedSize\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.ConfirmedSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LiveLats {
                get {
                    try {
                        return ((double)(this[this.tableLFS_MASTER_AREA.LiveLatsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveLats\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.LiveLatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime M2Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_MASTER_AREA.M2DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M2Date\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.M2DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VideoDoneFrom {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.VideoDoneFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDoneFrom\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.VideoDoneFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToManhole {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.ToManholeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToManhole\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.ToManholeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CutterDescriptionDuringMeasuring {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.CutterDescriptionDuringMeasuringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CutterDescriptionDuringMeasuring\' in table \'LFS_MASTER_AREA" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.CutterDescriptionDuringMeasuringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementType {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.MeasurementTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementType\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.MeasurementTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasuredFromManhole {
                get {
                    try {
                        return ((string)(this[this.tableLFS_MASTER_AREA.MeasuredFromManholeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasuredFromManhole\' in table \'LFS_MASTER_AREA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_MASTER_AREA.MeasuredFromManholeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordIDNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.RecordIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordIDNull() {
                this[this.tableLFS_MASTER_AREA.RecordIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANIES_IDNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.COMPANIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANIES_IDNull() {
                this[this.tableLFS_MASTER_AREA.COMPANIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableLFS_MASTER_AREA.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableLFS_MASTER_AREA.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableLFS_MASTER_AREA.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableLFS_MASTER_AREA.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedSizeNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.ConfirmedSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedSizeNull() {
                this[this.tableLFS_MASTER_AREA.ConfirmedSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveLatsNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.LiveLatsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveLatsNull() {
                this[this.tableLFS_MASTER_AREA.LiveLatsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM2DateNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.M2DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM2DateNull() {
                this[this.tableLFS_MASTER_AREA.M2DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDoneFromNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.VideoDoneFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDoneFromNull() {
                this[this.tableLFS_MASTER_AREA.VideoDoneFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToManholeNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.ToManholeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToManholeNull() {
                this[this.tableLFS_MASTER_AREA.ToManholeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCutterDescriptionDuringMeasuringNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.CutterDescriptionDuringMeasuringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCutterDescriptionDuringMeasuringNull() {
                this[this.tableLFS_MASTER_AREA.CutterDescriptionDuringMeasuringColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementTypeNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.MeasurementTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementTypeNull() {
                this[this.tableLFS_MASTER_AREA.MeasurementTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasuredFromManholeNull() {
                return this.IsNull(this.tableLFS_MASTER_AREA.MeasuredFromManholeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasuredFromManholeNull() {
                this[this.tableLFS_MASTER_AREA.MeasuredFromManholeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_M2_TABLESRow[] GetLFS_M2_TABLESRows() {
                if ((this.Table.ChildRelations["LFS_MASTER_AREALFS_M2_TABLES"] == null)) {
                    return new LFS_M2_TABLESRow[0];
                }
                else {
                    return ((LFS_M2_TABLESRow[])(base.GetChildRows(this.Table.ChildRelations["LFS_MASTER_AREALFS_M2_TABLES"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_M2_TABLESRow : global::System.Data.DataRow {
            
            private LFS_M2_TABLESDataTable tableLFS_M2_TABLES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_M2_TABLESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_M2_TABLES = ((LFS_M2_TABLESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableLFS_M2_TABLES.IDColumn]));
                }
                set {
                    this[this.tableLFS_M2_TABLES.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_M2_TABLES.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_M2_TABLES.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_M2_TABLES.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_M2_TABLES.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float VideoDistance {
                get {
                    try {
                        return ((float)(this[this.tableLFS_M2_TABLES.VideoDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDistance\' in table \'LFS_M2_TABLES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_M2_TABLES.VideoDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClockPosition {
                get {
                    try {
                        return ((string)(this[this.tableLFS_M2_TABLES.ClockPositionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClockPosition\' in table \'LFS_M2_TABLES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_M2_TABLES.ClockPositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LiveOrAbandoned {
                get {
                    try {
                        return ((string)(this[this.tableLFS_M2_TABLES.LiveOrAbandonedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveOrAbandoned\' in table \'LFS_M2_TABLES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_M2_TABLES.LiveOrAbandonedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceToCentreOfLateral {
                get {
                    try {
                        return ((string)(this[this.tableLFS_M2_TABLES.DistanceToCentreOfLateralColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToCentreOfLateral\' in table \'LFS_M2_TABLES\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableLFS_M2_TABLES.DistanceToCentreOfLateralColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralDiameter {
                get {
                    try {
                        return ((string)(this[this.tableLFS_M2_TABLES.LateralDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralDiameter\' in table \'LFS_M2_TABLES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_M2_TABLES.LateralDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralType {
                get {
                    try {
                        return ((string)(this[this.tableLFS_M2_TABLES.LateralTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralType\' in table \'LFS_M2_TABLES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_M2_TABLES.LateralTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateTimeOpened {
                get {
                    try {
                        return ((string)(this[this.tableLFS_M2_TABLES.DateTimeOpenedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTimeOpened\' in table \'LFS_M2_TABLES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_M2_TABLES.DateTimeOpenedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableLFS_M2_TABLES.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'LFS_M2_TABLES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_M2_TABLES.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReverseSetup {
                get {
                    try {
                        return ((string)(this[this.tableLFS_M2_TABLES.ReverseSetupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReverseSetup\' in table \'LFS_M2_TABLES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_M2_TABLES.ReverseSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_MASTER_AREARow LFS_MASTER_AREARowParent {
                get {
                    return ((LFS_MASTER_AREARow)(this.GetParentRow(this.Table.ParentRelations["LFS_MASTER_AREALFS_M2_TABLES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LFS_MASTER_AREALFS_M2_TABLES"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDistanceNull() {
                return this.IsNull(this.tableLFS_M2_TABLES.VideoDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDistanceNull() {
                this[this.tableLFS_M2_TABLES.VideoDistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClockPositionNull() {
                return this.IsNull(this.tableLFS_M2_TABLES.ClockPositionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClockPositionNull() {
                this[this.tableLFS_M2_TABLES.ClockPositionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveOrAbandonedNull() {
                return this.IsNull(this.tableLFS_M2_TABLES.LiveOrAbandonedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveOrAbandonedNull() {
                this[this.tableLFS_M2_TABLES.LiveOrAbandonedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToCentreOfLateralNull() {
                return this.IsNull(this.tableLFS_M2_TABLES.DistanceToCentreOfLateralColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToCentreOfLateralNull() {
                this[this.tableLFS_M2_TABLES.DistanceToCentreOfLateralColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralDiameterNull() {
                return this.IsNull(this.tableLFS_M2_TABLES.LateralDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralDiameterNull() {
                this[this.tableLFS_M2_TABLES.LateralDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralTypeNull() {
                return this.IsNull(this.tableLFS_M2_TABLES.LateralTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralTypeNull() {
                this[this.tableLFS_M2_TABLES.LateralTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTimeOpenedNull() {
                return this.IsNull(this.tableLFS_M2_TABLES.DateTimeOpenedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTimeOpenedNull() {
                this[this.tableLFS_M2_TABLES.DateTimeOpenedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableLFS_M2_TABLES.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableLFS_M2_TABLES.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReverseSetupNull() {
                return this.IsNull(this.tableLFS_M2_TABLES.ReverseSetupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReverseSetupNull() {
                this[this.tableLFS_M2_TABLES.ReverseSetupColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_MASTER_AREARowChangeEvent : global::System.EventArgs {
            
            private LFS_MASTER_AREARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_MASTER_AREARowChangeEvent(LFS_MASTER_AREARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_MASTER_AREARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_M2_TABLESRowChangeEvent : global::System.EventArgs {
            
            private LFS_M2_TABLESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_M2_TABLESRowChangeEvent(LFS_M2_TABLESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_M2_TABLESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591