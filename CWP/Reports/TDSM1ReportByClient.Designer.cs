//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.CWP.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TDSM1ReportByClient")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TDSM1ReportByClient : global::System.Data.DataSet {
        
        private M1ReportByClientDataTable tableM1ReportByClient;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TDSM1ReportByClient() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TDSM1ReportByClient(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["M1ReportByClient"] != null)) {
                    base.Tables.Add(new M1ReportByClientDataTable(ds.Tables["M1ReportByClient"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public M1ReportByClientDataTable M1ReportByClient {
            get {
                return this.tableM1ReportByClient;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TDSM1ReportByClient cln = ((TDSM1ReportByClient)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["M1ReportByClient"] != null)) {
                    base.Tables.Add(new M1ReportByClientDataTable(ds.Tables["M1ReportByClient"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableM1ReportByClient = ((M1ReportByClientDataTable)(base.Tables["M1ReportByClient"]));
            if ((initTable == true)) {
                if ((this.tableM1ReportByClient != null)) {
                    this.tableM1ReportByClient.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TDSM1ReportByClient";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TDSM1ReportByClient.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableM1ReportByClient = new M1ReportByClientDataTable();
            base.Tables.Add(this.tableM1ReportByClient);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeM1ReportByClient() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TDSM1ReportByClient ds = new TDSM1ReportByClient();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void M1ReportByClientRowChangeEventHandler(object sender, M1ReportByClientRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class M1ReportByClientDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnRecordID;
            
            private global::System.Data.DataColumn columnCOMPANIES_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnSubArea;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnActualLength;
            
            private global::System.Data.DataColumn columnM1Date;
            
            private global::System.Data.DataColumn columnConfirmedSize;
            
            private global::System.Data.DataColumn columnUSMHMN;
            
            private global::System.Data.DataColumn columnDSMHMN;
            
            private global::System.Data.DataColumn columnUSMHDepth;
            
            private global::System.Data.DataColumn columnDSMHDepth;
            
            private global::System.Data.DataColumn columnMeasurementsTakenBy;
            
            private global::System.Data.DataColumn columnUSMHAtMouth1200;
            
            private global::System.Data.DataColumn columnUSMHAtMouth100;
            
            private global::System.Data.DataColumn columnUSMHAtMouth200;
            
            private global::System.Data.DataColumn columnUSMHAtMouth300;
            
            private global::System.Data.DataColumn columnUSMHAtMouth400;
            
            private global::System.Data.DataColumn columnUSMHAtMouth500;
            
            private global::System.Data.DataColumn columnDSMHAtMouth1200;
            
            private global::System.Data.DataColumn columnDSMHAtMouth100;
            
            private global::System.Data.DataColumn columnDSMHAtMouth200;
            
            private global::System.Data.DataColumn columnDSMHAtMouth300;
            
            private global::System.Data.DataColumn columnDSMHAtMouth400;
            
            private global::System.Data.DataColumn columnDSMHAtMouth500;
            
            private global::System.Data.DataColumn columnHydrantAddress;
            
            private global::System.Data.DataColumn columnDistanceToInversionMH;
            
            private global::System.Data.DataColumn columnRampsRequired;
            
            private global::System.Data.DataColumn columnDegreeOfTrafficControl;
            
            private global::System.Data.DataColumn columnTrafficControl;
            
            private global::System.Data.DataColumn columnStandarBypass;
            
            private global::System.Data.DataColumn columnHydroWireDetails;
            
            private global::System.Data.DataColumn columnPipeMaterialType;
            
            private global::System.Data.DataColumn columnRoboticPrepRequired;
            
            private global::System.Data.DataColumn columnPipeSizeChange;
            
            private global::System.Data.DataColumn columnM1Comments;
            
            private global::System.Data.DataColumn columnTrafficControlDetails;
            
            private global::System.Data.DataColumn columnLineWithID;
            
            private global::System.Data.DataColumn columnSchoolZone;
            
            private global::System.Data.DataColumn columnRestaurantArea;
            
            private global::System.Data.DataColumn columnCarwashLaundromat;
            
            private global::System.Data.DataColumn columnHydroPulley;
            
            private global::System.Data.DataColumn columnFridgeCart;
            
            private global::System.Data.DataColumn columnTwoInchPump;
            
            private global::System.Data.DataColumn columnSixInchBypass;
            
            private global::System.Data.DataColumn columnScaffolding;
            
            private global::System.Data.DataColumn columnWinchExtension;
            
            private global::System.Data.DataColumn columnExtraGenerator;
            
            private global::System.Data.DataColumn columnGreyCableExtension;
            
            private global::System.Data.DataColumn columnEasementMats;
            
            private global::System.Data.DataColumn columnDropPipe;
            
            private global::System.Data.DataColumn columnDropPipeInvertDepth;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientDataTable() {
                this.TableName = "M1ReportByClient";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M1ReportByClientDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected M1ReportByClientDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordIDColumn {
                get {
                    return this.columnRecordID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANIES_IDColumn {
                get {
                    return this.columnCOMPANIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaColumn {
                get {
                    return this.columnSubArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualLengthColumn {
                get {
                    return this.columnActualLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M1DateColumn {
                get {
                    return this.columnM1Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedSizeColumn {
                get {
                    return this.columnConfirmedSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHMNColumn {
                get {
                    return this.columnUSMHMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHMNColumn {
                get {
                    return this.columnDSMHMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHDepthColumn {
                get {
                    return this.columnUSMHDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHDepthColumn {
                get {
                    return this.columnDSMHDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementsTakenByColumn {
                get {
                    return this.columnMeasurementsTakenBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHAtMouth1200Column {
                get {
                    return this.columnUSMHAtMouth1200;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHAtMouth100Column {
                get {
                    return this.columnUSMHAtMouth100;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHAtMouth200Column {
                get {
                    return this.columnUSMHAtMouth200;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHAtMouth300Column {
                get {
                    return this.columnUSMHAtMouth300;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHAtMouth400Column {
                get {
                    return this.columnUSMHAtMouth400;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHAtMouth500Column {
                get {
                    return this.columnUSMHAtMouth500;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHAtMouth1200Column {
                get {
                    return this.columnDSMHAtMouth1200;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHAtMouth100Column {
                get {
                    return this.columnDSMHAtMouth100;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHAtMouth200Column {
                get {
                    return this.columnDSMHAtMouth200;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHAtMouth300Column {
                get {
                    return this.columnDSMHAtMouth300;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHAtMouth400Column {
                get {
                    return this.columnDSMHAtMouth400;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHAtMouth500Column {
                get {
                    return this.columnDSMHAtMouth500;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydrantAddressColumn {
                get {
                    return this.columnHydrantAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToInversionMHColumn {
                get {
                    return this.columnDistanceToInversionMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RampsRequiredColumn {
                get {
                    return this.columnRampsRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DegreeOfTrafficControlColumn {
                get {
                    return this.columnDegreeOfTrafficControl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlColumn {
                get {
                    return this.columnTrafficControl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StandarBypassColumn {
                get {
                    return this.columnStandarBypass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydroWireDetailsColumn {
                get {
                    return this.columnHydroWireDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeMaterialTypeColumn {
                get {
                    return this.columnPipeMaterialType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoboticPrepRequiredColumn {
                get {
                    return this.columnRoboticPrepRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeSizeChangeColumn {
                get {
                    return this.columnPipeSizeChange;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M1CommentsColumn {
                get {
                    return this.columnM1Comments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrafficControlDetailsColumn {
                get {
                    return this.columnTrafficControlDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineWithIDColumn {
                get {
                    return this.columnLineWithID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolZoneColumn {
                get {
                    return this.columnSchoolZone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RestaurantAreaColumn {
                get {
                    return this.columnRestaurantArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CarwashLaundromatColumn {
                get {
                    return this.columnCarwashLaundromat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HydroPulleyColumn {
                get {
                    return this.columnHydroPulley;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FridgeCartColumn {
                get {
                    return this.columnFridgeCart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TwoInchPumpColumn {
                get {
                    return this.columnTwoInchPump;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SixInchBypassColumn {
                get {
                    return this.columnSixInchBypass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScaffoldingColumn {
                get {
                    return this.columnScaffolding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WinchExtensionColumn {
                get {
                    return this.columnWinchExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExtraGeneratorColumn {
                get {
                    return this.columnExtraGenerator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GreyCableExtensionColumn {
                get {
                    return this.columnGreyCableExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EasementMatsColumn {
                get {
                    return this.columnEasementMats;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropPipeColumn {
                get {
                    return this.columnDropPipe;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DropPipeInvertDepthColumn {
                get {
                    return this.columnDropPipeInvertDepth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow this[int index] {
                get {
                    return ((M1ReportByClientRow)(this.Rows[index]));
                }
            }
            
            public event M1ReportByClientRowChangeEventHandler M1ReportByClientRowChanging;
            
            public event M1ReportByClientRowChangeEventHandler M1ReportByClientRowChanged;
            
            public event M1ReportByClientRowChangeEventHandler M1ReportByClientRowDeleting;
            
            public event M1ReportByClientRowChangeEventHandler M1ReportByClientRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddM1ReportByClientRow(M1ReportByClientRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow AddM1ReportByClientRow(
                        string ID, 
                        int COMPANY_ID, 
                        string RecordID, 
                        int COMPANIES_ID, 
                        string NAME, 
                        string SubArea, 
                        string Street, 
                        string USMH, 
                        string DSMH, 
                        string ActualLength, 
                        System.DateTime M1Date, 
                        int ConfirmedSize, 
                        string USMHMN, 
                        string DSMHMN, 
                        string USMHDepth, 
                        string DSMHDepth, 
                        string MeasurementsTakenBy, 
                        double USMHAtMouth1200, 
                        double USMHAtMouth100, 
                        double USMHAtMouth200, 
                        double USMHAtMouth300, 
                        double USMHAtMouth400, 
                        double USMHAtMouth500, 
                        double DSMHAtMouth1200, 
                        double DSMHAtMouth100, 
                        double DSMHAtMouth200, 
                        double DSMHAtMouth300, 
                        double DSMHAtMouth400, 
                        double DSMHAtMouth500, 
                        string HydrantAddress, 
                        string DistanceToInversionMH, 
                        bool RampsRequired, 
                        string DegreeOfTrafficControl, 
                        string TrafficControl, 
                        bool StandarBypass, 
                        string HydroWireDetails, 
                        string PipeMaterialType, 
                        bool RoboticPrepRequired, 
                        bool PipeSizeChange, 
                        string M1Comments, 
                        string TrafficControlDetails, 
                        string LineWithID, 
                        bool SchoolZone, 
                        bool RestaurantArea, 
                        bool CarwashLaundromat, 
                        bool HydroPulley, 
                        bool FridgeCart, 
                        bool TwoInchPump, 
                        bool SixInchBypass, 
                        bool Scaffolding, 
                        bool WinchExtension, 
                        bool ExtraGenerator, 
                        bool GreyCableExtension, 
                        bool EasementMats, 
                        bool DropPipe, 
                        string DropPipeInvertDepth) {
                M1ReportByClientRow rowM1ReportByClientRow = ((M1ReportByClientRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        COMPANY_ID,
                        RecordID,
                        COMPANIES_ID,
                        NAME,
                        SubArea,
                        Street,
                        USMH,
                        DSMH,
                        ActualLength,
                        M1Date,
                        ConfirmedSize,
                        USMHMN,
                        DSMHMN,
                        USMHDepth,
                        DSMHDepth,
                        MeasurementsTakenBy,
                        USMHAtMouth1200,
                        USMHAtMouth100,
                        USMHAtMouth200,
                        USMHAtMouth300,
                        USMHAtMouth400,
                        USMHAtMouth500,
                        DSMHAtMouth1200,
                        DSMHAtMouth100,
                        DSMHAtMouth200,
                        DSMHAtMouth300,
                        DSMHAtMouth400,
                        DSMHAtMouth500,
                        HydrantAddress,
                        DistanceToInversionMH,
                        RampsRequired,
                        DegreeOfTrafficControl,
                        TrafficControl,
                        StandarBypass,
                        HydroWireDetails,
                        PipeMaterialType,
                        RoboticPrepRequired,
                        PipeSizeChange,
                        M1Comments,
                        TrafficControlDetails,
                        LineWithID,
                        SchoolZone,
                        RestaurantArea,
                        CarwashLaundromat,
                        HydroPulley,
                        FridgeCart,
                        TwoInchPump,
                        SixInchBypass,
                        Scaffolding,
                        WinchExtension,
                        ExtraGenerator,
                        GreyCableExtension,
                        EasementMats,
                        DropPipe,
                        DropPipeInvertDepth};
                rowM1ReportByClientRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowM1ReportByClientRow);
                return rowM1ReportByClientRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow FindByIDCOMPANY_ID(string ID, int COMPANY_ID) {
                return ((M1ReportByClientRow)(this.Rows.Find(new object[] {
                            ID,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                M1ReportByClientDataTable cln = ((M1ReportByClientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new M1ReportByClientDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnRecordID = base.Columns["RecordID"];
                this.columnCOMPANIES_ID = base.Columns["COMPANIES_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnSubArea = base.Columns["SubArea"];
                this.columnStreet = base.Columns["Street"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnActualLength = base.Columns["ActualLength"];
                this.columnM1Date = base.Columns["M1Date"];
                this.columnConfirmedSize = base.Columns["ConfirmedSize"];
                this.columnUSMHMN = base.Columns["USMHMN"];
                this.columnDSMHMN = base.Columns["DSMHMN"];
                this.columnUSMHDepth = base.Columns["USMHDepth"];
                this.columnDSMHDepth = base.Columns["DSMHDepth"];
                this.columnMeasurementsTakenBy = base.Columns["MeasurementsTakenBy"];
                this.columnUSMHAtMouth1200 = base.Columns["USMHAtMouth1200"];
                this.columnUSMHAtMouth100 = base.Columns["USMHAtMouth100"];
                this.columnUSMHAtMouth200 = base.Columns["USMHAtMouth200"];
                this.columnUSMHAtMouth300 = base.Columns["USMHAtMouth300"];
                this.columnUSMHAtMouth400 = base.Columns["USMHAtMouth400"];
                this.columnUSMHAtMouth500 = base.Columns["USMHAtMouth500"];
                this.columnDSMHAtMouth1200 = base.Columns["DSMHAtMouth1200"];
                this.columnDSMHAtMouth100 = base.Columns["DSMHAtMouth100"];
                this.columnDSMHAtMouth200 = base.Columns["DSMHAtMouth200"];
                this.columnDSMHAtMouth300 = base.Columns["DSMHAtMouth300"];
                this.columnDSMHAtMouth400 = base.Columns["DSMHAtMouth400"];
                this.columnDSMHAtMouth500 = base.Columns["DSMHAtMouth500"];
                this.columnHydrantAddress = base.Columns["HydrantAddress"];
                this.columnDistanceToInversionMH = base.Columns["DistanceToInversionMH"];
                this.columnRampsRequired = base.Columns["RampsRequired"];
                this.columnDegreeOfTrafficControl = base.Columns["DegreeOfTrafficControl"];
                this.columnTrafficControl = base.Columns["TrafficControl"];
                this.columnStandarBypass = base.Columns["StandarBypass"];
                this.columnHydroWireDetails = base.Columns["HydroWireDetails"];
                this.columnPipeMaterialType = base.Columns["PipeMaterialType"];
                this.columnRoboticPrepRequired = base.Columns["RoboticPrepRequired"];
                this.columnPipeSizeChange = base.Columns["PipeSizeChange"];
                this.columnM1Comments = base.Columns["M1Comments"];
                this.columnTrafficControlDetails = base.Columns["TrafficControlDetails"];
                this.columnLineWithID = base.Columns["LineWithID"];
                this.columnSchoolZone = base.Columns["SchoolZone"];
                this.columnRestaurantArea = base.Columns["RestaurantArea"];
                this.columnCarwashLaundromat = base.Columns["CarwashLaundromat"];
                this.columnHydroPulley = base.Columns["HydroPulley"];
                this.columnFridgeCart = base.Columns["FridgeCart"];
                this.columnTwoInchPump = base.Columns["TwoInchPump"];
                this.columnSixInchBypass = base.Columns["SixInchBypass"];
                this.columnScaffolding = base.Columns["Scaffolding"];
                this.columnWinchExtension = base.Columns["WinchExtension"];
                this.columnExtraGenerator = base.Columns["ExtraGenerator"];
                this.columnGreyCableExtension = base.Columns["GreyCableExtension"];
                this.columnEasementMats = base.Columns["EasementMats"];
                this.columnDropPipe = base.Columns["DropPipe"];
                this.columnDropPipeInvertDepth = base.Columns["DropPipeInvertDepth"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnRecordID = new global::System.Data.DataColumn("RecordID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordID);
                this.columnCOMPANIES_ID = new global::System.Data.DataColumn("COMPANIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANIES_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnSubArea = new global::System.Data.DataColumn("SubArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubArea);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnActualLength = new global::System.Data.DataColumn("ActualLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualLength);
                this.columnM1Date = new global::System.Data.DataColumn("M1Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM1Date);
                this.columnConfirmedSize = new global::System.Data.DataColumn("ConfirmedSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmedSize);
                this.columnUSMHMN = new global::System.Data.DataColumn("USMHMN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHMN);
                this.columnDSMHMN = new global::System.Data.DataColumn("DSMHMN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHMN);
                this.columnUSMHDepth = new global::System.Data.DataColumn("USMHDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHDepth);
                this.columnDSMHDepth = new global::System.Data.DataColumn("DSMHDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHDepth);
                this.columnMeasurementsTakenBy = new global::System.Data.DataColumn("MeasurementsTakenBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementsTakenBy);
                this.columnUSMHAtMouth1200 = new global::System.Data.DataColumn("USMHAtMouth1200", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHAtMouth1200);
                this.columnUSMHAtMouth100 = new global::System.Data.DataColumn("USMHAtMouth100", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHAtMouth100);
                this.columnUSMHAtMouth200 = new global::System.Data.DataColumn("USMHAtMouth200", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHAtMouth200);
                this.columnUSMHAtMouth300 = new global::System.Data.DataColumn("USMHAtMouth300", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHAtMouth300);
                this.columnUSMHAtMouth400 = new global::System.Data.DataColumn("USMHAtMouth400", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHAtMouth400);
                this.columnUSMHAtMouth500 = new global::System.Data.DataColumn("USMHAtMouth500", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMHAtMouth500);
                this.columnDSMHAtMouth1200 = new global::System.Data.DataColumn("DSMHAtMouth1200", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHAtMouth1200);
                this.columnDSMHAtMouth100 = new global::System.Data.DataColumn("DSMHAtMouth100", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHAtMouth100);
                this.columnDSMHAtMouth200 = new global::System.Data.DataColumn("DSMHAtMouth200", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHAtMouth200);
                this.columnDSMHAtMouth300 = new global::System.Data.DataColumn("DSMHAtMouth300", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHAtMouth300);
                this.columnDSMHAtMouth400 = new global::System.Data.DataColumn("DSMHAtMouth400", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHAtMouth400);
                this.columnDSMHAtMouth500 = new global::System.Data.DataColumn("DSMHAtMouth500", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMHAtMouth500);
                this.columnHydrantAddress = new global::System.Data.DataColumn("HydrantAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydrantAddress);
                this.columnDistanceToInversionMH = new global::System.Data.DataColumn("DistanceToInversionMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToInversionMH);
                this.columnRampsRequired = new global::System.Data.DataColumn("RampsRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRampsRequired);
                this.columnDegreeOfTrafficControl = new global::System.Data.DataColumn("DegreeOfTrafficControl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDegreeOfTrafficControl);
                this.columnTrafficControl = new global::System.Data.DataColumn("TrafficControl", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControl);
                this.columnStandarBypass = new global::System.Data.DataColumn("StandarBypass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStandarBypass);
                this.columnHydroWireDetails = new global::System.Data.DataColumn("HydroWireDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydroWireDetails);
                this.columnPipeMaterialType = new global::System.Data.DataColumn("PipeMaterialType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeMaterialType);
                this.columnRoboticPrepRequired = new global::System.Data.DataColumn("RoboticPrepRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoboticPrepRequired);
                this.columnPipeSizeChange = new global::System.Data.DataColumn("PipeSizeChange", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeSizeChange);
                this.columnM1Comments = new global::System.Data.DataColumn("M1Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM1Comments);
                this.columnTrafficControlDetails = new global::System.Data.DataColumn("TrafficControlDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrafficControlDetails);
                this.columnLineWithID = new global::System.Data.DataColumn("LineWithID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineWithID);
                this.columnSchoolZone = new global::System.Data.DataColumn("SchoolZone", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolZone);
                this.columnRestaurantArea = new global::System.Data.DataColumn("RestaurantArea", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRestaurantArea);
                this.columnCarwashLaundromat = new global::System.Data.DataColumn("CarwashLaundromat", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCarwashLaundromat);
                this.columnHydroPulley = new global::System.Data.DataColumn("HydroPulley", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHydroPulley);
                this.columnFridgeCart = new global::System.Data.DataColumn("FridgeCart", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFridgeCart);
                this.columnTwoInchPump = new global::System.Data.DataColumn("TwoInchPump", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTwoInchPump);
                this.columnSixInchBypass = new global::System.Data.DataColumn("SixInchBypass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSixInchBypass);
                this.columnScaffolding = new global::System.Data.DataColumn("Scaffolding", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScaffolding);
                this.columnWinchExtension = new global::System.Data.DataColumn("WinchExtension", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWinchExtension);
                this.columnExtraGenerator = new global::System.Data.DataColumn("ExtraGenerator", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExtraGenerator);
                this.columnGreyCableExtension = new global::System.Data.DataColumn("GreyCableExtension", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGreyCableExtension);
                this.columnEasementMats = new global::System.Data.DataColumn("EasementMats", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEasementMats);
                this.columnDropPipe = new global::System.Data.DataColumn("DropPipe", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropPipe);
                this.columnDropPipeInvertDepth = new global::System.Data.DataColumn("DropPipeInvertDepth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDropPipeInvertDepth);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TDSM1ReportByClientKey1", new global::System.Data.DataColumn[] {
                                this.columnID,
                                this.columnCOMPANY_ID}, true));
                this.columnID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow NewM1ReportByClientRow() {
                return ((M1ReportByClientRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new M1ReportByClientRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(M1ReportByClientRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.M1ReportByClientRowChanged != null)) {
                    this.M1ReportByClientRowChanged(this, new M1ReportByClientRowChangeEvent(((M1ReportByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.M1ReportByClientRowChanging != null)) {
                    this.M1ReportByClientRowChanging(this, new M1ReportByClientRowChangeEvent(((M1ReportByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.M1ReportByClientRowDeleted != null)) {
                    this.M1ReportByClientRowDeleted(this, new M1ReportByClientRowChangeEvent(((M1ReportByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.M1ReportByClientRowDeleting != null)) {
                    this.M1ReportByClientRowDeleting(this, new M1ReportByClientRowChangeEvent(((M1ReportByClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveM1ReportByClientRow(M1ReportByClientRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSM1ReportByClient ds = new TDSM1ReportByClient();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "M1ReportByClientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class M1ReportByClientRow : global::System.Data.DataRow {
            
            private M1ReportByClientDataTable tableM1ReportByClient;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal M1ReportByClientRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableM1ReportByClient = ((M1ReportByClientDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableM1ReportByClient.IDColumn]));
                }
                set {
                    this[this.tableM1ReportByClient.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableM1ReportByClient.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableM1ReportByClient.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordID {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.RecordIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecordID\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.RecordIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableM1ReportByClient.COMPANIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANIES_ID\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.COMPANIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubArea {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.SubAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubArea\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.SubAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMH {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMH {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualLength {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.ActualLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualLength\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.ActualLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime M1Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableM1ReportByClient.M1DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M1Date\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.M1DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConfirmedSize {
                get {
                    try {
                        return ((int)(this[this.tableM1ReportByClient.ConfirmedSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfirmedSize\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.ConfirmedSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHMN {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHMNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHMN\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHMNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHMN {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHMNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHMN\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHMNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMHDepth {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.USMHDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHDepth\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMHDepth {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DSMHDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHDepth\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementsTakenBy {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.MeasurementsTakenByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementsTakenBy\' in table \'M1ReportByClient\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.MeasurementsTakenByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double USMHAtMouth1200 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.USMHAtMouth1200Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHAtMouth1200\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHAtMouth1200Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double USMHAtMouth100 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.USMHAtMouth100Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHAtMouth100\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHAtMouth100Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double USMHAtMouth200 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.USMHAtMouth200Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHAtMouth200\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHAtMouth200Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double USMHAtMouth300 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.USMHAtMouth300Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHAtMouth300\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHAtMouth300Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double USMHAtMouth400 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.USMHAtMouth400Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHAtMouth400\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHAtMouth400Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double USMHAtMouth500 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.USMHAtMouth500Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMHAtMouth500\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.USMHAtMouth500Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DSMHAtMouth1200 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.DSMHAtMouth1200Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHAtMouth1200\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHAtMouth1200Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DSMHAtMouth100 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.DSMHAtMouth100Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHAtMouth100\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHAtMouth100Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DSMHAtMouth200 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.DSMHAtMouth200Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHAtMouth200\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHAtMouth200Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DSMHAtMouth300 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.DSMHAtMouth300Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHAtMouth300\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHAtMouth300Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DSMHAtMouth400 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.DSMHAtMouth400Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHAtMouth400\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHAtMouth400Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DSMHAtMouth500 {
                get {
                    try {
                        return ((double)(this[this.tableM1ReportByClient.DSMHAtMouth500Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMHAtMouth500\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DSMHAtMouth500Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HydrantAddress {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.HydrantAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydrantAddress\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.HydrantAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceToInversionMH {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DistanceToInversionMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToInversionMH\' in table \'M1ReportByClient\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DistanceToInversionMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RampsRequired {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.RampsRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RampsRequired\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.RampsRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DegreeOfTrafficControl {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DegreeOfTrafficControlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DegreeOfTrafficControl\' in table \'M1ReportByClient\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DegreeOfTrafficControlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControl {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.TrafficControlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControl\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.TrafficControlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool StandarBypass {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.StandarBypassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StandarBypass\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.StandarBypassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HydroWireDetails {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.HydroWireDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydroWireDetails\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.HydroWireDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeMaterialType {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.PipeMaterialTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeMaterialType\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.PipeMaterialTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RoboticPrepRequired {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.RoboticPrepRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RoboticPrepRequired\' in table \'M1ReportByClient\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.RoboticPrepRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PipeSizeChange {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.PipeSizeChangeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeSizeChange\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.PipeSizeChangeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string M1Comments {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.M1CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M1Comments\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.M1CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrafficControlDetails {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.TrafficControlDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrafficControlDetails\' in table \'M1ReportByClient\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.TrafficControlDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LineWithID {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.LineWithIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LineWithID\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.LineWithIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SchoolZone {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.SchoolZoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolZone\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.SchoolZoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RestaurantArea {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.RestaurantAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RestaurantArea\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.RestaurantAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CarwashLaundromat {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.CarwashLaundromatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CarwashLaundromat\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.CarwashLaundromatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HydroPulley {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.HydroPulleyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HydroPulley\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.HydroPulleyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FridgeCart {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.FridgeCartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FridgeCart\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.FridgeCartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool TwoInchPump {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.TwoInchPumpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TwoInchPump\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.TwoInchPumpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SixInchBypass {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.SixInchBypassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SixInchBypass\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.SixInchBypassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Scaffolding {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.ScaffoldingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scaffolding\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.ScaffoldingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool WinchExtension {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.WinchExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WinchExtension\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.WinchExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ExtraGenerator {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.ExtraGeneratorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExtraGenerator\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.ExtraGeneratorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool GreyCableExtension {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.GreyCableExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GreyCableExtension\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.GreyCableExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EasementMats {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.EasementMatsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EasementMats\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.EasementMatsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool DropPipe {
                get {
                    try {
                        return ((bool)(this[this.tableM1ReportByClient.DropPipeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropPipe\' in table \'M1ReportByClient\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DropPipeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DropPipeInvertDepth {
                get {
                    try {
                        return ((string)(this[this.tableM1ReportByClient.DropPipeInvertDepthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DropPipeInvertDepth\' in table \'M1ReportByClient\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableM1ReportByClient.DropPipeInvertDepthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordIDNull() {
                return this.IsNull(this.tableM1ReportByClient.RecordIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecordIDNull() {
                this[this.tableM1ReportByClient.RecordIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANIES_IDNull() {
                return this.IsNull(this.tableM1ReportByClient.COMPANIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANIES_IDNull() {
                this[this.tableM1ReportByClient.COMPANIES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableM1ReportByClient.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableM1ReportByClient.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaNull() {
                return this.IsNull(this.tableM1ReportByClient.SubAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaNull() {
                this[this.tableM1ReportByClient.SubAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableM1ReportByClient.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableM1ReportByClient.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableM1ReportByClient.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableM1ReportByClient.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableM1ReportByClient.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableM1ReportByClient.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualLengthNull() {
                return this.IsNull(this.tableM1ReportByClient.ActualLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualLengthNull() {
                this[this.tableM1ReportByClient.ActualLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM1DateNull() {
                return this.IsNull(this.tableM1ReportByClient.M1DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM1DateNull() {
                this[this.tableM1ReportByClient.M1DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedSizeNull() {
                return this.IsNull(this.tableM1ReportByClient.ConfirmedSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedSizeNull() {
                this[this.tableM1ReportByClient.ConfirmedSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHMNNull() {
                return this.IsNull(this.tableM1ReportByClient.USMHMNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHMNNull() {
                this[this.tableM1ReportByClient.USMHMNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHMNNull() {
                return this.IsNull(this.tableM1ReportByClient.DSMHMNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHMNNull() {
                this[this.tableM1ReportByClient.DSMHMNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHDepthNull() {
                return this.IsNull(this.tableM1ReportByClient.USMHDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHDepthNull() {
                this[this.tableM1ReportByClient.USMHDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHDepthNull() {
                return this.IsNull(this.tableM1ReportByClient.DSMHDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHDepthNull() {
                this[this.tableM1ReportByClient.DSMHDepthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementsTakenByNull() {
                return this.IsNull(this.tableM1ReportByClient.MeasurementsTakenByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementsTakenByNull() {
                this[this.tableM1ReportByClient.MeasurementsTakenByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHAtMouth1200Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHAtMouth1200Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHAtMouth1200Null() {
                this[this.tableM1ReportByClient.USMHAtMouth1200Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHAtMouth100Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHAtMouth100Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHAtMouth100Null() {
                this[this.tableM1ReportByClient.USMHAtMouth100Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHAtMouth200Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHAtMouth200Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHAtMouth200Null() {
                this[this.tableM1ReportByClient.USMHAtMouth200Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHAtMouth300Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHAtMouth300Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHAtMouth300Null() {
                this[this.tableM1ReportByClient.USMHAtMouth300Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHAtMouth400Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHAtMouth400Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHAtMouth400Null() {
                this[this.tableM1ReportByClient.USMHAtMouth400Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHAtMouth500Null() {
                return this.IsNull(this.tableM1ReportByClient.USMHAtMouth500Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHAtMouth500Null() {
                this[this.tableM1ReportByClient.USMHAtMouth500Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHAtMouth1200Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHAtMouth1200Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHAtMouth1200Null() {
                this[this.tableM1ReportByClient.DSMHAtMouth1200Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHAtMouth100Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHAtMouth100Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHAtMouth100Null() {
                this[this.tableM1ReportByClient.DSMHAtMouth100Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHAtMouth200Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHAtMouth200Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHAtMouth200Null() {
                this[this.tableM1ReportByClient.DSMHAtMouth200Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHAtMouth300Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHAtMouth300Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHAtMouth300Null() {
                this[this.tableM1ReportByClient.DSMHAtMouth300Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHAtMouth400Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHAtMouth400Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHAtMouth400Null() {
                this[this.tableM1ReportByClient.DSMHAtMouth400Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHAtMouth500Null() {
                return this.IsNull(this.tableM1ReportByClient.DSMHAtMouth500Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHAtMouth500Null() {
                this[this.tableM1ReportByClient.DSMHAtMouth500Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydrantAddressNull() {
                return this.IsNull(this.tableM1ReportByClient.HydrantAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydrantAddressNull() {
                this[this.tableM1ReportByClient.HydrantAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToInversionMHNull() {
                return this.IsNull(this.tableM1ReportByClient.DistanceToInversionMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToInversionMHNull() {
                this[this.tableM1ReportByClient.DistanceToInversionMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRampsRequiredNull() {
                return this.IsNull(this.tableM1ReportByClient.RampsRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRampsRequiredNull() {
                this[this.tableM1ReportByClient.RampsRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDegreeOfTrafficControlNull() {
                return this.IsNull(this.tableM1ReportByClient.DegreeOfTrafficControlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDegreeOfTrafficControlNull() {
                this[this.tableM1ReportByClient.DegreeOfTrafficControlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlNull() {
                return this.IsNull(this.tableM1ReportByClient.TrafficControlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlNull() {
                this[this.tableM1ReportByClient.TrafficControlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStandarBypassNull() {
                return this.IsNull(this.tableM1ReportByClient.StandarBypassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStandarBypassNull() {
                this[this.tableM1ReportByClient.StandarBypassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydroWireDetailsNull() {
                return this.IsNull(this.tableM1ReportByClient.HydroWireDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydroWireDetailsNull() {
                this[this.tableM1ReportByClient.HydroWireDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeMaterialTypeNull() {
                return this.IsNull(this.tableM1ReportByClient.PipeMaterialTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeMaterialTypeNull() {
                this[this.tableM1ReportByClient.PipeMaterialTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoboticPrepRequiredNull() {
                return this.IsNull(this.tableM1ReportByClient.RoboticPrepRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoboticPrepRequiredNull() {
                this[this.tableM1ReportByClient.RoboticPrepRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeSizeChangeNull() {
                return this.IsNull(this.tableM1ReportByClient.PipeSizeChangeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeSizeChangeNull() {
                this[this.tableM1ReportByClient.PipeSizeChangeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM1CommentsNull() {
                return this.IsNull(this.tableM1ReportByClient.M1CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM1CommentsNull() {
                this[this.tableM1ReportByClient.M1CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrafficControlDetailsNull() {
                return this.IsNull(this.tableM1ReportByClient.TrafficControlDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrafficControlDetailsNull() {
                this[this.tableM1ReportByClient.TrafficControlDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineWithIDNull() {
                return this.IsNull(this.tableM1ReportByClient.LineWithIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineWithIDNull() {
                this[this.tableM1ReportByClient.LineWithIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolZoneNull() {
                return this.IsNull(this.tableM1ReportByClient.SchoolZoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolZoneNull() {
                this[this.tableM1ReportByClient.SchoolZoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRestaurantAreaNull() {
                return this.IsNull(this.tableM1ReportByClient.RestaurantAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRestaurantAreaNull() {
                this[this.tableM1ReportByClient.RestaurantAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCarwashLaundromatNull() {
                return this.IsNull(this.tableM1ReportByClient.CarwashLaundromatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCarwashLaundromatNull() {
                this[this.tableM1ReportByClient.CarwashLaundromatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHydroPulleyNull() {
                return this.IsNull(this.tableM1ReportByClient.HydroPulleyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHydroPulleyNull() {
                this[this.tableM1ReportByClient.HydroPulleyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFridgeCartNull() {
                return this.IsNull(this.tableM1ReportByClient.FridgeCartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFridgeCartNull() {
                this[this.tableM1ReportByClient.FridgeCartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTwoInchPumpNull() {
                return this.IsNull(this.tableM1ReportByClient.TwoInchPumpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTwoInchPumpNull() {
                this[this.tableM1ReportByClient.TwoInchPumpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSixInchBypassNull() {
                return this.IsNull(this.tableM1ReportByClient.SixInchBypassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSixInchBypassNull() {
                this[this.tableM1ReportByClient.SixInchBypassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScaffoldingNull() {
                return this.IsNull(this.tableM1ReportByClient.ScaffoldingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScaffoldingNull() {
                this[this.tableM1ReportByClient.ScaffoldingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWinchExtensionNull() {
                return this.IsNull(this.tableM1ReportByClient.WinchExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWinchExtensionNull() {
                this[this.tableM1ReportByClient.WinchExtensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExtraGeneratorNull() {
                return this.IsNull(this.tableM1ReportByClient.ExtraGeneratorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExtraGeneratorNull() {
                this[this.tableM1ReportByClient.ExtraGeneratorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGreyCableExtensionNull() {
                return this.IsNull(this.tableM1ReportByClient.GreyCableExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGreyCableExtensionNull() {
                this[this.tableM1ReportByClient.GreyCableExtensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEasementMatsNull() {
                return this.IsNull(this.tableM1ReportByClient.EasementMatsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEasementMatsNull() {
                this[this.tableM1ReportByClient.EasementMatsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropPipeNull() {
                return this.IsNull(this.tableM1ReportByClient.DropPipeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropPipeNull() {
                this[this.tableM1ReportByClient.DropPipeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDropPipeInvertDepthNull() {
                return this.IsNull(this.tableM1ReportByClient.DropPipeInvertDepthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDropPipeInvertDepthNull() {
                this[this.tableM1ReportByClient.DropPipeInvertDepthColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class M1ReportByClientRowChangeEvent : global::System.EventArgs {
            
            private M1ReportByClientRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRowChangeEvent(M1ReportByClientRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public M1ReportByClientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591