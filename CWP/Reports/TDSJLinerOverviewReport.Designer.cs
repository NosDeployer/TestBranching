//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.CWP.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TDSJLinerOverviewReport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TDSJLinerOverviewReport : global::System.Data.DataSet {
        
        private JLinerOverviewReportDataTable tableJLinerOverviewReport;
        
        private LFS_JUNCTION_LINERDataTable tableLFS_JUNCTION_LINER;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TDSJLinerOverviewReport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TDSJLinerOverviewReport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["JLinerOverviewReport"] != null)) {
                    base.Tables.Add(new JLinerOverviewReportDataTable(ds.Tables["JLinerOverviewReport"]));
                }
                if ((ds.Tables["LFS_JUNCTION_LINER"] != null)) {
                    base.Tables.Add(new LFS_JUNCTION_LINERDataTable(ds.Tables["LFS_JUNCTION_LINER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JLinerOverviewReportDataTable JLinerOverviewReport {
            get {
                return this.tableJLinerOverviewReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LFS_JUNCTION_LINERDataTable LFS_JUNCTION_LINER {
            get {
                return this.tableLFS_JUNCTION_LINER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TDSJLinerOverviewReport cln = ((TDSJLinerOverviewReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["JLinerOverviewReport"] != null)) {
                    base.Tables.Add(new JLinerOverviewReportDataTable(ds.Tables["JLinerOverviewReport"]));
                }
                if ((ds.Tables["LFS_JUNCTION_LINER"] != null)) {
                    base.Tables.Add(new LFS_JUNCTION_LINERDataTable(ds.Tables["LFS_JUNCTION_LINER"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableJLinerOverviewReport = ((JLinerOverviewReportDataTable)(base.Tables["JLinerOverviewReport"]));
            if ((initTable == true)) {
                if ((this.tableJLinerOverviewReport != null)) {
                    this.tableJLinerOverviewReport.InitVars();
                }
            }
            this.tableLFS_JUNCTION_LINER = ((LFS_JUNCTION_LINERDataTable)(base.Tables["LFS_JUNCTION_LINER"]));
            if ((initTable == true)) {
                if ((this.tableLFS_JUNCTION_LINER != null)) {
                    this.tableLFS_JUNCTION_LINER.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TDSJLinerOverviewReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TDSJLinerOverviewReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableJLinerOverviewReport = new JLinerOverviewReportDataTable();
            base.Tables.Add(this.tableJLinerOverviewReport);
            this.tableLFS_JUNCTION_LINER = new LFS_JUNCTION_LINERDataTable();
            base.Tables.Add(this.tableLFS_JUNCTION_LINER);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("JLinerOverviewReportLFS_JUNCTION_LINER", new global::System.Data.DataColumn[] {
                        this.tableJLinerOverviewReport.IDColumn,
                        this.tableJLinerOverviewReport.COMPANY_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLFS_JUNCTION_LINER.IDColumn,
                        this.tableLFS_JUNCTION_LINER.COMPANY_IDColumn});
            this.tableLFS_JUNCTION_LINER.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJLinerOverviewReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLFS_JUNCTION_LINER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TDSJLinerOverviewReport ds = new TDSJLinerOverviewReport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void JLinerOverviewReportRowChangeEventHandler(object sender, JLinerOverviewReportRowChangeEvent e);
        
        public delegate void LFS_JUNCTION_LINERRowChangeEventHandler(object sender, LFS_JUNCTION_LINERRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JLinerOverviewReportDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnCOMPANIES_ID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnSubArea;
            
            private global::System.Data.DataColumn columnStreet;
            
            private global::System.Data.DataColumn columnUSMH;
            
            private global::System.Data.DataColumn columnDSMH;
            
            private global::System.Data.DataColumn columnConfirmedSize;
            
            private global::System.Data.DataColumn columnActualLength;
            
            private global::System.Data.DataColumn columnP1Date;
            
            private global::System.Data.DataColumn columnMainLined;
            
            private global::System.Data.DataColumn columnBenchingIssue;
            
            private global::System.Data.DataColumn columnRecordID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLinerOverviewReportDataTable() {
                this.TableName = "JLinerOverviewReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JLinerOverviewReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JLinerOverviewReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANIES_IDColumn {
                get {
                    return this.columnCOMPANIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaColumn {
                get {
                    return this.columnSubArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreetColumn {
                get {
                    return this.columnStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USMHColumn {
                get {
                    return this.columnUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSMHColumn {
                get {
                    return this.columnDSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedSizeColumn {
                get {
                    return this.columnConfirmedSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualLengthColumn {
                get {
                    return this.columnActualLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P1DateColumn {
                get {
                    return this.columnP1Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainLinedColumn {
                get {
                    return this.columnMainLined;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BenchingIssueColumn {
                get {
                    return this.columnBenchingIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecordIDColumn {
                get {
                    return this.columnRecordID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLinerOverviewReportRow this[int index] {
                get {
                    return ((JLinerOverviewReportRow)(this.Rows[index]));
                }
            }
            
            public event JLinerOverviewReportRowChangeEventHandler JLinerOverviewReportRowChanging;
            
            public event JLinerOverviewReportRowChangeEventHandler JLinerOverviewReportRowChanged;
            
            public event JLinerOverviewReportRowChangeEventHandler JLinerOverviewReportRowDeleting;
            
            public event JLinerOverviewReportRowChangeEventHandler JLinerOverviewReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJLinerOverviewReportRow(JLinerOverviewReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLinerOverviewReportRow AddJLinerOverviewReportRow(string ID, int COMPANY_ID, int COMPANIES_ID, string Name, string SubArea, string Street, string USMH, string DSMH, int ConfirmedSize, string ActualLength, System.DateTime P1Date, string MainLined, string BenchingIssue, string RecordID) {
                JLinerOverviewReportRow rowJLinerOverviewReportRow = ((JLinerOverviewReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        COMPANY_ID,
                        COMPANIES_ID,
                        Name,
                        SubArea,
                        Street,
                        USMH,
                        DSMH,
                        ConfirmedSize,
                        ActualLength,
                        P1Date,
                        MainLined,
                        BenchingIssue,
                        RecordID};
                rowJLinerOverviewReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJLinerOverviewReportRow);
                return rowJLinerOverviewReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLinerOverviewReportRow FindByIDCOMPANY_ID(string ID, int COMPANY_ID) {
                return ((JLinerOverviewReportRow)(this.Rows.Find(new object[] {
                            ID,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JLinerOverviewReportDataTable cln = ((JLinerOverviewReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JLinerOverviewReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnCOMPANIES_ID = base.Columns["COMPANIES_ID"];
                this.columnName = base.Columns["Name"];
                this.columnSubArea = base.Columns["SubArea"];
                this.columnStreet = base.Columns["Street"];
                this.columnUSMH = base.Columns["USMH"];
                this.columnDSMH = base.Columns["DSMH"];
                this.columnConfirmedSize = base.Columns["ConfirmedSize"];
                this.columnActualLength = base.Columns["ActualLength"];
                this.columnP1Date = base.Columns["P1Date"];
                this.columnMainLined = base.Columns["MainLined"];
                this.columnBenchingIssue = base.Columns["BenchingIssue"];
                this.columnRecordID = base.Columns["RecordID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnCOMPANIES_ID = new global::System.Data.DataColumn("COMPANIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANIES_ID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnSubArea = new global::System.Data.DataColumn("SubArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubArea);
                this.columnStreet = new global::System.Data.DataColumn("Street", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStreet);
                this.columnUSMH = new global::System.Data.DataColumn("USMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSMH);
                this.columnDSMH = new global::System.Data.DataColumn("DSMH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSMH);
                this.columnConfirmedSize = new global::System.Data.DataColumn("ConfirmedSize", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmedSize);
                this.columnActualLength = new global::System.Data.DataColumn("ActualLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualLength);
                this.columnP1Date = new global::System.Data.DataColumn("P1Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP1Date);
                this.columnMainLined = new global::System.Data.DataColumn("MainLined", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainLined);
                this.columnBenchingIssue = new global::System.Data.DataColumn("BenchingIssue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBenchingIssue);
                this.columnRecordID = new global::System.Data.DataColumn("RecordID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TDSJLinerOverviewReportKey1", new global::System.Data.DataColumn[] {
                                this.columnID,
                                this.columnCOMPANY_ID}, true));
                this.columnID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnCOMPANIES_ID.AllowDBNull = false;
                this.columnRecordID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLinerOverviewReportRow NewJLinerOverviewReportRow() {
                return ((JLinerOverviewReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JLinerOverviewReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JLinerOverviewReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JLinerOverviewReportRowChanged != null)) {
                    this.JLinerOverviewReportRowChanged(this, new JLinerOverviewReportRowChangeEvent(((JLinerOverviewReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JLinerOverviewReportRowChanging != null)) {
                    this.JLinerOverviewReportRowChanging(this, new JLinerOverviewReportRowChangeEvent(((JLinerOverviewReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JLinerOverviewReportRowDeleted != null)) {
                    this.JLinerOverviewReportRowDeleted(this, new JLinerOverviewReportRowChangeEvent(((JLinerOverviewReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JLinerOverviewReportRowDeleting != null)) {
                    this.JLinerOverviewReportRowDeleting(this, new JLinerOverviewReportRowChangeEvent(((JLinerOverviewReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJLinerOverviewReportRow(JLinerOverviewReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSJLinerOverviewReport ds = new TDSJLinerOverviewReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JLinerOverviewReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LFS_JUNCTION_LINERDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnDetailID;
            
            private global::System.Data.DataColumn columnMN;
            
            private global::System.Data.DataColumn columnDistanceFromUSMH;
            
            private global::System.Data.DataColumn columnCleanoutRequired;
            
            private global::System.Data.DataColumn columnPitRequired;
            
            private global::System.Data.DataColumn columnCleanoutInstalled;
            
            private global::System.Data.DataColumn columnPitInstalled;
            
            private global::System.Data.DataColumn columnCleanoutGrouted;
            
            private global::System.Data.DataColumn columnCleanoutCored;
            
            private global::System.Data.DataColumn columnPrepCompleted;
            
            private global::System.Data.DataColumn columnMainConnection;
            
            private global::System.Data.DataColumn columnTransition;
            
            private global::System.Data.DataColumn columnConfirmedLatSize;
            
            private global::System.Data.DataColumn columnMeasuredLatLength;
            
            private global::System.Data.DataColumn columnLinerOrdered;
            
            private global::System.Data.DataColumn columnLinerInStock;
            
            private global::System.Data.DataColumn columnLinerInstalled;
            
            private global::System.Data.DataColumn columnFinalVideo;
            
            private global::System.Data.DataColumn columnRestorationComplete;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_JUNCTION_LINERDataTable() {
                this.TableName = "LFS_JUNCTION_LINER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_JUNCTION_LINERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LFS_JUNCTION_LINERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailIDColumn {
                get {
                    return this.columnDetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MNColumn {
                get {
                    return this.columnMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromUSMHColumn {
                get {
                    return this.columnDistanceFromUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CleanoutRequiredColumn {
                get {
                    return this.columnCleanoutRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PitRequiredColumn {
                get {
                    return this.columnPitRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CleanoutInstalledColumn {
                get {
                    return this.columnCleanoutInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PitInstalledColumn {
                get {
                    return this.columnPitInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CleanoutGroutedColumn {
                get {
                    return this.columnCleanoutGrouted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CleanoutCoredColumn {
                get {
                    return this.columnCleanoutCored;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrepCompletedColumn {
                get {
                    return this.columnPrepCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainConnectionColumn {
                get {
                    return this.columnMainConnection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransitionColumn {
                get {
                    return this.columnTransition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedLatSizeColumn {
                get {
                    return this.columnConfirmedLatSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasuredLatLengthColumn {
                get {
                    return this.columnMeasuredLatLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerOrderedColumn {
                get {
                    return this.columnLinerOrdered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInStockColumn {
                get {
                    return this.columnLinerInStock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInstalledColumn {
                get {
                    return this.columnLinerInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalVideoColumn {
                get {
                    return this.columnFinalVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RestorationCompleteColumn {
                get {
                    return this.columnRestorationComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_JUNCTION_LINERRow this[int index] {
                get {
                    return ((LFS_JUNCTION_LINERRow)(this.Rows[index]));
                }
            }
            
            public event LFS_JUNCTION_LINERRowChangeEventHandler LFS_JUNCTION_LINERRowChanging;
            
            public event LFS_JUNCTION_LINERRowChangeEventHandler LFS_JUNCTION_LINERRowChanged;
            
            public event LFS_JUNCTION_LINERRowChangeEventHandler LFS_JUNCTION_LINERRowDeleting;
            
            public event LFS_JUNCTION_LINERRowChangeEventHandler LFS_JUNCTION_LINERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLFS_JUNCTION_LINERRow(LFS_JUNCTION_LINERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_JUNCTION_LINERRow AddLFS_JUNCTION_LINERRow(
                        string ID, 
                        int RefID, 
                        int COMPANY_ID, 
                        string DetailID, 
                        string MN, 
                        double DistanceFromUSMH, 
                        bool CleanoutRequired, 
                        bool PitRequired, 
                        bool CleanoutInstalled, 
                        bool PitInstalled, 
                        bool CleanoutGrouted, 
                        bool CleanoutCored, 
                        System.DateTime PrepCompleted, 
                        string MainConnection, 
                        string Transition, 
                        string ConfirmedLatSize, 
                        string MeasuredLatLength, 
                        bool LinerOrdered, 
                        bool LinerInStock, 
                        System.DateTime LinerInstalled, 
                        System.DateTime FinalVideo, 
                        bool RestorationComplete) {
                LFS_JUNCTION_LINERRow rowLFS_JUNCTION_LINERRow = ((LFS_JUNCTION_LINERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        RefID,
                        COMPANY_ID,
                        DetailID,
                        MN,
                        DistanceFromUSMH,
                        CleanoutRequired,
                        PitRequired,
                        CleanoutInstalled,
                        PitInstalled,
                        CleanoutGrouted,
                        CleanoutCored,
                        PrepCompleted,
                        MainConnection,
                        Transition,
                        ConfirmedLatSize,
                        MeasuredLatLength,
                        LinerOrdered,
                        LinerInStock,
                        LinerInstalled,
                        FinalVideo,
                        RestorationComplete};
                rowLFS_JUNCTION_LINERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLFS_JUNCTION_LINERRow);
                return rowLFS_JUNCTION_LINERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LFS_JUNCTION_LINERDataTable cln = ((LFS_JUNCTION_LINERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LFS_JUNCTION_LINERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnDetailID = base.Columns["DetailID"];
                this.columnMN = base.Columns["MN"];
                this.columnDistanceFromUSMH = base.Columns["DistanceFromUSMH"];
                this.columnCleanoutRequired = base.Columns["CleanoutRequired"];
                this.columnPitRequired = base.Columns["PitRequired"];
                this.columnCleanoutInstalled = base.Columns["CleanoutInstalled"];
                this.columnPitInstalled = base.Columns["PitInstalled"];
                this.columnCleanoutGrouted = base.Columns["CleanoutGrouted"];
                this.columnCleanoutCored = base.Columns["CleanoutCored"];
                this.columnPrepCompleted = base.Columns["PrepCompleted"];
                this.columnMainConnection = base.Columns["MainConnection"];
                this.columnTransition = base.Columns["Transition"];
                this.columnConfirmedLatSize = base.Columns["ConfirmedLatSize"];
                this.columnMeasuredLatLength = base.Columns["MeasuredLatLength"];
                this.columnLinerOrdered = base.Columns["LinerOrdered"];
                this.columnLinerInStock = base.Columns["LinerInStock"];
                this.columnLinerInstalled = base.Columns["LinerInstalled"];
                this.columnFinalVideo = base.Columns["FinalVideo"];
                this.columnRestorationComplete = base.Columns["RestorationComplete"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnDetailID = new global::System.Data.DataColumn("DetailID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailID);
                this.columnMN = new global::System.Data.DataColumn("MN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMN);
                this.columnDistanceFromUSMH = new global::System.Data.DataColumn("DistanceFromUSMH", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromUSMH);
                this.columnCleanoutRequired = new global::System.Data.DataColumn("CleanoutRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanoutRequired);
                this.columnPitRequired = new global::System.Data.DataColumn("PitRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPitRequired);
                this.columnCleanoutInstalled = new global::System.Data.DataColumn("CleanoutInstalled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanoutInstalled);
                this.columnPitInstalled = new global::System.Data.DataColumn("PitInstalled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPitInstalled);
                this.columnCleanoutGrouted = new global::System.Data.DataColumn("CleanoutGrouted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanoutGrouted);
                this.columnCleanoutCored = new global::System.Data.DataColumn("CleanoutCored", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanoutCored);
                this.columnPrepCompleted = new global::System.Data.DataColumn("PrepCompleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrepCompleted);
                this.columnMainConnection = new global::System.Data.DataColumn("MainConnection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainConnection);
                this.columnTransition = new global::System.Data.DataColumn("Transition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransition);
                this.columnConfirmedLatSize = new global::System.Data.DataColumn("ConfirmedLatSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmedLatSize);
                this.columnMeasuredLatLength = new global::System.Data.DataColumn("MeasuredLatLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasuredLatLength);
                this.columnLinerOrdered = new global::System.Data.DataColumn("LinerOrdered", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerOrdered);
                this.columnLinerInStock = new global::System.Data.DataColumn("LinerInStock", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInStock);
                this.columnLinerInstalled = new global::System.Data.DataColumn("LinerInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInstalled);
                this.columnFinalVideo = new global::System.Data.DataColumn("FinalVideo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalVideo);
                this.columnRestorationComplete = new global::System.Data.DataColumn("RestorationComplete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRestorationComplete);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("TDSJLinerOverviewReportKey2", new global::System.Data.DataColumn[] {
                                this.columnID,
                                this.columnRefID,
                                this.columnCOMPANY_ID}, false));
                this.columnID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDetailID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_JUNCTION_LINERRow NewLFS_JUNCTION_LINERRow() {
                return ((LFS_JUNCTION_LINERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LFS_JUNCTION_LINERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LFS_JUNCTION_LINERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LFS_JUNCTION_LINERRowChanged != null)) {
                    this.LFS_JUNCTION_LINERRowChanged(this, new LFS_JUNCTION_LINERRowChangeEvent(((LFS_JUNCTION_LINERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LFS_JUNCTION_LINERRowChanging != null)) {
                    this.LFS_JUNCTION_LINERRowChanging(this, new LFS_JUNCTION_LINERRowChangeEvent(((LFS_JUNCTION_LINERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LFS_JUNCTION_LINERRowDeleted != null)) {
                    this.LFS_JUNCTION_LINERRowDeleted(this, new LFS_JUNCTION_LINERRowChangeEvent(((LFS_JUNCTION_LINERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LFS_JUNCTION_LINERRowDeleting != null)) {
                    this.LFS_JUNCTION_LINERRowDeleting(this, new LFS_JUNCTION_LINERRowChangeEvent(((LFS_JUNCTION_LINERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLFS_JUNCTION_LINERRow(LFS_JUNCTION_LINERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TDSJLinerOverviewReport ds = new TDSJLinerOverviewReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LFS_JUNCTION_LINERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JLinerOverviewReportRow : global::System.Data.DataRow {
            
            private JLinerOverviewReportDataTable tableJLinerOverviewReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JLinerOverviewReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJLinerOverviewReport = ((JLinerOverviewReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableJLinerOverviewReport.IDColumn]));
                }
                set {
                    this[this.tableJLinerOverviewReport.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableJLinerOverviewReport.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableJLinerOverviewReport.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANIES_ID {
                get {
                    return ((int)(this[this.tableJLinerOverviewReport.COMPANIES_IDColumn]));
                }
                set {
                    this[this.tableJLinerOverviewReport.COMPANIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableJLinerOverviewReport.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubArea {
                get {
                    try {
                        return ((string)(this[this.tableJLinerOverviewReport.SubAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubArea\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.SubAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Street {
                get {
                    try {
                        return ((string)(this[this.tableJLinerOverviewReport.StreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Street\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.StreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USMH {
                get {
                    try {
                        return ((string)(this[this.tableJLinerOverviewReport.USMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USMH\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.USMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DSMH {
                get {
                    try {
                        return ((string)(this[this.tableJLinerOverviewReport.DSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DSMH\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.DSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConfirmedSize {
                get {
                    try {
                        return ((int)(this[this.tableJLinerOverviewReport.ConfirmedSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfirmedSize\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.ConfirmedSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualLength {
                get {
                    try {
                        return ((string)(this[this.tableJLinerOverviewReport.ActualLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualLength\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.ActualLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime P1Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJLinerOverviewReport.P1DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P1Date\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.P1DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MainLined {
                get {
                    try {
                        return ((string)(this[this.tableJLinerOverviewReport.MainLinedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainLined\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.MainLinedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BenchingIssue {
                get {
                    try {
                        return ((string)(this[this.tableJLinerOverviewReport.BenchingIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BenchingIssue\' in table \'JLinerOverviewReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJLinerOverviewReport.BenchingIssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RecordID {
                get {
                    return ((string)(this[this.tableJLinerOverviewReport.RecordIDColumn]));
                }
                set {
                    this[this.tableJLinerOverviewReport.RecordIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableJLinerOverviewReport.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableJLinerOverviewReport.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaNull() {
                return this.IsNull(this.tableJLinerOverviewReport.SubAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaNull() {
                this[this.tableJLinerOverviewReport.SubAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreetNull() {
                return this.IsNull(this.tableJLinerOverviewReport.StreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreetNull() {
                this[this.tableJLinerOverviewReport.StreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSMHNull() {
                return this.IsNull(this.tableJLinerOverviewReport.USMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSMHNull() {
                this[this.tableJLinerOverviewReport.USMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDSMHNull() {
                return this.IsNull(this.tableJLinerOverviewReport.DSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDSMHNull() {
                this[this.tableJLinerOverviewReport.DSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedSizeNull() {
                return this.IsNull(this.tableJLinerOverviewReport.ConfirmedSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedSizeNull() {
                this[this.tableJLinerOverviewReport.ConfirmedSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualLengthNull() {
                return this.IsNull(this.tableJLinerOverviewReport.ActualLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualLengthNull() {
                this[this.tableJLinerOverviewReport.ActualLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP1DateNull() {
                return this.IsNull(this.tableJLinerOverviewReport.P1DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP1DateNull() {
                this[this.tableJLinerOverviewReport.P1DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainLinedNull() {
                return this.IsNull(this.tableJLinerOverviewReport.MainLinedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainLinedNull() {
                this[this.tableJLinerOverviewReport.MainLinedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBenchingIssueNull() {
                return this.IsNull(this.tableJLinerOverviewReport.BenchingIssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBenchingIssueNull() {
                this[this.tableJLinerOverviewReport.BenchingIssueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LFS_JUNCTION_LINERRow : global::System.Data.DataRow {
            
            private LFS_JUNCTION_LINERDataTable tableLFS_JUNCTION_LINER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LFS_JUNCTION_LINERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLFS_JUNCTION_LINER = ((LFS_JUNCTION_LINERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableLFS_JUNCTION_LINER.IDColumn]));
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLFS_JUNCTION_LINER.RefIDColumn]));
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLFS_JUNCTION_LINER.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DetailID {
                get {
                    return ((string)(this[this.tableLFS_JUNCTION_LINER.DetailIDColumn]));
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.DetailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MN {
                get {
                    try {
                        return ((string)(this[this.tableLFS_JUNCTION_LINER.MNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MN\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.MNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DistanceFromUSMH {
                get {
                    try {
                        return ((double)(this[this.tableLFS_JUNCTION_LINER.DistanceFromUSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromUSMH\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.DistanceFromUSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CleanoutRequired {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_JUNCTION_LINER.CleanoutRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CleanoutRequired\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.CleanoutRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PitRequired {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_JUNCTION_LINER.PitRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PitRequired\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.PitRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CleanoutInstalled {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_JUNCTION_LINER.CleanoutInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CleanoutInstalled\' in table \'LFS_JUNCTION_LINER\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.CleanoutInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PitInstalled {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_JUNCTION_LINER.PitInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PitInstalled\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.PitInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CleanoutGrouted {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_JUNCTION_LINER.CleanoutGroutedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CleanoutGrouted\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.CleanoutGroutedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CleanoutCored {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_JUNCTION_LINER.CleanoutCoredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CleanoutCored\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.CleanoutCoredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PrepCompleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_JUNCTION_LINER.PrepCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrepCompleted\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.PrepCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MainConnection {
                get {
                    try {
                        return ((string)(this[this.tableLFS_JUNCTION_LINER.MainConnectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainConnection\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.MainConnectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Transition {
                get {
                    try {
                        return ((string)(this[this.tableLFS_JUNCTION_LINER.TransitionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Transition\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.TransitionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmedLatSize {
                get {
                    try {
                        return ((string)(this[this.tableLFS_JUNCTION_LINER.ConfirmedLatSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfirmedLatSize\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.ConfirmedLatSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasuredLatLength {
                get {
                    try {
                        return ((string)(this[this.tableLFS_JUNCTION_LINER.MeasuredLatLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasuredLatLength\' in table \'LFS_JUNCTION_LINER\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.MeasuredLatLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LinerOrdered {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_JUNCTION_LINER.LinerOrderedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerOrdered\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.LinerOrderedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LinerInStock {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_JUNCTION_LINER.LinerInStockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInStock\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.LinerInStockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LinerInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_JUNCTION_LINER.LinerInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInstalled\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.LinerInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalVideo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLFS_JUNCTION_LINER.FinalVideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalVideo\' in table \'LFS_JUNCTION_LINER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.FinalVideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RestorationComplete {
                get {
                    try {
                        return ((bool)(this[this.tableLFS_JUNCTION_LINER.RestorationCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RestorationComplete\' in table \'LFS_JUNCTION_LINER\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLFS_JUNCTION_LINER.RestorationCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMNNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.MNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMNNull() {
                this[this.tableLFS_JUNCTION_LINER.MNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromUSMHNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.DistanceFromUSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromUSMHNull() {
                this[this.tableLFS_JUNCTION_LINER.DistanceFromUSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanoutRequiredNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.CleanoutRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanoutRequiredNull() {
                this[this.tableLFS_JUNCTION_LINER.CleanoutRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPitRequiredNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.PitRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPitRequiredNull() {
                this[this.tableLFS_JUNCTION_LINER.PitRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanoutInstalledNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.CleanoutInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanoutInstalledNull() {
                this[this.tableLFS_JUNCTION_LINER.CleanoutInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPitInstalledNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.PitInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPitInstalledNull() {
                this[this.tableLFS_JUNCTION_LINER.PitInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanoutGroutedNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.CleanoutGroutedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanoutGroutedNull() {
                this[this.tableLFS_JUNCTION_LINER.CleanoutGroutedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanoutCoredNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.CleanoutCoredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanoutCoredNull() {
                this[this.tableLFS_JUNCTION_LINER.CleanoutCoredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrepCompletedNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.PrepCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrepCompletedNull() {
                this[this.tableLFS_JUNCTION_LINER.PrepCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainConnectionNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.MainConnectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainConnectionNull() {
                this[this.tableLFS_JUNCTION_LINER.MainConnectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransitionNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.TransitionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransitionNull() {
                this[this.tableLFS_JUNCTION_LINER.TransitionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedLatSizeNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.ConfirmedLatSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedLatSizeNull() {
                this[this.tableLFS_JUNCTION_LINER.ConfirmedLatSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasuredLatLengthNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.MeasuredLatLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasuredLatLengthNull() {
                this[this.tableLFS_JUNCTION_LINER.MeasuredLatLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerOrderedNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.LinerOrderedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerOrderedNull() {
                this[this.tableLFS_JUNCTION_LINER.LinerOrderedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInStockNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.LinerInStockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInStockNull() {
                this[this.tableLFS_JUNCTION_LINER.LinerInStockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInstalledNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.LinerInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInstalledNull() {
                this[this.tableLFS_JUNCTION_LINER.LinerInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalVideoNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.FinalVideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalVideoNull() {
                this[this.tableLFS_JUNCTION_LINER.FinalVideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRestorationCompleteNull() {
                return this.IsNull(this.tableLFS_JUNCTION_LINER.RestorationCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRestorationCompleteNull() {
                this[this.tableLFS_JUNCTION_LINER.RestorationCompleteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JLinerOverviewReportRowChangeEvent : global::System.EventArgs {
            
            private JLinerOverviewReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLinerOverviewReportRowChangeEvent(JLinerOverviewReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JLinerOverviewReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LFS_JUNCTION_LINERRowChangeEvent : global::System.EventArgs {
            
            private LFS_JUNCTION_LINERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_JUNCTION_LINERRowChangeEvent(LFS_JUNCTION_LINERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LFS_JUNCTION_LINERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591