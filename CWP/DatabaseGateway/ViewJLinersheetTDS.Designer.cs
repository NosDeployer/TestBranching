//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.CWP.DatabaseGateway {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ViewJLinersheetTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ViewJLinersheetTDS : global::System.Data.DataSet {
        
        private JunctionLinerDataTable tableJunctionLiner;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewJLinersheetTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ViewJLinersheetTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["JunctionLiner"] != null)) {
                    base.Tables.Add(new JunctionLinerDataTable(ds.Tables["JunctionLiner"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JunctionLinerDataTable JunctionLiner {
            get {
                return this.tableJunctionLiner;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ViewJLinersheetTDS cln = ((ViewJLinersheetTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["JunctionLiner"] != null)) {
                    base.Tables.Add(new JunctionLinerDataTable(ds.Tables["JunctionLiner"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableJunctionLiner = ((JunctionLinerDataTable)(base.Tables["JunctionLiner"]));
            if ((initTable == true)) {
                if ((this.tableJunctionLiner != null)) {
                    this.tableJunctionLiner.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ViewJLinersheetTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ViewJLinersheetTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableJunctionLiner = new JunctionLinerDataTable();
            base.Tables.Add(this.tableJunctionLiner);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJunctionLiner() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ViewJLinersheetTDS ds = new ViewJLinersheetTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void JunctionLinerRowChangeEventHandler(object sender, JunctionLinerRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JunctionLinerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnDetailID;
            
            private global::System.Data.DataColumn columnMN;
            
            private global::System.Data.DataColumn columnDistanceFromUSMH;
            
            private global::System.Data.DataColumn columnConfirmedLatSize;
            
            private global::System.Data.DataColumn columnLateralMaterial;
            
            private global::System.Data.DataColumn columnSharedLateral;
            
            private global::System.Data.DataColumn columnCleanoutRequired;
            
            private global::System.Data.DataColumn columnPitRequired;
            
            private global::System.Data.DataColumn columnMHShot;
            
            private global::System.Data.DataColumn columnMainConnection;
            
            private global::System.Data.DataColumn columnTransition;
            
            private global::System.Data.DataColumn columnCleanoutInstalled;
            
            private global::System.Data.DataColumn columnPitInstalled;
            
            private global::System.Data.DataColumn columnCleanoutGrouted;
            
            private global::System.Data.DataColumn columnCleanoutCored;
            
            private global::System.Data.DataColumn columnPrepCompleted;
            
            private global::System.Data.DataColumn columnMeasuredLatLength;
            
            private global::System.Data.DataColumn columnMeasurementsTakenBy;
            
            private global::System.Data.DataColumn columnLinerInstalled;
            
            private global::System.Data.DataColumn columnFinalVideo;
            
            private global::System.Data.DataColumn columnRestorationComplete;
            
            private global::System.Data.DataColumn columnLinerOrdered;
            
            private global::System.Data.DataColumn columnLinerInStock;
            
            private global::System.Data.DataColumn columnLinerPrice;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnArchived;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JunctionLinerDataTable() {
                this.TableName = "JunctionLiner";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JunctionLinerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JunctionLinerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailIDColumn {
                get {
                    return this.columnDetailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MNColumn {
                get {
                    return this.columnMN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceFromUSMHColumn {
                get {
                    return this.columnDistanceFromUSMH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmedLatSizeColumn {
                get {
                    return this.columnConfirmedLatSize;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralMaterialColumn {
                get {
                    return this.columnLateralMaterial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SharedLateralColumn {
                get {
                    return this.columnSharedLateral;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CleanoutRequiredColumn {
                get {
                    return this.columnCleanoutRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PitRequiredColumn {
                get {
                    return this.columnPitRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MHShotColumn {
                get {
                    return this.columnMHShot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainConnectionColumn {
                get {
                    return this.columnMainConnection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransitionColumn {
                get {
                    return this.columnTransition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CleanoutInstalledColumn {
                get {
                    return this.columnCleanoutInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PitInstalledColumn {
                get {
                    return this.columnPitInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CleanoutGroutedColumn {
                get {
                    return this.columnCleanoutGrouted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CleanoutCoredColumn {
                get {
                    return this.columnCleanoutCored;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrepCompletedColumn {
                get {
                    return this.columnPrepCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasuredLatLengthColumn {
                get {
                    return this.columnMeasuredLatLength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeasurementsTakenByColumn {
                get {
                    return this.columnMeasurementsTakenBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInstalledColumn {
                get {
                    return this.columnLinerInstalled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalVideoColumn {
                get {
                    return this.columnFinalVideo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RestorationCompleteColumn {
                get {
                    return this.columnRestorationComplete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerOrderedColumn {
                get {
                    return this.columnLinerOrdered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerInStockColumn {
                get {
                    return this.columnLinerInStock;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinerPriceColumn {
                get {
                    return this.columnLinerPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArchivedColumn {
                get {
                    return this.columnArchived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JunctionLinerRow this[int index] {
                get {
                    return ((JunctionLinerRow)(this.Rows[index]));
                }
            }
            
            public event JunctionLinerRowChangeEventHandler JunctionLinerRowChanging;
            
            public event JunctionLinerRowChangeEventHandler JunctionLinerRowChanged;
            
            public event JunctionLinerRowChangeEventHandler JunctionLinerRowDeleting;
            
            public event JunctionLinerRowChangeEventHandler JunctionLinerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJunctionLinerRow(JunctionLinerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JunctionLinerRow AddJunctionLinerRow(
                        System.Guid ID, 
                        int RefID, 
                        int COMPANY_ID, 
                        string DetailID, 
                        string MN, 
                        double DistanceFromUSMH, 
                        string ConfirmedLatSize, 
                        string LateralMaterial, 
                        string SharedLateral, 
                        bool CleanoutRequired, 
                        bool PitRequired, 
                        bool MHShot, 
                        string MainConnection, 
                        string Transition, 
                        bool CleanoutInstalled, 
                        bool PitInstalled, 
                        bool CleanoutGrouted, 
                        bool CleanoutCored, 
                        System.DateTime PrepCompleted, 
                        string MeasuredLatLength, 
                        string MeasurementsTakenBy, 
                        System.DateTime LinerInstalled, 
                        System.DateTime FinalVideo, 
                        bool RestorationComplete, 
                        bool LinerOrdered, 
                        bool LinerInStock, 
                        decimal LinerPrice, 
                        string Comments, 
                        bool Deleted, 
                        bool Archived, 
                        bool InDatabase) {
                JunctionLinerRow rowJunctionLinerRow = ((JunctionLinerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        RefID,
                        COMPANY_ID,
                        DetailID,
                        MN,
                        DistanceFromUSMH,
                        ConfirmedLatSize,
                        LateralMaterial,
                        SharedLateral,
                        CleanoutRequired,
                        PitRequired,
                        MHShot,
                        MainConnection,
                        Transition,
                        CleanoutInstalled,
                        PitInstalled,
                        CleanoutGrouted,
                        CleanoutCored,
                        PrepCompleted,
                        MeasuredLatLength,
                        MeasurementsTakenBy,
                        LinerInstalled,
                        FinalVideo,
                        RestorationComplete,
                        LinerOrdered,
                        LinerInStock,
                        LinerPrice,
                        Comments,
                        Deleted,
                        Archived,
                        InDatabase};
                rowJunctionLinerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJunctionLinerRow);
                return rowJunctionLinerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JunctionLinerRow FindByIDRefIDCOMPANY_ID(System.Guid ID, int RefID, int COMPANY_ID) {
                return ((JunctionLinerRow)(this.Rows.Find(new object[] {
                            ID,
                            RefID,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JunctionLinerDataTable cln = ((JunctionLinerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JunctionLinerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnDetailID = base.Columns["DetailID"];
                this.columnMN = base.Columns["MN"];
                this.columnDistanceFromUSMH = base.Columns["DistanceFromUSMH"];
                this.columnConfirmedLatSize = base.Columns["ConfirmedLatSize"];
                this.columnLateralMaterial = base.Columns["LateralMaterial"];
                this.columnSharedLateral = base.Columns["SharedLateral"];
                this.columnCleanoutRequired = base.Columns["CleanoutRequired"];
                this.columnPitRequired = base.Columns["PitRequired"];
                this.columnMHShot = base.Columns["MHShot"];
                this.columnMainConnection = base.Columns["MainConnection"];
                this.columnTransition = base.Columns["Transition"];
                this.columnCleanoutInstalled = base.Columns["CleanoutInstalled"];
                this.columnPitInstalled = base.Columns["PitInstalled"];
                this.columnCleanoutGrouted = base.Columns["CleanoutGrouted"];
                this.columnCleanoutCored = base.Columns["CleanoutCored"];
                this.columnPrepCompleted = base.Columns["PrepCompleted"];
                this.columnMeasuredLatLength = base.Columns["MeasuredLatLength"];
                this.columnMeasurementsTakenBy = base.Columns["MeasurementsTakenBy"];
                this.columnLinerInstalled = base.Columns["LinerInstalled"];
                this.columnFinalVideo = base.Columns["FinalVideo"];
                this.columnRestorationComplete = base.Columns["RestorationComplete"];
                this.columnLinerOrdered = base.Columns["LinerOrdered"];
                this.columnLinerInStock = base.Columns["LinerInStock"];
                this.columnLinerPrice = base.Columns["LinerPrice"];
                this.columnComments = base.Columns["Comments"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnArchived = base.Columns["Archived"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnDetailID = new global::System.Data.DataColumn("DetailID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetailID);
                this.columnMN = new global::System.Data.DataColumn("MN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMN);
                this.columnDistanceFromUSMH = new global::System.Data.DataColumn("DistanceFromUSMH", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceFromUSMH);
                this.columnConfirmedLatSize = new global::System.Data.DataColumn("ConfirmedLatSize", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmedLatSize);
                this.columnLateralMaterial = new global::System.Data.DataColumn("LateralMaterial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralMaterial);
                this.columnSharedLateral = new global::System.Data.DataColumn("SharedLateral", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSharedLateral);
                this.columnCleanoutRequired = new global::System.Data.DataColumn("CleanoutRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanoutRequired);
                this.columnPitRequired = new global::System.Data.DataColumn("PitRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPitRequired);
                this.columnMHShot = new global::System.Data.DataColumn("MHShot", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMHShot);
                this.columnMainConnection = new global::System.Data.DataColumn("MainConnection", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainConnection);
                this.columnTransition = new global::System.Data.DataColumn("Transition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransition);
                this.columnCleanoutInstalled = new global::System.Data.DataColumn("CleanoutInstalled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanoutInstalled);
                this.columnPitInstalled = new global::System.Data.DataColumn("PitInstalled", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPitInstalled);
                this.columnCleanoutGrouted = new global::System.Data.DataColumn("CleanoutGrouted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanoutGrouted);
                this.columnCleanoutCored = new global::System.Data.DataColumn("CleanoutCored", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCleanoutCored);
                this.columnPrepCompleted = new global::System.Data.DataColumn("PrepCompleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrepCompleted);
                this.columnMeasuredLatLength = new global::System.Data.DataColumn("MeasuredLatLength", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasuredLatLength);
                this.columnMeasurementsTakenBy = new global::System.Data.DataColumn("MeasurementsTakenBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementsTakenBy);
                this.columnLinerInstalled = new global::System.Data.DataColumn("LinerInstalled", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInstalled);
                this.columnFinalVideo = new global::System.Data.DataColumn("FinalVideo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinalVideo);
                this.columnRestorationComplete = new global::System.Data.DataColumn("RestorationComplete", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRestorationComplete);
                this.columnLinerOrdered = new global::System.Data.DataColumn("LinerOrdered", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerOrdered);
                this.columnLinerInStock = new global::System.Data.DataColumn("LinerInStock", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerInStock);
                this.columnLinerPrice = new global::System.Data.DataColumn("LinerPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLinerPrice);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnArchived = new global::System.Data.DataColumn("Archived", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID,
                                this.columnRefID,
                                this.columnCOMPANY_ID}, true));
                this.columnID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnDetailID.AllowDBNull = false;
                this.columnDetailID.MaxLength = 50;
                this.columnMN.MaxLength = 50;
                this.columnConfirmedLatSize.MaxLength = 50;
                this.columnLateralMaterial.MaxLength = 50;
                this.columnSharedLateral.MaxLength = 10;
                this.columnMainConnection.MaxLength = 10;
                this.columnTransition.MaxLength = 10;
                this.columnMeasuredLatLength.MaxLength = 50;
                this.columnMeasurementsTakenBy.MaxLength = 50;
                this.columnComments.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JunctionLinerRow NewJunctionLinerRow() {
                return ((JunctionLinerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JunctionLinerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JunctionLinerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JunctionLinerRowChanged != null)) {
                    this.JunctionLinerRowChanged(this, new JunctionLinerRowChangeEvent(((JunctionLinerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JunctionLinerRowChanging != null)) {
                    this.JunctionLinerRowChanging(this, new JunctionLinerRowChangeEvent(((JunctionLinerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JunctionLinerRowDeleted != null)) {
                    this.JunctionLinerRowDeleted(this, new JunctionLinerRowChangeEvent(((JunctionLinerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JunctionLinerRowDeleting != null)) {
                    this.JunctionLinerRowDeleting(this, new JunctionLinerRowChangeEvent(((JunctionLinerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJunctionLinerRow(JunctionLinerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ViewJLinersheetTDS ds = new ViewJLinersheetTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JunctionLinerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JunctionLinerRow : global::System.Data.DataRow {
            
            private JunctionLinerDataTable tableJunctionLiner;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JunctionLinerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJunctionLiner = ((JunctionLinerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    return ((global::System.Guid)(this[this.tableJunctionLiner.IDColumn]));
                }
                set {
                    this[this.tableJunctionLiner.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableJunctionLiner.RefIDColumn]));
                }
                set {
                    this[this.tableJunctionLiner.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableJunctionLiner.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableJunctionLiner.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DetailID {
                get {
                    return ((string)(this[this.tableJunctionLiner.DetailIDColumn]));
                }
                set {
                    this[this.tableJunctionLiner.DetailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MN {
                get {
                    try {
                        return ((string)(this[this.tableJunctionLiner.MNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MN\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.MNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double DistanceFromUSMH {
                get {
                    try {
                        return ((double)(this[this.tableJunctionLiner.DistanceFromUSMHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceFromUSMH\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.DistanceFromUSMHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmedLatSize {
                get {
                    try {
                        return ((string)(this[this.tableJunctionLiner.ConfirmedLatSizeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfirmedLatSize\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.ConfirmedLatSizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralMaterial {
                get {
                    try {
                        return ((string)(this[this.tableJunctionLiner.LateralMaterialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralMaterial\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.LateralMaterialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SharedLateral {
                get {
                    try {
                        return ((string)(this[this.tableJunctionLiner.SharedLateralColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SharedLateral\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.SharedLateralColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CleanoutRequired {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.CleanoutRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CleanoutRequired\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.CleanoutRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PitRequired {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.PitRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PitRequired\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.PitRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MHShot {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.MHShotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MHShot\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.MHShotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MainConnection {
                get {
                    try {
                        return ((string)(this[this.tableJunctionLiner.MainConnectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainConnection\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.MainConnectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Transition {
                get {
                    try {
                        return ((string)(this[this.tableJunctionLiner.TransitionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Transition\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.TransitionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CleanoutInstalled {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.CleanoutInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CleanoutInstalled\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.CleanoutInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PitInstalled {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.PitInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PitInstalled\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.PitInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CleanoutGrouted {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.CleanoutGroutedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CleanoutGrouted\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.CleanoutGroutedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CleanoutCored {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.CleanoutCoredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CleanoutCored\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.CleanoutCoredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PrepCompleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJunctionLiner.PrepCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PrepCompleted\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.PrepCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasuredLatLength {
                get {
                    try {
                        return ((string)(this[this.tableJunctionLiner.MeasuredLatLengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasuredLatLength\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.MeasuredLatLengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MeasurementsTakenBy {
                get {
                    try {
                        return ((string)(this[this.tableJunctionLiner.MeasurementsTakenByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementsTakenBy\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.MeasurementsTakenByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LinerInstalled {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJunctionLiner.LinerInstalledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInstalled\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.LinerInstalledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinalVideo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJunctionLiner.FinalVideoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinalVideo\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.FinalVideoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RestorationComplete {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.RestorationCompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RestorationComplete\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.RestorationCompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LinerOrdered {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.LinerOrderedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerOrdered\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.LinerOrderedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool LinerInStock {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.LinerInStockColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerInStock\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.LinerInStockColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LinerPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableJunctionLiner.LinerPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LinerPrice\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.LinerPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableJunctionLiner.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Archived {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.ArchivedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Archived\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.ArchivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableJunctionLiner.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'JunctionLiner\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJunctionLiner.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMNNull() {
                return this.IsNull(this.tableJunctionLiner.MNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMNNull() {
                this[this.tableJunctionLiner.MNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceFromUSMHNull() {
                return this.IsNull(this.tableJunctionLiner.DistanceFromUSMHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceFromUSMHNull() {
                this[this.tableJunctionLiner.DistanceFromUSMHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmedLatSizeNull() {
                return this.IsNull(this.tableJunctionLiner.ConfirmedLatSizeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmedLatSizeNull() {
                this[this.tableJunctionLiner.ConfirmedLatSizeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralMaterialNull() {
                return this.IsNull(this.tableJunctionLiner.LateralMaterialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralMaterialNull() {
                this[this.tableJunctionLiner.LateralMaterialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSharedLateralNull() {
                return this.IsNull(this.tableJunctionLiner.SharedLateralColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSharedLateralNull() {
                this[this.tableJunctionLiner.SharedLateralColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanoutRequiredNull() {
                return this.IsNull(this.tableJunctionLiner.CleanoutRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanoutRequiredNull() {
                this[this.tableJunctionLiner.CleanoutRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPitRequiredNull() {
                return this.IsNull(this.tableJunctionLiner.PitRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPitRequiredNull() {
                this[this.tableJunctionLiner.PitRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMHShotNull() {
                return this.IsNull(this.tableJunctionLiner.MHShotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMHShotNull() {
                this[this.tableJunctionLiner.MHShotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainConnectionNull() {
                return this.IsNull(this.tableJunctionLiner.MainConnectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainConnectionNull() {
                this[this.tableJunctionLiner.MainConnectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransitionNull() {
                return this.IsNull(this.tableJunctionLiner.TransitionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransitionNull() {
                this[this.tableJunctionLiner.TransitionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanoutInstalledNull() {
                return this.IsNull(this.tableJunctionLiner.CleanoutInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanoutInstalledNull() {
                this[this.tableJunctionLiner.CleanoutInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPitInstalledNull() {
                return this.IsNull(this.tableJunctionLiner.PitInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPitInstalledNull() {
                this[this.tableJunctionLiner.PitInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanoutGroutedNull() {
                return this.IsNull(this.tableJunctionLiner.CleanoutGroutedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanoutGroutedNull() {
                this[this.tableJunctionLiner.CleanoutGroutedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCleanoutCoredNull() {
                return this.IsNull(this.tableJunctionLiner.CleanoutCoredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCleanoutCoredNull() {
                this[this.tableJunctionLiner.CleanoutCoredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPrepCompletedNull() {
                return this.IsNull(this.tableJunctionLiner.PrepCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPrepCompletedNull() {
                this[this.tableJunctionLiner.PrepCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasuredLatLengthNull() {
                return this.IsNull(this.tableJunctionLiner.MeasuredLatLengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasuredLatLengthNull() {
                this[this.tableJunctionLiner.MeasuredLatLengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMeasurementsTakenByNull() {
                return this.IsNull(this.tableJunctionLiner.MeasurementsTakenByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMeasurementsTakenByNull() {
                this[this.tableJunctionLiner.MeasurementsTakenByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInstalledNull() {
                return this.IsNull(this.tableJunctionLiner.LinerInstalledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInstalledNull() {
                this[this.tableJunctionLiner.LinerInstalledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinalVideoNull() {
                return this.IsNull(this.tableJunctionLiner.FinalVideoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinalVideoNull() {
                this[this.tableJunctionLiner.FinalVideoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRestorationCompleteNull() {
                return this.IsNull(this.tableJunctionLiner.RestorationCompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRestorationCompleteNull() {
                this[this.tableJunctionLiner.RestorationCompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerOrderedNull() {
                return this.IsNull(this.tableJunctionLiner.LinerOrderedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerOrderedNull() {
                this[this.tableJunctionLiner.LinerOrderedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerInStockNull() {
                return this.IsNull(this.tableJunctionLiner.LinerInStockColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerInStockNull() {
                this[this.tableJunctionLiner.LinerInStockColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLinerPriceNull() {
                return this.IsNull(this.tableJunctionLiner.LinerPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLinerPriceNull() {
                this[this.tableJunctionLiner.LinerPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableJunctionLiner.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableJunctionLiner.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableJunctionLiner.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableJunctionLiner.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArchivedNull() {
                return this.IsNull(this.tableJunctionLiner.ArchivedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArchivedNull() {
                this[this.tableJunctionLiner.ArchivedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableJunctionLiner.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableJunctionLiner.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JunctionLinerRowChangeEvent : global::System.EventArgs {
            
            private JunctionLinerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JunctionLinerRowChangeEvent(JunctionLinerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JunctionLinerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591