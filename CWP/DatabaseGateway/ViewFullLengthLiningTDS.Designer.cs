//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.CWP.DatabaseGateway {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ViewFullLengthLiningTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ViewFullLengthLiningTDS : global::System.Data.DataSet {
        
        private LfsM2TablesDataTable tableLfsM2Tables;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewFullLengthLiningTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ViewFullLengthLiningTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["LfsM2Tables"] != null)) {
                    base.Tables.Add(new LfsM2TablesDataTable(ds.Tables["LfsM2Tables"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LfsM2TablesDataTable LfsM2Tables {
            get {
                return this.tableLfsM2Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ViewFullLengthLiningTDS cln = ((ViewFullLengthLiningTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["LfsM2Tables"] != null)) {
                    base.Tables.Add(new LfsM2TablesDataTable(ds.Tables["LfsM2Tables"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableLfsM2Tables = ((LfsM2TablesDataTable)(base.Tables["LfsM2Tables"]));
            if ((initTable == true)) {
                if ((this.tableLfsM2Tables != null)) {
                    this.tableLfsM2Tables.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ViewFullLengthLiningTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ViewFullLengthLiningTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableLfsM2Tables = new LfsM2TablesDataTable();
            base.Tables.Add(this.tableLfsM2Tables);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLfsM2Tables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ViewFullLengthLiningTDS ds = new ViewFullLengthLiningTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void LfsM2TablesRowChangeEventHandler(object sender, LfsM2TablesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LfsM2TablesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnVideoDistance;
            
            private global::System.Data.DataColumn columnClockPosition;
            
            private global::System.Data.DataColumn columnLiveOrAbandoned;
            
            private global::System.Data.DataColumn columnDistanceToCentreOfLateral;
            
            private global::System.Data.DataColumn columnLateralDiameter;
            
            private global::System.Data.DataColumn columnLateralType;
            
            private global::System.Data.DataColumn columnDateTimeOpened;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnReverseSetup;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnArchived;
            
            private global::System.Data.DataColumn columnInDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LfsM2TablesDataTable() {
                this.TableName = "LfsM2Tables";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LfsM2TablesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LfsM2TablesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoDistanceColumn {
                get {
                    return this.columnVideoDistance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClockPositionColumn {
                get {
                    return this.columnClockPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiveOrAbandonedColumn {
                get {
                    return this.columnLiveOrAbandoned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DistanceToCentreOfLateralColumn {
                get {
                    return this.columnDistanceToCentreOfLateral;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralDiameterColumn {
                get {
                    return this.columnLateralDiameter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateralTypeColumn {
                get {
                    return this.columnLateralType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTimeOpenedColumn {
                get {
                    return this.columnDateTimeOpened;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReverseSetupColumn {
                get {
                    return this.columnReverseSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArchivedColumn {
                get {
                    return this.columnArchived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InDatabaseColumn {
                get {
                    return this.columnInDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LfsM2TablesRow this[int index] {
                get {
                    return ((LfsM2TablesRow)(this.Rows[index]));
                }
            }
            
            public event LfsM2TablesRowChangeEventHandler LfsM2TablesRowChanging;
            
            public event LfsM2TablesRowChangeEventHandler LfsM2TablesRowChanged;
            
            public event LfsM2TablesRowChangeEventHandler LfsM2TablesRowDeleting;
            
            public event LfsM2TablesRowChangeEventHandler LfsM2TablesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLfsM2TablesRow(LfsM2TablesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LfsM2TablesRow AddLfsM2TablesRow(System.Guid ID, int RefID, int COMPANY_ID, float VideoDistance, string ClockPosition, string LiveOrAbandoned, string DistanceToCentreOfLateral, string LateralDiameter, string LateralType, string DateTimeOpened, string Comments, string ReverseSetup, bool Deleted, bool Archived, bool InDatabase) {
                LfsM2TablesRow rowLfsM2TablesRow = ((LfsM2TablesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        RefID,
                        COMPANY_ID,
                        VideoDistance,
                        ClockPosition,
                        LiveOrAbandoned,
                        DistanceToCentreOfLateral,
                        LateralDiameter,
                        LateralType,
                        DateTimeOpened,
                        Comments,
                        ReverseSetup,
                        Deleted,
                        Archived,
                        InDatabase};
                rowLfsM2TablesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLfsM2TablesRow);
                return rowLfsM2TablesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LfsM2TablesRow FindByIDRefIDCOMPANY_ID(System.Guid ID, int RefID, int COMPANY_ID) {
                return ((LfsM2TablesRow)(this.Rows.Find(new object[] {
                            ID,
                            RefID,
                            COMPANY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LfsM2TablesDataTable cln = ((LfsM2TablesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LfsM2TablesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnVideoDistance = base.Columns["VideoDistance"];
                this.columnClockPosition = base.Columns["ClockPosition"];
                this.columnLiveOrAbandoned = base.Columns["LiveOrAbandoned"];
                this.columnDistanceToCentreOfLateral = base.Columns["DistanceToCentreOfLateral"];
                this.columnLateralDiameter = base.Columns["LateralDiameter"];
                this.columnLateralType = base.Columns["LateralType"];
                this.columnDateTimeOpened = base.Columns["DateTimeOpened"];
                this.columnComments = base.Columns["Comments"];
                this.columnReverseSetup = base.Columns["ReverseSetup"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnArchived = base.Columns["Archived"];
                this.columnInDatabase = base.Columns["InDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnVideoDistance = new global::System.Data.DataColumn("VideoDistance", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoDistance);
                this.columnClockPosition = new global::System.Data.DataColumn("ClockPosition", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClockPosition);
                this.columnLiveOrAbandoned = new global::System.Data.DataColumn("LiveOrAbandoned", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiveOrAbandoned);
                this.columnDistanceToCentreOfLateral = new global::System.Data.DataColumn("DistanceToCentreOfLateral", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistanceToCentreOfLateral);
                this.columnLateralDiameter = new global::System.Data.DataColumn("LateralDiameter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralDiameter);
                this.columnLateralType = new global::System.Data.DataColumn("LateralType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateralType);
                this.columnDateTimeOpened = new global::System.Data.DataColumn("DateTimeOpened", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeOpened);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnReverseSetup = new global::System.Data.DataColumn("ReverseSetup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReverseSetup);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnArchived = new global::System.Data.DataColumn("Archived", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchived);
                this.columnInDatabase = new global::System.Data.DataColumn("InDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID,
                                this.columnRefID,
                                this.columnCOMPANY_ID}, true));
                this.columnID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
                this.columnClockPosition.MaxLength = 50;
                this.columnLiveOrAbandoned.MaxLength = 50;
                this.columnDistanceToCentreOfLateral.MaxLength = 50;
                this.columnLateralDiameter.MaxLength = 50;
                this.columnLateralType.MaxLength = 50;
                this.columnDateTimeOpened.MaxLength = 50;
                this.columnComments.MaxLength = 1073741823;
                this.columnReverseSetup.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LfsM2TablesRow NewLfsM2TablesRow() {
                return ((LfsM2TablesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LfsM2TablesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LfsM2TablesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LfsM2TablesRowChanged != null)) {
                    this.LfsM2TablesRowChanged(this, new LfsM2TablesRowChangeEvent(((LfsM2TablesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LfsM2TablesRowChanging != null)) {
                    this.LfsM2TablesRowChanging(this, new LfsM2TablesRowChangeEvent(((LfsM2TablesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LfsM2TablesRowDeleted != null)) {
                    this.LfsM2TablesRowDeleted(this, new LfsM2TablesRowChangeEvent(((LfsM2TablesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LfsM2TablesRowDeleting != null)) {
                    this.LfsM2TablesRowDeleting(this, new LfsM2TablesRowChangeEvent(((LfsM2TablesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLfsM2TablesRow(LfsM2TablesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ViewFullLengthLiningTDS ds = new ViewFullLengthLiningTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LfsM2TablesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LfsM2TablesRow : global::System.Data.DataRow {
            
            private LfsM2TablesDataTable tableLfsM2Tables;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LfsM2TablesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLfsM2Tables = ((LfsM2TablesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ID {
                get {
                    return ((global::System.Guid)(this[this.tableLfsM2Tables.IDColumn]));
                }
                set {
                    this[this.tableLfsM2Tables.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableLfsM2Tables.RefIDColumn]));
                }
                set {
                    this[this.tableLfsM2Tables.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableLfsM2Tables.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableLfsM2Tables.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float VideoDistance {
                get {
                    try {
                        return ((float)(this[this.tableLfsM2Tables.VideoDistanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoDistance\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.VideoDistanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClockPosition {
                get {
                    try {
                        return ((string)(this[this.tableLfsM2Tables.ClockPositionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClockPosition\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.ClockPositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LiveOrAbandoned {
                get {
                    try {
                        return ((string)(this[this.tableLfsM2Tables.LiveOrAbandonedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiveOrAbandoned\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.LiveOrAbandonedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DistanceToCentreOfLateral {
                get {
                    try {
                        return ((string)(this[this.tableLfsM2Tables.DistanceToCentreOfLateralColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DistanceToCentreOfLateral\' in table \'LfsM2Tables\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.DistanceToCentreOfLateralColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralDiameter {
                get {
                    try {
                        return ((string)(this[this.tableLfsM2Tables.LateralDiameterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralDiameter\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.LateralDiameterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LateralType {
                get {
                    try {
                        return ((string)(this[this.tableLfsM2Tables.LateralTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateralType\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.LateralTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateTimeOpened {
                get {
                    try {
                        return ((string)(this[this.tableLfsM2Tables.DateTimeOpenedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTimeOpened\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.DateTimeOpenedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableLfsM2Tables.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReverseSetup {
                get {
                    try {
                        return ((string)(this[this.tableLfsM2Tables.ReverseSetupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReverseSetup\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.ReverseSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableLfsM2Tables.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Archived {
                get {
                    try {
                        return ((bool)(this[this.tableLfsM2Tables.ArchivedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Archived\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.ArchivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableLfsM2Tables.InDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InDatabase\' in table \'LfsM2Tables\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLfsM2Tables.InDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoDistanceNull() {
                return this.IsNull(this.tableLfsM2Tables.VideoDistanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoDistanceNull() {
                this[this.tableLfsM2Tables.VideoDistanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClockPositionNull() {
                return this.IsNull(this.tableLfsM2Tables.ClockPositionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClockPositionNull() {
                this[this.tableLfsM2Tables.ClockPositionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiveOrAbandonedNull() {
                return this.IsNull(this.tableLfsM2Tables.LiveOrAbandonedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiveOrAbandonedNull() {
                this[this.tableLfsM2Tables.LiveOrAbandonedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDistanceToCentreOfLateralNull() {
                return this.IsNull(this.tableLfsM2Tables.DistanceToCentreOfLateralColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDistanceToCentreOfLateralNull() {
                this[this.tableLfsM2Tables.DistanceToCentreOfLateralColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralDiameterNull() {
                return this.IsNull(this.tableLfsM2Tables.LateralDiameterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralDiameterNull() {
                this[this.tableLfsM2Tables.LateralDiameterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateralTypeNull() {
                return this.IsNull(this.tableLfsM2Tables.LateralTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateralTypeNull() {
                this[this.tableLfsM2Tables.LateralTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTimeOpenedNull() {
                return this.IsNull(this.tableLfsM2Tables.DateTimeOpenedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTimeOpenedNull() {
                this[this.tableLfsM2Tables.DateTimeOpenedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableLfsM2Tables.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableLfsM2Tables.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReverseSetupNull() {
                return this.IsNull(this.tableLfsM2Tables.ReverseSetupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReverseSetupNull() {
                this[this.tableLfsM2Tables.ReverseSetupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableLfsM2Tables.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableLfsM2Tables.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArchivedNull() {
                return this.IsNull(this.tableLfsM2Tables.ArchivedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArchivedNull() {
                this[this.tableLfsM2Tables.ArchivedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInDatabaseNull() {
                return this.IsNull(this.tableLfsM2Tables.InDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInDatabaseNull() {
                this[this.tableLfsM2Tables.InDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LfsM2TablesRowChangeEvent : global::System.EventArgs {
            
            private LfsM2TablesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LfsM2TablesRowChangeEvent(LfsM2TablesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LfsM2TablesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591