//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Services {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ServicesSRExpiredReportTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ServicesSRExpiredReportTDS : global::System.Data.DataSet {
        
        private ExpiredServiceRequestsDataTable tableExpiredServiceRequests;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServicesSRExpiredReportTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ServicesSRExpiredReportTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ExpiredServiceRequests"] != null)) {
                    base.Tables.Add(new ExpiredServiceRequestsDataTable(ds.Tables["ExpiredServiceRequests"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExpiredServiceRequestsDataTable ExpiredServiceRequests {
            get {
                return this.tableExpiredServiceRequests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ServicesSRExpiredReportTDS cln = ((ServicesSRExpiredReportTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ExpiredServiceRequests"] != null)) {
                    base.Tables.Add(new ExpiredServiceRequestsDataTable(ds.Tables["ExpiredServiceRequests"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableExpiredServiceRequests = ((ExpiredServiceRequestsDataTable)(base.Tables["ExpiredServiceRequests"]));
            if ((initTable == true)) {
                if ((this.tableExpiredServiceRequests != null)) {
                    this.tableExpiredServiceRequests.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ServicesSRExpiredReportTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ServicesSRExpiredReportTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableExpiredServiceRequests = new ExpiredServiceRequestsDataTable();
            base.Tables.Add(this.tableExpiredServiceRequests);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExpiredServiceRequests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ServicesSRExpiredReportTDS ds = new ServicesSRExpiredReportTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ExpiredServiceRequestsRowChangeEventHandler(object sender, ExpiredServiceRequestsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExpiredServiceRequestsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnServiceNumber;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnMTO;
            
            private global::System.Data.DataColumn columnServiceDescription;
            
            private global::System.Data.DataColumn columnUnitDescription;
            
            private global::System.Data.DataColumn columnRuleName;
            
            private global::System.Data.DataColumn columnRuleDescription;
            
            private global::System.Data.DataColumn columnAssignDateTime;
            
            private global::System.Data.DataColumn columnAssignDeadlineDate;
            
            private global::System.Data.DataColumn columnAssignedTeamMember;
            
            private global::System.Data.DataColumn columnAssignThirdPartyVendor;
            
            private global::System.Data.DataColumn columnCompleteWorkDateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpiredServiceRequestsDataTable() {
                this.TableName = "ExpiredServiceRequests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExpiredServiceRequestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExpiredServiceRequestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceNumberColumn {
                get {
                    return this.columnServiceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MTOColumn {
                get {
                    return this.columnMTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceDescriptionColumn {
                get {
                    return this.columnServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDescriptionColumn {
                get {
                    return this.columnUnitDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleNameColumn {
                get {
                    return this.columnRuleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleDescriptionColumn {
                get {
                    return this.columnRuleDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignDateTimeColumn {
                get {
                    return this.columnAssignDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignDeadlineDateColumn {
                get {
                    return this.columnAssignDeadlineDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedTeamMemberColumn {
                get {
                    return this.columnAssignedTeamMember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignThirdPartyVendorColumn {
                get {
                    return this.columnAssignThirdPartyVendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDateTimeColumn {
                get {
                    return this.columnCompleteWorkDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpiredServiceRequestsRow this[int index] {
                get {
                    return ((ExpiredServiceRequestsRow)(this.Rows[index]));
                }
            }
            
            public event ExpiredServiceRequestsRowChangeEventHandler ExpiredServiceRequestsRowChanging;
            
            public event ExpiredServiceRequestsRowChangeEventHandler ExpiredServiceRequestsRowChanged;
            
            public event ExpiredServiceRequestsRowChangeEventHandler ExpiredServiceRequestsRowDeleting;
            
            public event ExpiredServiceRequestsRowChangeEventHandler ExpiredServiceRequestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExpiredServiceRequestsRow(ExpiredServiceRequestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpiredServiceRequestsRow AddExpiredServiceRequestsRow(int ServiceID, string ServiceNumber, string UnitCode, bool MTO, string ServiceDescription, string UnitDescription, string RuleName, string RuleDescription, System.DateTime AssignDateTime, System.DateTime AssignDeadlineDate, string AssignedTeamMember, string AssignThirdPartyVendor, System.DateTime CompleteWorkDateTime) {
                ExpiredServiceRequestsRow rowExpiredServiceRequestsRow = ((ExpiredServiceRequestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        ServiceNumber,
                        UnitCode,
                        MTO,
                        ServiceDescription,
                        UnitDescription,
                        RuleName,
                        RuleDescription,
                        AssignDateTime,
                        AssignDeadlineDate,
                        AssignedTeamMember,
                        AssignThirdPartyVendor,
                        CompleteWorkDateTime};
                rowExpiredServiceRequestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExpiredServiceRequestsRow);
                return rowExpiredServiceRequestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpiredServiceRequestsRow FindByServiceID(int ServiceID) {
                return ((ExpiredServiceRequestsRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExpiredServiceRequestsDataTable cln = ((ExpiredServiceRequestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExpiredServiceRequestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnServiceNumber = base.Columns["ServiceNumber"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnMTO = base.Columns["MTO"];
                this.columnServiceDescription = base.Columns["ServiceDescription"];
                this.columnUnitDescription = base.Columns["UnitDescription"];
                this.columnRuleName = base.Columns["RuleName"];
                this.columnRuleDescription = base.Columns["RuleDescription"];
                this.columnAssignDateTime = base.Columns["AssignDateTime"];
                this.columnAssignDeadlineDate = base.Columns["AssignDeadlineDate"];
                this.columnAssignedTeamMember = base.Columns["AssignedTeamMember"];
                this.columnAssignThirdPartyVendor = base.Columns["AssignThirdPartyVendor"];
                this.columnCompleteWorkDateTime = base.Columns["CompleteWorkDateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnServiceNumber = new global::System.Data.DataColumn("ServiceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceNumber);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnMTO = new global::System.Data.DataColumn("MTO", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMTO);
                this.columnServiceDescription = new global::System.Data.DataColumn("ServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDescription);
                this.columnUnitDescription = new global::System.Data.DataColumn("UnitDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitDescription);
                this.columnRuleName = new global::System.Data.DataColumn("RuleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleName);
                this.columnRuleDescription = new global::System.Data.DataColumn("RuleDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleDescription);
                this.columnAssignDateTime = new global::System.Data.DataColumn("AssignDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignDateTime);
                this.columnAssignDeadlineDate = new global::System.Data.DataColumn("AssignDeadlineDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignDeadlineDate);
                this.columnAssignedTeamMember = new global::System.Data.DataColumn("AssignedTeamMember", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedTeamMember);
                this.columnAssignThirdPartyVendor = new global::System.Data.DataColumn("AssignThirdPartyVendor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignThirdPartyVendor);
                this.columnCompleteWorkDateTime = new global::System.Data.DataColumn("CompleteWorkDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDateTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpiredServiceRequestsRow NewExpiredServiceRequestsRow() {
                return ((ExpiredServiceRequestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExpiredServiceRequestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExpiredServiceRequestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExpiredServiceRequestsRowChanged != null)) {
                    this.ExpiredServiceRequestsRowChanged(this, new ExpiredServiceRequestsRowChangeEvent(((ExpiredServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExpiredServiceRequestsRowChanging != null)) {
                    this.ExpiredServiceRequestsRowChanging(this, new ExpiredServiceRequestsRowChangeEvent(((ExpiredServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExpiredServiceRequestsRowDeleted != null)) {
                    this.ExpiredServiceRequestsRowDeleted(this, new ExpiredServiceRequestsRowChangeEvent(((ExpiredServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExpiredServiceRequestsRowDeleting != null)) {
                    this.ExpiredServiceRequestsRowDeleting(this, new ExpiredServiceRequestsRowChangeEvent(((ExpiredServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExpiredServiceRequestsRow(ExpiredServiceRequestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ServicesSRExpiredReportTDS ds = new ServicesSRExpiredReportTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExpiredServiceRequestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExpiredServiceRequestsRow : global::System.Data.DataRow {
            
            private ExpiredServiceRequestsDataTable tableExpiredServiceRequests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExpiredServiceRequestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExpiredServiceRequests = ((ExpiredServiceRequestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableExpiredServiceRequests.ServiceIDColumn]));
                }
                set {
                    this[this.tableExpiredServiceRequests.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableExpiredServiceRequests.ServiceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceNumber\' in table \'ExpiredServiceRequests\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.ServiceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableExpiredServiceRequests.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'ExpiredServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MTO {
                get {
                    try {
                        return ((bool)(this[this.tableExpiredServiceRequests.MTOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MTO\' in table \'ExpiredServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.MTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceDescription {
                get {
                    try {
                        return ((string)(this[this.tableExpiredServiceRequests.ServiceDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDescription\' in table \'ExpiredServiceRequests\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.ServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitDescription {
                get {
                    try {
                        return ((string)(this[this.tableExpiredServiceRequests.UnitDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitDescription\' in table \'ExpiredServiceRequests\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.UnitDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RuleName {
                get {
                    try {
                        return ((string)(this[this.tableExpiredServiceRequests.RuleNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RuleName\' in table \'ExpiredServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.RuleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RuleDescription {
                get {
                    try {
                        return ((string)(this[this.tableExpiredServiceRequests.RuleDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RuleDescription\' in table \'ExpiredServiceRequests\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.RuleDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AssignDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableExpiredServiceRequests.AssignDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignDateTime\' in table \'ExpiredServiceRequests\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.AssignDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AssignDeadlineDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableExpiredServiceRequests.AssignDeadlineDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignDeadlineDate\' in table \'ExpiredServiceRequests\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.AssignDeadlineDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignedTeamMember {
                get {
                    try {
                        return ((string)(this[this.tableExpiredServiceRequests.AssignedTeamMemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedTeamMember\' in table \'ExpiredServiceRequests\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.AssignedTeamMemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignThirdPartyVendor {
                get {
                    try {
                        return ((string)(this[this.tableExpiredServiceRequests.AssignThirdPartyVendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignThirdPartyVendor\' in table \'ExpiredServiceRequests\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.AssignThirdPartyVendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CompleteWorkDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableExpiredServiceRequests.CompleteWorkDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDateTime\' in table \'ExpiredServiceRequests\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableExpiredServiceRequests.CompleteWorkDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceNumberNull() {
                return this.IsNull(this.tableExpiredServiceRequests.ServiceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceNumberNull() {
                this[this.tableExpiredServiceRequests.ServiceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableExpiredServiceRequests.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableExpiredServiceRequests.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMTONull() {
                return this.IsNull(this.tableExpiredServiceRequests.MTOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMTONull() {
                this[this.tableExpiredServiceRequests.MTOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceDescriptionNull() {
                return this.IsNull(this.tableExpiredServiceRequests.ServiceDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceDescriptionNull() {
                this[this.tableExpiredServiceRequests.ServiceDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitDescriptionNull() {
                return this.IsNull(this.tableExpiredServiceRequests.UnitDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitDescriptionNull() {
                this[this.tableExpiredServiceRequests.UnitDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRuleNameNull() {
                return this.IsNull(this.tableExpiredServiceRequests.RuleNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRuleNameNull() {
                this[this.tableExpiredServiceRequests.RuleNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRuleDescriptionNull() {
                return this.IsNull(this.tableExpiredServiceRequests.RuleDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRuleDescriptionNull() {
                this[this.tableExpiredServiceRequests.RuleDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignDateTimeNull() {
                return this.IsNull(this.tableExpiredServiceRequests.AssignDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignDateTimeNull() {
                this[this.tableExpiredServiceRequests.AssignDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignDeadlineDateNull() {
                return this.IsNull(this.tableExpiredServiceRequests.AssignDeadlineDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignDeadlineDateNull() {
                this[this.tableExpiredServiceRequests.AssignDeadlineDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedTeamMemberNull() {
                return this.IsNull(this.tableExpiredServiceRequests.AssignedTeamMemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedTeamMemberNull() {
                this[this.tableExpiredServiceRequests.AssignedTeamMemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignThirdPartyVendorNull() {
                return this.IsNull(this.tableExpiredServiceRequests.AssignThirdPartyVendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignThirdPartyVendorNull() {
                this[this.tableExpiredServiceRequests.AssignThirdPartyVendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDateTimeNull() {
                return this.IsNull(this.tableExpiredServiceRequests.CompleteWorkDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDateTimeNull() {
                this[this.tableExpiredServiceRequests.CompleteWorkDateTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExpiredServiceRequestsRowChangeEvent : global::System.EventArgs {
            
            private ExpiredServiceRequestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpiredServiceRequestsRowChangeEvent(ExpiredServiceRequestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExpiredServiceRequestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591