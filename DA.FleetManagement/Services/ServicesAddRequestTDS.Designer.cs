//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Services {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ServicesAddRequestTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ServicesAddRequestTDS : global::System.Data.DataSet {
        
        private BasicInformationDataTable tableBasicInformation;
        
        private CostInformationDataTable tableCostInformation;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServicesAddRequestTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ServicesAddRequestTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["CostInformation"] != null)) {
                    base.Tables.Add(new CostInformationDataTable(ds.Tables["CostInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BasicInformationDataTable BasicInformation {
            get {
                return this.tableBasicInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CostInformationDataTable CostInformation {
            get {
                return this.tableCostInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ServicesAddRequestTDS cln = ((ServicesAddRequestTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["CostInformation"] != null)) {
                    base.Tables.Add(new CostInformationDataTable(ds.Tables["CostInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBasicInformation = ((BasicInformationDataTable)(base.Tables["BasicInformation"]));
            if ((initTable == true)) {
                if ((this.tableBasicInformation != null)) {
                    this.tableBasicInformation.InitVars();
                }
            }
            this.tableCostInformation = ((CostInformationDataTable)(base.Tables["CostInformation"]));
            if ((initTable == true)) {
                if ((this.tableCostInformation != null)) {
                    this.tableCostInformation.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ServicesAddRequestTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ServicesAddRequestTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBasicInformation = new BasicInformationDataTable();
            base.Tables.Add(this.tableBasicInformation);
            this.tableCostInformation = new CostInformationDataTable();
            base.Tables.Add(this.tableCostInformation);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBasicInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCostInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ServicesAddRequestTDS ds = new ServicesAddRequestTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BasicInformationRowChangeEventHandler(object sender, BasicInformationRowChangeEvent e);
        
        public delegate void CostInformationRowChangeEventHandler(object sender, CostInformationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BasicInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnServiceState;
            
            private global::System.Data.DataColumn columnMtoDot;
            
            private global::System.Data.DataColumn columnServiceDescription;
            
            private global::System.Data.DataColumn columnAssignedDeadlineDate;
            
            private global::System.Data.DataColumn columnAssignDateTime;
            
            private global::System.Data.DataColumn columnAssignTeamMember;
            
            private global::System.Data.DataColumn columnAssignTeamMemberId;
            
            private global::System.Data.DataColumn columnAssignThirdPartyVendor;
            
            private global::System.Data.DataColumn columnAcceptDatetime;
            
            private global::System.Data.DataColumn columnUnitOutOfServiceDate;
            
            private global::System.Data.DataColumn columnUnitOutOfServiceTime;
            
            private global::System.Data.DataColumn columnCompleteWorkDateTime;
            
            private global::System.Data.DataColumn columnUnitBackInServiceDate;
            
            private global::System.Data.DataColumn columnUnitBackInServiceTime;
            
            private global::System.Data.DataColumn columnCompleteWorkDetailDescription;
            
            private global::System.Data.DataColumn columnCompleteWorkDetailPreventable;
            
            private global::System.Data.DataColumn columnCompleteWorkDetailTMLabourHours;
            
            private global::System.Data.DataColumn columnCompleteWorkDetailTMCost;
            
            private global::System.Data.DataColumn columnCompleteWorkInvoiceNumber;
            
            private global::System.Data.DataColumn columnCompleteWorkInvoiceAmount;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnMileage;
            
            private global::System.Data.DataColumn columnStartWorkMileage;
            
            private global::System.Data.DataColumn columnCompleteWorkMileage;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnRuleID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationDataTable() {
                this.TableName = "BasicInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BasicInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceStateColumn {
                get {
                    return this.columnServiceState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MtoDotColumn {
                get {
                    return this.columnMtoDot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceDescriptionColumn {
                get {
                    return this.columnServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedDeadlineDateColumn {
                get {
                    return this.columnAssignedDeadlineDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignDateTimeColumn {
                get {
                    return this.columnAssignDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignTeamMemberColumn {
                get {
                    return this.columnAssignTeamMember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignTeamMemberIdColumn {
                get {
                    return this.columnAssignTeamMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignThirdPartyVendorColumn {
                get {
                    return this.columnAssignThirdPartyVendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcceptDatetimeColumn {
                get {
                    return this.columnAcceptDatetime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOutOfServiceDateColumn {
                get {
                    return this.columnUnitOutOfServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOutOfServiceTimeColumn {
                get {
                    return this.columnUnitOutOfServiceTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDateTimeColumn {
                get {
                    return this.columnCompleteWorkDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitBackInServiceDateColumn {
                get {
                    return this.columnUnitBackInServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitBackInServiceTimeColumn {
                get {
                    return this.columnUnitBackInServiceTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDetailDescriptionColumn {
                get {
                    return this.columnCompleteWorkDetailDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDetailPreventableColumn {
                get {
                    return this.columnCompleteWorkDetailPreventable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDetailTMLabourHoursColumn {
                get {
                    return this.columnCompleteWorkDetailTMLabourHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDetailTMCostColumn {
                get {
                    return this.columnCompleteWorkDetailTMCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkInvoiceNumberColumn {
                get {
                    return this.columnCompleteWorkInvoiceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkInvoiceAmountColumn {
                get {
                    return this.columnCompleteWorkInvoiceAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MileageColumn {
                get {
                    return this.columnMileage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartWorkMileageColumn {
                get {
                    return this.columnStartWorkMileage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkMileageColumn {
                get {
                    return this.columnCompleteWorkMileage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow this[int index] {
                get {
                    return ((BasicInformationRow)(this.Rows[index]));
                }
            }
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanging;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanged;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleting;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBasicInformationRow(BasicInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow AddBasicInformationRow(
                        int ServiceID, 
                        string ServiceState, 
                        bool MtoDot, 
                        string ServiceDescription, 
                        System.DateTime AssignedDeadlineDate, 
                        System.DateTime AssignDateTime, 
                        bool AssignTeamMember, 
                        int AssignTeamMemberId, 
                        string AssignThirdPartyVendor, 
                        System.DateTime AcceptDatetime, 
                        System.DateTime UnitOutOfServiceDate, 
                        string UnitOutOfServiceTime, 
                        System.DateTime CompleteWorkDateTime, 
                        System.DateTime UnitBackInServiceDate, 
                        string UnitBackInServiceTime, 
                        string CompleteWorkDetailDescription, 
                        bool CompleteWorkDetailPreventable, 
                        decimal CompleteWorkDetailTMLabourHours, 
                        decimal CompleteWorkDetailTMCost, 
                        string CompleteWorkInvoiceNumber, 
                        decimal CompleteWorkInvoiceAmount, 
                        int UnitID, 
                        string Mileage, 
                        string StartWorkMileage, 
                        string CompleteWorkMileage, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        int RuleID) {
                BasicInformationRow rowBasicInformationRow = ((BasicInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        ServiceState,
                        MtoDot,
                        ServiceDescription,
                        AssignedDeadlineDate,
                        AssignDateTime,
                        AssignTeamMember,
                        AssignTeamMemberId,
                        AssignThirdPartyVendor,
                        AcceptDatetime,
                        UnitOutOfServiceDate,
                        UnitOutOfServiceTime,
                        CompleteWorkDateTime,
                        UnitBackInServiceDate,
                        UnitBackInServiceTime,
                        CompleteWorkDetailDescription,
                        CompleteWorkDetailPreventable,
                        CompleteWorkDetailTMLabourHours,
                        CompleteWorkDetailTMCost,
                        CompleteWorkInvoiceNumber,
                        CompleteWorkInvoiceAmount,
                        UnitID,
                        Mileage,
                        StartWorkMileage,
                        CompleteWorkMileage,
                        Deleted,
                        COMPANY_ID,
                        RuleID};
                rowBasicInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBasicInformationRow);
                return rowBasicInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow FindByServiceID(int ServiceID) {
                return ((BasicInformationRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BasicInformationDataTable cln = ((BasicInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BasicInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnServiceState = base.Columns["ServiceState"];
                this.columnMtoDot = base.Columns["MtoDot"];
                this.columnServiceDescription = base.Columns["ServiceDescription"];
                this.columnAssignedDeadlineDate = base.Columns["AssignedDeadlineDate"];
                this.columnAssignDateTime = base.Columns["AssignDateTime"];
                this.columnAssignTeamMember = base.Columns["AssignTeamMember"];
                this.columnAssignTeamMemberId = base.Columns["AssignTeamMemberId"];
                this.columnAssignThirdPartyVendor = base.Columns["AssignThirdPartyVendor"];
                this.columnAcceptDatetime = base.Columns["AcceptDatetime"];
                this.columnUnitOutOfServiceDate = base.Columns["UnitOutOfServiceDate"];
                this.columnUnitOutOfServiceTime = base.Columns["UnitOutOfServiceTime"];
                this.columnCompleteWorkDateTime = base.Columns["CompleteWorkDateTime"];
                this.columnUnitBackInServiceDate = base.Columns["UnitBackInServiceDate"];
                this.columnUnitBackInServiceTime = base.Columns["UnitBackInServiceTime"];
                this.columnCompleteWorkDetailDescription = base.Columns["CompleteWorkDetailDescription"];
                this.columnCompleteWorkDetailPreventable = base.Columns["CompleteWorkDetailPreventable"];
                this.columnCompleteWorkDetailTMLabourHours = base.Columns["CompleteWorkDetailTMLabourHours"];
                this.columnCompleteWorkDetailTMCost = base.Columns["CompleteWorkDetailTMCost"];
                this.columnCompleteWorkInvoiceNumber = base.Columns["CompleteWorkInvoiceNumber"];
                this.columnCompleteWorkInvoiceAmount = base.Columns["CompleteWorkInvoiceAmount"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnMileage = base.Columns["Mileage"];
                this.columnStartWorkMileage = base.Columns["StartWorkMileage"];
                this.columnCompleteWorkMileage = base.Columns["CompleteWorkMileage"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnRuleID = base.Columns["RuleID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnServiceState = new global::System.Data.DataColumn("ServiceState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceState);
                this.columnMtoDot = new global::System.Data.DataColumn("MtoDot", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMtoDot);
                this.columnServiceDescription = new global::System.Data.DataColumn("ServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDescription);
                this.columnAssignedDeadlineDate = new global::System.Data.DataColumn("AssignedDeadlineDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedDeadlineDate);
                this.columnAssignDateTime = new global::System.Data.DataColumn("AssignDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignDateTime);
                this.columnAssignTeamMember = new global::System.Data.DataColumn("AssignTeamMember", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignTeamMember);
                this.columnAssignTeamMemberId = new global::System.Data.DataColumn("AssignTeamMemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignTeamMemberId);
                this.columnAssignThirdPartyVendor = new global::System.Data.DataColumn("AssignThirdPartyVendor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignThirdPartyVendor);
                this.columnAcceptDatetime = new global::System.Data.DataColumn("AcceptDatetime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcceptDatetime);
                this.columnUnitOutOfServiceDate = new global::System.Data.DataColumn("UnitOutOfServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOutOfServiceDate);
                this.columnUnitOutOfServiceTime = new global::System.Data.DataColumn("UnitOutOfServiceTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOutOfServiceTime);
                this.columnCompleteWorkDateTime = new global::System.Data.DataColumn("CompleteWorkDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDateTime);
                this.columnUnitBackInServiceDate = new global::System.Data.DataColumn("UnitBackInServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitBackInServiceDate);
                this.columnUnitBackInServiceTime = new global::System.Data.DataColumn("UnitBackInServiceTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitBackInServiceTime);
                this.columnCompleteWorkDetailDescription = new global::System.Data.DataColumn("CompleteWorkDetailDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDetailDescription);
                this.columnCompleteWorkDetailPreventable = new global::System.Data.DataColumn("CompleteWorkDetailPreventable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDetailPreventable);
                this.columnCompleteWorkDetailTMLabourHours = new global::System.Data.DataColumn("CompleteWorkDetailTMLabourHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDetailTMLabourHours);
                this.columnCompleteWorkDetailTMCost = new global::System.Data.DataColumn("CompleteWorkDetailTMCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDetailTMCost);
                this.columnCompleteWorkInvoiceNumber = new global::System.Data.DataColumn("CompleteWorkInvoiceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkInvoiceNumber);
                this.columnCompleteWorkInvoiceAmount = new global::System.Data.DataColumn("CompleteWorkInvoiceAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkInvoiceAmount);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnMileage = new global::System.Data.DataColumn("Mileage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMileage);
                this.columnStartWorkMileage = new global::System.Data.DataColumn("StartWorkMileage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartWorkMileage);
                this.columnCompleteWorkMileage = new global::System.Data.DataColumn("CompleteWorkMileage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkMileage);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow NewBasicInformationRow() {
                return ((BasicInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BasicInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BasicInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BasicInformationRowChanged != null)) {
                    this.BasicInformationRowChanged(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BasicInformationRowChanging != null)) {
                    this.BasicInformationRowChanging(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BasicInformationRowDeleted != null)) {
                    this.BasicInformationRowDeleted(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BasicInformationRowDeleting != null)) {
                    this.BasicInformationRowDeleting(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBasicInformationRow(BasicInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ServicesAddRequestTDS ds = new ServicesAddRequestTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BasicInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CostInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnPartNumber;
            
            private global::System.Data.DataColumn columnPartName;
            
            private global::System.Data.DataColumn columnVendor;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationDataTable() {
                this.TableName = "CostInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CostInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartNumberColumn {
                get {
                    return this.columnPartNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartNameColumn {
                get {
                    return this.columnPartName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorColumn {
                get {
                    return this.columnVendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow this[int index] {
                get {
                    return ((CostInformationRow)(this.Rows[index]));
                }
            }
            
            public event CostInformationRowChangeEventHandler CostInformationRowChanging;
            
            public event CostInformationRowChangeEventHandler CostInformationRowChanged;
            
            public event CostInformationRowChangeEventHandler CostInformationRowDeleting;
            
            public event CostInformationRowChangeEventHandler CostInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCostInformationRow(CostInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow AddCostInformationRow(int ServiceID, int RefID, string PartNumber, string PartName, string Vendor, decimal Cost, bool Deleted, int COMPANY_ID) {
                CostInformationRow rowCostInformationRow = ((CostInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        RefID,
                        PartNumber,
                        PartName,
                        Vendor,
                        Cost,
                        Deleted,
                        COMPANY_ID};
                rowCostInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCostInformationRow);
                return rowCostInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow FindByServiceIDRefID(int ServiceID, int RefID) {
                return ((CostInformationRow)(this.Rows.Find(new object[] {
                            ServiceID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CostInformationDataTable cln = ((CostInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CostInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnPartNumber = base.Columns["PartNumber"];
                this.columnPartName = base.Columns["PartName"];
                this.columnVendor = base.Columns["Vendor"];
                this.columnCost = base.Columns["Cost"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnPartNumber = new global::System.Data.DataColumn("PartNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartNumber);
                this.columnPartName = new global::System.Data.DataColumn("PartName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartName);
                this.columnVendor = new global::System.Data.DataColumn("Vendor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendor);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID,
                                this.columnRefID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow NewCostInformationRow() {
                return ((CostInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CostInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CostInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CostInformationRowChanged != null)) {
                    this.CostInformationRowChanged(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CostInformationRowChanging != null)) {
                    this.CostInformationRowChanging(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CostInformationRowDeleted != null)) {
                    this.CostInformationRowDeleted(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CostInformationRowDeleting != null)) {
                    this.CostInformationRowDeleting(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCostInformationRow(CostInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ServicesAddRequestTDS ds = new ServicesAddRequestTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CostInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BasicInformationRow : global::System.Data.DataRow {
            
            private BasicInformationDataTable tableBasicInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBasicInformation = ((BasicInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableBasicInformation.ServiceIDColumn]));
                }
                set {
                    this[this.tableBasicInformation.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceState {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.ServiceStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceState\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.ServiceStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MtoDot {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.MtoDotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MtoDot\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.MtoDotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceDescription {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.ServiceDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDescription\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.ServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AssignedDeadlineDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.AssignedDeadlineDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedDeadlineDate\' in table \'BasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignedDeadlineDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AssignDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.AssignDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignDateTime\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AssignTeamMember {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.AssignTeamMemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignTeamMember\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignTeamMemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssignTeamMemberId {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.AssignTeamMemberIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignTeamMemberId\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignTeamMemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignThirdPartyVendor {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.AssignThirdPartyVendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignThirdPartyVendor\' in table \'BasicInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignThirdPartyVendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcceptDatetime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.AcceptDatetimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcceptDatetime\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AcceptDatetimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UnitOutOfServiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.UnitOutOfServiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOutOfServiceDate\' in table \'BasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitOutOfServiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOutOfServiceTime {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.UnitOutOfServiceTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOutOfServiceTime\' in table \'BasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitOutOfServiceTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CompleteWorkDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.CompleteWorkDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDateTime\' in table \'BasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UnitBackInServiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.UnitBackInServiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitBackInServiceDate\' in table \'BasicInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitBackInServiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitBackInServiceTime {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.UnitBackInServiceTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitBackInServiceTime\' in table \'BasicInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitBackInServiceTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompleteWorkDetailDescription {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.CompleteWorkDetailDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDetailDescription\' in table \'BasicInformation\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDetailDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CompleteWorkDetailPreventable {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.CompleteWorkDetailPreventableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDetailPreventable\' in table \'BasicInformation\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDetailPreventableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompleteWorkDetailTMLabourHours {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.CompleteWorkDetailTMLabourHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDetailTMLabourHours\' in table \'BasicInformation" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDetailTMLabourHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompleteWorkDetailTMCost {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.CompleteWorkDetailTMCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDetailTMCost\' in table \'BasicInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDetailTMCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompleteWorkInvoiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.CompleteWorkInvoiceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkInvoiceNumber\' in table \'BasicInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkInvoiceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompleteWorkInvoiceAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.CompleteWorkInvoiceAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkInvoiceAmount\' in table \'BasicInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkInvoiceAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mileage {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.MileageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mileage\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.MileageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartWorkMileage {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.StartWorkMileageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartWorkMileage\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.StartWorkMileageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompleteWorkMileage {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.CompleteWorkMileageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkMileage\' in table \'BasicInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkMileageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.RuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RuleID\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceStateNull() {
                return this.IsNull(this.tableBasicInformation.ServiceStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceStateNull() {
                this[this.tableBasicInformation.ServiceStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMtoDotNull() {
                return this.IsNull(this.tableBasicInformation.MtoDotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMtoDotNull() {
                this[this.tableBasicInformation.MtoDotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceDescriptionNull() {
                return this.IsNull(this.tableBasicInformation.ServiceDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceDescriptionNull() {
                this[this.tableBasicInformation.ServiceDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedDeadlineDateNull() {
                return this.IsNull(this.tableBasicInformation.AssignedDeadlineDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedDeadlineDateNull() {
                this[this.tableBasicInformation.AssignedDeadlineDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignDateTimeNull() {
                return this.IsNull(this.tableBasicInformation.AssignDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignDateTimeNull() {
                this[this.tableBasicInformation.AssignDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignTeamMemberNull() {
                return this.IsNull(this.tableBasicInformation.AssignTeamMemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignTeamMemberNull() {
                this[this.tableBasicInformation.AssignTeamMemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignTeamMemberIdNull() {
                return this.IsNull(this.tableBasicInformation.AssignTeamMemberIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignTeamMemberIdNull() {
                this[this.tableBasicInformation.AssignTeamMemberIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignThirdPartyVendorNull() {
                return this.IsNull(this.tableBasicInformation.AssignThirdPartyVendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignThirdPartyVendorNull() {
                this[this.tableBasicInformation.AssignThirdPartyVendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcceptDatetimeNull() {
                return this.IsNull(this.tableBasicInformation.AcceptDatetimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcceptDatetimeNull() {
                this[this.tableBasicInformation.AcceptDatetimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOutOfServiceDateNull() {
                return this.IsNull(this.tableBasicInformation.UnitOutOfServiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOutOfServiceDateNull() {
                this[this.tableBasicInformation.UnitOutOfServiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOutOfServiceTimeNull() {
                return this.IsNull(this.tableBasicInformation.UnitOutOfServiceTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOutOfServiceTimeNull() {
                this[this.tableBasicInformation.UnitOutOfServiceTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDateTimeNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDateTimeNull() {
                this[this.tableBasicInformation.CompleteWorkDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitBackInServiceDateNull() {
                return this.IsNull(this.tableBasicInformation.UnitBackInServiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitBackInServiceDateNull() {
                this[this.tableBasicInformation.UnitBackInServiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitBackInServiceTimeNull() {
                return this.IsNull(this.tableBasicInformation.UnitBackInServiceTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitBackInServiceTimeNull() {
                this[this.tableBasicInformation.UnitBackInServiceTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDetailDescriptionNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDetailDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDetailDescriptionNull() {
                this[this.tableBasicInformation.CompleteWorkDetailDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDetailPreventableNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDetailPreventableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDetailPreventableNull() {
                this[this.tableBasicInformation.CompleteWorkDetailPreventableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDetailTMLabourHoursNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDetailTMLabourHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDetailTMLabourHoursNull() {
                this[this.tableBasicInformation.CompleteWorkDetailTMLabourHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDetailTMCostNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDetailTMCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDetailTMCostNull() {
                this[this.tableBasicInformation.CompleteWorkDetailTMCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkInvoiceNumberNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkInvoiceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkInvoiceNumberNull() {
                this[this.tableBasicInformation.CompleteWorkInvoiceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkInvoiceAmountNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkInvoiceAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkInvoiceAmountNull() {
                this[this.tableBasicInformation.CompleteWorkInvoiceAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableBasicInformation.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableBasicInformation.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMileageNull() {
                return this.IsNull(this.tableBasicInformation.MileageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMileageNull() {
                this[this.tableBasicInformation.MileageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartWorkMileageNull() {
                return this.IsNull(this.tableBasicInformation.StartWorkMileageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartWorkMileageNull() {
                this[this.tableBasicInformation.StartWorkMileageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkMileageNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkMileageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkMileageNull() {
                this[this.tableBasicInformation.CompleteWorkMileageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableBasicInformation.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableBasicInformation.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableBasicInformation.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableBasicInformation.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRuleIDNull() {
                return this.IsNull(this.tableBasicInformation.RuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRuleIDNull() {
                this[this.tableBasicInformation.RuleIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CostInformationRow : global::System.Data.DataRow {
            
            private CostInformationDataTable tableCostInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCostInformation = ((CostInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableCostInformation.ServiceIDColumn]));
                }
                set {
                    this[this.tableCostInformation.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCostInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCostInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartNumber {
                get {
                    try {
                        return ((string)(this[this.tableCostInformation.PartNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PartNumber\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.PartNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartName {
                get {
                    try {
                        return ((string)(this[this.tableCostInformation.PartNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PartName\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.PartNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Vendor {
                get {
                    try {
                        return ((string)(this[this.tableCostInformation.VendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Vendor\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.VendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableCostInformation.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableCostInformation.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableCostInformation.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartNumberNull() {
                return this.IsNull(this.tableCostInformation.PartNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartNumberNull() {
                this[this.tableCostInformation.PartNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartNameNull() {
                return this.IsNull(this.tableCostInformation.PartNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartNameNull() {
                this[this.tableCostInformation.PartNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorNull() {
                return this.IsNull(this.tableCostInformation.VendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorNull() {
                this[this.tableCostInformation.VendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableCostInformation.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableCostInformation.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableCostInformation.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableCostInformation.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableCostInformation.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableCostInformation.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BasicInformationRowChangeEvent : global::System.EventArgs {
            
            private BasicInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRowChangeEvent(BasicInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CostInformationRowChangeEvent : global::System.EventArgs {
            
            private CostInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRowChangeEvent(CostInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591