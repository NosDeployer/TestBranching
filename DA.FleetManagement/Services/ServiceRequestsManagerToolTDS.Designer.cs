//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Services {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ServiceRequestsManagerToolTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ServiceRequestsManagerToolTDS : global::System.Data.DataSet {
        
        private CostInformationDataTable tableCostInformation;
        
        private ServiceRequestsDataTable tableServiceRequests;
        
        private BasicInformationDataTable tableBasicInformation;
        
        private NoteInformationDataTable tableNoteInformation;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServiceRequestsManagerToolTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ServiceRequestsManagerToolTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["CostInformation"] != null)) {
                    base.Tables.Add(new CostInformationDataTable(ds.Tables["CostInformation"]));
                }
                if ((ds.Tables["ServiceRequests"] != null)) {
                    base.Tables.Add(new ServiceRequestsDataTable(ds.Tables["ServiceRequests"]));
                }
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["NoteInformation"] != null)) {
                    base.Tables.Add(new NoteInformationDataTable(ds.Tables["NoteInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CostInformationDataTable CostInformation {
            get {
                return this.tableCostInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServiceRequestsDataTable ServiceRequests {
            get {
                return this.tableServiceRequests;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BasicInformationDataTable BasicInformation {
            get {
                return this.tableBasicInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NoteInformationDataTable NoteInformation {
            get {
                return this.tableNoteInformation;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ServiceRequestsManagerToolTDS cln = ((ServiceRequestsManagerToolTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["CostInformation"] != null)) {
                    base.Tables.Add(new CostInformationDataTable(ds.Tables["CostInformation"]));
                }
                if ((ds.Tables["ServiceRequests"] != null)) {
                    base.Tables.Add(new ServiceRequestsDataTable(ds.Tables["ServiceRequests"]));
                }
                if ((ds.Tables["BasicInformation"] != null)) {
                    base.Tables.Add(new BasicInformationDataTable(ds.Tables["BasicInformation"]));
                }
                if ((ds.Tables["NoteInformation"] != null)) {
                    base.Tables.Add(new NoteInformationDataTable(ds.Tables["NoteInformation"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCostInformation = ((CostInformationDataTable)(base.Tables["CostInformation"]));
            if ((initTable == true)) {
                if ((this.tableCostInformation != null)) {
                    this.tableCostInformation.InitVars();
                }
            }
            this.tableServiceRequests = ((ServiceRequestsDataTable)(base.Tables["ServiceRequests"]));
            if ((initTable == true)) {
                if ((this.tableServiceRequests != null)) {
                    this.tableServiceRequests.InitVars();
                }
            }
            this.tableBasicInformation = ((BasicInformationDataTable)(base.Tables["BasicInformation"]));
            if ((initTable == true)) {
                if ((this.tableBasicInformation != null)) {
                    this.tableBasicInformation.InitVars();
                }
            }
            this.tableNoteInformation = ((NoteInformationDataTable)(base.Tables["NoteInformation"]));
            if ((initTable == true)) {
                if ((this.tableNoteInformation != null)) {
                    this.tableNoteInformation.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ServiceRequestsManagerToolTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ServiceRequestsManagerToolTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCostInformation = new CostInformationDataTable();
            base.Tables.Add(this.tableCostInformation);
            this.tableServiceRequests = new ServiceRequestsDataTable();
            base.Tables.Add(this.tableServiceRequests);
            this.tableBasicInformation = new BasicInformationDataTable();
            base.Tables.Add(this.tableBasicInformation);
            this.tableNoteInformation = new NoteInformationDataTable();
            base.Tables.Add(this.tableNoteInformation);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCostInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServiceRequests() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBasicInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNoteInformation() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ServiceRequestsManagerToolTDS ds = new ServiceRequestsManagerToolTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void CostInformationRowChangeEventHandler(object sender, CostInformationRowChangeEvent e);
        
        public delegate void ServiceRequestsRowChangeEventHandler(object sender, ServiceRequestsRowChangeEvent e);
        
        public delegate void BasicInformationRowChangeEventHandler(object sender, BasicInformationRowChangeEvent e);
        
        public delegate void NoteInformationRowChangeEventHandler(object sender, NoteInformationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CostInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnPartNumber;
            
            private global::System.Data.DataColumn columnPartName;
            
            private global::System.Data.DataColumn columnVendor;
            
            private global::System.Data.DataColumn columnCost;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationDataTable() {
                this.TableName = "CostInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CostInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartNumberColumn {
                get {
                    return this.columnPartNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PartNameColumn {
                get {
                    return this.columnPartName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorColumn {
                get {
                    return this.columnVendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostColumn {
                get {
                    return this.columnCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow this[int index] {
                get {
                    return ((CostInformationRow)(this.Rows[index]));
                }
            }
            
            public event CostInformationRowChangeEventHandler CostInformationRowChanging;
            
            public event CostInformationRowChangeEventHandler CostInformationRowChanged;
            
            public event CostInformationRowChangeEventHandler CostInformationRowDeleting;
            
            public event CostInformationRowChangeEventHandler CostInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCostInformationRow(CostInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow AddCostInformationRow(int ServiceID, int RefID, string PartNumber, string PartName, string Vendor, decimal Cost, bool Deleted, int COMPANY_ID) {
                CostInformationRow rowCostInformationRow = ((CostInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        RefID,
                        PartNumber,
                        PartName,
                        Vendor,
                        Cost,
                        Deleted,
                        COMPANY_ID};
                rowCostInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCostInformationRow);
                return rowCostInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow FindByServiceIDRefID(int ServiceID, int RefID) {
                return ((CostInformationRow)(this.Rows.Find(new object[] {
                            ServiceID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CostInformationDataTable cln = ((CostInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CostInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnPartNumber = base.Columns["PartNumber"];
                this.columnPartName = base.Columns["PartName"];
                this.columnVendor = base.Columns["Vendor"];
                this.columnCost = base.Columns["Cost"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnPartNumber = new global::System.Data.DataColumn("PartNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartNumber);
                this.columnPartName = new global::System.Data.DataColumn("PartName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPartName);
                this.columnVendor = new global::System.Data.DataColumn("Vendor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendor);
                this.columnCost = new global::System.Data.DataColumn("Cost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCost);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID,
                                this.columnRefID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow NewCostInformationRow() {
                return ((CostInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CostInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CostInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CostInformationRowChanged != null)) {
                    this.CostInformationRowChanged(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CostInformationRowChanging != null)) {
                    this.CostInformationRowChanging(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CostInformationRowDeleted != null)) {
                    this.CostInformationRowDeleted(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CostInformationRowDeleting != null)) {
                    this.CostInformationRowDeleting(this, new CostInformationRowChangeEvent(((CostInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCostInformationRow(CostInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ServiceRequestsManagerToolTDS ds = new ServiceRequestsManagerToolTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CostInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServiceRequestsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnSelected;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRequestsDataTable() {
                this.TableName = "ServiceRequests";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceRequestsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServiceRequestsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRequestsRow this[int index] {
                get {
                    return ((ServiceRequestsRow)(this.Rows[index]));
                }
            }
            
            public event ServiceRequestsRowChangeEventHandler ServiceRequestsRowChanging;
            
            public event ServiceRequestsRowChangeEventHandler ServiceRequestsRowChanged;
            
            public event ServiceRequestsRowChangeEventHandler ServiceRequestsRowDeleting;
            
            public event ServiceRequestsRowChangeEventHandler ServiceRequestsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServiceRequestsRow(ServiceRequestsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRequestsRow AddServiceRequestsRow(int ServiceID, int Number, string Description, string State, bool Deleted, bool Selected) {
                ServiceRequestsRow rowServiceRequestsRow = ((ServiceRequestsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        Number,
                        Description,
                        State,
                        Deleted,
                        Selected};
                rowServiceRequestsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowServiceRequestsRow);
                return rowServiceRequestsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRequestsRow FindByServiceID(int ServiceID) {
                return ((ServiceRequestsRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ServiceRequestsDataTable cln = ((ServiceRequestsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ServiceRequestsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnNumber = base.Columns["Number"];
                this.columnDescription = base.Columns["Description"];
                this.columnState = base.Columns["State"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnSelected = base.Columns["Selected"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRequestsRow NewServiceRequestsRow() {
                return ((ServiceRequestsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ServiceRequestsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ServiceRequestsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServiceRequestsRowChanged != null)) {
                    this.ServiceRequestsRowChanged(this, new ServiceRequestsRowChangeEvent(((ServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServiceRequestsRowChanging != null)) {
                    this.ServiceRequestsRowChanging(this, new ServiceRequestsRowChangeEvent(((ServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServiceRequestsRowDeleted != null)) {
                    this.ServiceRequestsRowDeleted(this, new ServiceRequestsRowChangeEvent(((ServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServiceRequestsRowDeleting != null)) {
                    this.ServiceRequestsRowDeleting(this, new ServiceRequestsRowChangeEvent(((ServiceRequestsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServiceRequestsRow(ServiceRequestsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ServiceRequestsManagerToolTDS ds = new ServiceRequestsManagerToolTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServiceRequestsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BasicInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnServiceNumber;
            
            private global::System.Data.DataColumn columnServiceState;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnMTO;
            
            private global::System.Data.DataColumn columnServiceDescription;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnOwnerID;
            
            private global::System.Data.DataColumn columnAssignmentDateTime;
            
            private global::System.Data.DataColumn columnAssignedDeadlineDate;
            
            private global::System.Data.DataColumn columnAssignTeamMember;
            
            private global::System.Data.DataColumn columnAssignTeamMemberID;
            
            private global::System.Data.DataColumn columnAssignThirdPartyVendor;
            
            private global::System.Data.DataColumn columnAcceptDateTime;
            
            private global::System.Data.DataColumn columnRejectDateTime;
            
            private global::System.Data.DataColumn columnRejectReason;
            
            private global::System.Data.DataColumn columnStartWorkDateTime;
            
            private global::System.Data.DataColumn columnUnitOutOfServiceDate;
            
            private global::System.Data.DataColumn columnUnitOutOfServiceTime;
            
            private global::System.Data.DataColumn columnCompleteWorkDateTime;
            
            private global::System.Data.DataColumn columnUnitBackInServiceDate;
            
            private global::System.Data.DataColumn columnUnitBackInServiceTime;
            
            private global::System.Data.DataColumn columnCompleteWorkDetailDescription;
            
            private global::System.Data.DataColumn columnCompleteWorkDetailPreventable;
            
            private global::System.Data.DataColumn columnCompleteWorkDetailTMLabourHours;
            
            private global::System.Data.DataColumn columnCompleteWorkDetailTMCost;
            
            private global::System.Data.DataColumn columnCompleteWorkInvoiceNumber;
            
            private global::System.Data.DataColumn columnCompleteWorkInvoiceAmount;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnRuleID;
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnUnitDescription;
            
            private global::System.Data.DataColumn columnUnitCompanyLevelID;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnMileage;
            
            private global::System.Data.DataColumn columnStartWorkMileage;
            
            private global::System.Data.DataColumn columnCompleteWorkMileage;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnAssociatedChecklistRule;
            
            private global::System.Data.DataColumn columnAssociatedChecklistRuleState;
            
            private global::System.Data.DataColumn columnAssociatedChecklistLastService;
            
            private global::System.Data.DataColumn columnAssociatedChecklistNextDue;
            
            private global::System.Data.DataColumn columnAssociatedChecklistDone;
            
            private global::System.Data.DataColumn columnAssociatedChecklistDeleted;
            
            private global::System.Data.DataColumn columnAssociatedChecklistCompanyId;
            
            private global::System.Data.DataColumn columnLIBRARY_CATEGORIES_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationDataTable() {
                this.TableName = "BasicInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BasicInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceNumberColumn {
                get {
                    return this.columnServiceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceStateColumn {
                get {
                    return this.columnServiceState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MTOColumn {
                get {
                    return this.columnMTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceDescriptionColumn {
                get {
                    return this.columnServiceDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerIDColumn {
                get {
                    return this.columnOwnerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignmentDateTimeColumn {
                get {
                    return this.columnAssignmentDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedDeadlineDateColumn {
                get {
                    return this.columnAssignedDeadlineDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignTeamMemberColumn {
                get {
                    return this.columnAssignTeamMember;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignTeamMemberIDColumn {
                get {
                    return this.columnAssignTeamMemberID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignThirdPartyVendorColumn {
                get {
                    return this.columnAssignThirdPartyVendor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcceptDateTimeColumn {
                get {
                    return this.columnAcceptDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RejectDateTimeColumn {
                get {
                    return this.columnRejectDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RejectReasonColumn {
                get {
                    return this.columnRejectReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartWorkDateTimeColumn {
                get {
                    return this.columnStartWorkDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOutOfServiceDateColumn {
                get {
                    return this.columnUnitOutOfServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitOutOfServiceTimeColumn {
                get {
                    return this.columnUnitOutOfServiceTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDateTimeColumn {
                get {
                    return this.columnCompleteWorkDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitBackInServiceDateColumn {
                get {
                    return this.columnUnitBackInServiceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitBackInServiceTimeColumn {
                get {
                    return this.columnUnitBackInServiceTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDetailDescriptionColumn {
                get {
                    return this.columnCompleteWorkDetailDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDetailPreventableColumn {
                get {
                    return this.columnCompleteWorkDetailPreventable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDetailTMLabourHoursColumn {
                get {
                    return this.columnCompleteWorkDetailTMLabourHours;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkDetailTMCostColumn {
                get {
                    return this.columnCompleteWorkDetailTMCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkInvoiceNumberColumn {
                get {
                    return this.columnCompleteWorkInvoiceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkInvoiceAmountColumn {
                get {
                    return this.columnCompleteWorkInvoiceAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RuleIDColumn {
                get {
                    return this.columnRuleID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitDescriptionColumn {
                get {
                    return this.columnUnitDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCompanyLevelIDColumn {
                get {
                    return this.columnUnitCompanyLevelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MileageColumn {
                get {
                    return this.columnMileage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartWorkMileageColumn {
                get {
                    return this.columnStartWorkMileage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompleteWorkMileageColumn {
                get {
                    return this.columnCompleteWorkMileage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssociatedChecklistRuleColumn {
                get {
                    return this.columnAssociatedChecklistRule;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssociatedChecklistRuleStateColumn {
                get {
                    return this.columnAssociatedChecklistRuleState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssociatedChecklistLastServiceColumn {
                get {
                    return this.columnAssociatedChecklistLastService;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssociatedChecklistNextDueColumn {
                get {
                    return this.columnAssociatedChecklistNextDue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssociatedChecklistDoneColumn {
                get {
                    return this.columnAssociatedChecklistDone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssociatedChecklistDeletedColumn {
                get {
                    return this.columnAssociatedChecklistDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssociatedChecklistCompanyIdColumn {
                get {
                    return this.columnAssociatedChecklistCompanyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_CATEGORIES_IDColumn {
                get {
                    return this.columnLIBRARY_CATEGORIES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow this[int index] {
                get {
                    return ((BasicInformationRow)(this.Rows[index]));
                }
            }
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanging;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowChanged;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleting;
            
            public event BasicInformationRowChangeEventHandler BasicInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBasicInformationRow(BasicInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow AddBasicInformationRow(
                        int ServiceID, 
                        string ServiceNumber, 
                        string ServiceState, 
                        System.DateTime DateTime_, 
                        bool MTO, 
                        string ServiceDescription, 
                        string Type, 
                        int OwnerID, 
                        System.DateTime AssignmentDateTime, 
                        System.DateTime AssignedDeadlineDate, 
                        bool AssignTeamMember, 
                        int AssignTeamMemberID, 
                        string AssignThirdPartyVendor, 
                        System.DateTime AcceptDateTime, 
                        System.DateTime RejectDateTime, 
                        string RejectReason, 
                        System.DateTime StartWorkDateTime, 
                        System.DateTime UnitOutOfServiceDate, 
                        string UnitOutOfServiceTime, 
                        System.DateTime CompleteWorkDateTime, 
                        System.DateTime UnitBackInServiceDate, 
                        string UnitBackInServiceTime, 
                        string CompleteWorkDetailDescription, 
                        bool CompleteWorkDetailPreventable, 
                        decimal CompleteWorkDetailTMLabourHours, 
                        decimal CompleteWorkDetailTMCost, 
                        string CompleteWorkInvoiceNumber, 
                        decimal CompleteWorkInvoiceAmount, 
                        string Notes, 
                        int RuleID, 
                        int UnitID, 
                        string UnitCode, 
                        string UnitDescription, 
                        string UnitCompanyLevelID, 
                        string CreatedBy, 
                        string Mileage, 
                        string StartWorkMileage, 
                        string CompleteWorkMileage, 
                        bool Deleted, 
                        int COMPANY_ID, 
                        string AssociatedChecklistRule, 
                        string AssociatedChecklistRuleState, 
                        System.DateTime AssociatedChecklistLastService, 
                        System.DateTime AssociatedChecklistNextDue, 
                        bool AssociatedChecklistDone, 
                        bool AssociatedChecklistDeleted, 
                        int AssociatedChecklistCompanyId, 
                        int LIBRARY_CATEGORIES_ID) {
                BasicInformationRow rowBasicInformationRow = ((BasicInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        ServiceNumber,
                        ServiceState,
                        DateTime_,
                        MTO,
                        ServiceDescription,
                        Type,
                        OwnerID,
                        AssignmentDateTime,
                        AssignedDeadlineDate,
                        AssignTeamMember,
                        AssignTeamMemberID,
                        AssignThirdPartyVendor,
                        AcceptDateTime,
                        RejectDateTime,
                        RejectReason,
                        StartWorkDateTime,
                        UnitOutOfServiceDate,
                        UnitOutOfServiceTime,
                        CompleteWorkDateTime,
                        UnitBackInServiceDate,
                        UnitBackInServiceTime,
                        CompleteWorkDetailDescription,
                        CompleteWorkDetailPreventable,
                        CompleteWorkDetailTMLabourHours,
                        CompleteWorkDetailTMCost,
                        CompleteWorkInvoiceNumber,
                        CompleteWorkInvoiceAmount,
                        Notes,
                        RuleID,
                        UnitID,
                        UnitCode,
                        UnitDescription,
                        UnitCompanyLevelID,
                        CreatedBy,
                        Mileage,
                        StartWorkMileage,
                        CompleteWorkMileage,
                        Deleted,
                        COMPANY_ID,
                        AssociatedChecklistRule,
                        AssociatedChecklistRuleState,
                        AssociatedChecklistLastService,
                        AssociatedChecklistNextDue,
                        AssociatedChecklistDone,
                        AssociatedChecklistDeleted,
                        AssociatedChecklistCompanyId,
                        LIBRARY_CATEGORIES_ID};
                rowBasicInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBasicInformationRow);
                return rowBasicInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow FindByServiceID(int ServiceID) {
                return ((BasicInformationRow)(this.Rows.Find(new object[] {
                            ServiceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BasicInformationDataTable cln = ((BasicInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BasicInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnServiceNumber = base.Columns["ServiceNumber"];
                this.columnServiceState = base.Columns["ServiceState"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnMTO = base.Columns["MTO"];
                this.columnServiceDescription = base.Columns["ServiceDescription"];
                this.columnType = base.Columns["Type"];
                this.columnOwnerID = base.Columns["OwnerID"];
                this.columnAssignmentDateTime = base.Columns["AssignmentDateTime"];
                this.columnAssignedDeadlineDate = base.Columns["AssignedDeadlineDate"];
                this.columnAssignTeamMember = base.Columns["AssignTeamMember"];
                this.columnAssignTeamMemberID = base.Columns["AssignTeamMemberID"];
                this.columnAssignThirdPartyVendor = base.Columns["AssignThirdPartyVendor"];
                this.columnAcceptDateTime = base.Columns["AcceptDateTime"];
                this.columnRejectDateTime = base.Columns["RejectDateTime"];
                this.columnRejectReason = base.Columns["RejectReason"];
                this.columnStartWorkDateTime = base.Columns["StartWorkDateTime"];
                this.columnUnitOutOfServiceDate = base.Columns["UnitOutOfServiceDate"];
                this.columnUnitOutOfServiceTime = base.Columns["UnitOutOfServiceTime"];
                this.columnCompleteWorkDateTime = base.Columns["CompleteWorkDateTime"];
                this.columnUnitBackInServiceDate = base.Columns["UnitBackInServiceDate"];
                this.columnUnitBackInServiceTime = base.Columns["UnitBackInServiceTime"];
                this.columnCompleteWorkDetailDescription = base.Columns["CompleteWorkDetailDescription"];
                this.columnCompleteWorkDetailPreventable = base.Columns["CompleteWorkDetailPreventable"];
                this.columnCompleteWorkDetailTMLabourHours = base.Columns["CompleteWorkDetailTMLabourHours"];
                this.columnCompleteWorkDetailTMCost = base.Columns["CompleteWorkDetailTMCost"];
                this.columnCompleteWorkInvoiceNumber = base.Columns["CompleteWorkInvoiceNumber"];
                this.columnCompleteWorkInvoiceAmount = base.Columns["CompleteWorkInvoiceAmount"];
                this.columnNotes = base.Columns["Notes"];
                this.columnRuleID = base.Columns["RuleID"];
                this.columnUnitID = base.Columns["UnitID"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnUnitDescription = base.Columns["UnitDescription"];
                this.columnUnitCompanyLevelID = base.Columns["UnitCompanyLevelID"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnMileage = base.Columns["Mileage"];
                this.columnStartWorkMileage = base.Columns["StartWorkMileage"];
                this.columnCompleteWorkMileage = base.Columns["CompleteWorkMileage"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnAssociatedChecklistRule = base.Columns["AssociatedChecklistRule"];
                this.columnAssociatedChecklistRuleState = base.Columns["AssociatedChecklistRuleState"];
                this.columnAssociatedChecklistLastService = base.Columns["AssociatedChecklistLastService"];
                this.columnAssociatedChecklistNextDue = base.Columns["AssociatedChecklistNextDue"];
                this.columnAssociatedChecklistDone = base.Columns["AssociatedChecklistDone"];
                this.columnAssociatedChecklistDeleted = base.Columns["AssociatedChecklistDeleted"];
                this.columnAssociatedChecklistCompanyId = base.Columns["AssociatedChecklistCompanyId"];
                this.columnLIBRARY_CATEGORIES_ID = base.Columns["LIBRARY_CATEGORIES_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnServiceNumber = new global::System.Data.DataColumn("ServiceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceNumber);
                this.columnServiceState = new global::System.Data.DataColumn("ServiceState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceState);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnMTO = new global::System.Data.DataColumn("MTO", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMTO);
                this.columnServiceDescription = new global::System.Data.DataColumn("ServiceDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceDescription);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnOwnerID = new global::System.Data.DataColumn("OwnerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerID);
                this.columnAssignmentDateTime = new global::System.Data.DataColumn("AssignmentDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignmentDateTime);
                this.columnAssignedDeadlineDate = new global::System.Data.DataColumn("AssignedDeadlineDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedDeadlineDate);
                this.columnAssignTeamMember = new global::System.Data.DataColumn("AssignTeamMember", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignTeamMember);
                this.columnAssignTeamMemberID = new global::System.Data.DataColumn("AssignTeamMemberID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignTeamMemberID);
                this.columnAssignThirdPartyVendor = new global::System.Data.DataColumn("AssignThirdPartyVendor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignThirdPartyVendor);
                this.columnAcceptDateTime = new global::System.Data.DataColumn("AcceptDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcceptDateTime);
                this.columnRejectDateTime = new global::System.Data.DataColumn("RejectDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRejectDateTime);
                this.columnRejectReason = new global::System.Data.DataColumn("RejectReason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRejectReason);
                this.columnStartWorkDateTime = new global::System.Data.DataColumn("StartWorkDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartWorkDateTime);
                this.columnUnitOutOfServiceDate = new global::System.Data.DataColumn("UnitOutOfServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOutOfServiceDate);
                this.columnUnitOutOfServiceTime = new global::System.Data.DataColumn("UnitOutOfServiceTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitOutOfServiceTime);
                this.columnCompleteWorkDateTime = new global::System.Data.DataColumn("CompleteWorkDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDateTime);
                this.columnUnitBackInServiceDate = new global::System.Data.DataColumn("UnitBackInServiceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitBackInServiceDate);
                this.columnUnitBackInServiceTime = new global::System.Data.DataColumn("UnitBackInServiceTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitBackInServiceTime);
                this.columnCompleteWorkDetailDescription = new global::System.Data.DataColumn("CompleteWorkDetailDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDetailDescription);
                this.columnCompleteWorkDetailPreventable = new global::System.Data.DataColumn("CompleteWorkDetailPreventable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDetailPreventable);
                this.columnCompleteWorkDetailTMLabourHours = new global::System.Data.DataColumn("CompleteWorkDetailTMLabourHours", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDetailTMLabourHours);
                this.columnCompleteWorkDetailTMCost = new global::System.Data.DataColumn("CompleteWorkDetailTMCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkDetailTMCost);
                this.columnCompleteWorkInvoiceNumber = new global::System.Data.DataColumn("CompleteWorkInvoiceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkInvoiceNumber);
                this.columnCompleteWorkInvoiceAmount = new global::System.Data.DataColumn("CompleteWorkInvoiceAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkInvoiceAmount);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnRuleID = new global::System.Data.DataColumn("RuleID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRuleID);
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnUnitDescription = new global::System.Data.DataColumn("UnitDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitDescription);
                this.columnUnitCompanyLevelID = new global::System.Data.DataColumn("UnitCompanyLevelID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCompanyLevelID);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnMileage = new global::System.Data.DataColumn("Mileage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMileage);
                this.columnStartWorkMileage = new global::System.Data.DataColumn("StartWorkMileage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartWorkMileage);
                this.columnCompleteWorkMileage = new global::System.Data.DataColumn("CompleteWorkMileage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompleteWorkMileage);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnAssociatedChecklistRule = new global::System.Data.DataColumn("AssociatedChecklistRule", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssociatedChecklistRule);
                this.columnAssociatedChecklistRuleState = new global::System.Data.DataColumn("AssociatedChecklistRuleState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssociatedChecklistRuleState);
                this.columnAssociatedChecklistLastService = new global::System.Data.DataColumn("AssociatedChecklistLastService", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssociatedChecklistLastService);
                this.columnAssociatedChecklistNextDue = new global::System.Data.DataColumn("AssociatedChecklistNextDue", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssociatedChecklistNextDue);
                this.columnAssociatedChecklistDone = new global::System.Data.DataColumn("AssociatedChecklistDone", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssociatedChecklistDone);
                this.columnAssociatedChecklistDeleted = new global::System.Data.DataColumn("AssociatedChecklistDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssociatedChecklistDeleted);
                this.columnAssociatedChecklistCompanyId = new global::System.Data.DataColumn("AssociatedChecklistCompanyId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssociatedChecklistCompanyId);
                this.columnLIBRARY_CATEGORIES_ID = new global::System.Data.DataColumn("LIBRARY_CATEGORIES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_CATEGORIES_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnServiceID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow NewBasicInformationRow() {
                return ((BasicInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BasicInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BasicInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BasicInformationRowChanged != null)) {
                    this.BasicInformationRowChanged(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BasicInformationRowChanging != null)) {
                    this.BasicInformationRowChanging(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BasicInformationRowDeleted != null)) {
                    this.BasicInformationRowDeleted(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BasicInformationRowDeleting != null)) {
                    this.BasicInformationRowDeleting(this, new BasicInformationRowChangeEvent(((BasicInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBasicInformationRow(BasicInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ServiceRequestsManagerToolTDS ds = new ServiceRequestsManagerToolTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BasicInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NoteInformationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServiceID;
            
            private global::System.Data.DataColumn columnRefID;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnDateTime_;
            
            private global::System.Data.DataColumn columnNote;
            
            private global::System.Data.DataColumn columnLIBRARY_FILES_ID;
            
            private global::System.Data.DataColumn columnORIGINAL_FILENAME;
            
            private global::System.Data.DataColumn columnFILENAME;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnInServiceNoteDatabase;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationDataTable() {
                this.TableName = "NoteInformation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoteInformationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NoteInformationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceIDColumn {
                get {
                    return this.columnServiceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefIDColumn {
                get {
                    return this.columnRefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTime_Column {
                get {
                    return this.columnDateTime_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIBRARY_FILES_IDColumn {
                get {
                    return this.columnLIBRARY_FILES_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORIGINAL_FILENAMEColumn {
                get {
                    return this.columnORIGINAL_FILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILENAMEColumn {
                get {
                    return this.columnFILENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InServiceNoteDatabaseColumn {
                get {
                    return this.columnInServiceNoteDatabase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow this[int index] {
                get {
                    return ((NoteInformationRow)(this.Rows[index]));
                }
            }
            
            public event NoteInformationRowChangeEventHandler NoteInformationRowChanging;
            
            public event NoteInformationRowChangeEventHandler NoteInformationRowChanged;
            
            public event NoteInformationRowChangeEventHandler NoteInformationRowDeleting;
            
            public event NoteInformationRowChangeEventHandler NoteInformationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNoteInformationRow(NoteInformationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow AddNoteInformationRow(int ServiceID, int RefID, string Subject, int UserID, System.DateTime DateTime_, string Note, int LIBRARY_FILES_ID, string ORIGINAL_FILENAME, string FILENAME, bool Deleted, int COMPANY_ID, bool InServiceNoteDatabase) {
                NoteInformationRow rowNoteInformationRow = ((NoteInformationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServiceID,
                        RefID,
                        Subject,
                        UserID,
                        DateTime_,
                        Note,
                        LIBRARY_FILES_ID,
                        ORIGINAL_FILENAME,
                        FILENAME,
                        Deleted,
                        COMPANY_ID,
                        InServiceNoteDatabase};
                rowNoteInformationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowNoteInformationRow);
                return rowNoteInformationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow FindByServiceIDRefID(int ServiceID, int RefID) {
                return ((NoteInformationRow)(this.Rows.Find(new object[] {
                            ServiceID,
                            RefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                NoteInformationDataTable cln = ((NoteInformationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new NoteInformationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceID = base.Columns["ServiceID"];
                this.columnRefID = base.Columns["RefID"];
                this.columnSubject = base.Columns["Subject"];
                this.columnUserID = base.Columns["UserID"];
                this.columnDateTime_ = base.Columns["DateTime_"];
                this.columnNote = base.Columns["Note"];
                this.columnLIBRARY_FILES_ID = base.Columns["LIBRARY_FILES_ID"];
                this.columnORIGINAL_FILENAME = base.Columns["ORIGINAL_FILENAME"];
                this.columnFILENAME = base.Columns["FILENAME"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnInServiceNoteDatabase = base.Columns["InServiceNoteDatabase"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceID = new global::System.Data.DataColumn("ServiceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceID);
                this.columnRefID = new global::System.Data.DataColumn("RefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefID);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnDateTime_ = new global::System.Data.DataColumn("DateTime_", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTime_);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnLIBRARY_FILES_ID = new global::System.Data.DataColumn("LIBRARY_FILES_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIBRARY_FILES_ID);
                this.columnORIGINAL_FILENAME = new global::System.Data.DataColumn("ORIGINAL_FILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORIGINAL_FILENAME);
                this.columnFILENAME = new global::System.Data.DataColumn("FILENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILENAME);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnInServiceNoteDatabase = new global::System.Data.DataColumn("InServiceNoteDatabase", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInServiceNoteDatabase);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnServiceID,
                                this.columnRefID}, true));
                this.columnServiceID.AllowDBNull = false;
                this.columnRefID.AllowDBNull = false;
                this.columnSubject.AllowDBNull = false;
                this.columnSubject.MaxLength = 100;
                this.columnUserID.AllowDBNull = false;
                this.columnDateTime_.AllowDBNull = false;
                this.columnNote.AllowDBNull = false;
                this.columnNote.MaxLength = 1073741823;
                this.columnDeleted.AllowDBNull = false;
                this.columnCOMPANY_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow NewNoteInformationRow() {
                return ((NoteInformationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new NoteInformationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(NoteInformationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NoteInformationRowChanged != null)) {
                    this.NoteInformationRowChanged(this, new NoteInformationRowChangeEvent(((NoteInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NoteInformationRowChanging != null)) {
                    this.NoteInformationRowChanging(this, new NoteInformationRowChangeEvent(((NoteInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NoteInformationRowDeleted != null)) {
                    this.NoteInformationRowDeleted(this, new NoteInformationRowChangeEvent(((NoteInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NoteInformationRowDeleting != null)) {
                    this.NoteInformationRowDeleting(this, new NoteInformationRowChangeEvent(((NoteInformationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNoteInformationRow(NoteInformationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ServiceRequestsManagerToolTDS ds = new ServiceRequestsManagerToolTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NoteInformationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CostInformationRow : global::System.Data.DataRow {
            
            private CostInformationDataTable tableCostInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CostInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCostInformation = ((CostInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableCostInformation.ServiceIDColumn]));
                }
                set {
                    this[this.tableCostInformation.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableCostInformation.RefIDColumn]));
                }
                set {
                    this[this.tableCostInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartNumber {
                get {
                    try {
                        return ((string)(this[this.tableCostInformation.PartNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PartNumber\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.PartNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PartName {
                get {
                    try {
                        return ((string)(this[this.tableCostInformation.PartNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PartName\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.PartNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Vendor {
                get {
                    try {
                        return ((string)(this[this.tableCostInformation.VendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Vendor\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.VendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Cost {
                get {
                    try {
                        return ((decimal)(this[this.tableCostInformation.CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Cost\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableCostInformation.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableCostInformation.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'CostInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCostInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartNumberNull() {
                return this.IsNull(this.tableCostInformation.PartNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartNumberNull() {
                this[this.tableCostInformation.PartNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPartNameNull() {
                return this.IsNull(this.tableCostInformation.PartNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPartNameNull() {
                this[this.tableCostInformation.PartNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorNull() {
                return this.IsNull(this.tableCostInformation.VendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorNull() {
                this[this.tableCostInformation.VendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostNull() {
                return this.IsNull(this.tableCostInformation.CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostNull() {
                this[this.tableCostInformation.CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableCostInformation.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableCostInformation.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableCostInformation.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableCostInformation.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServiceRequestsRow : global::System.Data.DataRow {
            
            private ServiceRequestsDataTable tableServiceRequests;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceRequestsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServiceRequests = ((ServiceRequestsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableServiceRequests.ServiceIDColumn]));
                }
                set {
                    this[this.tableServiceRequests.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Number {
                get {
                    try {
                        return ((int)(this[this.tableServiceRequests.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Number\' in table \'ServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceRequests.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableServiceRequests.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceRequests.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableServiceRequests.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'ServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceRequests.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableServiceRequests.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'ServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceRequests.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableServiceRequests.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'ServiceRequests\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceRequests.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableServiceRequests.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableServiceRequests.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableServiceRequests.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableServiceRequests.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableServiceRequests.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableServiceRequests.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableServiceRequests.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableServiceRequests.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableServiceRequests.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableServiceRequests.SelectedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BasicInformationRow : global::System.Data.DataRow {
            
            private BasicInformationDataTable tableBasicInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BasicInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBasicInformation = ((BasicInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableBasicInformation.ServiceIDColumn]));
                }
                set {
                    this[this.tableBasicInformation.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.ServiceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceNumber\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.ServiceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceState {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.ServiceStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceState\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.ServiceStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.DateTime_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTime_\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MTO {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.MTOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MTO\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.MTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceDescription {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.ServiceDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ServiceDescription\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.ServiceDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OwnerID {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.OwnerIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerID\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.OwnerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AssignmentDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.AssignmentDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignmentDateTime\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignmentDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AssignedDeadlineDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.AssignedDeadlineDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedDeadlineDate\' in table \'BasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignedDeadlineDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AssignTeamMember {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.AssignTeamMemberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignTeamMember\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignTeamMemberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssignTeamMemberID {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.AssignTeamMemberIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignTeamMemberID\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignTeamMemberIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignThirdPartyVendor {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.AssignThirdPartyVendorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignThirdPartyVendor\' in table \'BasicInformation\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssignThirdPartyVendorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcceptDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.AcceptDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcceptDateTime\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AcceptDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RejectDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.RejectDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RejectDateTime\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.RejectDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RejectReason {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.RejectReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RejectReason\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.RejectReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartWorkDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.StartWorkDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartWorkDateTime\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.StartWorkDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UnitOutOfServiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.UnitOutOfServiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOutOfServiceDate\' in table \'BasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitOutOfServiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitOutOfServiceTime {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.UnitOutOfServiceTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitOutOfServiceTime\' in table \'BasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitOutOfServiceTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CompleteWorkDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.CompleteWorkDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDateTime\' in table \'BasicInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UnitBackInServiceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.UnitBackInServiceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitBackInServiceDate\' in table \'BasicInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitBackInServiceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitBackInServiceTime {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.UnitBackInServiceTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitBackInServiceTime\' in table \'BasicInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitBackInServiceTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompleteWorkDetailDescription {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.CompleteWorkDetailDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDetailDescription\' in table \'BasicInformation\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDetailDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool CompleteWorkDetailPreventable {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.CompleteWorkDetailPreventableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDetailPreventable\' in table \'BasicInformation\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDetailPreventableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompleteWorkDetailTMLabourHours {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.CompleteWorkDetailTMLabourHoursColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDetailTMLabourHours\' in table \'BasicInformation" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDetailTMLabourHoursColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompleteWorkDetailTMCost {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.CompleteWorkDetailTMCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkDetailTMCost\' in table \'BasicInformation\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkDetailTMCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompleteWorkInvoiceNumber {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.CompleteWorkInvoiceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkInvoiceNumber\' in table \'BasicInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkInvoiceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompleteWorkInvoiceAmount {
                get {
                    try {
                        return ((decimal)(this[this.tableBasicInformation.CompleteWorkInvoiceAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkInvoiceAmount\' in table \'BasicInformation\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkInvoiceAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RuleID {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.RuleIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RuleID\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.RuleIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.UnitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitID\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitDescription {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.UnitDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitDescription\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCompanyLevelID {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.UnitCompanyLevelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCompanyLevelID\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.UnitCompanyLevelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mileage {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.MileageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mileage\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.MileageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartWorkMileage {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.StartWorkMileageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartWorkMileage\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.StartWorkMileageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompleteWorkMileage {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.CompleteWorkMileageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompleteWorkMileage\' in table \'BasicInformation\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.CompleteWorkMileageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'BasicInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssociatedChecklistRule {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.AssociatedChecklistRuleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssociatedChecklistRule\' in table \'BasicInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssociatedChecklistRuleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssociatedChecklistRuleState {
                get {
                    try {
                        return ((string)(this[this.tableBasicInformation.AssociatedChecklistRuleStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssociatedChecklistRuleState\' in table \'BasicInformation\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssociatedChecklistRuleStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AssociatedChecklistLastService {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.AssociatedChecklistLastServiceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssociatedChecklistLastService\' in table \'BasicInformation\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssociatedChecklistLastServiceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AssociatedChecklistNextDue {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableBasicInformation.AssociatedChecklistNextDueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssociatedChecklistNextDue\' in table \'BasicInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssociatedChecklistNextDueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AssociatedChecklistDone {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.AssociatedChecklistDoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssociatedChecklistDone\' in table \'BasicInformation\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssociatedChecklistDoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AssociatedChecklistDeleted {
                get {
                    try {
                        return ((bool)(this[this.tableBasicInformation.AssociatedChecklistDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssociatedChecklistDeleted\' in table \'BasicInformation\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssociatedChecklistDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssociatedChecklistCompanyId {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.AssociatedChecklistCompanyIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssociatedChecklistCompanyId\' in table \'BasicInformation\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.AssociatedChecklistCompanyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_CATEGORIES_ID {
                get {
                    try {
                        return ((int)(this[this.tableBasicInformation.LIBRARY_CATEGORIES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_CATEGORIES_ID\' in table \'BasicInformation\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableBasicInformation.LIBRARY_CATEGORIES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceNumberNull() {
                return this.IsNull(this.tableBasicInformation.ServiceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceNumberNull() {
                this[this.tableBasicInformation.ServiceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceStateNull() {
                return this.IsNull(this.tableBasicInformation.ServiceStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceStateNull() {
                this[this.tableBasicInformation.ServiceStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTime_Null() {
                return this.IsNull(this.tableBasicInformation.DateTime_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTime_Null() {
                this[this.tableBasicInformation.DateTime_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMTONull() {
                return this.IsNull(this.tableBasicInformation.MTOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMTONull() {
                this[this.tableBasicInformation.MTOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceDescriptionNull() {
                return this.IsNull(this.tableBasicInformation.ServiceDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceDescriptionNull() {
                this[this.tableBasicInformation.ServiceDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tableBasicInformation.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tableBasicInformation.TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerIDNull() {
                return this.IsNull(this.tableBasicInformation.OwnerIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerIDNull() {
                this[this.tableBasicInformation.OwnerIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignmentDateTimeNull() {
                return this.IsNull(this.tableBasicInformation.AssignmentDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignmentDateTimeNull() {
                this[this.tableBasicInformation.AssignmentDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedDeadlineDateNull() {
                return this.IsNull(this.tableBasicInformation.AssignedDeadlineDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedDeadlineDateNull() {
                this[this.tableBasicInformation.AssignedDeadlineDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignTeamMemberNull() {
                return this.IsNull(this.tableBasicInformation.AssignTeamMemberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignTeamMemberNull() {
                this[this.tableBasicInformation.AssignTeamMemberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignTeamMemberIDNull() {
                return this.IsNull(this.tableBasicInformation.AssignTeamMemberIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignTeamMemberIDNull() {
                this[this.tableBasicInformation.AssignTeamMemberIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignThirdPartyVendorNull() {
                return this.IsNull(this.tableBasicInformation.AssignThirdPartyVendorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignThirdPartyVendorNull() {
                this[this.tableBasicInformation.AssignThirdPartyVendorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcceptDateTimeNull() {
                return this.IsNull(this.tableBasicInformation.AcceptDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcceptDateTimeNull() {
                this[this.tableBasicInformation.AcceptDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRejectDateTimeNull() {
                return this.IsNull(this.tableBasicInformation.RejectDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRejectDateTimeNull() {
                this[this.tableBasicInformation.RejectDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRejectReasonNull() {
                return this.IsNull(this.tableBasicInformation.RejectReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRejectReasonNull() {
                this[this.tableBasicInformation.RejectReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartWorkDateTimeNull() {
                return this.IsNull(this.tableBasicInformation.StartWorkDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartWorkDateTimeNull() {
                this[this.tableBasicInformation.StartWorkDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOutOfServiceDateNull() {
                return this.IsNull(this.tableBasicInformation.UnitOutOfServiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOutOfServiceDateNull() {
                this[this.tableBasicInformation.UnitOutOfServiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitOutOfServiceTimeNull() {
                return this.IsNull(this.tableBasicInformation.UnitOutOfServiceTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitOutOfServiceTimeNull() {
                this[this.tableBasicInformation.UnitOutOfServiceTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDateTimeNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDateTimeNull() {
                this[this.tableBasicInformation.CompleteWorkDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitBackInServiceDateNull() {
                return this.IsNull(this.tableBasicInformation.UnitBackInServiceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitBackInServiceDateNull() {
                this[this.tableBasicInformation.UnitBackInServiceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitBackInServiceTimeNull() {
                return this.IsNull(this.tableBasicInformation.UnitBackInServiceTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitBackInServiceTimeNull() {
                this[this.tableBasicInformation.UnitBackInServiceTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDetailDescriptionNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDetailDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDetailDescriptionNull() {
                this[this.tableBasicInformation.CompleteWorkDetailDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDetailPreventableNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDetailPreventableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDetailPreventableNull() {
                this[this.tableBasicInformation.CompleteWorkDetailPreventableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDetailTMLabourHoursNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDetailTMLabourHoursColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDetailTMLabourHoursNull() {
                this[this.tableBasicInformation.CompleteWorkDetailTMLabourHoursColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkDetailTMCostNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkDetailTMCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkDetailTMCostNull() {
                this[this.tableBasicInformation.CompleteWorkDetailTMCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkInvoiceNumberNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkInvoiceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkInvoiceNumberNull() {
                this[this.tableBasicInformation.CompleteWorkInvoiceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkInvoiceAmountNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkInvoiceAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkInvoiceAmountNull() {
                this[this.tableBasicInformation.CompleteWorkInvoiceAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableBasicInformation.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableBasicInformation.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRuleIDNull() {
                return this.IsNull(this.tableBasicInformation.RuleIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRuleIDNull() {
                this[this.tableBasicInformation.RuleIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitIDNull() {
                return this.IsNull(this.tableBasicInformation.UnitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitIDNull() {
                this[this.tableBasicInformation.UnitIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableBasicInformation.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableBasicInformation.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitDescriptionNull() {
                return this.IsNull(this.tableBasicInformation.UnitDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitDescriptionNull() {
                this[this.tableBasicInformation.UnitDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCompanyLevelIDNull() {
                return this.IsNull(this.tableBasicInformation.UnitCompanyLevelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCompanyLevelIDNull() {
                this[this.tableBasicInformation.UnitCompanyLevelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableBasicInformation.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableBasicInformation.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMileageNull() {
                return this.IsNull(this.tableBasicInformation.MileageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMileageNull() {
                this[this.tableBasicInformation.MileageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartWorkMileageNull() {
                return this.IsNull(this.tableBasicInformation.StartWorkMileageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartWorkMileageNull() {
                this[this.tableBasicInformation.StartWorkMileageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteWorkMileageNull() {
                return this.IsNull(this.tableBasicInformation.CompleteWorkMileageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompleteWorkMileageNull() {
                this[this.tableBasicInformation.CompleteWorkMileageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableBasicInformation.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableBasicInformation.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableBasicInformation.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableBasicInformation.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssociatedChecklistRuleNull() {
                return this.IsNull(this.tableBasicInformation.AssociatedChecklistRuleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssociatedChecklistRuleNull() {
                this[this.tableBasicInformation.AssociatedChecklistRuleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssociatedChecklistRuleStateNull() {
                return this.IsNull(this.tableBasicInformation.AssociatedChecklistRuleStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssociatedChecklistRuleStateNull() {
                this[this.tableBasicInformation.AssociatedChecklistRuleStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssociatedChecklistLastServiceNull() {
                return this.IsNull(this.tableBasicInformation.AssociatedChecklistLastServiceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssociatedChecklistLastServiceNull() {
                this[this.tableBasicInformation.AssociatedChecklistLastServiceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssociatedChecklistNextDueNull() {
                return this.IsNull(this.tableBasicInformation.AssociatedChecklistNextDueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssociatedChecklistNextDueNull() {
                this[this.tableBasicInformation.AssociatedChecklistNextDueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssociatedChecklistDoneNull() {
                return this.IsNull(this.tableBasicInformation.AssociatedChecklistDoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssociatedChecklistDoneNull() {
                this[this.tableBasicInformation.AssociatedChecklistDoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssociatedChecklistDeletedNull() {
                return this.IsNull(this.tableBasicInformation.AssociatedChecklistDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssociatedChecklistDeletedNull() {
                this[this.tableBasicInformation.AssociatedChecklistDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssociatedChecklistCompanyIdNull() {
                return this.IsNull(this.tableBasicInformation.AssociatedChecklistCompanyIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssociatedChecklistCompanyIdNull() {
                this[this.tableBasicInformation.AssociatedChecklistCompanyIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_CATEGORIES_IDNull() {
                return this.IsNull(this.tableBasicInformation.LIBRARY_CATEGORIES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_CATEGORIES_IDNull() {
                this[this.tableBasicInformation.LIBRARY_CATEGORIES_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NoteInformationRow : global::System.Data.DataRow {
            
            private NoteInformationDataTable tableNoteInformation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NoteInformationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNoteInformation = ((NoteInformationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceID {
                get {
                    return ((int)(this[this.tableNoteInformation.ServiceIDColumn]));
                }
                set {
                    this[this.tableNoteInformation.ServiceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RefID {
                get {
                    return ((int)(this[this.tableNoteInformation.RefIDColumn]));
                }
                set {
                    this[this.tableNoteInformation.RefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    return ((string)(this[this.tableNoteInformation.SubjectColumn]));
                }
                set {
                    this[this.tableNoteInformation.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableNoteInformation.UserIDColumn]));
                }
                set {
                    this[this.tableNoteInformation.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTime_ {
                get {
                    return ((global::System.DateTime)(this[this.tableNoteInformation.DateTime_Column]));
                }
                set {
                    this[this.tableNoteInformation.DateTime_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    return ((string)(this[this.tableNoteInformation.NoteColumn]));
                }
                set {
                    this[this.tableNoteInformation.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LIBRARY_FILES_ID {
                get {
                    try {
                        return ((int)(this[this.tableNoteInformation.LIBRARY_FILES_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LIBRARY_FILES_ID\' in table \'NoteInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNoteInformation.LIBRARY_FILES_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORIGINAL_FILENAME {
                get {
                    try {
                        return ((string)(this[this.tableNoteInformation.ORIGINAL_FILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORIGINAL_FILENAME\' in table \'NoteInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNoteInformation.ORIGINAL_FILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILENAME {
                get {
                    try {
                        return ((string)(this[this.tableNoteInformation.FILENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FILENAME\' in table \'NoteInformation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNoteInformation.FILENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    return ((bool)(this[this.tableNoteInformation.DeletedColumn]));
                }
                set {
                    this[this.tableNoteInformation.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    return ((int)(this[this.tableNoteInformation.COMPANY_IDColumn]));
                }
                set {
                    this[this.tableNoteInformation.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool InServiceNoteDatabase {
                get {
                    try {
                        return ((bool)(this[this.tableNoteInformation.InServiceNoteDatabaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InServiceNoteDatabase\' in table \'NoteInformation\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableNoteInformation.InServiceNoteDatabaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIBRARY_FILES_IDNull() {
                return this.IsNull(this.tableNoteInformation.LIBRARY_FILES_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIBRARY_FILES_IDNull() {
                this[this.tableNoteInformation.LIBRARY_FILES_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORIGINAL_FILENAMENull() {
                return this.IsNull(this.tableNoteInformation.ORIGINAL_FILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORIGINAL_FILENAMENull() {
                this[this.tableNoteInformation.ORIGINAL_FILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFILENAMENull() {
                return this.IsNull(this.tableNoteInformation.FILENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFILENAMENull() {
                this[this.tableNoteInformation.FILENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInServiceNoteDatabaseNull() {
                return this.IsNull(this.tableNoteInformation.InServiceNoteDatabaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInServiceNoteDatabaseNull() {
                this[this.tableNoteInformation.InServiceNoteDatabaseColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CostInformationRowChangeEvent : global::System.EventArgs {
            
            private CostInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRowChangeEvent(CostInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CostInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServiceRequestsRowChangeEvent : global::System.EventArgs {
            
            private ServiceRequestsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRequestsRowChangeEvent(ServiceRequestsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceRequestsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BasicInformationRowChangeEvent : global::System.EventArgs {
            
            private BasicInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRowChangeEvent(BasicInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BasicInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NoteInformationRowChangeEvent : global::System.EventArgs {
            
            private NoteInformationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRowChangeEvent(NoteInformationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NoteInformationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591