//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3620
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LiquiForce.LFSLive.DA.FleetManagement.Units {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("UnitsNavigatorTDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UnitsNavigatorTDS : global::System.Data.DataSet {
        
        private UnitsNavigatorDataTable tableUnitsNavigator;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UnitsNavigatorTDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UnitsNavigatorTDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["UnitsNavigator"] != null)) {
                    base.Tables.Add(new UnitsNavigatorDataTable(ds.Tables["UnitsNavigator"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UnitsNavigatorDataTable UnitsNavigator {
            get {
                return this.tableUnitsNavigator;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            UnitsNavigatorTDS cln = ((UnitsNavigatorTDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UnitsNavigator"] != null)) {
                    base.Tables.Add(new UnitsNavigatorDataTable(ds.Tables["UnitsNavigator"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUnitsNavigator = ((UnitsNavigatorDataTable)(base.Tables["UnitsNavigator"]));
            if ((initTable == true)) {
                if ((this.tableUnitsNavigator != null)) {
                    this.tableUnitsNavigator.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UnitsNavigatorTDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UnitsNavigatorTDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUnitsNavigator = new UnitsNavigatorDataTable();
            base.Tables.Add(this.tableUnitsNavigator);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUnitsNavigator() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            UnitsNavigatorTDS ds = new UnitsNavigatorTDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void UnitsNavigatorRowChangeEventHandler(object sender, UnitsNavigatorRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UnitsNavigatorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUnitID;
            
            private global::System.Data.DataColumn columnUnitCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnVIN;
            
            private global::System.Data.DataColumn columnManufacturer;
            
            private global::System.Data.DataColumn columnModel;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnIsTowable;
            
            private global::System.Data.DataColumn columnSelected;
            
            private global::System.Data.DataColumn columnCOMPANY_ID;
            
            private global::System.Data.DataColumn columnDeleted;
            
            private global::System.Data.DataColumn columnCategories;
            
            private global::System.Data.DataColumn columnOwnerType;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnCompanyLevel;
            
            private global::System.Data.DataColumn columnAcquisitionDate;
            
            private global::System.Data.DataColumn columnCostCad;
            
            private global::System.Data.DataColumn columnCostUsd;
            
            private global::System.Data.DataColumn columnLicenseCountry;
            
            private global::System.Data.DataColumn columnLicenseState;
            
            private global::System.Data.DataColumn columnLicensePlateNumbver;
            
            private global::System.Data.DataColumn columnAportionedTagNumber;
            
            private global::System.Data.DataColumn columnActualWeight;
            
            private global::System.Data.DataColumn columnRegisteredWeight;
            
            private global::System.Data.DataColumn columnTireSizeFront;
            
            private global::System.Data.DataColumn columnTireSizeBack;
            
            private global::System.Data.DataColumn columnNumberOfAxes;
            
            private global::System.Data.DataColumn columnFuelType;
            
            private global::System.Data.DataColumn columnBeginningOdometer;
            
            private global::System.Data.DataColumn columnIsReeferEquipped;
            
            private global::System.Data.DataColumn columnIsPTOEquipped;
            
            private global::System.Data.DataColumn columnOwnerCountry;
            
            private global::System.Data.DataColumn columnOwnerState;
            
            private global::System.Data.DataColumn columnOwnerName;
            
            private global::System.Data.DataColumn columnOwnerContact;
            
            private global::System.Data.DataColumn columnQualifiedDate;
            
            private global::System.Data.DataColumn columnNotQualifiedDate;
            
            private global::System.Data.DataColumn columnNotQualifiedExplain;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnInsuranceClass;
            
            private global::System.Data.DataColumn columnInsuranceClassRyderSpecified;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsNavigatorDataTable() {
                this.TableName = "UnitsNavigator";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsNavigatorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UnitsNavigatorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitIDColumn {
                get {
                    return this.columnUnitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitCodeColumn {
                get {
                    return this.columnUnitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VINColumn {
                get {
                    return this.columnVIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerColumn {
                get {
                    return this.columnManufacturer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTowableColumn {
                get {
                    return this.columnIsTowable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SelectedColumn {
                get {
                    return this.columnSelected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMPANY_IDColumn {
                get {
                    return this.columnCOMPANY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedColumn {
                get {
                    return this.columnDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoriesColumn {
                get {
                    return this.columnCategories;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerTypeColumn {
                get {
                    return this.columnOwnerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyLevelColumn {
                get {
                    return this.columnCompanyLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AcquisitionDateColumn {
                get {
                    return this.columnAcquisitionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostCadColumn {
                get {
                    return this.columnCostCad;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CostUsdColumn {
                get {
                    return this.columnCostUsd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseCountryColumn {
                get {
                    return this.columnLicenseCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicenseStateColumn {
                get {
                    return this.columnLicenseState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LicensePlateNumbverColumn {
                get {
                    return this.columnLicensePlateNumbver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AportionedTagNumberColumn {
                get {
                    return this.columnAportionedTagNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualWeightColumn {
                get {
                    return this.columnActualWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegisteredWeightColumn {
                get {
                    return this.columnRegisteredWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TireSizeFrontColumn {
                get {
                    return this.columnTireSizeFront;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TireSizeBackColumn {
                get {
                    return this.columnTireSizeBack;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfAxesColumn {
                get {
                    return this.columnNumberOfAxes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FuelTypeColumn {
                get {
                    return this.columnFuelType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BeginningOdometerColumn {
                get {
                    return this.columnBeginningOdometer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsReeferEquippedColumn {
                get {
                    return this.columnIsReeferEquipped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPTOEquippedColumn {
                get {
                    return this.columnIsPTOEquipped;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerCountryColumn {
                get {
                    return this.columnOwnerCountry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerStateColumn {
                get {
                    return this.columnOwnerState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerNameColumn {
                get {
                    return this.columnOwnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerContactColumn {
                get {
                    return this.columnOwnerContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QualifiedDateColumn {
                get {
                    return this.columnQualifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotQualifiedDateColumn {
                get {
                    return this.columnNotQualifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotQualifiedExplainColumn {
                get {
                    return this.columnNotQualifiedExplain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceClassColumn {
                get {
                    return this.columnInsuranceClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InsuranceClassRyderSpecifiedColumn {
                get {
                    return this.columnInsuranceClassRyderSpecified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsNavigatorRow this[int index] {
                get {
                    return ((UnitsNavigatorRow)(this.Rows[index]));
                }
            }
            
            public event UnitsNavigatorRowChangeEventHandler UnitsNavigatorRowChanging;
            
            public event UnitsNavigatorRowChangeEventHandler UnitsNavigatorRowChanged;
            
            public event UnitsNavigatorRowChangeEventHandler UnitsNavigatorRowDeleting;
            
            public event UnitsNavigatorRowChangeEventHandler UnitsNavigatorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUnitsNavigatorRow(UnitsNavigatorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsNavigatorRow AddUnitsNavigatorRow(
                        int UnitID, 
                        string UnitCode, 
                        string Description, 
                        string VIN, 
                        string Manufacturer, 
                        string Model, 
                        string Year, 
                        bool IsTowable, 
                        bool Selected, 
                        int COMPANY_ID, 
                        bool Deleted, 
                        string Categories, 
                        string OwnerType, 
                        string Notes, 
                        string CompanyLevel, 
                        System.DateTime AcquisitionDate, 
                        double CostCad, 
                        double CostUsd, 
                        string LicenseCountry, 
                        string LicenseState, 
                        string LicensePlateNumbver, 
                        string AportionedTagNumber, 
                        string ActualWeight, 
                        string RegisteredWeight, 
                        string TireSizeFront, 
                        string TireSizeBack, 
                        string NumberOfAxes, 
                        string FuelType, 
                        string BeginningOdometer, 
                        bool IsReeferEquipped, 
                        bool IsPTOEquipped, 
                        string OwnerCountry, 
                        string OwnerState, 
                        string OwnerName, 
                        string OwnerContact, 
                        System.DateTime QualifiedDate, 
                        System.DateTime NotQualifiedDate, 
                        string NotQualifiedExplain, 
                        string State, 
                        string InsuranceClass, 
                        string InsuranceClassRyderSpecified) {
                UnitsNavigatorRow rowUnitsNavigatorRow = ((UnitsNavigatorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UnitID,
                        UnitCode,
                        Description,
                        VIN,
                        Manufacturer,
                        Model,
                        Year,
                        IsTowable,
                        Selected,
                        COMPANY_ID,
                        Deleted,
                        Categories,
                        OwnerType,
                        Notes,
                        CompanyLevel,
                        AcquisitionDate,
                        CostCad,
                        CostUsd,
                        LicenseCountry,
                        LicenseState,
                        LicensePlateNumbver,
                        AportionedTagNumber,
                        ActualWeight,
                        RegisteredWeight,
                        TireSizeFront,
                        TireSizeBack,
                        NumberOfAxes,
                        FuelType,
                        BeginningOdometer,
                        IsReeferEquipped,
                        IsPTOEquipped,
                        OwnerCountry,
                        OwnerState,
                        OwnerName,
                        OwnerContact,
                        QualifiedDate,
                        NotQualifiedDate,
                        NotQualifiedExplain,
                        State,
                        InsuranceClass,
                        InsuranceClassRyderSpecified};
                rowUnitsNavigatorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUnitsNavigatorRow);
                return rowUnitsNavigatorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsNavigatorRow FindByUnitID(int UnitID) {
                return ((UnitsNavigatorRow)(this.Rows.Find(new object[] {
                            UnitID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UnitsNavigatorDataTable cln = ((UnitsNavigatorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UnitsNavigatorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUnitID = base.Columns["UnitID"];
                this.columnUnitCode = base.Columns["UnitCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnVIN = base.Columns["VIN"];
                this.columnManufacturer = base.Columns["Manufacturer"];
                this.columnModel = base.Columns["Model"];
                this.columnYear = base.Columns["Year"];
                this.columnIsTowable = base.Columns["IsTowable"];
                this.columnSelected = base.Columns["Selected"];
                this.columnCOMPANY_ID = base.Columns["COMPANY_ID"];
                this.columnDeleted = base.Columns["Deleted"];
                this.columnCategories = base.Columns["Categories"];
                this.columnOwnerType = base.Columns["OwnerType"];
                this.columnNotes = base.Columns["Notes"];
                this.columnCompanyLevel = base.Columns["CompanyLevel"];
                this.columnAcquisitionDate = base.Columns["AcquisitionDate"];
                this.columnCostCad = base.Columns["CostCad"];
                this.columnCostUsd = base.Columns["CostUsd"];
                this.columnLicenseCountry = base.Columns["LicenseCountry"];
                this.columnLicenseState = base.Columns["LicenseState"];
                this.columnLicensePlateNumbver = base.Columns["LicensePlateNumbver"];
                this.columnAportionedTagNumber = base.Columns["AportionedTagNumber"];
                this.columnActualWeight = base.Columns["ActualWeight"];
                this.columnRegisteredWeight = base.Columns["RegisteredWeight"];
                this.columnTireSizeFront = base.Columns["TireSizeFront"];
                this.columnTireSizeBack = base.Columns["TireSizeBack"];
                this.columnNumberOfAxes = base.Columns["NumberOfAxes"];
                this.columnFuelType = base.Columns["FuelType"];
                this.columnBeginningOdometer = base.Columns["BeginningOdometer"];
                this.columnIsReeferEquipped = base.Columns["IsReeferEquipped"];
                this.columnIsPTOEquipped = base.Columns["IsPTOEquipped"];
                this.columnOwnerCountry = base.Columns["OwnerCountry"];
                this.columnOwnerState = base.Columns["OwnerState"];
                this.columnOwnerName = base.Columns["OwnerName"];
                this.columnOwnerContact = base.Columns["OwnerContact"];
                this.columnQualifiedDate = base.Columns["QualifiedDate"];
                this.columnNotQualifiedDate = base.Columns["NotQualifiedDate"];
                this.columnNotQualifiedExplain = base.Columns["NotQualifiedExplain"];
                this.columnState = base.Columns["State"];
                this.columnInsuranceClass = base.Columns["InsuranceClass"];
                this.columnInsuranceClassRyderSpecified = base.Columns["InsuranceClassRyderSpecified"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUnitID = new global::System.Data.DataColumn("UnitID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitID);
                this.columnUnitCode = new global::System.Data.DataColumn("UnitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnVIN = new global::System.Data.DataColumn("VIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVIN);
                this.columnManufacturer = new global::System.Data.DataColumn("Manufacturer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturer);
                this.columnModel = new global::System.Data.DataColumn("Model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModel);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnIsTowable = new global::System.Data.DataColumn("IsTowable", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTowable);
                this.columnSelected = new global::System.Data.DataColumn("Selected", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSelected);
                this.columnCOMPANY_ID = new global::System.Data.DataColumn("COMPANY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMPANY_ID);
                this.columnDeleted = new global::System.Data.DataColumn("Deleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleted);
                this.columnCategories = new global::System.Data.DataColumn("Categories", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategories);
                this.columnOwnerType = new global::System.Data.DataColumn("OwnerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerType);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnCompanyLevel = new global::System.Data.DataColumn("CompanyLevel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyLevel);
                this.columnAcquisitionDate = new global::System.Data.DataColumn("AcquisitionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcquisitionDate);
                this.columnCostCad = new global::System.Data.DataColumn("CostCad", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostCad);
                this.columnCostUsd = new global::System.Data.DataColumn("CostUsd", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCostUsd);
                this.columnLicenseCountry = new global::System.Data.DataColumn("LicenseCountry", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseCountry);
                this.columnLicenseState = new global::System.Data.DataColumn("LicenseState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicenseState);
                this.columnLicensePlateNumbver = new global::System.Data.DataColumn("LicensePlateNumbver", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLicensePlateNumbver);
                this.columnAportionedTagNumber = new global::System.Data.DataColumn("AportionedTagNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAportionedTagNumber);
                this.columnActualWeight = new global::System.Data.DataColumn("ActualWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualWeight);
                this.columnRegisteredWeight = new global::System.Data.DataColumn("RegisteredWeight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegisteredWeight);
                this.columnTireSizeFront = new global::System.Data.DataColumn("TireSizeFront", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTireSizeFront);
                this.columnTireSizeBack = new global::System.Data.DataColumn("TireSizeBack", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTireSizeBack);
                this.columnNumberOfAxes = new global::System.Data.DataColumn("NumberOfAxes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfAxes);
                this.columnFuelType = new global::System.Data.DataColumn("FuelType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFuelType);
                this.columnBeginningOdometer = new global::System.Data.DataColumn("BeginningOdometer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBeginningOdometer);
                this.columnIsReeferEquipped = new global::System.Data.DataColumn("IsReeferEquipped", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReeferEquipped);
                this.columnIsPTOEquipped = new global::System.Data.DataColumn("IsPTOEquipped", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPTOEquipped);
                this.columnOwnerCountry = new global::System.Data.DataColumn("OwnerCountry", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerCountry);
                this.columnOwnerState = new global::System.Data.DataColumn("OwnerState", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerState);
                this.columnOwnerName = new global::System.Data.DataColumn("OwnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerName);
                this.columnOwnerContact = new global::System.Data.DataColumn("OwnerContact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerContact);
                this.columnQualifiedDate = new global::System.Data.DataColumn("QualifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQualifiedDate);
                this.columnNotQualifiedDate = new global::System.Data.DataColumn("NotQualifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotQualifiedDate);
                this.columnNotQualifiedExplain = new global::System.Data.DataColumn("NotQualifiedExplain", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotQualifiedExplain);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnInsuranceClass = new global::System.Data.DataColumn("InsuranceClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceClass);
                this.columnInsuranceClassRyderSpecified = new global::System.Data.DataColumn("InsuranceClassRyderSpecified", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInsuranceClassRyderSpecified);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUnitID}, true));
                this.columnUnitID.AllowDBNull = false;
                this.columnUnitID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsNavigatorRow NewUnitsNavigatorRow() {
                return ((UnitsNavigatorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UnitsNavigatorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UnitsNavigatorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UnitsNavigatorRowChanged != null)) {
                    this.UnitsNavigatorRowChanged(this, new UnitsNavigatorRowChangeEvent(((UnitsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UnitsNavigatorRowChanging != null)) {
                    this.UnitsNavigatorRowChanging(this, new UnitsNavigatorRowChangeEvent(((UnitsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UnitsNavigatorRowDeleted != null)) {
                    this.UnitsNavigatorRowDeleted(this, new UnitsNavigatorRowChangeEvent(((UnitsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UnitsNavigatorRowDeleting != null)) {
                    this.UnitsNavigatorRowDeleting(this, new UnitsNavigatorRowChangeEvent(((UnitsNavigatorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUnitsNavigatorRow(UnitsNavigatorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UnitsNavigatorTDS ds = new UnitsNavigatorTDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UnitsNavigatorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UnitsNavigatorRow : global::System.Data.DataRow {
            
            private UnitsNavigatorDataTable tableUnitsNavigator;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UnitsNavigatorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUnitsNavigator = ((UnitsNavigatorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitID {
                get {
                    return ((int)(this[this.tableUnitsNavigator.UnitIDColumn]));
                }
                set {
                    this[this.tableUnitsNavigator.UnitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UnitCode {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.UnitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitCode\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.UnitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VIN {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.VINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VIN\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.VINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Manufacturer {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.ManufacturerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Manufacturer\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.ManufacturerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Model {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.ModelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Model\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.ModelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTowable {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsNavigator.IsTowableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTowable\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.IsTowableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Selected {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsNavigator.SelectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Selected\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.SelectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMPANY_ID {
                get {
                    try {
                        return ((int)(this[this.tableUnitsNavigator.COMPANY_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMPANY_ID\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.COMPANY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Deleted {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsNavigator.DeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Deleted\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.DeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Categories {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.CategoriesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Categories\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.CategoriesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerType {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.OwnerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerType\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.OwnerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyLevel {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.CompanyLevelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyLevel\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.CompanyLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcquisitionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitsNavigator.AcquisitionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AcquisitionDate\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.AcquisitionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CostCad {
                get {
                    try {
                        return ((double)(this[this.tableUnitsNavigator.CostCadColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostCad\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.CostCadColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CostUsd {
                get {
                    try {
                        return ((double)(this[this.tableUnitsNavigator.CostUsdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CostUsd\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.CostUsdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LicenseCountry {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.LicenseCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseCountry\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.LicenseCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LicenseState {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.LicenseStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicenseState\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.LicenseStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LicensePlateNumbver {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.LicensePlateNumbverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LicensePlateNumbver\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.LicensePlateNumbverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AportionedTagNumber {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.AportionedTagNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AportionedTagNumber\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.AportionedTagNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualWeight {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.ActualWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualWeight\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.ActualWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegisteredWeight {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.RegisteredWeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegisteredWeight\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.RegisteredWeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TireSizeFront {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.TireSizeFrontColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TireSizeFront\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.TireSizeFrontColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TireSizeBack {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.TireSizeBackColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TireSizeBack\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.TireSizeBackColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfAxes {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.NumberOfAxesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumberOfAxes\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.NumberOfAxesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FuelType {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.FuelTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FuelType\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.FuelTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BeginningOdometer {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.BeginningOdometerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BeginningOdometer\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.BeginningOdometerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReeferEquipped {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsNavigator.IsReeferEquippedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsReeferEquipped\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.IsReeferEquippedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPTOEquipped {
                get {
                    try {
                        return ((bool)(this[this.tableUnitsNavigator.IsPTOEquippedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPTOEquipped\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.IsPTOEquippedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerCountry {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.OwnerCountryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerCountry\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.OwnerCountryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerState {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.OwnerStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerState\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.OwnerStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerName {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.OwnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerName\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.OwnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerContact {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.OwnerContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerContact\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.OwnerContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime QualifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitsNavigator.QualifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QualifiedDate\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.QualifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NotQualifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUnitsNavigator.NotQualifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotQualifiedDate\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.NotQualifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NotQualifiedExplain {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.NotQualifiedExplainColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NotQualifiedExplain\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.NotQualifiedExplainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceClass {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.InsuranceClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceClass\' in table \'UnitsNavigator\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.InsuranceClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InsuranceClassRyderSpecified {
                get {
                    try {
                        return ((string)(this[this.tableUnitsNavigator.InsuranceClassRyderSpecifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InsuranceClassRyderSpecified\' in table \'UnitsNavigator\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableUnitsNavigator.InsuranceClassRyderSpecifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitCodeNull() {
                return this.IsNull(this.tableUnitsNavigator.UnitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitCodeNull() {
                this[this.tableUnitsNavigator.UnitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableUnitsNavigator.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableUnitsNavigator.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVINNull() {
                return this.IsNull(this.tableUnitsNavigator.VINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVINNull() {
                this[this.tableUnitsNavigator.VINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNull() {
                return this.IsNull(this.tableUnitsNavigator.ManufacturerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNull() {
                this[this.tableUnitsNavigator.ManufacturerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModelNull() {
                return this.IsNull(this.tableUnitsNavigator.ModelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModelNull() {
                this[this.tableUnitsNavigator.ModelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableUnitsNavigator.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableUnitsNavigator.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTowableNull() {
                return this.IsNull(this.tableUnitsNavigator.IsTowableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTowableNull() {
                this[this.tableUnitsNavigator.IsTowableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSelectedNull() {
                return this.IsNull(this.tableUnitsNavigator.SelectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSelectedNull() {
                this[this.tableUnitsNavigator.SelectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMPANY_IDNull() {
                return this.IsNull(this.tableUnitsNavigator.COMPANY_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMPANY_IDNull() {
                this[this.tableUnitsNavigator.COMPANY_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedNull() {
                return this.IsNull(this.tableUnitsNavigator.DeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedNull() {
                this[this.tableUnitsNavigator.DeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoriesNull() {
                return this.IsNull(this.tableUnitsNavigator.CategoriesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoriesNull() {
                this[this.tableUnitsNavigator.CategoriesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerTypeNull() {
                return this.IsNull(this.tableUnitsNavigator.OwnerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerTypeNull() {
                this[this.tableUnitsNavigator.OwnerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableUnitsNavigator.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableUnitsNavigator.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyLevelNull() {
                return this.IsNull(this.tableUnitsNavigator.CompanyLevelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyLevelNull() {
                this[this.tableUnitsNavigator.CompanyLevelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcquisitionDateNull() {
                return this.IsNull(this.tableUnitsNavigator.AcquisitionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcquisitionDateNull() {
                this[this.tableUnitsNavigator.AcquisitionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostCadNull() {
                return this.IsNull(this.tableUnitsNavigator.CostCadColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostCadNull() {
                this[this.tableUnitsNavigator.CostCadColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCostUsdNull() {
                return this.IsNull(this.tableUnitsNavigator.CostUsdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCostUsdNull() {
                this[this.tableUnitsNavigator.CostUsdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseCountryNull() {
                return this.IsNull(this.tableUnitsNavigator.LicenseCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseCountryNull() {
                this[this.tableUnitsNavigator.LicenseCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicenseStateNull() {
                return this.IsNull(this.tableUnitsNavigator.LicenseStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicenseStateNull() {
                this[this.tableUnitsNavigator.LicenseStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLicensePlateNumbverNull() {
                return this.IsNull(this.tableUnitsNavigator.LicensePlateNumbverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLicensePlateNumbverNull() {
                this[this.tableUnitsNavigator.LicensePlateNumbverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAportionedTagNumberNull() {
                return this.IsNull(this.tableUnitsNavigator.AportionedTagNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAportionedTagNumberNull() {
                this[this.tableUnitsNavigator.AportionedTagNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualWeightNull() {
                return this.IsNull(this.tableUnitsNavigator.ActualWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualWeightNull() {
                this[this.tableUnitsNavigator.ActualWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegisteredWeightNull() {
                return this.IsNull(this.tableUnitsNavigator.RegisteredWeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegisteredWeightNull() {
                this[this.tableUnitsNavigator.RegisteredWeightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTireSizeFrontNull() {
                return this.IsNull(this.tableUnitsNavigator.TireSizeFrontColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTireSizeFrontNull() {
                this[this.tableUnitsNavigator.TireSizeFrontColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTireSizeBackNull() {
                return this.IsNull(this.tableUnitsNavigator.TireSizeBackColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTireSizeBackNull() {
                this[this.tableUnitsNavigator.TireSizeBackColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfAxesNull() {
                return this.IsNull(this.tableUnitsNavigator.NumberOfAxesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfAxesNull() {
                this[this.tableUnitsNavigator.NumberOfAxesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFuelTypeNull() {
                return this.IsNull(this.tableUnitsNavigator.FuelTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFuelTypeNull() {
                this[this.tableUnitsNavigator.FuelTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBeginningOdometerNull() {
                return this.IsNull(this.tableUnitsNavigator.BeginningOdometerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBeginningOdometerNull() {
                this[this.tableUnitsNavigator.BeginningOdometerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsReeferEquippedNull() {
                return this.IsNull(this.tableUnitsNavigator.IsReeferEquippedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsReeferEquippedNull() {
                this[this.tableUnitsNavigator.IsReeferEquippedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPTOEquippedNull() {
                return this.IsNull(this.tableUnitsNavigator.IsPTOEquippedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPTOEquippedNull() {
                this[this.tableUnitsNavigator.IsPTOEquippedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerCountryNull() {
                return this.IsNull(this.tableUnitsNavigator.OwnerCountryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerCountryNull() {
                this[this.tableUnitsNavigator.OwnerCountryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerStateNull() {
                return this.IsNull(this.tableUnitsNavigator.OwnerStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerStateNull() {
                this[this.tableUnitsNavigator.OwnerStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerNameNull() {
                return this.IsNull(this.tableUnitsNavigator.OwnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerNameNull() {
                this[this.tableUnitsNavigator.OwnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerContactNull() {
                return this.IsNull(this.tableUnitsNavigator.OwnerContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerContactNull() {
                this[this.tableUnitsNavigator.OwnerContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQualifiedDateNull() {
                return this.IsNull(this.tableUnitsNavigator.QualifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQualifiedDateNull() {
                this[this.tableUnitsNavigator.QualifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotQualifiedDateNull() {
                return this.IsNull(this.tableUnitsNavigator.NotQualifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotQualifiedDateNull() {
                this[this.tableUnitsNavigator.NotQualifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotQualifiedExplainNull() {
                return this.IsNull(this.tableUnitsNavigator.NotQualifiedExplainColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotQualifiedExplainNull() {
                this[this.tableUnitsNavigator.NotQualifiedExplainColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableUnitsNavigator.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableUnitsNavigator.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceClassNull() {
                return this.IsNull(this.tableUnitsNavigator.InsuranceClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceClassNull() {
                this[this.tableUnitsNavigator.InsuranceClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInsuranceClassRyderSpecifiedNull() {
                return this.IsNull(this.tableUnitsNavigator.InsuranceClassRyderSpecifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInsuranceClassRyderSpecifiedNull() {
                this[this.tableUnitsNavigator.InsuranceClassRyderSpecifiedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UnitsNavigatorRowChangeEvent : global::System.EventArgs {
            
            private UnitsNavigatorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsNavigatorRowChangeEvent(UnitsNavigatorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UnitsNavigatorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591